{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/alipay-reward-image.jpg","path":"images/alipay-reward-image.jpg","modified":0,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"source/images/wechat-qcode.jpg","path":"images/wechat-qcode.jpg","modified":0,"renderable":0},{"_id":"source/images/wechat-reward-image.jpg","path":"images/wechat-reward-image.jpg","modified":0,"renderable":0},{"_id":"source/uploads/ardupilot/ArduPilot_HighLevelArchecture.png","path":"uploads/ardupilot/ArduPilot_HighLevelArchecture.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/images/avatar.bak.jpg","path":"images/avatar.bak.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/404.html","hash":"5af8ee31a95ef41ac47879402cb216160900b4f5","modified":1471758997000},{"_id":"source/.DS_Store","hash":"38bd10250dec221a0fe56357bafd30adc616b8f2","modified":1517319681755},{"_id":"source/CNAME","hash":"a21993f1849b51318bf8303b651fe1d666820573","modified":1471708782000},{"_id":"themes/next/.gitignore","hash":"c8d6a73b9e17f0f8a3716e4ada6960d3180425a6","modified":1471693058000},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1471693058000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1471693058000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1471693058000},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1471693058000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1471693058000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1471693058000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1471693058000},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1471693058000},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1471693058000},{"_id":"themes/next/_config.yml","hash":"376de2ed9f83c62967ef6c9902731bf21cf10b7b","modified":1543657384075},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1471693058000},{"_id":"source/_posts/.DS_Store","hash":"75db2598f9f4a251f534d9edda7c45d39a251e68","modified":1517319676753},{"_id":"source/_posts/2016-08-21-build-tools.md","hash":"97f305d1cbf9e42e9eb305a4562281da51669fb0","modified":1513481618314},{"_id":"source/_posts/2016-08-21-dronekit-tower.md","hash":"f63a96687bcac0471107e0ed1407d4531489c19c","modified":1472289502000},{"_id":"source/_posts/2016-08-21-pkm-tools.md","hash":"fac70b00d323092211378d22e85b57eaf7416697","modified":1513481595522},{"_id":"source/_posts/2016-08-21-mobile-data.md","hash":"710ab3dfd3d57897ffeded92de8695330e222b1c","modified":1513481510649},{"_id":"source/_posts/2016-08-21-puzzle.md","hash":"7c904801e983c7844abd9118499ac0d374bdd155","modified":1472289203000},{"_id":"source/_posts/2016-08-21-sudoku.md","hash":"7036b9647bb8a4a9b9cfc584ea08ed2e7fdd9239","modified":1517307162836},{"_id":"source/_posts/2016-08-21-vim-latex-suite.md","hash":"98a504ef66b4b1ca58c4cd564c71222c9f390685","modified":1472289273000},{"_id":"source/_posts/2016-08-21-vim-plugins.md","hash":"44bdf8a0dfcdc70264b0254c0bf86a5f0286ac1a","modified":1513481367364},{"_id":"source/_posts/2016-08-21-texting-habits.md","hash":"e284fc06bd3d8fc0ce37f92d9da5fa80f0a9d2ba","modified":1513481728934},{"_id":"source/_posts/2016-08-21-vim-notes.md","hash":"b197e6dc9aa7ab4b8d1d56d6b95f8a89ff6b9392","modified":1513481396660},{"_id":"source/_posts/2016-08-21-what-is-tau.md","hash":"cb725f388a85c851653f85a656bf3fd02ba669f1","modified":1513481642932},{"_id":"source/_posts/2016-08-21-wifi-crack.md","hash":"29ae6a34542f6116a424190600f430d0d51065a2","modified":1513481408323},{"_id":"source/_posts/2016-08-21-xiaomi-mini.md","hash":"b01c1bb27af84508cf88cecd845b85db6e31cd5b","modified":1472289476000},{"_id":"source/_posts/2016-08-25-house-money.md","hash":"963303843907f872e9e34ab580bf7bbc1c73f7b5","modified":1513481651166},{"_id":"source/_posts/2017-03-16-spark-csv.md","hash":"e3ef386e2885c2007c467ed2dc834fa5cec4596a","modified":1513481282180},{"_id":"source/_posts/2016-09-06-revise-ardupilot.md","hash":"9e42f822aa2bfcebeecca9d05cc45bed44c70214","modified":1474804647000},{"_id":"source/_posts/2016-08-21-zotero-tips.md","hash":"58d268719b4192242e8d48ab10282ed6d1f06d1a","modified":1513481529869},{"_id":"source/_posts/2017-12-14-byteball1.md","hash":"5100246ae8f3f7a2fadfd8f1c94a4b2ee5fad34c","modified":1513481258980},{"_id":"source/_posts/2016-09-06-waf-tool.md","hash":"a86253cfd7f6fc5725825d3f8fdc7ff0397ae29f","modified":1473166489000},{"_id":"source/about/index.md","hash":"4d29ff2ff454557c3427b4b8e2c79fde17607caa","modified":1513480729660},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1471476604000},{"_id":"source/_posts/2017-04-30-vscode-keys.md","hash":"4f1fc46e6f8279ed288dabb83ec2c2194d375321","modified":1513481385293},{"_id":"source/_posts/2017-08-10-learn-from-linux.md","hash":"cbb51c4345eb39e28071f828b3a96811c08bf51e","modified":1513481381903},{"_id":"source/images/.DS_Store","hash":"da66bece68a7facf616285bca2a1393a02374efe","modified":1513479616882},{"_id":"source/categories/index.md","hash":"fe9ea74da55e49726a3e5e01fea45df69c725a37","modified":1471756828000},{"_id":"source/images/alipay-reward-image.jpg","hash":"078b94ab42ab266030d3f885484a25968580ce0c","modified":1515551600236},{"_id":"source/images/avatar.jpg","hash":"fd45fd0ddc63617912b98cd08e78307101916b38","modified":1515551303839},{"_id":"source/tags/index.md","hash":"8a01a472ba5ba207423d41dfc83988439b6046e1","modified":1471784242000},{"_id":"source/images/wechat-qcode.jpg","hash":"bdb615fb0f3408a3e8dbec8af95de3757c53143b","modified":1471758672000},{"_id":"source/images/wechat-reward-image.jpg","hash":"2cf71d1db700c20595d3fdfc27c13c2991e13ee9","modified":1515551714702},{"_id":"source/uploads/.DS_Store","hash":"b55d9589b39fc6782e4bff87b085abd8911b8998","modified":1473340670000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1471693058000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1471693058000},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1471693058000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1471693058000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1471693058000},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1471693058000},{"_id":"themes/next/languages/ko.yml","hash":"ce8b047c89daae77c03482fc76f16ffec6bdbf2d","modified":1471693058000},{"_id":"themes/next/languages/pt-BR.yml","hash":"462aa865ca3d479bcf6b363cba61247b50f230ff","modified":1471693058000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1471693058000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1471693058000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1471693058000},{"_id":"themes/next/layout/_layout.swig","hash":"74157f6cfd679ea11febec632542793f37c5e5d4","modified":1471693058000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1471693058000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1471693058000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1471693058000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1471693058000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1471693058000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1471693058000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1471693058000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1471693058000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1471693058000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1471693058000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1471693058000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1471693058000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471693058000},{"_id":"source/uploads/ardupilot/.DS_Store","hash":"a419b0a44ecfce673a5fc58614eabb9cfca7588d","modified":1473466868000},{"_id":"source/uploads/ardupilot/ArduPilot_HighLevelArchecture.png","hash":"1d0deca0992e7dec3753a1201735b9a10ae3f43b","modified":1473340550000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1471693058000},{"_id":"themes/next/layout/_macro/post.swig","hash":"f3895bf44a9fb7c462f2e57b9a914703c2f152ba","modified":1471693058000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1471693058000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1471693058000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"58fd826ca75b0cbc48b61a58da4b841e2fa34403","modified":1471693058000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1a77843ce5eac62151dc3d38f0a36c43e19e1a74","modified":1471693058000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1471693058000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4fe588ff8ba8587885c2936db2df490774f89e10","modified":1471693058000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b0c495b8154ef8b2d2cb0a554e164ff22cdc962","modified":1471693058000},{"_id":"themes/next/layout/_partials/header.swig","hash":"eb028685cb3c329537bbced06c063d23e6a33817","modified":1471693058000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1471693058000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1471693058000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1471693058000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1471693058000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1471693058000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1471693058000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1471693058000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1471693058000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1471693058000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1471693058000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1471693058000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1471693058000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1471693058000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1471693058000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1471693058000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1471693058000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1471693058000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1471693058000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1471693058000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1471693058000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1471693058000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1471693058000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1471693058000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471693058000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471693058000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471693058000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471693058000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471693058000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471693058000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471693058000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1471693058000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1471693058000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1471693058000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1471693058000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1471693058000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1471693058000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1471693058000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1471693058000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1471693058000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1471693058000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1471693058000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1471693058000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1471693058000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"7f7148c8f52e4d3cfc070d964160362179fa8e91","modified":1471693058000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1471693058000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1471693058000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1471693058000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1471693058000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1471693058000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1471693058000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1471693058000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"17624186f7a1f28daddea258d044f8e03b2f4bea","modified":1471693058000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1471693058000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1471693058000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1471693058000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1471693058000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1471693058000},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1471693058000},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1471693058000},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1471693058000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1471693058000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1471693058000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1471693058000},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1471693058000},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1471693058000},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1471693058000},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1471693058000},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1471693058000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1471693058000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1471693058000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1471693058000},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1471693058000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1471693058000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1471693058000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1471693058000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1471693058000},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1471693058000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1471693058000},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1471693058000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1471693058000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1471693058000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1471693058000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1471693058000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1471693058000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1471693058000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"1e3e1c6231408e18e8485a8e0e59e8880349b210","modified":1471693058000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1471693058000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1471693058000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1471693058000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"bff3b18f56175c53f3bc6d733166c4d998e08732","modified":1471693058000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"696666141cdd204fd8818ac2ad18f05e320f8587","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1471693058000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1471693058000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1471693058000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1471693058000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1471693058000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1471693058000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1471693058000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1471693058000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1471693058000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1471693058000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1471693058000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1471693058000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1471693058000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1471693058000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1471693058000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1471693058000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1471693058000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1471693058000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1471693058000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1471693058000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1471693058000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1471693058000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1471693058000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1471693058000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1471693058000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1471693058000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1471693058000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1471693058000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1471693058000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1471693058000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1471693058000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1471693058000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1471693058000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1471693058000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1471693058000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1471693058000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1471693058000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1471693058000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1471693058000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1471693058000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1471693058000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1471693058000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1471693058000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1471693058000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1471693058000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1471693058000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1471693058000},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1471693058000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1471693058000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1471693058000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1471693058000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1471693058000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1471693058000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1471693058000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1471693058000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1471693058000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1471693058000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1471693058000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1471693058000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1471693058000},{"_id":"public/search.xml","hash":"934a03ce485926405eae582963a387ac0c7cc2aa","modified":1533720644574},{"_id":"public/sitemap.xml","hash":"c3a3f96dc37a5a84dd2a228730452f67ba6c6da4","modified":1533720644564},{"_id":"public/404.html","hash":"d0812ca3b0db9bff47878f532a8e86cf96e556bf","modified":1543716871535},{"_id":"public/about/index.html","hash":"7e76b286cd90c3a9a88afef6640634f5c92b2ce1","modified":1543716871535},{"_id":"public/tags/index.html","hash":"f2b5eee6c95ae263d1d4396d06cdc7d5c0f4104a","modified":1543716871536},{"_id":"public/categories/index.html","hash":"98b705c0b9ce76e4e9a68ee1968164216f834c7f","modified":1543716871536},{"_id":"public/2017/12/14/byteball1/index.html","hash":"3f1808a52251edebda3614cfae531985213bd449","modified":1543716871537},{"_id":"public/2017/08/10/learn-from-linux/index.html","hash":"c760915d74012fc7fd02d6b22be2146a920eda6b","modified":1543716871537},{"_id":"public/2017/04/30/vscode-keys/index.html","hash":"7ce15ec109faa336fcdb7d776e6885a055b7fbd9","modified":1543716871538},{"_id":"public/2017/03/16/spark-csv/index.html","hash":"839e5e786495c6bb7728ecdc1680bcac83af29b2","modified":1543716871538},{"_id":"public/2016/09/06/revise-ardupilot/index.html","hash":"f94608a18ebc69f4cd3fba81d330b1274a503f51","modified":1543716871538},{"_id":"public/2016/09/06/waf-tool/index.html","hash":"0f24afa619cba0c1b6c3ea204e9bd7bcaafeac9e","modified":1543716871538},{"_id":"public/2016/08/25/house-money/index.html","hash":"877903938f72a4cc2ee66d381ee424dd1c350ceb","modified":1543716871538},{"_id":"public/2016/08/21/dronekit-tower/index.html","hash":"4f8357f880e14b48940caab86ae7728b43e29547","modified":1543716871538},{"_id":"public/2016/08/21/mobile-data/index.html","hash":"0e2f7af1848ac0e0526c78287ca3648c6fb5a357","modified":1543716871538},{"_id":"public/2016/08/21/puzzle/index.html","hash":"999a5e5b233bf354139bf8a729ce3f443bad6252","modified":1543716871538},{"_id":"public/2016/08/21/sudoku/index.html","hash":"65fe352502e11f2eb3dd4de5e7174913ab7ecf5e","modified":1543716871538},{"_id":"public/2016/08/21/wifi-crack/index.html","hash":"85bb56a0ed5ad6a875b5e19ca768df5ac5b80ccd","modified":1543716871539},{"_id":"public/2016/08/21/xiaomi-mini/index.html","hash":"dead2fd4fddb28f9ffaecc7e426fef79eb0b8e74","modified":1543716871539},{"_id":"public/2016/08/21/zotero-tips/index.html","hash":"81149663c497d4f7950b43fc49e302da763db8b7","modified":1543716871539},{"_id":"public/2016/08/21/texting-habits/index.html","hash":"f1f879971d256bc03c294e7c62e4a014e4dfcb08","modified":1543716871539},{"_id":"public/2016/08/21/vim-plugins/index.html","hash":"bff45c631185591ea250e289998154f677ed623f","modified":1543716871539},{"_id":"public/2016/08/21/vim-notes/index.html","hash":"4e10b461b156f7035e3d64c9aac4e4291dfbd2e9","modified":1543716871539},{"_id":"public/2016/08/21/vim-latex-suite/index.html","hash":"3cac6786e6d29d1594f0c488a096820b720d3172","modified":1543716871539},{"_id":"public/2016/08/21/build-tools/index.html","hash":"b10fdd8fc8c00795356ed8430c71531ac9f068a2","modified":1543716871539},{"_id":"public/2016/08/21/pkm-tools/index.html","hash":"00e3194986243200b4860407dc37be5d48e10107","modified":1543716871540},{"_id":"public/2016/08/21/what-is-tau/index.html","hash":"ca01b4a6d3c7b7b36a3f3a2e441444c33886d307","modified":1543716871540},{"_id":"public/2016/08/18/hello-world/index.html","hash":"5342eb59e45ba3de6e17aa697a1ede5ff6a55db1","modified":1543716871540},{"_id":"public/archives/index.html","hash":"d118328d3d02ab6cf304efb2db984a8d5c381696","modified":1543716871540},{"_id":"public/archives/page/2/index.html","hash":"4868acb4147edc5a696877fa452578a69ce92d8a","modified":1543716871541},{"_id":"public/archives/page/3/index.html","hash":"dc19582d8c1d6c02c01d3d6067ab612c541775c8","modified":1543716871541},{"_id":"public/archives/2016/index.html","hash":"59e0b9017fc9a019ca12ffdf70fa5ac2ccbadaca","modified":1543716871541},{"_id":"public/archives/2016/page/2/index.html","hash":"29153c49652ae9f28cafaafbef733bc3c1f3081e","modified":1543716871541},{"_id":"public/archives/2016/08/index.html","hash":"ce8c1723b60c4efe6f60c4ea63848f1afd2171b0","modified":1543716871541},{"_id":"public/archives/2016/08/page/2/index.html","hash":"15418c1619e5ecf066b685f741f8a33a55e2fa47","modified":1543716871541},{"_id":"public/archives/2016/09/index.html","hash":"25d060ab9befedb314356c4e584fe18ab7eadade","modified":1543716871541},{"_id":"public/archives/2017/index.html","hash":"af91c36b5e114af40d8fcbef7022aa0fc5607482","modified":1543716871541},{"_id":"public/archives/2017/03/index.html","hash":"6757cfb5c75307124888530db1da3da0613ebb83","modified":1543716871541},{"_id":"public/archives/2017/04/index.html","hash":"db6b11b3cb7fd0329b13d1f29376493a6c485b81","modified":1543716871542},{"_id":"public/archives/2017/08/index.html","hash":"3af4998bda388bfb75a85c92fc967a7cbdeddf4c","modified":1543716871542},{"_id":"public/archives/2017/12/index.html","hash":"16d9757bc44573213ce2e2f2d6eef0638127434a","modified":1543716871542},{"_id":"public/index.html","hash":"81c34d31f1766c572eae8904260d5295bf91378e","modified":1543716871542},{"_id":"public/page/2/index.html","hash":"b90812b6a59afc65417f2c0d22b495dcb9b14b1b","modified":1543716871543},{"_id":"public/page/3/index.html","hash":"c72a3b9118fdd734ff2254357c5b254c7a37d92a","modified":1543716871542},{"_id":"public/categories/弄点工具/index.html","hash":"2e5f3d09632145d489ab3d88c0127ab1cf7ec6f2","modified":1543716871540},{"_id":"public/categories/写点程序/index.html","hash":"d2e7931566ed12798116618a28b77643eeb6676e","modified":1543716871540},{"_id":"public/categories/Spark/index.html","hash":"8e86bdf4ae077dcd97893a3572b144fb8b6fb5be","modified":1513260329684},{"_id":"public/categories/Blockchain/index.html","hash":"a840452c7a8718cf8926cf7a279d9f51192d65c6","modified":1513260329684},{"_id":"public/tags/dronekit/index.html","hash":"11ce71a3de7a35f43166562f586b89e09f036cf3","modified":1543716871543},{"_id":"public/tags/智力拼图/index.html","hash":"a856c9f416c524494796d7f1b727ffe4f9328de3","modified":1543716871543},{"_id":"public/tags/数独/index.html","hash":"70857866a24a105ddb0f5fe183aeab05a120e24b","modified":1543716871543},{"_id":"public/tags/vim/index.html","hash":"5c76d5bc216b3a8d9ef809f1752056d9e59596d5","modified":1543716871543},{"_id":"public/tags/latex/index.html","hash":"9dfe2bd73081665e9301d956df041491e32ae815","modified":1543716871543},{"_id":"public/tags/WiFi/index.html","hash":"019a7e1759515a21eed7c126f82114a69fbc343a","modified":1543716871544},{"_id":"public/tags/小米路由器/index.html","hash":"f4769d82cea17f4e637d6de52fdcb19cee157cc0","modified":1543716871544},{"_id":"public/tags/去广告/index.html","hash":"4ec741b15858098c14dc9503f1041eebba849f7b","modified":1543716871544},{"_id":"public/tags/Spark/index.html","hash":"3ad205fd2c6c1251abd0496fee06c96aeeebabb1","modified":1513260329685},{"_id":"public/tags/csv/index.html","hash":"ed7ac3c02d0c890fab349482b3c8deaf102777e4","modified":1543716871544},{"_id":"public/tags/ArduPilot/index.html","hash":"431c9a2dd17b0c19530640e5d7f4f4b3a0108fe3","modified":1543716871544},{"_id":"public/tags/dag/index.html","hash":"85dc58620be8d8779bc7ef80055182b82c292e8d","modified":1543716871544},{"_id":"public/tags/blockchain/index.html","hash":"7d945cd6afc02adb9f60e99f22caa03966dfbe11","modified":1543716871544},{"_id":"public/tags/byteball/index.html","hash":"4f94dcc5702f4f7c4ce08dd214419fd79987391a","modified":1543716871545},{"_id":"public/tags/bitcoin/index.html","hash":"651a2eb44a28bb3ec58f82b00ccccb73eef0aee0","modified":1543716871545},{"_id":"public/tags/waf/index.html","hash":"fd7d9cf93bd03be5be2d63bfb6382542fe61824b","modified":1543716871545},{"_id":"public/CNAME","hash":"a21993f1849b51318bf8303b651fe1d666820573","modified":1513260329698},{"_id":"public/images/alipay-reward-image.jpg","hash":"078b94ab42ab266030d3f885484a25968580ce0c","modified":1515552114250},{"_id":"public/images/avatar.jpg","hash":"fd45fd0ddc63617912b98cd08e78307101916b38","modified":1515552114235},{"_id":"public/images/wechat-qcode.jpg","hash":"bdb615fb0f3408a3e8dbec8af95de3757c53143b","modified":1513260329698},{"_id":"public/images/wechat-reward-image.jpg","hash":"2cf71d1db700c20595d3fdfc27c13c2991e13ee9","modified":1515552114250},{"_id":"public/uploads/ardupilot/ArduPilot_HighLevelArchecture.png","hash":"1d0deca0992e7dec3753a1201735b9a10ae3f43b","modified":1513260329699},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1513260329699},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1513260329699},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1513260329699},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1513260329699},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1513260329699},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1513260329699},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1513260329700},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1513260329700},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1513260329700},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1513260329700},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1513260329700},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1513260329700},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1513260329700},{"_id":"public/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1513260329700},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1513260329700},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1513260329700},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1513260329700},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1513260329700},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1513260329700},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1513260329700},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1513260329700},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1513260329700},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1513260329700},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1513260329700},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1513260330664},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1513260330668},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1513260330669},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1513260330678},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1513260330678},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1513260330678},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1513260330678},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1513260330678},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1513260330678},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1513260330678},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1513260330678},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1513260330678},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1513260330678},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1513260330678},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1513260330679},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1513260330679},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1513260330679},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1513260330679},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1513260330679},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1513260330679},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1513260330679},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1513260330679},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1513260330679},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1513260330679},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1513260330679},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1513260330680},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1513260330680},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1513260330680},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1513260330680},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1513260330680},{"_id":"public/css/main.css","hash":"6f077c2c04025c5b2e3475e910e64039f383e23f","modified":1513260330680},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1513260330680},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1513260330680},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1513260330680},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1513260330680},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1513260330681},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1513260330681},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1513260330681},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1513260330681},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1513260330681},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1513260330681},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1513260330696},{"_id":"public/tags/spark/index.html","hash":"cbcfb9db32d884e4e74481c1328bd3f31a893933","modified":1543716871547},{"_id":"public/categories/看点文章/index.html","hash":"5818b30497ab31b6b6ad59e74aead41f49cb492f","modified":1543716871540},{"_id":"public/categories/聊点感想/index.html","hash":"146b3822192706edff68056da3bf4fbf3cca1607","modified":1543716871540},{"_id":"public/categories/谈点区块链/index.html","hash":"9ad34b5f00f46db72afd01fe8e76cc304ce8d765","modified":1543716871540},{"_id":"public/tags/zotero/index.html","hash":"81661e733779f90f97a306a0b21d480592f1c517","modified":1543716871545},{"_id":"public/tags/mobilephone/index.html","hash":"030b0c82befcebb5e99ff86b3386c75ed79b1f7e","modified":1543716871545},{"_id":"public/tags/build/index.html","hash":"a7142c69694e1409f9513dd42990e099b27af903","modified":1543716871545},{"_id":"public/tags/PKM/index.html","hash":"bdf7467402ea1aab87a12099e84825f451402f9f","modified":1543716871545},{"_id":"public/tags/wiz/index.html","hash":"1e5e407e9312c7da107575666d11782136e4e553","modified":1543716871545},{"_id":"public/tags/crack/index.html","hash":"06c77655b67bd1e2d7aa349a0bb5facb03b523a0","modified":1543716871546},{"_id":"public/tags/house/index.html","hash":"9ec26403e8d4f0325be5f08da32c2d7938062947","modified":1543716871546},{"_id":"public/tags/tau/index.html","hash":"7876810927c695fd9c45abf98892aa488cd66ee0","modified":1543716871546},{"_id":"public/tags/vscode/index.html","hash":"d396572b75ea291cd0f73c2655aa5399166753ac","modified":1543716871546},{"_id":"public/tags/research/index.html","hash":"833ed7e9e7fc55cd45fb6fc09f277f1526e69409","modified":1543716871546},{"_id":"public/tags/linux/index.html","hash":"2e840e77afea2e6737c2b9c8ffb96bca0cfb52c1","modified":1543716871546},{"_id":"source/_posts/2017-12-19-byteball2.md","hash":"aa3f35db8d29dd133f41726a28d3a10692ae6153","modified":1513613732964},{"_id":"public/2017/12/19/byteball2/index.html","hash":"c118c527b2d067287afeafd04749eca1e0647df3","modified":1543716871537},{"_id":"source/images/avatar.bak.jpg","hash":"29367f33783c8d2adaad5befd7a9703843469592","modified":1471789546000},{"_id":"public/images/avatar.bak.jpg","hash":"29367f33783c8d2adaad5befd7a9703843469592","modified":1515552114235},{"_id":"source/_posts/2018-01-20-byteball3.md","hash":"f7ce0ce395c4783708289f57cd6d58bcdd8ca1b2","modified":1516464509427},{"_id":"public/2018/01/19/byteball3/index.html","hash":"19423ce364d4d030e7d0f7db8d0584cd59ebdd1b","modified":1543716871537},{"_id":"public/archives/2018/index.html","hash":"7e631a3b38cd12cc74823620846edeafdf784c7a","modified":1543716871542},{"_id":"public/archives/2018/01/index.html","hash":"2b704cca455006e58f5d849371e002b3913ebcf6","modified":1543716871542},{"_id":"source/_posts/2018-01-26-byteball4.md","hash":"bb54f7fd191c584d6a9c80a4a3f49e1ac3d61000","modified":1516981111612},{"_id":"public/2018/01/26/byteball4/index.html","hash":"34cf19a1acf788e09c8540d3d8c579324db16714","modified":1543716871537},{"_id":"source/_posts/2018-01-30-byteball5.md","hash":"953f9785ecc56408f02fd25506d63bbd58ac6fe4","modified":1517307359313},{"_id":"public/2018/01/30/byteball5/index.html","hash":"2af8ecb7a67cbc544fe62109793d133f56a845fe","modified":1543716871537},{"_id":"source/_posts/2018-04-15-blockchain-system-view.md","hash":"e7b441c1a88ddf37f4476f79bb1a6a560d70f9ec","modified":1523778944930},{"_id":"public/2018/04/15/blockchain-system-view/index.html","hash":"d607002fc8177c2d2fad43b94e10d3d26f206c3c","modified":1543716871537},{"_id":"public/archives/2018/04/index.html","hash":"deeabb63f277992cb4dbdef0665f70a6c91a95cc","modified":1543716871542},{"_id":"source/_posts/2018-05-13-byteball-flaws.md","hash":"4de690871cdf19e7b6e6c28b258e16927ea04fad","modified":1526222303185},{"_id":"public/2018/05/13/byteball-flaws/index.html","hash":"9f05b0cf08552cbd4dc3d7e76640b2a227dbbcac","modified":1543716871536},{"_id":"public/archives/2018/05/index.html","hash":"42ae1c4752b256f5355a2c2224862d8366539708","modified":1543716871542},{"_id":"source/_posts/2018-06-14-byteball-network-protocol.md","hash":"fceaacd95feca49a3ac4049326b7ec4c1d863954","modified":1528987251045},{"_id":"public/2018/06/14/byteball-network-protocol/index.html","hash":"ce7853f5060e209a68be7729e44cb87a1822ee23","modified":1543716871537},{"_id":"public/archives/2018/06/index.html","hash":"ca7aa66692c3c0416f2475fefd4e423a7ef66b55","modified":1543716871542},{"_id":"source/_posts/2018-06-15-byteball-wallet.md","hash":"e91fba904dade4dec9e3c04a7609750b5afdbdb1","modified":1529250771256},{"_id":"public/2018/06/15/byteball-wallet/index.html","hash":"f5dc35c1627311325c456dac4eb60b8497fab437","modified":1543716871536},{"_id":"source/_posts/2018-06-26-byteball-wallet2.md","hash":"30a422c73f8187e86334678a47fb4add8a97d53f","modified":1529988221022},{"_id":"public/2018/06/26/byteball-wallet2/index.html","hash":"5a99940998cb8a86609d472f245b69c22250db94","modified":1543716871536},{"_id":"public/archives/page/4/index.html","hash":"3dd5b5b0b710fdb82749ad8bbb705bf37435063f","modified":1543716871541},{"_id":"public/page/4/index.html","hash":"31e7662ffba9191ed7993e329d88125a620b37bc","modified":1543716871543},{"_id":"source/_posts/2018-08-08-byteball-private-communication.md","hash":"59158a39a103ab8c2b8989b7b474b54f29e3b3a4","modified":1533720631351},{"_id":"public/2018/08/08/byteball-private-communication/index.html","hash":"36585295033c35ea8fed0819c101b6c221ba2c1c","modified":1543716871536},{"_id":"public/archives/2018/08/index.html","hash":"758be4be6a1efb8cece434bf310637d9975fa4ce","modified":1543716871542},{"_id":"public/categories/谈点区块链/page/2/index.html","hash":"4956b068ef715d733fffc3b847774b8248b60cca","modified":1543716871540},{"_id":"public/tags/dag/page/2/index.html","hash":"026e91a64f5325a9cd2b30ce58d4b8685fa96b95","modified":1543716871544},{"_id":"public/tags/blockchain/page/2/index.html","hash":"a60735442aac1bb2f7a60c6ecb62bcd357d92763","modified":1543716871544},{"_id":"public/tags/byteball/page/2/index.html","hash":"1c5b1bb0c56348b4ebb2d37deee159c41e517ae0","modified":1543716871545},{"_id":"public/tags/private/index.html","hash":"e9ff43d21d776759f037ae920bb39e7f758912bb","modified":1543716871547},{"_id":"public/tags/communication/index.html","hash":"39f55e34ceb68a6dac44ea9629b23918a2221a1c","modified":1543716871547}],"Category":[{"name":"弄点工具","_id":"cjb6k4kvf0005uleplhf6q5dy"},{"name":"写点程序","_id":"cjb6k4kvm000bulep1wgepm66"},{"name":"Spark","_id":"cjb6k4kwe0017uleps2fak7mm"},{"name":"Blockchain","_id":"cjb6k4kwl001hulepmgupitt3"},{"name":"看点文章","_id":"cjba7wkos0000byepjfyym92w"},{"name":"聊点感想","_id":"cjba7wkp70002byepznscqini"},{"name":"谈点区块链","_id":"cjba7wkpq000hbyep3nhpvxei"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"http://blog.guantau.com\"\n        homePageName=\"回到我的主页\">\n</script>\n\n</body>\n</html>\n","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"http://blog.guantau.com\"\n        homePageName=\"回到我的主页\">\n</script>\n\n</body>\n</html>\n","date":"2017-03-16T14:04:54.000Z","updated":"2016-08-21T05:56:37.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cjb6k4kql0000uleprm2czuri","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"http://blog.guantau.com\" homepagename=\"回到我的主页\">\n</script>\n\n</body>\n</html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"http://blog.guantau.com\" homepagename=\"回到我的主页\">\n</script>\n\n</body>\n</html>\n"},{"title":"about","date":"2016-08-21T12:47:22.000Z","_content":"\n<blockquote class=\"blockquote-center\">\n**我为什么而活着？**\n罗素\n</blockquote>\n\n三种单纯然而极其强烈的激情支配着我的一生。那就是对于爱情的渴望，对于知识的追求，以及对于人类苦难痛彻肺腑的怜悯。这些激情犹如狂风，把我伸展到绝望边缘的深深的苦海上东抛西掷，使我的生活没有定向。\n\n我追求爱情，首先因为它叫我消魂。爱情使人消魂的魅力使我常常乐意为了几小时这样的快乐而牺牲生活中的其他一切。我追求爱情，又因为它减轻孤独感－－那种一个颤抖的灵魂望着世界边缘之外冰冷而无生命的无底深渊时所感到的可怕的孤独。　　我追求爱情，还因为爱的结合使我在一种神秘的缩影中提前看到了圣者和诗人曾经想像过的天堂。这就是我所追求的，尽管人的生活似乎还不配享有它，但它毕竟是我终于找到的东西。\n\n我以同样的热情追求知识，我想理解人类的心灵，我想了解星辰为何灿烂，我还试图弄懂毕达哥拉斯学说的力量，是这种力量使我在无常之上高踞主宰地位。我在这方面略有成就，但不多。\n\n爱情和知识只要存在，总是向上导往天堂。但是，怜悯又总是把我带回人间。痛苦的呼喊在我心中反响回荡，孩子们受饥荒煎熬，无辜者被压迫者折磨，孤弱无助的老人在自己的儿子眼中变成可恶的累赘，以及世上触目皆是的孤独、贫困和痈苦－－这些都是对人类应该过的生活的嘲弄。我渴望能减少罪恶，可我做不到，于是我感到痛苦。\n\n这就是我的一生。我觉得这一生是值得活的，如果真有可能再给我一次机会，我将欣然再重活—次。\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-08-21 20:47:22\n---\n\n<blockquote class=\"blockquote-center\">\n**我为什么而活着？**\n罗素\n</blockquote>\n\n三种单纯然而极其强烈的激情支配着我的一生。那就是对于爱情的渴望，对于知识的追求，以及对于人类苦难痛彻肺腑的怜悯。这些激情犹如狂风，把我伸展到绝望边缘的深深的苦海上东抛西掷，使我的生活没有定向。\n\n我追求爱情，首先因为它叫我消魂。爱情使人消魂的魅力使我常常乐意为了几小时这样的快乐而牺牲生活中的其他一切。我追求爱情，又因为它减轻孤独感－－那种一个颤抖的灵魂望着世界边缘之外冰冷而无生命的无底深渊时所感到的可怕的孤独。　　我追求爱情，还因为爱的结合使我在一种神秘的缩影中提前看到了圣者和诗人曾经想像过的天堂。这就是我所追求的，尽管人的生活似乎还不配享有它，但它毕竟是我终于找到的东西。\n\n我以同样的热情追求知识，我想理解人类的心灵，我想了解星辰为何灿烂，我还试图弄懂毕达哥拉斯学说的力量，是这种力量使我在无常之上高踞主宰地位。我在这方面略有成就，但不多。\n\n爱情和知识只要存在，总是向上导往天堂。但是，怜悯又总是把我带回人间。痛苦的呼喊在我心中反响回荡，孩子们受饥荒煎熬，无辜者被压迫者折磨，孤弱无助的老人在自己的儿子眼中变成可恶的累赘，以及世上触目皆是的孤独、贫困和痈苦－－这些都是对人类应该过的生活的嘲弄。我渴望能减少罪恶，可我做不到，于是我感到痛苦。\n\n这就是我的一生。我觉得这一生是值得活的，如果真有可能再给我一次机会，我将欣然再重活—次。\n\n","updated":"2017-12-17T03:18:49.660Z","path":"about/index.html","_id":"cjb6k4kva0002ulepeyqxlotc","comments":1,"layout":"page","content":"<blockquote class=\"blockquote-center\"><br><strong>我为什么而活着？</strong><br>罗素<br></blockquote>\n\n<p>三种单纯然而极其强烈的激情支配着我的一生。那就是对于爱情的渴望，对于知识的追求，以及对于人类苦难痛彻肺腑的怜悯。这些激情犹如狂风，把我伸展到绝望边缘的深深的苦海上东抛西掷，使我的生活没有定向。</p>\n<p>我追求爱情，首先因为它叫我消魂。爱情使人消魂的魅力使我常常乐意为了几小时这样的快乐而牺牲生活中的其他一切。我追求爱情，又因为它减轻孤独感－－那种一个颤抖的灵魂望着世界边缘之外冰冷而无生命的无底深渊时所感到的可怕的孤独。　　我追求爱情，还因为爱的结合使我在一种神秘的缩影中提前看到了圣者和诗人曾经想像过的天堂。这就是我所追求的，尽管人的生活似乎还不配享有它，但它毕竟是我终于找到的东西。</p>\n<p>我以同样的热情追求知识，我想理解人类的心灵，我想了解星辰为何灿烂，我还试图弄懂毕达哥拉斯学说的力量，是这种力量使我在无常之上高踞主宰地位。我在这方面略有成就，但不多。</p>\n<p>爱情和知识只要存在，总是向上导往天堂。但是，怜悯又总是把我带回人间。痛苦的呼喊在我心中反响回荡，孩子们受饥荒煎熬，无辜者被压迫者折磨，孤弱无助的老人在自己的儿子眼中变成可恶的累赘，以及世上触目皆是的孤独、贫困和痈苦－－这些都是对人类应该过的生活的嘲弄。我渴望能减少罪恶，可我做不到，于是我感到痛苦。</p>\n<p>这就是我的一生。我觉得这一生是值得活的，如果真有可能再给我一次机会，我将欣然再重活—次。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote class=\"blockquote-center\"><br><strong>我为什么而活着？</strong><br>罗素<br></blockquote>\n\n<p>三种单纯然而极其强烈的激情支配着我的一生。那就是对于爱情的渴望，对于知识的追求，以及对于人类苦难痛彻肺腑的怜悯。这些激情犹如狂风，把我伸展到绝望边缘的深深的苦海上东抛西掷，使我的生活没有定向。</p>\n<p>我追求爱情，首先因为它叫我消魂。爱情使人消魂的魅力使我常常乐意为了几小时这样的快乐而牺牲生活中的其他一切。我追求爱情，又因为它减轻孤独感－－那种一个颤抖的灵魂望着世界边缘之外冰冷而无生命的无底深渊时所感到的可怕的孤独。　　我追求爱情，还因为爱的结合使我在一种神秘的缩影中提前看到了圣者和诗人曾经想像过的天堂。这就是我所追求的，尽管人的生活似乎还不配享有它，但它毕竟是我终于找到的东西。</p>\n<p>我以同样的热情追求知识，我想理解人类的心灵，我想了解星辰为何灿烂，我还试图弄懂毕达哥拉斯学说的力量，是这种力量使我在无常之上高踞主宰地位。我在这方面略有成就，但不多。</p>\n<p>爱情和知识只要存在，总是向上导往天堂。但是，怜悯又总是把我带回人间。痛苦的呼喊在我心中反响回荡，孩子们受饥荒煎熬，无辜者被压迫者折磨，孤弱无助的老人在自己的儿子眼中变成可恶的累赘，以及世上触目皆是的孤独、贫困和痈苦－－这些都是对人类应该过的生活的嘲弄。我渴望能减少罪恶，可我做不到，于是我感到痛苦。</p>\n<p>这就是我的一生。我觉得这一生是值得活的，如果真有可能再给我一次机会，我将欣然再重活—次。</p>\n"},{"title":"categories","date":"2016-08-21T05:19:56.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-08-21 13:19:56\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-08-21T05:20:28.000Z","path":"categories/index.html","layout":"page","_id":"cjb6k4kvc0004ulepor3slppc","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2016-08-21T05:18:30.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-08-21 13:18:30\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-08-21T12:57:22.000Z","path":"tags/index.html","layout":"page","_id":"cjb6k4kvi0007ulepb6vy3ueu","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"那些构建工具们","date":"2016-08-21T14:29:59.000Z","_content":"\n构建工具指的是能够帮助程序员自动完成程序编译过程的工具，而并非编译器本身。其目标是更方便更快捷地完成整个编译过程。\n\n围绕这个目标，目前已有的构建工具可谓种类繁多。诸如Eclipse、Visual Studio等大型IDE本身含有构建工具，但不纳入下面讨论的范围。\n\n构建工具的总体思路都是利用配置文件描述编译规则，然后通过输入简单的命令完成目标。各个工具在灵活性、复杂度、移植性、执行效率等方面各有千秋。下面列出的工具并没有都尝试过，有些是通过资料所得，仅供参考。\n\n<!-- more -->\n\n## 1. Make\nMake是最经典的构建工具，Make的实现版本有不少，最有名的是GNU Make。\n\n通过书写Makefile描述依赖关系和编译命令从而自动完成编译过程。GNU Make强大之处在于可以使用丰富的Shell命令，且它可以通过文件更改时间自动判断是否需要执行编译命令。\n\nMakefile的移植性比较差，并且当源代码结构比较复杂时，手工书写Makefile是一件挺繁琐的事情。\n\n## 2. GNU Autotools\nAutotools是Linux系统下大型软件的默认构建工具，通过生成Makefile来完成编译过程。\n\nAutotools造就了经典的源码安装软件三步法（./configure,make,make install）。相比于传统的Make，Autotools扩展了默认编译规则，并添加了依赖检查功能，在编译各种类型目标时都要更方便。\n\n## 3. CMake\nCMake可以根据不同的平台、不同的编译器，生成相应的Makefile或者项目文件（如VCproj）。\n\n通过编写CMakeLists.txt，从而控制编译过程。CMake本身就可以看做是一种脚本语言，它不依赖于其它语言。相比GNU Autotools，CMake实现架构要更简单，运行更快。\n\n## 4. Ant\nAnt是由Apache发布的，主要用于Java开发，其编译文件格式为xml。\n\n相比Makefile写起来要长一些，但能与IDE较好的兼容，且跨平台的移植性更好。目前也有Ant的变种用来编译C/C++、C#等等。\n\n## 5. Maven\nMaven也是Apache开发的用于Java的构建工具，还包含打包及发布功能。\n\nMaven的可定制性很强，这也意味着它比较复杂，学习曲线很陡。使用时，每个工程和模块都需要定义POM（Project Object Model，采用xml描述），声明元数据、插件和库的依赖关系。首次编译时，依赖的插件和库会自动通过网络下载，并形成本地源。Maven还提供了不错的版本控制功能。这些都使得Maven适合作为工业级或大型开源软件的使用。\n\n## 6. SCons\nSCons的目标是代替经典的make，它是基于python实现的，且不需要中间步骤来完成编译过程（如生成Makefile等）。SCons的可移植性好，但在大型工程中使用时构建速度比较慢。\n\n## 7. AAP\nAAP是由Vim作者开发的基于python的构建工具，可看做是更高级的Make。\n\nAAP同样使用包含依赖关系及编译命令的配置文件，但它提供更高级的功能比如网站维护、软件分发、版本控制等。同Make相比，AAP还做了一些变化，比如通过文件签名而不是修改时间来判断是否需要重新编译，使用python脚本而不是Shell命令避免移植性问题。\n\n## 8. qmake\nqmake是由Trolltech为QT套件做的构建工具，最后生成Makefile或相关工程文件。\n\n## 9. KConfig\nKConfig是基于Make的构建工具，常用来构建Linux内核以及其它底层工具（如uclibc、busybox等），它的特点是具有可视化配置界面，且构建速度很快。\n\n其它的构建工具还非常多，比如Jam、Makeit、Waf等等，在做相关的项目时，大家可以根据自己的需求进行选择。\n\n--------------\n## 参考资料：\n\n1. [跟我一起写Makefile](http://www.chinaunix.net/old_jh/23/408225.html)\n2. [Makefile是如何自动生成的](http://blog.chinaunix.net/uid-20544507-id-3494422.html)\n3. [CMake入门指南](http://www.cnblogs.com/sinojelly/archive/2010/05/22/1741337.html) \n4. [用Ant实现Java项目的自动构建和部署](http://tech.it168.com/j/2007-11-09/200711091344781.shtml)\n5. [Apache Maven入门](http://www.oracle.com/technetwork/cn/community/java/apache-maven-getting-started-1-406235-zhs.html)\n6. [Scons VS Other Build Tools](http://www.scons.org/wiki/SconsVsOtherBuildTools)\n7. [AAP](http://www.a-a-p.org/) \n8. [Build Manager Tools](http://www.dmoz.org/Computers/Software/Build_Management/Build_Manager_Tools/) \n\n\n","source":"_posts/2016-08-21-build-tools.md","raw":"---\ntitle: 那些构建工具们\ndate: 2016-08-21 22:29:59\ncategories: 弄点工具\ntags:\n  - build\n---\n\n构建工具指的是能够帮助程序员自动完成程序编译过程的工具，而并非编译器本身。其目标是更方便更快捷地完成整个编译过程。\n\n围绕这个目标，目前已有的构建工具可谓种类繁多。诸如Eclipse、Visual Studio等大型IDE本身含有构建工具，但不纳入下面讨论的范围。\n\n构建工具的总体思路都是利用配置文件描述编译规则，然后通过输入简单的命令完成目标。各个工具在灵活性、复杂度、移植性、执行效率等方面各有千秋。下面列出的工具并没有都尝试过，有些是通过资料所得，仅供参考。\n\n<!-- more -->\n\n## 1. Make\nMake是最经典的构建工具，Make的实现版本有不少，最有名的是GNU Make。\n\n通过书写Makefile描述依赖关系和编译命令从而自动完成编译过程。GNU Make强大之处在于可以使用丰富的Shell命令，且它可以通过文件更改时间自动判断是否需要执行编译命令。\n\nMakefile的移植性比较差，并且当源代码结构比较复杂时，手工书写Makefile是一件挺繁琐的事情。\n\n## 2. GNU Autotools\nAutotools是Linux系统下大型软件的默认构建工具，通过生成Makefile来完成编译过程。\n\nAutotools造就了经典的源码安装软件三步法（./configure,make,make install）。相比于传统的Make，Autotools扩展了默认编译规则，并添加了依赖检查功能，在编译各种类型目标时都要更方便。\n\n## 3. CMake\nCMake可以根据不同的平台、不同的编译器，生成相应的Makefile或者项目文件（如VCproj）。\n\n通过编写CMakeLists.txt，从而控制编译过程。CMake本身就可以看做是一种脚本语言，它不依赖于其它语言。相比GNU Autotools，CMake实现架构要更简单，运行更快。\n\n## 4. Ant\nAnt是由Apache发布的，主要用于Java开发，其编译文件格式为xml。\n\n相比Makefile写起来要长一些，但能与IDE较好的兼容，且跨平台的移植性更好。目前也有Ant的变种用来编译C/C++、C#等等。\n\n## 5. Maven\nMaven也是Apache开发的用于Java的构建工具，还包含打包及发布功能。\n\nMaven的可定制性很强，这也意味着它比较复杂，学习曲线很陡。使用时，每个工程和模块都需要定义POM（Project Object Model，采用xml描述），声明元数据、插件和库的依赖关系。首次编译时，依赖的插件和库会自动通过网络下载，并形成本地源。Maven还提供了不错的版本控制功能。这些都使得Maven适合作为工业级或大型开源软件的使用。\n\n## 6. SCons\nSCons的目标是代替经典的make，它是基于python实现的，且不需要中间步骤来完成编译过程（如生成Makefile等）。SCons的可移植性好，但在大型工程中使用时构建速度比较慢。\n\n## 7. AAP\nAAP是由Vim作者开发的基于python的构建工具，可看做是更高级的Make。\n\nAAP同样使用包含依赖关系及编译命令的配置文件，但它提供更高级的功能比如网站维护、软件分发、版本控制等。同Make相比，AAP还做了一些变化，比如通过文件签名而不是修改时间来判断是否需要重新编译，使用python脚本而不是Shell命令避免移植性问题。\n\n## 8. qmake\nqmake是由Trolltech为QT套件做的构建工具，最后生成Makefile或相关工程文件。\n\n## 9. KConfig\nKConfig是基于Make的构建工具，常用来构建Linux内核以及其它底层工具（如uclibc、busybox等），它的特点是具有可视化配置界面，且构建速度很快。\n\n其它的构建工具还非常多，比如Jam、Makeit、Waf等等，在做相关的项目时，大家可以根据自己的需求进行选择。\n\n--------------\n## 参考资料：\n\n1. [跟我一起写Makefile](http://www.chinaunix.net/old_jh/23/408225.html)\n2. [Makefile是如何自动生成的](http://blog.chinaunix.net/uid-20544507-id-3494422.html)\n3. [CMake入门指南](http://www.cnblogs.com/sinojelly/archive/2010/05/22/1741337.html) \n4. [用Ant实现Java项目的自动构建和部署](http://tech.it168.com/j/2007-11-09/200711091344781.shtml)\n5. [Apache Maven入门](http://www.oracle.com/technetwork/cn/community/java/apache-maven-getting-started-1-406235-zhs.html)\n6. [Scons VS Other Build Tools](http://www.scons.org/wiki/SconsVsOtherBuildTools)\n7. [AAP](http://www.a-a-p.org/) \n8. [Build Manager Tools](http://www.dmoz.org/Computers/Software/Build_Management/Build_Manager_Tools/) \n\n\n","slug":"build-tools","published":1,"updated":"2017-12-17T03:33:38.314Z","_id":"cjb6k4kv70001ulep9towf4qj","comments":1,"layout":"post","photos":[],"link":"","content":"<p>构建工具指的是能够帮助程序员自动完成程序编译过程的工具，而并非编译器本身。其目标是更方便更快捷地完成整个编译过程。</p>\n<p>围绕这个目标，目前已有的构建工具可谓种类繁多。诸如Eclipse、Visual Studio等大型IDE本身含有构建工具，但不纳入下面讨论的范围。</p>\n<p>构建工具的总体思路都是利用配置文件描述编译规则，然后通过输入简单的命令完成目标。各个工具在灵活性、复杂度、移植性、执行效率等方面各有千秋。下面列出的工具并没有都尝试过，有些是通过资料所得，仅供参考。</p>\n<a id=\"more\"></a>\n<h2 id=\"1-Make\"><a href=\"#1-Make\" class=\"headerlink\" title=\"1. Make\"></a>1. Make</h2><p>Make是最经典的构建工具，Make的实现版本有不少，最有名的是GNU Make。</p>\n<p>通过书写Makefile描述依赖关系和编译命令从而自动完成编译过程。GNU Make强大之处在于可以使用丰富的Shell命令，且它可以通过文件更改时间自动判断是否需要执行编译命令。</p>\n<p>Makefile的移植性比较差，并且当源代码结构比较复杂时，手工书写Makefile是一件挺繁琐的事情。</p>\n<h2 id=\"2-GNU-Autotools\"><a href=\"#2-GNU-Autotools\" class=\"headerlink\" title=\"2. GNU Autotools\"></a>2. GNU Autotools</h2><p>Autotools是Linux系统下大型软件的默认构建工具，通过生成Makefile来完成编译过程。</p>\n<p>Autotools造就了经典的源码安装软件三步法（./configure,make,make install）。相比于传统的Make，Autotools扩展了默认编译规则，并添加了依赖检查功能，在编译各种类型目标时都要更方便。</p>\n<h2 id=\"3-CMake\"><a href=\"#3-CMake\" class=\"headerlink\" title=\"3. CMake\"></a>3. CMake</h2><p>CMake可以根据不同的平台、不同的编译器，生成相应的Makefile或者项目文件（如VCproj）。</p>\n<p>通过编写CMakeLists.txt，从而控制编译过程。CMake本身就可以看做是一种脚本语言，它不依赖于其它语言。相比GNU Autotools，CMake实现架构要更简单，运行更快。</p>\n<h2 id=\"4-Ant\"><a href=\"#4-Ant\" class=\"headerlink\" title=\"4. Ant\"></a>4. Ant</h2><p>Ant是由Apache发布的，主要用于Java开发，其编译文件格式为xml。</p>\n<p>相比Makefile写起来要长一些，但能与IDE较好的兼容，且跨平台的移植性更好。目前也有Ant的变种用来编译C/C++、C#等等。</p>\n<h2 id=\"5-Maven\"><a href=\"#5-Maven\" class=\"headerlink\" title=\"5. Maven\"></a>5. Maven</h2><p>Maven也是Apache开发的用于Java的构建工具，还包含打包及发布功能。</p>\n<p>Maven的可定制性很强，这也意味着它比较复杂，学习曲线很陡。使用时，每个工程和模块都需要定义POM（Project Object Model，采用xml描述），声明元数据、插件和库的依赖关系。首次编译时，依赖的插件和库会自动通过网络下载，并形成本地源。Maven还提供了不错的版本控制功能。这些都使得Maven适合作为工业级或大型开源软件的使用。</p>\n<h2 id=\"6-SCons\"><a href=\"#6-SCons\" class=\"headerlink\" title=\"6. SCons\"></a>6. SCons</h2><p>SCons的目标是代替经典的make，它是基于python实现的，且不需要中间步骤来完成编译过程（如生成Makefile等）。SCons的可移植性好，但在大型工程中使用时构建速度比较慢。</p>\n<h2 id=\"7-AAP\"><a href=\"#7-AAP\" class=\"headerlink\" title=\"7. AAP\"></a>7. AAP</h2><p>AAP是由Vim作者开发的基于python的构建工具，可看做是更高级的Make。</p>\n<p>AAP同样使用包含依赖关系及编译命令的配置文件，但它提供更高级的功能比如网站维护、软件分发、版本控制等。同Make相比，AAP还做了一些变化，比如通过文件签名而不是修改时间来判断是否需要重新编译，使用python脚本而不是Shell命令避免移植性问题。</p>\n<h2 id=\"8-qmake\"><a href=\"#8-qmake\" class=\"headerlink\" title=\"8. qmake\"></a>8. qmake</h2><p>qmake是由Trolltech为QT套件做的构建工具，最后生成Makefile或相关工程文件。</p>\n<h2 id=\"9-KConfig\"><a href=\"#9-KConfig\" class=\"headerlink\" title=\"9. KConfig\"></a>9. KConfig</h2><p>KConfig是基于Make的构建工具，常用来构建Linux内核以及其它底层工具（如uclibc、busybox等），它的特点是具有可视化配置界面，且构建速度很快。</p>\n<p>其它的构建工具还非常多，比如Jam、Makeit、Waf等等，在做相关的项目时，大家可以根据自己的需求进行选择。</p>\n<hr>\n<h2 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h2><ol>\n<li><a href=\"http://www.chinaunix.net/old_jh/23/408225.html\" target=\"_blank\" rel=\"noopener\">跟我一起写Makefile</a></li>\n<li><a href=\"http://blog.chinaunix.net/uid-20544507-id-3494422.html\" target=\"_blank\" rel=\"noopener\">Makefile是如何自动生成的</a></li>\n<li><a href=\"http://www.cnblogs.com/sinojelly/archive/2010/05/22/1741337.html\" target=\"_blank\" rel=\"noopener\">CMake入门指南</a> </li>\n<li><a href=\"http://tech.it168.com/j/2007-11-09/200711091344781.shtml\" target=\"_blank\" rel=\"noopener\">用Ant实现Java项目的自动构建和部署</a></li>\n<li><a href=\"http://www.oracle.com/technetwork/cn/community/java/apache-maven-getting-started-1-406235-zhs.html\" target=\"_blank\" rel=\"noopener\">Apache Maven入门</a></li>\n<li><a href=\"http://www.scons.org/wiki/SconsVsOtherBuildTools\" target=\"_blank\" rel=\"noopener\">Scons VS Other Build Tools</a></li>\n<li><a href=\"http://www.a-a-p.org/\" target=\"_blank\" rel=\"noopener\">AAP</a> </li>\n<li><a href=\"http://www.dmoz.org/Computers/Software/Build_Management/Build_Manager_Tools/\" target=\"_blank\" rel=\"noopener\">Build Manager Tools</a> </li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>构建工具指的是能够帮助程序员自动完成程序编译过程的工具，而并非编译器本身。其目标是更方便更快捷地完成整个编译过程。</p>\n<p>围绕这个目标，目前已有的构建工具可谓种类繁多。诸如Eclipse、Visual Studio等大型IDE本身含有构建工具，但不纳入下面讨论的范围。</p>\n<p>构建工具的总体思路都是利用配置文件描述编译规则，然后通过输入简单的命令完成目标。各个工具在灵活性、复杂度、移植性、执行效率等方面各有千秋。下面列出的工具并没有都尝试过，有些是通过资料所得，仅供参考。</p>","more":"<h2 id=\"1-Make\"><a href=\"#1-Make\" class=\"headerlink\" title=\"1. Make\"></a>1. Make</h2><p>Make是最经典的构建工具，Make的实现版本有不少，最有名的是GNU Make。</p>\n<p>通过书写Makefile描述依赖关系和编译命令从而自动完成编译过程。GNU Make强大之处在于可以使用丰富的Shell命令，且它可以通过文件更改时间自动判断是否需要执行编译命令。</p>\n<p>Makefile的移植性比较差，并且当源代码结构比较复杂时，手工书写Makefile是一件挺繁琐的事情。</p>\n<h2 id=\"2-GNU-Autotools\"><a href=\"#2-GNU-Autotools\" class=\"headerlink\" title=\"2. GNU Autotools\"></a>2. GNU Autotools</h2><p>Autotools是Linux系统下大型软件的默认构建工具，通过生成Makefile来完成编译过程。</p>\n<p>Autotools造就了经典的源码安装软件三步法（./configure,make,make install）。相比于传统的Make，Autotools扩展了默认编译规则，并添加了依赖检查功能，在编译各种类型目标时都要更方便。</p>\n<h2 id=\"3-CMake\"><a href=\"#3-CMake\" class=\"headerlink\" title=\"3. CMake\"></a>3. CMake</h2><p>CMake可以根据不同的平台、不同的编译器，生成相应的Makefile或者项目文件（如VCproj）。</p>\n<p>通过编写CMakeLists.txt，从而控制编译过程。CMake本身就可以看做是一种脚本语言，它不依赖于其它语言。相比GNU Autotools，CMake实现架构要更简单，运行更快。</p>\n<h2 id=\"4-Ant\"><a href=\"#4-Ant\" class=\"headerlink\" title=\"4. Ant\"></a>4. Ant</h2><p>Ant是由Apache发布的，主要用于Java开发，其编译文件格式为xml。</p>\n<p>相比Makefile写起来要长一些，但能与IDE较好的兼容，且跨平台的移植性更好。目前也有Ant的变种用来编译C/C++、C#等等。</p>\n<h2 id=\"5-Maven\"><a href=\"#5-Maven\" class=\"headerlink\" title=\"5. Maven\"></a>5. Maven</h2><p>Maven也是Apache开发的用于Java的构建工具，还包含打包及发布功能。</p>\n<p>Maven的可定制性很强，这也意味着它比较复杂，学习曲线很陡。使用时，每个工程和模块都需要定义POM（Project Object Model，采用xml描述），声明元数据、插件和库的依赖关系。首次编译时，依赖的插件和库会自动通过网络下载，并形成本地源。Maven还提供了不错的版本控制功能。这些都使得Maven适合作为工业级或大型开源软件的使用。</p>\n<h2 id=\"6-SCons\"><a href=\"#6-SCons\" class=\"headerlink\" title=\"6. SCons\"></a>6. SCons</h2><p>SCons的目标是代替经典的make，它是基于python实现的，且不需要中间步骤来完成编译过程（如生成Makefile等）。SCons的可移植性好，但在大型工程中使用时构建速度比较慢。</p>\n<h2 id=\"7-AAP\"><a href=\"#7-AAP\" class=\"headerlink\" title=\"7. AAP\"></a>7. AAP</h2><p>AAP是由Vim作者开发的基于python的构建工具，可看做是更高级的Make。</p>\n<p>AAP同样使用包含依赖关系及编译命令的配置文件，但它提供更高级的功能比如网站维护、软件分发、版本控制等。同Make相比，AAP还做了一些变化，比如通过文件签名而不是修改时间来判断是否需要重新编译，使用python脚本而不是Shell命令避免移植性问题。</p>\n<h2 id=\"8-qmake\"><a href=\"#8-qmake\" class=\"headerlink\" title=\"8. qmake\"></a>8. qmake</h2><p>qmake是由Trolltech为QT套件做的构建工具，最后生成Makefile或相关工程文件。</p>\n<h2 id=\"9-KConfig\"><a href=\"#9-KConfig\" class=\"headerlink\" title=\"9. KConfig\"></a>9. KConfig</h2><p>KConfig是基于Make的构建工具，常用来构建Linux内核以及其它底层工具（如uclibc、busybox等），它的特点是具有可视化配置界面，且构建速度很快。</p>\n<p>其它的构建工具还非常多，比如Jam、Makeit、Waf等等，在做相关的项目时，大家可以根据自己的需求进行选择。</p>\n<hr>\n<h2 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h2><ol>\n<li><a href=\"http://www.chinaunix.net/old_jh/23/408225.html\" target=\"_blank\" rel=\"noopener\">跟我一起写Makefile</a></li>\n<li><a href=\"http://blog.chinaunix.net/uid-20544507-id-3494422.html\" target=\"_blank\" rel=\"noopener\">Makefile是如何自动生成的</a></li>\n<li><a href=\"http://www.cnblogs.com/sinojelly/archive/2010/05/22/1741337.html\" target=\"_blank\" rel=\"noopener\">CMake入门指南</a> </li>\n<li><a href=\"http://tech.it168.com/j/2007-11-09/200711091344781.shtml\" target=\"_blank\" rel=\"noopener\">用Ant实现Java项目的自动构建和部署</a></li>\n<li><a href=\"http://www.oracle.com/technetwork/cn/community/java/apache-maven-getting-started-1-406235-zhs.html\" target=\"_blank\" rel=\"noopener\">Apache Maven入门</a></li>\n<li><a href=\"http://www.scons.org/wiki/SconsVsOtherBuildTools\" target=\"_blank\" rel=\"noopener\">Scons VS Other Build Tools</a></li>\n<li><a href=\"http://www.a-a-p.org/\" target=\"_blank\" rel=\"noopener\">AAP</a> </li>\n<li><a href=\"http://www.dmoz.org/Computers/Software/Build_Management/Build_Manager_Tools/\" target=\"_blank\" rel=\"noopener\">Build Manager Tools</a> </li>\n</ol>"},{"title":"编译dronekit-tower的一点问题","date":"2016-08-21T15:47:52.000Z","_content":"\n从Github上直接clone下Tower（ https://github.com/DroidPlanner/Tower ）进行编译总是报错\n\n> Gradle sync failed: Authentication scheme 'all'(Authentication) is not support\n\n其实解决方法很简单，删除Tower/build.gradle中带认证的Maven库地址（第47-53行），变为以下内容即可：\n\n    allprojects {\n        repositories {\n            jcenter()\n            mavenCentral()\n    \n            maven { url 'https://maven.fabric.io/public' }\n    \n            flatDir {\n                dirs 'libs'\n            }\n        }\n    }\n\n","source":"_posts/2016-08-21-dronekit-tower.md","raw":"---\ntitle: 编译dronekit-tower的一点问题\ndate: 2016-08-21 23:47:52\ncategories: 写点程序\ntags: \n  - dronekit\n---\n\n从Github上直接clone下Tower（ https://github.com/DroidPlanner/Tower ）进行编译总是报错\n\n> Gradle sync failed: Authentication scheme 'all'(Authentication) is not support\n\n其实解决方法很简单，删除Tower/build.gradle中带认证的Maven库地址（第47-53行），变为以下内容即可：\n\n    allprojects {\n        repositories {\n            jcenter()\n            mavenCentral()\n    \n            maven { url 'https://maven.fabric.io/public' }\n    \n            flatDir {\n                dirs 'libs'\n            }\n        }\n    }\n\n","slug":"dronekit-tower","published":1,"updated":"2016-08-27T09:18:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb6k4kvb0003ulepaf2q0l2w","content":"<p>从Github上直接clone下Tower（ <a href=\"https://github.com/DroidPlanner/Tower\" target=\"_blank\" rel=\"noopener\">https://github.com/DroidPlanner/Tower</a> ）进行编译总是报错</p>\n<blockquote>\n<p>Gradle sync failed: Authentication scheme ‘all’(Authentication) is not support</p>\n</blockquote>\n<p>其实解决方法很简单，删除Tower/build.gradle中带认证的Maven库地址（第47-53行），变为以下内容即可：</p>\n<pre><code>allprojects {\n    repositories {\n        jcenter()\n        mavenCentral()\n\n        maven { url &apos;https://maven.fabric.io/public&apos; }\n\n        flatDir {\n            dirs &apos;libs&apos;\n        }\n    }\n}\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>从Github上直接clone下Tower（ <a href=\"https://github.com/DroidPlanner/Tower\" target=\"_blank\" rel=\"noopener\">https://github.com/DroidPlanner/Tower</a> ）进行编译总是报错</p>\n<blockquote>\n<p>Gradle sync failed: Authentication scheme ‘all’(Authentication) is not support</p>\n</blockquote>\n<p>其实解决方法很简单，删除Tower/build.gradle中带认证的Maven库地址（第47-53行），变为以下内容即可：</p>\n<pre><code>allprojects {\n    repositories {\n        jcenter()\n        mavenCentral()\n\n        maven { url &apos;https://maven.fabric.io/public&apos; }\n\n        flatDir {\n            dirs &apos;libs&apos;\n        }\n    }\n}\n</code></pre>"},{"title":"对于个人知识管理的认识和我常用的工具们","date":"2016-08-21T12:52:39.000Z","_content":"\n个人知识管理（Personal Knowledge Management）一般是指个人通过工具建立知识体系并不断完善，进行知识的收集、消化吸收和创新的过程[1]。\n\n细究来说，与知识相关的有三个层次的概念：信息、知识、智慧。\n1. **信息**：信息是客观存在的，数据是信息的载体。\n2. **知识**：消化吸收后的信息，它们是用来解决问题的工具，除此之外，多余的信息将成为噪音。\n3. **智慧**：创新应用后的知识。\n但很多时候我们并不严格区分这些概念，都统称为知识。\n\n下面就个人知识管理的三个过程知识搜集、知识整理和知识运用中的一些工具和方法，把我的一些体会和经验与大家分享。工具和方法本身并没有好坏之分，重要的是找到适合自己的。\n\n<!-- more -->\n\n# 一、知识搜集：\n\n按照是否有特定的搜集目标来区分，知识搜集可以分为针对性搜集和随机性收集。这两种搜集的原则是稍有区别的：\n* 针对性搜集的原则是：围绕着目标，花费较少的时间，得到价值较高的知识，同时能够便于知识整理和利用；\n* 随机性搜集的原则是：能够以最快的方式将得到的知识无失真地记录下来。\n\n我的思路是根据知识来源不同来使用工具，主力使用的工具包括evernote、wiz、zotero（其实还有很多类似的工具，这三个是我最常用的）。总的来说，我的知识收集来源主要包括以下几类：\n\n## 1. 生活点滴：\n\n现实世界中知识来源包括讲座会议、与人交流、个人感悟等。这是一种典型的随机性搜集，很多想法会在不经意间蹦出来。那么作为知识收集的神经末梢，要求其工具方便快捷，形式多样（文本、图像、音频、视频），能迅速同步到服务器上。\n\n早期我选用的是evernote，它方便简洁，有强大的手机客户端，可自动同步至服务器。后来主要切换到wiz，二者主体功能相差不大，主要是wiz类似资源管理器的设计更便于我后期整理。当然，对于一些敏感性的信息，随身带个笔记本是必不可少的。\n\n## 2. 书籍、期刊、文档：\n\n知识收集中很重要的一块内容，尤其是对于专业研究，包括电子类和纸质类。这是一种典型的针对性搜集，通常是围绕某个领域或目标进行的。\n\n电子文档来源广泛、种类多样，搜集的时候最麻烦的莫过于存储文档的元数据，这里元数据指的是文档的标题、作者、日期等关键字段。zotero在这方面是比较强大的，它可以自动化地从多种源头（如IEEE、cnki等等）根据相关格式抓取并填充字段，使用鼠标拖动文件至该条目上就把文件附加于条目上，可以支持用元数据信息对文件自动重命名，还支持导出至word和bibtex中方便引用。与zotero类似的有EndNote、NoteExpress，但我感觉zotero要更加灵活一些（跨平台、小巧等）。\n\n在阅读纸质文档时经常需要做点读书笔记、画些思维导图。处理这类事情，M$ Office里面的OneNote还是不错的，后来因为它过于笨重而被我抛弃。从精简工具的角度出发，我还是使用wiz或evernote，并将产生的有关文件作为附件保存。\n\n## 3. 网络信息：\n\n作为现在知识收集的一个重要来源，要求其工具能迅速从浏览器（或APP）中截取所需要的信息并保存，它的类型既有针对性的搜集也有随机性搜集。[2]中整理了一份较全的网络信息来源，稍作整理如下：\n\n1. 搜索引擎类：谷歌、百度\n2. 百科类：维基百科、百度百科\n3. 问答社区类：知乎、百度知道、百度新知、新浪爱问\n4. 文库类：百度文库、爱问共享资料、豆丁、其他专文库\n5. 博客类：博客、微博、微信朋友圈\n6. 信息评价类：豆瓣读书\n\nevernote和wiz在这方面都做得很不错，可以快速地从网页中截取所需要的信息。zotero则做得稍差，它仅简单地提供了保存网页的功能，并且无法选择需要保存的部分，所以，我觉得zotero还是更适合专业文献。至于这些信息来源的网址我通常都是用xmarks（Firefox的一个插件）进行分类保存，xmarks还会根据你收藏的网站给你推荐一些相近的优秀网站。\n\n# 二、知识的整理\n\n搜集之后必须要做整理，整理的目的是使给予知识一定的组织结构，以便于在使用时可以快速准确地找到所需要的东西。\n如果不做整理，[3]中总结了常见问题：\n1. 要用的时候找不到：这是由于搜索功能查找慢、平时到处乱放、只有模糊的印象等软件问题和个人习惯问题造成的。\n2. 收集但未消化：好东西不想错过，收集多了反而不知要读哪些好了。\n3. 随意复制和知识重复问题：复制很方便能解决当前问题，却为以后的归档、再次使用造成很大的麻烦。不知是哪个是最新的、哪个是有用的、哪个是没有用的？\n4. 不知道该放哪个文件夹中：文件夹太多、文档有多个属性，常为放哪适合浪费时间，但又必须找地方放。\n5. 相关的文档不知如何放好：相关的原文档、阅读心得、参考资料等，新建一个文件夹来放，又会造成文件夹过多\n6. 资料越多越杂乱：第1年，建几个文件夹来管还好，2000多个，3000多个文档开始吃力，4000个多个文档时那是一个烦字\n7. 没有及时归档的习惯：认为归档浪费时间，却不知因为没有很好的及时的归档，造成更多的时间的浪费\n\n那么，我的方法是首先区分消化过的和未消化的：\n1. 对于没有消化过的知识则放在一个大的搜集箱（或者分不同领域的收集箱）中，作为待处理的对象；\n2. 对于消化过的知识以有序的组织结构存放，目录树是一种最常用的方式。在此之上，对知识打上各种标签，这样就可以从多个维度过滤出所需要的知识。此外，还必须支持全文检索，这样可以进一步提高模糊知识定位能力。\n\n在知识整理上，原来使用过一段时间针式PKM，基本需求可以满足，但软件风格我不是很喜欢。目前觉得wiz还是能基本满足我的需求的。\n\n# 三、知识的运用\n\n知识只有运用才有意义，那么以一定的承载形式输出是一种最佳的方式。我的常见输出方式包括：博客、论文、报告、程序。\n1. 博客：基本采用分享方式，wiz带有相关的发布插件，可以直接同步到博客上。\n2. 论文：发表在正式的期刊或会议上，可以和同行进行交流。\n3. 报告：作为项目的总结和记录，用于汇报和交接。\n4. 程序：在github上建立相应地代码库，用于存储和管理自己的程序。由于可能存在多次修改的过程，版本控制是必不可少的。\n​\n***\n以上就是个人在知识管理方面的一些经验，仅供参考。同时这也算是一次知识输出地过程吧^_^。\n\n\n## 参考资料：\n\n[1]: 个人知识管理：为什么《你的知识需要管理》？ http://www.gtdstudy.com/?p=2275\n[2]: 月光博客：我的知识管理工具列表 http://www.williamlong.info/archives/3388.html \n[3]: 针式PKM如何帮助你解决个人知识管理中的常见问题？ http://www.cnblogs.com/pinpkm/archive/2009/03/23/1419995.html\n\n\n","source":"_posts/2016-08-21-pkm-tools.md","raw":"---\ntitle: 对于个人知识管理的认识和我常用的工具们\ndate: 2016-08-21 20:52:39\ncategories: 聊点感想\ntags:\n  - PKM\n  - zotero\n  - wiz\n---\n\n个人知识管理（Personal Knowledge Management）一般是指个人通过工具建立知识体系并不断完善，进行知识的收集、消化吸收和创新的过程[1]。\n\n细究来说，与知识相关的有三个层次的概念：信息、知识、智慧。\n1. **信息**：信息是客观存在的，数据是信息的载体。\n2. **知识**：消化吸收后的信息，它们是用来解决问题的工具，除此之外，多余的信息将成为噪音。\n3. **智慧**：创新应用后的知识。\n但很多时候我们并不严格区分这些概念，都统称为知识。\n\n下面就个人知识管理的三个过程知识搜集、知识整理和知识运用中的一些工具和方法，把我的一些体会和经验与大家分享。工具和方法本身并没有好坏之分，重要的是找到适合自己的。\n\n<!-- more -->\n\n# 一、知识搜集：\n\n按照是否有特定的搜集目标来区分，知识搜集可以分为针对性搜集和随机性收集。这两种搜集的原则是稍有区别的：\n* 针对性搜集的原则是：围绕着目标，花费较少的时间，得到价值较高的知识，同时能够便于知识整理和利用；\n* 随机性搜集的原则是：能够以最快的方式将得到的知识无失真地记录下来。\n\n我的思路是根据知识来源不同来使用工具，主力使用的工具包括evernote、wiz、zotero（其实还有很多类似的工具，这三个是我最常用的）。总的来说，我的知识收集来源主要包括以下几类：\n\n## 1. 生活点滴：\n\n现实世界中知识来源包括讲座会议、与人交流、个人感悟等。这是一种典型的随机性搜集，很多想法会在不经意间蹦出来。那么作为知识收集的神经末梢，要求其工具方便快捷，形式多样（文本、图像、音频、视频），能迅速同步到服务器上。\n\n早期我选用的是evernote，它方便简洁，有强大的手机客户端，可自动同步至服务器。后来主要切换到wiz，二者主体功能相差不大，主要是wiz类似资源管理器的设计更便于我后期整理。当然，对于一些敏感性的信息，随身带个笔记本是必不可少的。\n\n## 2. 书籍、期刊、文档：\n\n知识收集中很重要的一块内容，尤其是对于专业研究，包括电子类和纸质类。这是一种典型的针对性搜集，通常是围绕某个领域或目标进行的。\n\n电子文档来源广泛、种类多样，搜集的时候最麻烦的莫过于存储文档的元数据，这里元数据指的是文档的标题、作者、日期等关键字段。zotero在这方面是比较强大的，它可以自动化地从多种源头（如IEEE、cnki等等）根据相关格式抓取并填充字段，使用鼠标拖动文件至该条目上就把文件附加于条目上，可以支持用元数据信息对文件自动重命名，还支持导出至word和bibtex中方便引用。与zotero类似的有EndNote、NoteExpress，但我感觉zotero要更加灵活一些（跨平台、小巧等）。\n\n在阅读纸质文档时经常需要做点读书笔记、画些思维导图。处理这类事情，M$ Office里面的OneNote还是不错的，后来因为它过于笨重而被我抛弃。从精简工具的角度出发，我还是使用wiz或evernote，并将产生的有关文件作为附件保存。\n\n## 3. 网络信息：\n\n作为现在知识收集的一个重要来源，要求其工具能迅速从浏览器（或APP）中截取所需要的信息并保存，它的类型既有针对性的搜集也有随机性搜集。[2]中整理了一份较全的网络信息来源，稍作整理如下：\n\n1. 搜索引擎类：谷歌、百度\n2. 百科类：维基百科、百度百科\n3. 问答社区类：知乎、百度知道、百度新知、新浪爱问\n4. 文库类：百度文库、爱问共享资料、豆丁、其他专文库\n5. 博客类：博客、微博、微信朋友圈\n6. 信息评价类：豆瓣读书\n\nevernote和wiz在这方面都做得很不错，可以快速地从网页中截取所需要的信息。zotero则做得稍差，它仅简单地提供了保存网页的功能，并且无法选择需要保存的部分，所以，我觉得zotero还是更适合专业文献。至于这些信息来源的网址我通常都是用xmarks（Firefox的一个插件）进行分类保存，xmarks还会根据你收藏的网站给你推荐一些相近的优秀网站。\n\n# 二、知识的整理\n\n搜集之后必须要做整理，整理的目的是使给予知识一定的组织结构，以便于在使用时可以快速准确地找到所需要的东西。\n如果不做整理，[3]中总结了常见问题：\n1. 要用的时候找不到：这是由于搜索功能查找慢、平时到处乱放、只有模糊的印象等软件问题和个人习惯问题造成的。\n2. 收集但未消化：好东西不想错过，收集多了反而不知要读哪些好了。\n3. 随意复制和知识重复问题：复制很方便能解决当前问题，却为以后的归档、再次使用造成很大的麻烦。不知是哪个是最新的、哪个是有用的、哪个是没有用的？\n4. 不知道该放哪个文件夹中：文件夹太多、文档有多个属性，常为放哪适合浪费时间，但又必须找地方放。\n5. 相关的文档不知如何放好：相关的原文档、阅读心得、参考资料等，新建一个文件夹来放，又会造成文件夹过多\n6. 资料越多越杂乱：第1年，建几个文件夹来管还好，2000多个，3000多个文档开始吃力，4000个多个文档时那是一个烦字\n7. 没有及时归档的习惯：认为归档浪费时间，却不知因为没有很好的及时的归档，造成更多的时间的浪费\n\n那么，我的方法是首先区分消化过的和未消化的：\n1. 对于没有消化过的知识则放在一个大的搜集箱（或者分不同领域的收集箱）中，作为待处理的对象；\n2. 对于消化过的知识以有序的组织结构存放，目录树是一种最常用的方式。在此之上，对知识打上各种标签，这样就可以从多个维度过滤出所需要的知识。此外，还必须支持全文检索，这样可以进一步提高模糊知识定位能力。\n\n在知识整理上，原来使用过一段时间针式PKM，基本需求可以满足，但软件风格我不是很喜欢。目前觉得wiz还是能基本满足我的需求的。\n\n# 三、知识的运用\n\n知识只有运用才有意义，那么以一定的承载形式输出是一种最佳的方式。我的常见输出方式包括：博客、论文、报告、程序。\n1. 博客：基本采用分享方式，wiz带有相关的发布插件，可以直接同步到博客上。\n2. 论文：发表在正式的期刊或会议上，可以和同行进行交流。\n3. 报告：作为项目的总结和记录，用于汇报和交接。\n4. 程序：在github上建立相应地代码库，用于存储和管理自己的程序。由于可能存在多次修改的过程，版本控制是必不可少的。\n​\n***\n以上就是个人在知识管理方面的一些经验，仅供参考。同时这也算是一次知识输出地过程吧^_^。\n\n\n## 参考资料：\n\n[1]: 个人知识管理：为什么《你的知识需要管理》？ http://www.gtdstudy.com/?p=2275\n[2]: 月光博客：我的知识管理工具列表 http://www.williamlong.info/archives/3388.html \n[3]: 针式PKM如何帮助你解决个人知识管理中的常见问题？ http://www.cnblogs.com/pinpkm/archive/2009/03/23/1419995.html\n\n\n","slug":"pkm-tools","published":1,"updated":"2017-12-17T03:33:15.522Z","_id":"cjb6k4kvh0006ulepbrckujki","comments":1,"layout":"post","photos":[],"link":"","content":"<p>个人知识管理（Personal Knowledge Management）一般是指个人通过工具建立知识体系并不断完善，进行知识的收集、消化吸收和创新的过程[1]。</p>\n<p>细究来说，与知识相关的有三个层次的概念：信息、知识、智慧。</p>\n<ol>\n<li><strong>信息</strong>：信息是客观存在的，数据是信息的载体。</li>\n<li><strong>知识</strong>：消化吸收后的信息，它们是用来解决问题的工具，除此之外，多余的信息将成为噪音。</li>\n<li><strong>智慧</strong>：创新应用后的知识。<br>但很多时候我们并不严格区分这些概念，都统称为知识。</li>\n</ol>\n<p>下面就个人知识管理的三个过程知识搜集、知识整理和知识运用中的一些工具和方法，把我的一些体会和经验与大家分享。工具和方法本身并没有好坏之分，重要的是找到适合自己的。</p>\n<a id=\"more\"></a>\n<h1 id=\"一、知识搜集：\"><a href=\"#一、知识搜集：\" class=\"headerlink\" title=\"一、知识搜集：\"></a>一、知识搜集：</h1><p>按照是否有特定的搜集目标来区分，知识搜集可以分为针对性搜集和随机性收集。这两种搜集的原则是稍有区别的：</p>\n<ul>\n<li>针对性搜集的原则是：围绕着目标，花费较少的时间，得到价值较高的知识，同时能够便于知识整理和利用；</li>\n<li>随机性搜集的原则是：能够以最快的方式将得到的知识无失真地记录下来。</li>\n</ul>\n<p>我的思路是根据知识来源不同来使用工具，主力使用的工具包括evernote、wiz、zotero（其实还有很多类似的工具，这三个是我最常用的）。总的来说，我的知识收集来源主要包括以下几类：</p>\n<h2 id=\"1-生活点滴：\"><a href=\"#1-生活点滴：\" class=\"headerlink\" title=\"1. 生活点滴：\"></a>1. 生活点滴：</h2><p>现实世界中知识来源包括讲座会议、与人交流、个人感悟等。这是一种典型的随机性搜集，很多想法会在不经意间蹦出来。那么作为知识收集的神经末梢，要求其工具方便快捷，形式多样（文本、图像、音频、视频），能迅速同步到服务器上。</p>\n<p>早期我选用的是evernote，它方便简洁，有强大的手机客户端，可自动同步至服务器。后来主要切换到wiz，二者主体功能相差不大，主要是wiz类似资源管理器的设计更便于我后期整理。当然，对于一些敏感性的信息，随身带个笔记本是必不可少的。</p>\n<h2 id=\"2-书籍、期刊、文档：\"><a href=\"#2-书籍、期刊、文档：\" class=\"headerlink\" title=\"2. 书籍、期刊、文档：\"></a>2. 书籍、期刊、文档：</h2><p>知识收集中很重要的一块内容，尤其是对于专业研究，包括电子类和纸质类。这是一种典型的针对性搜集，通常是围绕某个领域或目标进行的。</p>\n<p>电子文档来源广泛、种类多样，搜集的时候最麻烦的莫过于存储文档的元数据，这里元数据指的是文档的标题、作者、日期等关键字段。zotero在这方面是比较强大的，它可以自动化地从多种源头（如IEEE、cnki等等）根据相关格式抓取并填充字段，使用鼠标拖动文件至该条目上就把文件附加于条目上，可以支持用元数据信息对文件自动重命名，还支持导出至word和bibtex中方便引用。与zotero类似的有EndNote、NoteExpress，但我感觉zotero要更加灵活一些（跨平台、小巧等）。</p>\n<p>在阅读纸质文档时经常需要做点读书笔记、画些思维导图。处理这类事情，M$ Office里面的OneNote还是不错的，后来因为它过于笨重而被我抛弃。从精简工具的角度出发，我还是使用wiz或evernote，并将产生的有关文件作为附件保存。</p>\n<h2 id=\"3-网络信息：\"><a href=\"#3-网络信息：\" class=\"headerlink\" title=\"3. 网络信息：\"></a>3. 网络信息：</h2><p>作为现在知识收集的一个重要来源，要求其工具能迅速从浏览器（或APP）中截取所需要的信息并保存，它的类型既有针对性的搜集也有随机性搜集。[2]中整理了一份较全的网络信息来源，稍作整理如下：</p>\n<ol>\n<li>搜索引擎类：谷歌、百度</li>\n<li>百科类：维基百科、百度百科</li>\n<li>问答社区类：知乎、百度知道、百度新知、新浪爱问</li>\n<li>文库类：百度文库、爱问共享资料、豆丁、其他专文库</li>\n<li>博客类：博客、微博、微信朋友圈</li>\n<li>信息评价类：豆瓣读书</li>\n</ol>\n<p>evernote和wiz在这方面都做得很不错，可以快速地从网页中截取所需要的信息。zotero则做得稍差，它仅简单地提供了保存网页的功能，并且无法选择需要保存的部分，所以，我觉得zotero还是更适合专业文献。至于这些信息来源的网址我通常都是用xmarks（Firefox的一个插件）进行分类保存，xmarks还会根据你收藏的网站给你推荐一些相近的优秀网站。</p>\n<h1 id=\"二、知识的整理\"><a href=\"#二、知识的整理\" class=\"headerlink\" title=\"二、知识的整理\"></a>二、知识的整理</h1><p>搜集之后必须要做整理，整理的目的是使给予知识一定的组织结构，以便于在使用时可以快速准确地找到所需要的东西。<br>如果不做整理，[3]中总结了常见问题：</p>\n<ol>\n<li>要用的时候找不到：这是由于搜索功能查找慢、平时到处乱放、只有模糊的印象等软件问题和个人习惯问题造成的。</li>\n<li>收集但未消化：好东西不想错过，收集多了反而不知要读哪些好了。</li>\n<li>随意复制和知识重复问题：复制很方便能解决当前问题，却为以后的归档、再次使用造成很大的麻烦。不知是哪个是最新的、哪个是有用的、哪个是没有用的？</li>\n<li>不知道该放哪个文件夹中：文件夹太多、文档有多个属性，常为放哪适合浪费时间，但又必须找地方放。</li>\n<li>相关的文档不知如何放好：相关的原文档、阅读心得、参考资料等，新建一个文件夹来放，又会造成文件夹过多</li>\n<li>资料越多越杂乱：第1年，建几个文件夹来管还好，2000多个，3000多个文档开始吃力，4000个多个文档时那是一个烦字</li>\n<li>没有及时归档的习惯：认为归档浪费时间，却不知因为没有很好的及时的归档，造成更多的时间的浪费</li>\n</ol>\n<p>那么，我的方法是首先区分消化过的和未消化的：</p>\n<ol>\n<li>对于没有消化过的知识则放在一个大的搜集箱（或者分不同领域的收集箱）中，作为待处理的对象；</li>\n<li>对于消化过的知识以有序的组织结构存放，目录树是一种最常用的方式。在此之上，对知识打上各种标签，这样就可以从多个维度过滤出所需要的知识。此外，还必须支持全文检索，这样可以进一步提高模糊知识定位能力。</li>\n</ol>\n<p>在知识整理上，原来使用过一段时间针式PKM，基本需求可以满足，但软件风格我不是很喜欢。目前觉得wiz还是能基本满足我的需求的。</p>\n<h1 id=\"三、知识的运用\"><a href=\"#三、知识的运用\" class=\"headerlink\" title=\"三、知识的运用\"></a>三、知识的运用</h1><p>知识只有运用才有意义，那么以一定的承载形式输出是一种最佳的方式。我的常见输出方式包括：博客、论文、报告、程序。</p>\n<ol>\n<li>博客：基本采用分享方式，wiz带有相关的发布插件，可以直接同步到博客上。</li>\n<li>论文：发表在正式的期刊或会议上，可以和同行进行交流。</li>\n<li>报告：作为项目的总结和记录，用于汇报和交接。</li>\n<li>程序：在github上建立相应地代码库，用于存储和管理自己的程序。由于可能存在多次修改的过程，版本控制是必不可少的。<br>​</li>\n</ol>\n<hr>\n<p>以上就是个人在知识管理方面的一些经验，仅供参考。同时这也算是一次知识输出地过程吧^_^。</p>\n<h2 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h2><p>[1]: 个人知识管理：为什么《你的知识需要管理》？ <a href=\"http://www.gtdstudy.com/?p=2275\" target=\"_blank\" rel=\"noopener\">http://www.gtdstudy.com/?p=2275</a><br>[2]: 月光博客：我的知识管理工具列表 <a href=\"http://www.williamlong.info/archives/3388.html\" target=\"_blank\" rel=\"noopener\">http://www.williamlong.info/archives/3388.html</a><br>[3]: 针式PKM如何帮助你解决个人知识管理中的常见问题？ <a href=\"http://www.cnblogs.com/pinpkm/archive/2009/03/23/1419995.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/pinpkm/archive/2009/03/23/1419995.html</a></p>\n","site":{"data":{}},"excerpt":"<p>个人知识管理（Personal Knowledge Management）一般是指个人通过工具建立知识体系并不断完善，进行知识的收集、消化吸收和创新的过程[1]。</p>\n<p>细究来说，与知识相关的有三个层次的概念：信息、知识、智慧。</p>\n<ol>\n<li><strong>信息</strong>：信息是客观存在的，数据是信息的载体。</li>\n<li><strong>知识</strong>：消化吸收后的信息，它们是用来解决问题的工具，除此之外，多余的信息将成为噪音。</li>\n<li><strong>智慧</strong>：创新应用后的知识。<br>但很多时候我们并不严格区分这些概念，都统称为知识。</li>\n</ol>\n<p>下面就个人知识管理的三个过程知识搜集、知识整理和知识运用中的一些工具和方法，把我的一些体会和经验与大家分享。工具和方法本身并没有好坏之分，重要的是找到适合自己的。</p>","more":"<h1 id=\"一、知识搜集：\"><a href=\"#一、知识搜集：\" class=\"headerlink\" title=\"一、知识搜集：\"></a>一、知识搜集：</h1><p>按照是否有特定的搜集目标来区分，知识搜集可以分为针对性搜集和随机性收集。这两种搜集的原则是稍有区别的：</p>\n<ul>\n<li>针对性搜集的原则是：围绕着目标，花费较少的时间，得到价值较高的知识，同时能够便于知识整理和利用；</li>\n<li>随机性搜集的原则是：能够以最快的方式将得到的知识无失真地记录下来。</li>\n</ul>\n<p>我的思路是根据知识来源不同来使用工具，主力使用的工具包括evernote、wiz、zotero（其实还有很多类似的工具，这三个是我最常用的）。总的来说，我的知识收集来源主要包括以下几类：</p>\n<h2 id=\"1-生活点滴：\"><a href=\"#1-生活点滴：\" class=\"headerlink\" title=\"1. 生活点滴：\"></a>1. 生活点滴：</h2><p>现实世界中知识来源包括讲座会议、与人交流、个人感悟等。这是一种典型的随机性搜集，很多想法会在不经意间蹦出来。那么作为知识收集的神经末梢，要求其工具方便快捷，形式多样（文本、图像、音频、视频），能迅速同步到服务器上。</p>\n<p>早期我选用的是evernote，它方便简洁，有强大的手机客户端，可自动同步至服务器。后来主要切换到wiz，二者主体功能相差不大，主要是wiz类似资源管理器的设计更便于我后期整理。当然，对于一些敏感性的信息，随身带个笔记本是必不可少的。</p>\n<h2 id=\"2-书籍、期刊、文档：\"><a href=\"#2-书籍、期刊、文档：\" class=\"headerlink\" title=\"2. 书籍、期刊、文档：\"></a>2. 书籍、期刊、文档：</h2><p>知识收集中很重要的一块内容，尤其是对于专业研究，包括电子类和纸质类。这是一种典型的针对性搜集，通常是围绕某个领域或目标进行的。</p>\n<p>电子文档来源广泛、种类多样，搜集的时候最麻烦的莫过于存储文档的元数据，这里元数据指的是文档的标题、作者、日期等关键字段。zotero在这方面是比较强大的，它可以自动化地从多种源头（如IEEE、cnki等等）根据相关格式抓取并填充字段，使用鼠标拖动文件至该条目上就把文件附加于条目上，可以支持用元数据信息对文件自动重命名，还支持导出至word和bibtex中方便引用。与zotero类似的有EndNote、NoteExpress，但我感觉zotero要更加灵活一些（跨平台、小巧等）。</p>\n<p>在阅读纸质文档时经常需要做点读书笔记、画些思维导图。处理这类事情，M$ Office里面的OneNote还是不错的，后来因为它过于笨重而被我抛弃。从精简工具的角度出发，我还是使用wiz或evernote，并将产生的有关文件作为附件保存。</p>\n<h2 id=\"3-网络信息：\"><a href=\"#3-网络信息：\" class=\"headerlink\" title=\"3. 网络信息：\"></a>3. 网络信息：</h2><p>作为现在知识收集的一个重要来源，要求其工具能迅速从浏览器（或APP）中截取所需要的信息并保存，它的类型既有针对性的搜集也有随机性搜集。[2]中整理了一份较全的网络信息来源，稍作整理如下：</p>\n<ol>\n<li>搜索引擎类：谷歌、百度</li>\n<li>百科类：维基百科、百度百科</li>\n<li>问答社区类：知乎、百度知道、百度新知、新浪爱问</li>\n<li>文库类：百度文库、爱问共享资料、豆丁、其他专文库</li>\n<li>博客类：博客、微博、微信朋友圈</li>\n<li>信息评价类：豆瓣读书</li>\n</ol>\n<p>evernote和wiz在这方面都做得很不错，可以快速地从网页中截取所需要的信息。zotero则做得稍差，它仅简单地提供了保存网页的功能，并且无法选择需要保存的部分，所以，我觉得zotero还是更适合专业文献。至于这些信息来源的网址我通常都是用xmarks（Firefox的一个插件）进行分类保存，xmarks还会根据你收藏的网站给你推荐一些相近的优秀网站。</p>\n<h1 id=\"二、知识的整理\"><a href=\"#二、知识的整理\" class=\"headerlink\" title=\"二、知识的整理\"></a>二、知识的整理</h1><p>搜集之后必须要做整理，整理的目的是使给予知识一定的组织结构，以便于在使用时可以快速准确地找到所需要的东西。<br>如果不做整理，[3]中总结了常见问题：</p>\n<ol>\n<li>要用的时候找不到：这是由于搜索功能查找慢、平时到处乱放、只有模糊的印象等软件问题和个人习惯问题造成的。</li>\n<li>收集但未消化：好东西不想错过，收集多了反而不知要读哪些好了。</li>\n<li>随意复制和知识重复问题：复制很方便能解决当前问题，却为以后的归档、再次使用造成很大的麻烦。不知是哪个是最新的、哪个是有用的、哪个是没有用的？</li>\n<li>不知道该放哪个文件夹中：文件夹太多、文档有多个属性，常为放哪适合浪费时间，但又必须找地方放。</li>\n<li>相关的文档不知如何放好：相关的原文档、阅读心得、参考资料等，新建一个文件夹来放，又会造成文件夹过多</li>\n<li>资料越多越杂乱：第1年，建几个文件夹来管还好，2000多个，3000多个文档开始吃力，4000个多个文档时那是一个烦字</li>\n<li>没有及时归档的习惯：认为归档浪费时间，却不知因为没有很好的及时的归档，造成更多的时间的浪费</li>\n</ol>\n<p>那么，我的方法是首先区分消化过的和未消化的：</p>\n<ol>\n<li>对于没有消化过的知识则放在一个大的搜集箱（或者分不同领域的收集箱）中，作为待处理的对象；</li>\n<li>对于消化过的知识以有序的组织结构存放，目录树是一种最常用的方式。在此之上，对知识打上各种标签，这样就可以从多个维度过滤出所需要的知识。此外，还必须支持全文检索，这样可以进一步提高模糊知识定位能力。</li>\n</ol>\n<p>在知识整理上，原来使用过一段时间针式PKM，基本需求可以满足，但软件风格我不是很喜欢。目前觉得wiz还是能基本满足我的需求的。</p>\n<h1 id=\"三、知识的运用\"><a href=\"#三、知识的运用\" class=\"headerlink\" title=\"三、知识的运用\"></a>三、知识的运用</h1><p>知识只有运用才有意义，那么以一定的承载形式输出是一种最佳的方式。我的常见输出方式包括：博客、论文、报告、程序。</p>\n<ol>\n<li>博客：基本采用分享方式，wiz带有相关的发布插件，可以直接同步到博客上。</li>\n<li>论文：发表在正式的期刊或会议上，可以和同行进行交流。</li>\n<li>报告：作为项目的总结和记录，用于汇报和交接。</li>\n<li>程序：在github上建立相应地代码库，用于存储和管理自己的程序。由于可能存在多次修改的过程，版本控制是必不可少的。<br>​</li>\n</ol>\n<hr>\n<p>以上就是个人在知识管理方面的一些经验，仅供参考。同时这也算是一次知识输出地过程吧^_^。</p>\n<h2 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h2><p>[1]: 个人知识管理：为什么《你的知识需要管理》？ <a href=\"http://www.gtdstudy.com/?p=2275\" target=\"_blank\" rel=\"noopener\">http://www.gtdstudy.com/?p=2275</a><br>[2]: 月光博客：我的知识管理工具列表 <a href=\"http://www.williamlong.info/archives/3388.html\" target=\"_blank\" rel=\"noopener\">http://www.williamlong.info/archives/3388.html</a><br>[3]: 针式PKM如何帮助你解决个人知识管理中的常见问题？ <a href=\"http://www.cnblogs.com/pinpkm/archive/2009/03/23/1419995.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/pinpkm/archive/2009/03/23/1419995.html</a></p>"},{"title":"手机数据分析的最新研究进展","date":"2016-08-21T15:38:07.000Z","_content":"\n> Selected from [*Blondel et al. A survey of results on mobile phone datasets analysis. EPJ Data Science. 2015, 4(10).*][1]\n\n> Translated by tau @ 2015.8.16\n\n## 5. 基于时空数据的人类移动行为分析\n手机数据中记录了大量用户的移动行为，目前已有许多项目对此开展了研究。大量的手机APP提供了基于位置的服务（LBS, Location Based Service）表明了时空数据挖掘上面还有很多潜在应用。本节中，我们主要关注那些在人类移动行为建模和分析上给出了新结论或新方法的研究。\n\n<!-- more -->\n\n### 5.1 个人移动行为规律\n这里用于分析的移动轨迹指的是基站编号序列。如图14所示，通过对100,000个用户超过6个月数据的分析，Gonzalez等人发现人类轨迹表现出非常强的时空规律性[97]。不同于以往将人类行为建模为随机行走或Levy飞行。他们的结果显示，人类在不同的活动半径下都表现出非常类似的行为模式。个人移动的规律性主要表现为在绝大部分时间里用户都活动在一小部分位置。如果进行归一化处理，并把零点移至合适的位置，所有用户的移动模式都可以用一个函数来描述。\n\n![图14 用户在某个位置的概率分布][2]\n\n这些结论得到了Song等人[98]的支持，他们也给出了数据表现出的行为模式与传统随机行走和Levy飞行模型的差别。此外，作者还给出了一种模型用来判断用户移动的倾向性。在他们的模型中，每当用户改变位置时，用户选择新位置的概率与已访问的位置数成反比，即$p_{new}=S^{-\\gamma}$，其中$S$是已访问的位置数，$\\gamma$是常数。当然，用户也可能直接访问以前已访问的地址。尽管他们的模型很简单，但是可以解释用户访问的地址数目随时间增长的变化规律，以及用户访问每个位置的概率分布。\n\n在另一项研究中，Csaji等人发现每个人经常访问地点的数目非常少[99]。这里经常访问的地点定义为用户有超过5%的电话由该基站位置发出。作者从Portugal手机数据集中随机选出100,000个用户，统计结果表明平均经常访问地点数为2.14，95%的用户经常访问的地点少于4个。\n\nBagrow等人则将经常访问地点聚类成为“栖息地”[100]。主要的“栖息地”代表了每天典型的移动行为，而次要的“栖息地”则代表了偶发的旅行行为。有趣的是，他们认为在每个“栖息地”的移动行为都表现出统一的变化模式，即相比于总体的移动行为，“栖息地”的活动半径通常都小很多。\n\n然而，这些研究结果都给出了移动行为具有一致性的和可预测性，但它们大多是基于发达国家的数据，而在发展中国家则还要考虑文化和语言的因素。Amini等人分析比较了葡萄牙和科特迪瓦人们的移动模式，并指出那些在发达国家数据中表现比较好的模型在科特迪瓦的数据中并不适用[101]。例如，他们指出科特迪瓦的上班族比葡萄牙的要移动更长的距离，且他们的移动模式要更加多样化。\n\n如果人的移动轨迹不是随机的，如果人经常会回到他以前到过的地方，那么人类的移动行为是否可以预测。Song等人[102]研究了这个问题，并给出了在已知位置访问历史的条件下，在多大程度上可以预测用户接下来的位置。他们采用用户位置序列的熵率来描述可预测性。在计算熵率时，除了要考虑每个位置的访问频率，还要考虑这些访问之间的时间相关性。如图15所示，他们的结果表明，对于某个特定用户，其移动的时间相关性将大大降低不确定性。利用Fano不等式，他们推断出只要有合适的算法，就可能平均意义上预测出用户93%的位置。最有意思的是，不仅平均意义上用户具有高可预测性，而且所有人类都具有很高的预测性。那些经常进行长距离旅行的可预测性并不比经常呆在某个地方的人要差，Song的结果表明所有人类的可预测性是一致的。\n\n![图15 用户位置序列的熵率][3]\n\n前面这些研究工作都集中在人类的移动行为的可预测性到底有多大，但他们并没有提供任何预测算法，也就是说这些研究仅具有理论价值。Calabrese等人则提出了人类位置的预测模型[103]。他们的算法不仅基于当前用户的历史移动行为，并且基于群体的移动行为，比如需要利用地理特征和POI（Point of Interest）。预测则是综合个体行为和群体行为的结果。个体行为采用的是一阶近似模型，利用Markov链来表示，其中，状态是用户访问的位置，从状态i转移到状态j的概率与数据中观测到的次数成正比。群体行为则用距离影响、POI和访问密度进行加权平均。在包含1百万个人4个月的数据集上，他们的模型在预测用户下一个位置上可以达到60%的准确率。\n\nCalabrese等人使用的Markov链方法是基于Park等人的研究[104]。他们指出，用户活动半径随时间的变化可以用Markov链转移矩阵的特征分解来解释。更准确地说，转移矩阵的特征向量包含了用户移动的信息。\n\n除了细粒度的移动行为，Simini等人研究了城市之间的移动行为，并提出了辐射模型[105]，突破了重力模型的一些局限。\n辐射模型是一种随机模型，城市$i$的人进入另一个城市$j$工作，其概率与城市$i$中的类似工作的数目相关。\n在给定城市中，工作数目也是随机变量，与城市的总人口相关。如果我们把城市 $i$ 和 $j$ 的距离定义为 $d_{ij}$ ，在两个城市之间平均移动次数与两个城市的人口相关（假设分别为 $m_i$ 和 $n_j$ ），还与 $d_{ij}$ 范围内的人口数目 $s_{ij}$ 相关。\n$$\n\\langle T_{ij} \\rangle=T_i \\frac{m_i n_j}{(m_i+s_{ij})(m_i+n_j+s_{ij})}\n$$\n其中，$T_i$是从城市$i$出发的移动次数。\n\n然而，辐射模型的有效性依赖于人口分布，这有可能在某些发展中国家很难获得。\n为了克服这些局限，Palchykov等人建议使用一种只用通信模式的模型[106]。\n该模型认为两个地方$i$和$j$的移动次数是两个地方距离$d_{ij}$，以及两个地方的通信密度的函数\n$$\nT_{ij}=k \\frac{c_{ij}}{d_{ij}^{\\beta}}\n$$\n其中，$k$是归一化常数。作者建议参数$\\beta$的取值为0.98或1.08，这取决于是考虑城市之间还是城市内部。\n\n移动行为乍看是随机运动，可是却遵守严格的规律。数学模型、预测算法和可视化工具（比如Martino的工作[107]）做了开拓性的研究，可以用来构建更好的人类移动模型，可以用来预测流行病爆发。从个体层面来看，这种规律看起来严格地主宰我们日常的行为，比如Eagle和Pentland表明用户移动模式的6个特征向量就足够描述90%的差异[108]。他们还观察到群体行为具有一致性，这将在下一节描述。\n\n### 5.2 群体行为的一致性\n这些数据集可以从更高的层面进行研究。更实际地说，这些大量的数据允许我们去观察和测量人类和环境的交互，还可以度量这些交互的一致性。\n\n最早得项目，比如Mobile Landscape[109]和Real Time Rome[110]已经开拓了这种研究。然而，Reades等人做了进一步研究[111]，他们利用基站信号作为社区的数字特征。他们指出类似的地点表现出类似的特征，基于基站天线记录的数据，可以对城市空间聚类。聚类表明了城市的划分，比如居民区、商业区、酒吧或公园。简短来说，这种技术可作为简单地人口普查方法，某些地方政府可能对此有兴趣。通过特征分解，有可能进一步获得空间使用的差异[112]。图16中给出了工作日中的四种主要特征向量。通过类似的方法，Csaji等人[99]用k-means聚类不同地方的活动模式，用来检测哪些地方表现出相同的呼叫模式，从而识别出哪些地方表现出显著的工作或家庭呼叫模式。\n\n![图16 工作日的4个特征向量][4]\n\n![图17 集群的周模式][5]\n\nKarikoski和Soikkeli研究了非常类似的问题，他们利用了Aalto大学OtaSizzle项目中收集的手机数据[113]。作者研究了是否不同环境条件下是否会引发不同的手机使用模式。从用户的移动轨迹中，他们将地点分为了几类：家、办公室、其它有意义的地方、其他地方（指的是路过的地方）。他们指出了在不同的位置环境下，用户有不同的手机使用模式。比如，当人们在家时语音通话通常更长且更频繁使用，而在办公室时则更常使用短信且通话时间也更短。在使用了相同数据的论文中，Jo等人研究了环境、时间与服务使用之间的关联，并给出了典型的手机服务使用模式[114]。作者进一步采用了k-means方法对典型的行为进行聚类，并将用户分为morning-type和evening-type。Trestian等人也研究了类似的问题，他们发现不同的地点对人们使用哪些手机应用也有影响[115]。Naboulsi等人采用类似的方法通过网络快照区分通话模式，网络快照指的是在给定时间窗口内的流量聚合[116]。他们通过对比通过网络的流量的大小和分布计算两个快照之间的相似性。他们进一步给出了典型的使用模式，并提出了一种方法检测网络中的异常行为。有趣的是，虽然方法是类似的，但Naboulsi等人的研究仅仅是基于天线到天线之间的流量，而与前面的研究使用的数据有所差异。\n\n除了对城市内部的分析外，Isaacman等人研究不同城市居住地的行为差异[117]。通过分析洛杉矶和纽约上万个居住地的移动行为，他们发现洛杉矶人们的平均移动距离是纽约的2倍。他们对于这个现象的解释是人群密度的不均和城市地形的差异。Noulas等人的工作中[53]，通过分析Foursquare位置数据，给出了不同城市的距离指数。距离指数反映了两个地方$i$和$j$关于可能的机会的个数（人口、POI）的差异。给定地理距离$r_{ij}$以及以$i$为圆心的机会个数分布，距离指数可以计算为\n\n$$\nrank(i,j)=\\int_0^{2\\pi}\\int_0^{r_{ij}} p_i(r,\\theta)r\\, \\mathrm{d} r \\mathrm{d}\\theta\n$$\n\n相比于人口密度小的城市，人口密度大的城市会在更短的物理距离中有更多的机会，因此人们移动的距离要更短。这里物理距离需要用指数距离来加权。在近期的研究中，Louail等人提出了另一种通过分析城市地理结构量化这种差别的方法，数据采用了31个西班牙大都市的热点或POI[118]。通过利用热点的地理结构，以及不同类型城市的不同和相似性，作者展示了人们之间的平均距离在一天中是变化的。他们将城市区分为单中心城市和多中心城市，单中心城市更依赖于土地利用，而多中心城市更注重土地混合使用。Trasarti等人也分析了人们密度的相关性，并在城市和国家层面上揭示了人口随时间变化的高度相关性[119]。\n\n如果在城市中检测热点和POI是可行的，那么是否可以进一步推断人们参与活动的类型。Jiang等人最初提出了一种方法[120]，先对人们待过的或经过的地方进行刻画，然后依据他们访问特定地点的时间来推断他们参与的活动。在许多情况下，对用户的移动行为进行建模可以从“起点-终点”矩阵开始，它描述了人们在特定时间段中在“起点-终点”地址之间移动次数[121-123]。通过给出哪些时空点和哪些活动对应，Alexander等人提出了预测“起点-终点”矩阵的方法。作者从Boston地区数据得到的结果和调查的结果是一致的。\n\n### 5.3 异常情况监测\n如果数据包含大量人口的时空数据，它既可以用来对群体的活动规律进行研究，也可以用来研究对群体对紧急情况的反应。许多近期的论文研究了这个问题。Candia等人最开始关注天线端的时序活动[93]。他们提出了一种基于个体行为波动的方法。从图18来看，在异常的情况下，用户将与他们平常的行为表现出很大得波动，但总体平均和普通行为接近。方差可以表示为\n$$\n\\sigma(a,t,T)=\\sqrt{\\frac{1}{N-1} \\sum_{i=1}^N \\left(n_i(a,t,T)-\\langle n(a,t,T) \\rangle \\right)^2}\n$$\n其中，地点为$a$，时间区间为$[t,t+T]$，个体行为$n_i(a,t,T)$，平均期望行为为$\\langle n(a,t,T) \\rangle$。与平常的方差比较，可以识别出那些用户表现异常的位置，以及那些可能在异常情况下在空间上聚集的地方。在异常情况下，人群的反应可以看做是时间和空间上的错乱。\n\n![图18 异常事件中活动的变化][6]\n\n在相关的论文中，Bagrow等人分析了在不同情况下人群的反应，比如爆炸、飞机失事或地震[124]。他们观察到，目击者和他们的邻居在事件后马上会表现出信息的扰动。这种反应通常表现在会与平常不经常联系的人的通话，而不是在经常联系节点的通话提升上。通过对信息传播路径的更详细的分析表明群体反应的有效性。在事件发生的数分钟内，从目击者开始的3-4度范围的人都被联系上。Gao等人进一步分析了这些动态变化[125]，在爆炸或飞机失事中相互通话的情况急剧增加，比如回拨。尽管有着不同的特性，同类型的行为扰动都在大规模事件中表现出来，比如音乐会或者游行[125,126]。Altshuler等人最近提出了一种“社会放大器”的方法用来检测异常行为，进而检测突发事件[127]。网络的胶合点是指那些具有高度数的节点，他们可以很好地连接剩余的网络，通过激活他们可以很快地通过社交网络扩散信息。利用这些特殊的节点作为社交放大器，作者指出只要分析那些和网络胶合点行为类似的节点就可以有效地检测整个网络的异常，从而发现突发事件。这种方法具有计算上的优势，因为它只需关注网络中的部分节点，这比监视整个网络要容易得多。\n\n![图19 突发事件中活动的变化][7]\n\n除了检测突发事件意外，Lu等人研究在灾难以后人群的移动行为是否可以预测，他们采用的是2010年海地地震前后的数据[128]。有趣的是，人们的移动轨迹的可预测性很高，且在地震后的三个月内逐步提高。作者的研究表明人们离开首都后的目的地和他们以前的移动模式高度相关。因此，只要稍加利用，手机数据可以用来监视突发事件，并预测自然灾害后人们的移动行为。这些结果对许多人道主义组织来说将非常有帮助，他们可以尝试通过大数据来挽救生命。2011年日本地震和海啸，许多研究小组共同发起项目，通过联合多种大数据源（比如GPS设备、手机、Twitter和Facebook）来分析将来如何通过这些数据挽救生命。Kryvasheyeu等人做了类似的研究，他们对2012年Sandy飓风期间的Twitter数据进行研究，通过测量朋友关系强度来给出警告[129]。这个领域的研究还需要继续，尤其是目前这么多数据源可以利用的条件下，如何协同使用这些数据源。\n\n### 5.4 移动行为和社会网络关系\n移动轨迹和社会交往通常会在一个数据集中出现，从而可以用来研究移动行为和社会网络关系。Calabrese等人的工作发现，相互联系的用户大多数在至少一年的时间内在物理空间中碰面一次[130]。而且，用户绝大多数在碰面之前或之后会相互联系。有趣的是，用户之间的碰面频率和他们联系的频率以及相隔的距离高度相关。\n\n是否可以进一步通过移动数据预测社会网络关系呢？Wang等人研究发现社交网络中未连接的节点，但是拓扑位置相近、移动模式类似的人容易建立连接。也就是说，通过移动相似性和拓扑距离，他们能够提高传统链路预测算法的性能，从而获得平均准确率75%和召回率66%[131]。类似地，Eagle等人在跨度4年的数据中发现，当从一个地方搬到另一个地方时，人们的社交网络发生剧烈地变化[132]。\n\nToole等人通过用户移动行为测量用户相似性，从而来区分不同的社会关系，并通过移动模式来区分不同的社交类型[133]。作者提出了一个移动模型，基于随机决策来决定用户是回到以前访问的地点或者访问新的地点。他们的模型在衡量移动模式和社交类型的相似性上能达到很好地准确率。\n\n## 7. 应用\n### 7.5 犯罪检测\n在犯罪分析中，警察经常需要调取犯罪嫌疑人的手机数据进行侦查，从而获取证据。这种数据分析不仅可以得到某个犯罪人的行为模式，还可以通过社交网络获得可能的犯罪组织。社交网络分析可以用来分析犯罪网络的结构，还可以用来度量成员之间的信息流动。Messina大学的研究组提出了一个“LogAnalysis”的工具箱用来分析CDR和关联的社交网络，用来检测犯罪组织[178,179]。这个工具箱可以得到一系列网络和节点的指标，例如节点中心度、聚集系数，还可以进一步给出网络的动态变化。作者添加了可视化工具用于分析，从而让分析专家可以很容易地定位更中心的节点、可视化紧密关联的集群和子群。\n\n这种类型的研究和前面基于CDR数据的研究有所不同，它不是对匿名数据进行研究从而得到人类的行为特征，而是研究围绕特定人的网络，或者是某个嫌疑人群体。\n\nBogomolov等人通过另一种方式，从手机数据中提取指标用来预测特定区域在下个月是否会成为犯罪热点[180]。利用动态更新的特征，比如该区域的人口、年龄、性别以及工作/居住/旅游群体等。在预测某个区域在下个月是否会成为犯罪热点，他们的模型可以达到70%的准确率。这种类型的研究可以被用来获得更好地反应时间，或者提前重点关注那些可能发生犯罪的区域。\n\n\n  [1]: http://oc7urqs4c.bkt.clouddn.com/mobile-data.pdf\n  [2]: http://oc7urqs4c.bkt.clouddn.com/mobile-data-14.png\n  [3]: http://oc7urqs4c.bkt.clouddn.com/mobile-data-15.png\n  [4]: http://oc7urqs4c.bkt.clouddn.com/mobile-data-16.png\n  [5]: http://oc7urqs4c.bkt.clouddn.com/mobile-data-17.png\n  [6]: http://oc7urqs4c.bkt.clouddn.com/mobile-data-18.png\n  [7]: http://oc7urqs4c.bkt.clouddn.com/mobile-data-19.png\n\n\n","source":"_posts/2016-08-21-mobile-data.md","raw":"---\ntitle: 手机数据分析的最新研究进展\ndate: 2016-08-21 23:38:07\ncategories: 看点文章\ntags:\n  - mobilephone\n---\n\n> Selected from [*Blondel et al. A survey of results on mobile phone datasets analysis. EPJ Data Science. 2015, 4(10).*][1]\n\n> Translated by tau @ 2015.8.16\n\n## 5. 基于时空数据的人类移动行为分析\n手机数据中记录了大量用户的移动行为，目前已有许多项目对此开展了研究。大量的手机APP提供了基于位置的服务（LBS, Location Based Service）表明了时空数据挖掘上面还有很多潜在应用。本节中，我们主要关注那些在人类移动行为建模和分析上给出了新结论或新方法的研究。\n\n<!-- more -->\n\n### 5.1 个人移动行为规律\n这里用于分析的移动轨迹指的是基站编号序列。如图14所示，通过对100,000个用户超过6个月数据的分析，Gonzalez等人发现人类轨迹表现出非常强的时空规律性[97]。不同于以往将人类行为建模为随机行走或Levy飞行。他们的结果显示，人类在不同的活动半径下都表现出非常类似的行为模式。个人移动的规律性主要表现为在绝大部分时间里用户都活动在一小部分位置。如果进行归一化处理，并把零点移至合适的位置，所有用户的移动模式都可以用一个函数来描述。\n\n![图14 用户在某个位置的概率分布][2]\n\n这些结论得到了Song等人[98]的支持，他们也给出了数据表现出的行为模式与传统随机行走和Levy飞行模型的差别。此外，作者还给出了一种模型用来判断用户移动的倾向性。在他们的模型中，每当用户改变位置时，用户选择新位置的概率与已访问的位置数成反比，即$p_{new}=S^{-\\gamma}$，其中$S$是已访问的位置数，$\\gamma$是常数。当然，用户也可能直接访问以前已访问的地址。尽管他们的模型很简单，但是可以解释用户访问的地址数目随时间增长的变化规律，以及用户访问每个位置的概率分布。\n\n在另一项研究中，Csaji等人发现每个人经常访问地点的数目非常少[99]。这里经常访问的地点定义为用户有超过5%的电话由该基站位置发出。作者从Portugal手机数据集中随机选出100,000个用户，统计结果表明平均经常访问地点数为2.14，95%的用户经常访问的地点少于4个。\n\nBagrow等人则将经常访问地点聚类成为“栖息地”[100]。主要的“栖息地”代表了每天典型的移动行为，而次要的“栖息地”则代表了偶发的旅行行为。有趣的是，他们认为在每个“栖息地”的移动行为都表现出统一的变化模式，即相比于总体的移动行为，“栖息地”的活动半径通常都小很多。\n\n然而，这些研究结果都给出了移动行为具有一致性的和可预测性，但它们大多是基于发达国家的数据，而在发展中国家则还要考虑文化和语言的因素。Amini等人分析比较了葡萄牙和科特迪瓦人们的移动模式，并指出那些在发达国家数据中表现比较好的模型在科特迪瓦的数据中并不适用[101]。例如，他们指出科特迪瓦的上班族比葡萄牙的要移动更长的距离，且他们的移动模式要更加多样化。\n\n如果人的移动轨迹不是随机的，如果人经常会回到他以前到过的地方，那么人类的移动行为是否可以预测。Song等人[102]研究了这个问题，并给出了在已知位置访问历史的条件下，在多大程度上可以预测用户接下来的位置。他们采用用户位置序列的熵率来描述可预测性。在计算熵率时，除了要考虑每个位置的访问频率，还要考虑这些访问之间的时间相关性。如图15所示，他们的结果表明，对于某个特定用户，其移动的时间相关性将大大降低不确定性。利用Fano不等式，他们推断出只要有合适的算法，就可能平均意义上预测出用户93%的位置。最有意思的是，不仅平均意义上用户具有高可预测性，而且所有人类都具有很高的预测性。那些经常进行长距离旅行的可预测性并不比经常呆在某个地方的人要差，Song的结果表明所有人类的可预测性是一致的。\n\n![图15 用户位置序列的熵率][3]\n\n前面这些研究工作都集中在人类的移动行为的可预测性到底有多大，但他们并没有提供任何预测算法，也就是说这些研究仅具有理论价值。Calabrese等人则提出了人类位置的预测模型[103]。他们的算法不仅基于当前用户的历史移动行为，并且基于群体的移动行为，比如需要利用地理特征和POI（Point of Interest）。预测则是综合个体行为和群体行为的结果。个体行为采用的是一阶近似模型，利用Markov链来表示，其中，状态是用户访问的位置，从状态i转移到状态j的概率与数据中观测到的次数成正比。群体行为则用距离影响、POI和访问密度进行加权平均。在包含1百万个人4个月的数据集上，他们的模型在预测用户下一个位置上可以达到60%的准确率。\n\nCalabrese等人使用的Markov链方法是基于Park等人的研究[104]。他们指出，用户活动半径随时间的变化可以用Markov链转移矩阵的特征分解来解释。更准确地说，转移矩阵的特征向量包含了用户移动的信息。\n\n除了细粒度的移动行为，Simini等人研究了城市之间的移动行为，并提出了辐射模型[105]，突破了重力模型的一些局限。\n辐射模型是一种随机模型，城市$i$的人进入另一个城市$j$工作，其概率与城市$i$中的类似工作的数目相关。\n在给定城市中，工作数目也是随机变量，与城市的总人口相关。如果我们把城市 $i$ 和 $j$ 的距离定义为 $d_{ij}$ ，在两个城市之间平均移动次数与两个城市的人口相关（假设分别为 $m_i$ 和 $n_j$ ），还与 $d_{ij}$ 范围内的人口数目 $s_{ij}$ 相关。\n$$\n\\langle T_{ij} \\rangle=T_i \\frac{m_i n_j}{(m_i+s_{ij})(m_i+n_j+s_{ij})}\n$$\n其中，$T_i$是从城市$i$出发的移动次数。\n\n然而，辐射模型的有效性依赖于人口分布，这有可能在某些发展中国家很难获得。\n为了克服这些局限，Palchykov等人建议使用一种只用通信模式的模型[106]。\n该模型认为两个地方$i$和$j$的移动次数是两个地方距离$d_{ij}$，以及两个地方的通信密度的函数\n$$\nT_{ij}=k \\frac{c_{ij}}{d_{ij}^{\\beta}}\n$$\n其中，$k$是归一化常数。作者建议参数$\\beta$的取值为0.98或1.08，这取决于是考虑城市之间还是城市内部。\n\n移动行为乍看是随机运动，可是却遵守严格的规律。数学模型、预测算法和可视化工具（比如Martino的工作[107]）做了开拓性的研究，可以用来构建更好的人类移动模型，可以用来预测流行病爆发。从个体层面来看，这种规律看起来严格地主宰我们日常的行为，比如Eagle和Pentland表明用户移动模式的6个特征向量就足够描述90%的差异[108]。他们还观察到群体行为具有一致性，这将在下一节描述。\n\n### 5.2 群体行为的一致性\n这些数据集可以从更高的层面进行研究。更实际地说，这些大量的数据允许我们去观察和测量人类和环境的交互，还可以度量这些交互的一致性。\n\n最早得项目，比如Mobile Landscape[109]和Real Time Rome[110]已经开拓了这种研究。然而，Reades等人做了进一步研究[111]，他们利用基站信号作为社区的数字特征。他们指出类似的地点表现出类似的特征，基于基站天线记录的数据，可以对城市空间聚类。聚类表明了城市的划分，比如居民区、商业区、酒吧或公园。简短来说，这种技术可作为简单地人口普查方法，某些地方政府可能对此有兴趣。通过特征分解，有可能进一步获得空间使用的差异[112]。图16中给出了工作日中的四种主要特征向量。通过类似的方法，Csaji等人[99]用k-means聚类不同地方的活动模式，用来检测哪些地方表现出相同的呼叫模式，从而识别出哪些地方表现出显著的工作或家庭呼叫模式。\n\n![图16 工作日的4个特征向量][4]\n\n![图17 集群的周模式][5]\n\nKarikoski和Soikkeli研究了非常类似的问题，他们利用了Aalto大学OtaSizzle项目中收集的手机数据[113]。作者研究了是否不同环境条件下是否会引发不同的手机使用模式。从用户的移动轨迹中，他们将地点分为了几类：家、办公室、其它有意义的地方、其他地方（指的是路过的地方）。他们指出了在不同的位置环境下，用户有不同的手机使用模式。比如，当人们在家时语音通话通常更长且更频繁使用，而在办公室时则更常使用短信且通话时间也更短。在使用了相同数据的论文中，Jo等人研究了环境、时间与服务使用之间的关联，并给出了典型的手机服务使用模式[114]。作者进一步采用了k-means方法对典型的行为进行聚类，并将用户分为morning-type和evening-type。Trestian等人也研究了类似的问题，他们发现不同的地点对人们使用哪些手机应用也有影响[115]。Naboulsi等人采用类似的方法通过网络快照区分通话模式，网络快照指的是在给定时间窗口内的流量聚合[116]。他们通过对比通过网络的流量的大小和分布计算两个快照之间的相似性。他们进一步给出了典型的使用模式，并提出了一种方法检测网络中的异常行为。有趣的是，虽然方法是类似的，但Naboulsi等人的研究仅仅是基于天线到天线之间的流量，而与前面的研究使用的数据有所差异。\n\n除了对城市内部的分析外，Isaacman等人研究不同城市居住地的行为差异[117]。通过分析洛杉矶和纽约上万个居住地的移动行为，他们发现洛杉矶人们的平均移动距离是纽约的2倍。他们对于这个现象的解释是人群密度的不均和城市地形的差异。Noulas等人的工作中[53]，通过分析Foursquare位置数据，给出了不同城市的距离指数。距离指数反映了两个地方$i$和$j$关于可能的机会的个数（人口、POI）的差异。给定地理距离$r_{ij}$以及以$i$为圆心的机会个数分布，距离指数可以计算为\n\n$$\nrank(i,j)=\\int_0^{2\\pi}\\int_0^{r_{ij}} p_i(r,\\theta)r\\, \\mathrm{d} r \\mathrm{d}\\theta\n$$\n\n相比于人口密度小的城市，人口密度大的城市会在更短的物理距离中有更多的机会，因此人们移动的距离要更短。这里物理距离需要用指数距离来加权。在近期的研究中，Louail等人提出了另一种通过分析城市地理结构量化这种差别的方法，数据采用了31个西班牙大都市的热点或POI[118]。通过利用热点的地理结构，以及不同类型城市的不同和相似性，作者展示了人们之间的平均距离在一天中是变化的。他们将城市区分为单中心城市和多中心城市，单中心城市更依赖于土地利用，而多中心城市更注重土地混合使用。Trasarti等人也分析了人们密度的相关性，并在城市和国家层面上揭示了人口随时间变化的高度相关性[119]。\n\n如果在城市中检测热点和POI是可行的，那么是否可以进一步推断人们参与活动的类型。Jiang等人最初提出了一种方法[120]，先对人们待过的或经过的地方进行刻画，然后依据他们访问特定地点的时间来推断他们参与的活动。在许多情况下，对用户的移动行为进行建模可以从“起点-终点”矩阵开始，它描述了人们在特定时间段中在“起点-终点”地址之间移动次数[121-123]。通过给出哪些时空点和哪些活动对应，Alexander等人提出了预测“起点-终点”矩阵的方法。作者从Boston地区数据得到的结果和调查的结果是一致的。\n\n### 5.3 异常情况监测\n如果数据包含大量人口的时空数据，它既可以用来对群体的活动规律进行研究，也可以用来研究对群体对紧急情况的反应。许多近期的论文研究了这个问题。Candia等人最开始关注天线端的时序活动[93]。他们提出了一种基于个体行为波动的方法。从图18来看，在异常的情况下，用户将与他们平常的行为表现出很大得波动，但总体平均和普通行为接近。方差可以表示为\n$$\n\\sigma(a,t,T)=\\sqrt{\\frac{1}{N-1} \\sum_{i=1}^N \\left(n_i(a,t,T)-\\langle n(a,t,T) \\rangle \\right)^2}\n$$\n其中，地点为$a$，时间区间为$[t,t+T]$，个体行为$n_i(a,t,T)$，平均期望行为为$\\langle n(a,t,T) \\rangle$。与平常的方差比较，可以识别出那些用户表现异常的位置，以及那些可能在异常情况下在空间上聚集的地方。在异常情况下，人群的反应可以看做是时间和空间上的错乱。\n\n![图18 异常事件中活动的变化][6]\n\n在相关的论文中，Bagrow等人分析了在不同情况下人群的反应，比如爆炸、飞机失事或地震[124]。他们观察到，目击者和他们的邻居在事件后马上会表现出信息的扰动。这种反应通常表现在会与平常不经常联系的人的通话，而不是在经常联系节点的通话提升上。通过对信息传播路径的更详细的分析表明群体反应的有效性。在事件发生的数分钟内，从目击者开始的3-4度范围的人都被联系上。Gao等人进一步分析了这些动态变化[125]，在爆炸或飞机失事中相互通话的情况急剧增加，比如回拨。尽管有着不同的特性，同类型的行为扰动都在大规模事件中表现出来，比如音乐会或者游行[125,126]。Altshuler等人最近提出了一种“社会放大器”的方法用来检测异常行为，进而检测突发事件[127]。网络的胶合点是指那些具有高度数的节点，他们可以很好地连接剩余的网络，通过激活他们可以很快地通过社交网络扩散信息。利用这些特殊的节点作为社交放大器，作者指出只要分析那些和网络胶合点行为类似的节点就可以有效地检测整个网络的异常，从而发现突发事件。这种方法具有计算上的优势，因为它只需关注网络中的部分节点，这比监视整个网络要容易得多。\n\n![图19 突发事件中活动的变化][7]\n\n除了检测突发事件意外，Lu等人研究在灾难以后人群的移动行为是否可以预测，他们采用的是2010年海地地震前后的数据[128]。有趣的是，人们的移动轨迹的可预测性很高，且在地震后的三个月内逐步提高。作者的研究表明人们离开首都后的目的地和他们以前的移动模式高度相关。因此，只要稍加利用，手机数据可以用来监视突发事件，并预测自然灾害后人们的移动行为。这些结果对许多人道主义组织来说将非常有帮助，他们可以尝试通过大数据来挽救生命。2011年日本地震和海啸，许多研究小组共同发起项目，通过联合多种大数据源（比如GPS设备、手机、Twitter和Facebook）来分析将来如何通过这些数据挽救生命。Kryvasheyeu等人做了类似的研究，他们对2012年Sandy飓风期间的Twitter数据进行研究，通过测量朋友关系强度来给出警告[129]。这个领域的研究还需要继续，尤其是目前这么多数据源可以利用的条件下，如何协同使用这些数据源。\n\n### 5.4 移动行为和社会网络关系\n移动轨迹和社会交往通常会在一个数据集中出现，从而可以用来研究移动行为和社会网络关系。Calabrese等人的工作发现，相互联系的用户大多数在至少一年的时间内在物理空间中碰面一次[130]。而且，用户绝大多数在碰面之前或之后会相互联系。有趣的是，用户之间的碰面频率和他们联系的频率以及相隔的距离高度相关。\n\n是否可以进一步通过移动数据预测社会网络关系呢？Wang等人研究发现社交网络中未连接的节点，但是拓扑位置相近、移动模式类似的人容易建立连接。也就是说，通过移动相似性和拓扑距离，他们能够提高传统链路预测算法的性能，从而获得平均准确率75%和召回率66%[131]。类似地，Eagle等人在跨度4年的数据中发现，当从一个地方搬到另一个地方时，人们的社交网络发生剧烈地变化[132]。\n\nToole等人通过用户移动行为测量用户相似性，从而来区分不同的社会关系，并通过移动模式来区分不同的社交类型[133]。作者提出了一个移动模型，基于随机决策来决定用户是回到以前访问的地点或者访问新的地点。他们的模型在衡量移动模式和社交类型的相似性上能达到很好地准确率。\n\n## 7. 应用\n### 7.5 犯罪检测\n在犯罪分析中，警察经常需要调取犯罪嫌疑人的手机数据进行侦查，从而获取证据。这种数据分析不仅可以得到某个犯罪人的行为模式，还可以通过社交网络获得可能的犯罪组织。社交网络分析可以用来分析犯罪网络的结构，还可以用来度量成员之间的信息流动。Messina大学的研究组提出了一个“LogAnalysis”的工具箱用来分析CDR和关联的社交网络，用来检测犯罪组织[178,179]。这个工具箱可以得到一系列网络和节点的指标，例如节点中心度、聚集系数，还可以进一步给出网络的动态变化。作者添加了可视化工具用于分析，从而让分析专家可以很容易地定位更中心的节点、可视化紧密关联的集群和子群。\n\n这种类型的研究和前面基于CDR数据的研究有所不同，它不是对匿名数据进行研究从而得到人类的行为特征，而是研究围绕特定人的网络，或者是某个嫌疑人群体。\n\nBogomolov等人通过另一种方式，从手机数据中提取指标用来预测特定区域在下个月是否会成为犯罪热点[180]。利用动态更新的特征，比如该区域的人口、年龄、性别以及工作/居住/旅游群体等。在预测某个区域在下个月是否会成为犯罪热点，他们的模型可以达到70%的准确率。这种类型的研究可以被用来获得更好地反应时间，或者提前重点关注那些可能发生犯罪的区域。\n\n\n  [1]: http://oc7urqs4c.bkt.clouddn.com/mobile-data.pdf\n  [2]: http://oc7urqs4c.bkt.clouddn.com/mobile-data-14.png\n  [3]: http://oc7urqs4c.bkt.clouddn.com/mobile-data-15.png\n  [4]: http://oc7urqs4c.bkt.clouddn.com/mobile-data-16.png\n  [5]: http://oc7urqs4c.bkt.clouddn.com/mobile-data-17.png\n  [6]: http://oc7urqs4c.bkt.clouddn.com/mobile-data-18.png\n  [7]: http://oc7urqs4c.bkt.clouddn.com/mobile-data-19.png\n\n\n","slug":"mobile-data","published":1,"updated":"2017-12-17T03:31:50.649Z","_id":"cjb6k4kvj0009uleptikeifji","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>Selected from <a href=\"http://oc7urqs4c.bkt.clouddn.com/mobile-data.pdf\" target=\"_blank\" rel=\"noopener\"><em>Blondel et al. A survey of results on mobile phone datasets analysis. EPJ Data Science. 2015, 4(10).</em></a></p>\n<p>Translated by tau @ 2015.8.16</p>\n</blockquote>\n<h2 id=\"5-基于时空数据的人类移动行为分析\"><a href=\"#5-基于时空数据的人类移动行为分析\" class=\"headerlink\" title=\"5. 基于时空数据的人类移动行为分析\"></a>5. 基于时空数据的人类移动行为分析</h2><p>手机数据中记录了大量用户的移动行为，目前已有许多项目对此开展了研究。大量的手机APP提供了基于位置的服务（LBS, Location Based Service）表明了时空数据挖掘上面还有很多潜在应用。本节中，我们主要关注那些在人类移动行为建模和分析上给出了新结论或新方法的研究。</p>\n<a id=\"more\"></a>\n<h3 id=\"5-1-个人移动行为规律\"><a href=\"#5-1-个人移动行为规律\" class=\"headerlink\" title=\"5.1 个人移动行为规律\"></a>5.1 个人移动行为规律</h3><p>这里用于分析的移动轨迹指的是基站编号序列。如图14所示，通过对100,000个用户超过6个月数据的分析，Gonzalez等人发现人类轨迹表现出非常强的时空规律性[97]。不同于以往将人类行为建模为随机行走或Levy飞行。他们的结果显示，人类在不同的活动半径下都表现出非常类似的行为模式。个人移动的规律性主要表现为在绝大部分时间里用户都活动在一小部分位置。如果进行归一化处理，并把零点移至合适的位置，所有用户的移动模式都可以用一个函数来描述。</p>\n<p><img src=\"http://oc7urqs4c.bkt.clouddn.com/mobile-data-14.png\" alt=\"图14 用户在某个位置的概率分布\"></p>\n<p>这些结论得到了Song等人[98]的支持，他们也给出了数据表现出的行为模式与传统随机行走和Levy飞行模型的差别。此外，作者还给出了一种模型用来判断用户移动的倾向性。在他们的模型中，每当用户改变位置时，用户选择新位置的概率与已访问的位置数成反比，即$p_{new}=S^{-\\gamma}$，其中$S$是已访问的位置数，$\\gamma$是常数。当然，用户也可能直接访问以前已访问的地址。尽管他们的模型很简单，但是可以解释用户访问的地址数目随时间增长的变化规律，以及用户访问每个位置的概率分布。</p>\n<p>在另一项研究中，Csaji等人发现每个人经常访问地点的数目非常少[99]。这里经常访问的地点定义为用户有超过5%的电话由该基站位置发出。作者从Portugal手机数据集中随机选出100,000个用户，统计结果表明平均经常访问地点数为2.14，95%的用户经常访问的地点少于4个。</p>\n<p>Bagrow等人则将经常访问地点聚类成为“栖息地”[100]。主要的“栖息地”代表了每天典型的移动行为，而次要的“栖息地”则代表了偶发的旅行行为。有趣的是，他们认为在每个“栖息地”的移动行为都表现出统一的变化模式，即相比于总体的移动行为，“栖息地”的活动半径通常都小很多。</p>\n<p>然而，这些研究结果都给出了移动行为具有一致性的和可预测性，但它们大多是基于发达国家的数据，而在发展中国家则还要考虑文化和语言的因素。Amini等人分析比较了葡萄牙和科特迪瓦人们的移动模式，并指出那些在发达国家数据中表现比较好的模型在科特迪瓦的数据中并不适用[101]。例如，他们指出科特迪瓦的上班族比葡萄牙的要移动更长的距离，且他们的移动模式要更加多样化。</p>\n<p>如果人的移动轨迹不是随机的，如果人经常会回到他以前到过的地方，那么人类的移动行为是否可以预测。Song等人[102]研究了这个问题，并给出了在已知位置访问历史的条件下，在多大程度上可以预测用户接下来的位置。他们采用用户位置序列的熵率来描述可预测性。在计算熵率时，除了要考虑每个位置的访问频率，还要考虑这些访问之间的时间相关性。如图15所示，他们的结果表明，对于某个特定用户，其移动的时间相关性将大大降低不确定性。利用Fano不等式，他们推断出只要有合适的算法，就可能平均意义上预测出用户93%的位置。最有意思的是，不仅平均意义上用户具有高可预测性，而且所有人类都具有很高的预测性。那些经常进行长距离旅行的可预测性并不比经常呆在某个地方的人要差，Song的结果表明所有人类的可预测性是一致的。</p>\n<p><img src=\"http://oc7urqs4c.bkt.clouddn.com/mobile-data-15.png\" alt=\"图15 用户位置序列的熵率\"></p>\n<p>前面这些研究工作都集中在人类的移动行为的可预测性到底有多大，但他们并没有提供任何预测算法，也就是说这些研究仅具有理论价值。Calabrese等人则提出了人类位置的预测模型[103]。他们的算法不仅基于当前用户的历史移动行为，并且基于群体的移动行为，比如需要利用地理特征和POI（Point of Interest）。预测则是综合个体行为和群体行为的结果。个体行为采用的是一阶近似模型，利用Markov链来表示，其中，状态是用户访问的位置，从状态i转移到状态j的概率与数据中观测到的次数成正比。群体行为则用距离影响、POI和访问密度进行加权平均。在包含1百万个人4个月的数据集上，他们的模型在预测用户下一个位置上可以达到60%的准确率。</p>\n<p>Calabrese等人使用的Markov链方法是基于Park等人的研究[104]。他们指出，用户活动半径随时间的变化可以用Markov链转移矩阵的特征分解来解释。更准确地说，转移矩阵的特征向量包含了用户移动的信息。</p>\n<p>除了细粒度的移动行为，Simini等人研究了城市之间的移动行为，并提出了辐射模型[105]，突破了重力模型的一些局限。<br>辐射模型是一种随机模型，城市$i$的人进入另一个城市$j$工作，其概率与城市$i$中的类似工作的数目相关。<br>在给定城市中，工作数目也是随机变量，与城市的总人口相关。如果我们把城市 $i$ 和 $j$ 的距离定义为 $d_{ij}$ ，在两个城市之间平均移动次数与两个城市的人口相关（假设分别为 $m_i$ 和 $n<em>j$ ），还与 $d</em>{ij}$ 范围内的人口数目 $s<em>{ij}$ 相关。<br>$$<br>\\langle T</em>{ij} \\rangle=T_i \\frac{m_i n_j}{(m<em>i+s</em>{ij})(m_i+n<em>j+s</em>{ij})}<br>$$<br>其中，$T_i$是从城市$i$出发的移动次数。</p>\n<p>然而，辐射模型的有效性依赖于人口分布，这有可能在某些发展中国家很难获得。<br>为了克服这些局限，Palchykov等人建议使用一种只用通信模式的模型[106]。<br>该模型认为两个地方$i$和$j$的移动次数是两个地方距离$d<em>{ij}$，以及两个地方的通信密度的函数<br>$$<br>T</em>{ij}=k \\frac{c<em>{ij}}{d</em>{ij}^{\\beta}}<br>$$<br>其中，$k$是归一化常数。作者建议参数$\\beta$的取值为0.98或1.08，这取决于是考虑城市之间还是城市内部。</p>\n<p>移动行为乍看是随机运动，可是却遵守严格的规律。数学模型、预测算法和可视化工具（比如Martino的工作[107]）做了开拓性的研究，可以用来构建更好的人类移动模型，可以用来预测流行病爆发。从个体层面来看，这种规律看起来严格地主宰我们日常的行为，比如Eagle和Pentland表明用户移动模式的6个特征向量就足够描述90%的差异[108]。他们还观察到群体行为具有一致性，这将在下一节描述。</p>\n<h3 id=\"5-2-群体行为的一致性\"><a href=\"#5-2-群体行为的一致性\" class=\"headerlink\" title=\"5.2 群体行为的一致性\"></a>5.2 群体行为的一致性</h3><p>这些数据集可以从更高的层面进行研究。更实际地说，这些大量的数据允许我们去观察和测量人类和环境的交互，还可以度量这些交互的一致性。</p>\n<p>最早得项目，比如Mobile Landscape[109]和Real Time Rome[110]已经开拓了这种研究。然而，Reades等人做了进一步研究[111]，他们利用基站信号作为社区的数字特征。他们指出类似的地点表现出类似的特征，基于基站天线记录的数据，可以对城市空间聚类。聚类表明了城市的划分，比如居民区、商业区、酒吧或公园。简短来说，这种技术可作为简单地人口普查方法，某些地方政府可能对此有兴趣。通过特征分解，有可能进一步获得空间使用的差异[112]。图16中给出了工作日中的四种主要特征向量。通过类似的方法，Csaji等人[99]用k-means聚类不同地方的活动模式，用来检测哪些地方表现出相同的呼叫模式，从而识别出哪些地方表现出显著的工作或家庭呼叫模式。</p>\n<p><img src=\"http://oc7urqs4c.bkt.clouddn.com/mobile-data-16.png\" alt=\"图16 工作日的4个特征向量\"></p>\n<p><img src=\"http://oc7urqs4c.bkt.clouddn.com/mobile-data-17.png\" alt=\"图17 集群的周模式\"></p>\n<p>Karikoski和Soikkeli研究了非常类似的问题，他们利用了Aalto大学OtaSizzle项目中收集的手机数据[113]。作者研究了是否不同环境条件下是否会引发不同的手机使用模式。从用户的移动轨迹中，他们将地点分为了几类：家、办公室、其它有意义的地方、其他地方（指的是路过的地方）。他们指出了在不同的位置环境下，用户有不同的手机使用模式。比如，当人们在家时语音通话通常更长且更频繁使用，而在办公室时则更常使用短信且通话时间也更短。在使用了相同数据的论文中，Jo等人研究了环境、时间与服务使用之间的关联，并给出了典型的手机服务使用模式[114]。作者进一步采用了k-means方法对典型的行为进行聚类，并将用户分为morning-type和evening-type。Trestian等人也研究了类似的问题，他们发现不同的地点对人们使用哪些手机应用也有影响[115]。Naboulsi等人采用类似的方法通过网络快照区分通话模式，网络快照指的是在给定时间窗口内的流量聚合[116]。他们通过对比通过网络的流量的大小和分布计算两个快照之间的相似性。他们进一步给出了典型的使用模式，并提出了一种方法检测网络中的异常行为。有趣的是，虽然方法是类似的，但Naboulsi等人的研究仅仅是基于天线到天线之间的流量，而与前面的研究使用的数据有所差异。</p>\n<p>除了对城市内部的分析外，Isaacman等人研究不同城市居住地的行为差异[117]。通过分析洛杉矶和纽约上万个居住地的移动行为，他们发现洛杉矶人们的平均移动距离是纽约的2倍。他们对于这个现象的解释是人群密度的不均和城市地形的差异。Noulas等人的工作中[53]，通过分析Foursquare位置数据，给出了不同城市的距离指数。距离指数反映了两个地方$i$和$j$关于可能的机会的个数（人口、POI）的差异。给定地理距离$r_{ij}$以及以$i$为圆心的机会个数分布，距离指数可以计算为</p>\n<p>$$<br>rank(i,j)=\\int_0^{2\\pi}\\int<em>0^{r</em>{ij}} p_i(r,\\theta)r\\, \\mathrm{d} r \\mathrm{d}\\theta<br>$$</p>\n<p>相比于人口密度小的城市，人口密度大的城市会在更短的物理距离中有更多的机会，因此人们移动的距离要更短。这里物理距离需要用指数距离来加权。在近期的研究中，Louail等人提出了另一种通过分析城市地理结构量化这种差别的方法，数据采用了31个西班牙大都市的热点或POI[118]。通过利用热点的地理结构，以及不同类型城市的不同和相似性，作者展示了人们之间的平均距离在一天中是变化的。他们将城市区分为单中心城市和多中心城市，单中心城市更依赖于土地利用，而多中心城市更注重土地混合使用。Trasarti等人也分析了人们密度的相关性，并在城市和国家层面上揭示了人口随时间变化的高度相关性[119]。</p>\n<p>如果在城市中检测热点和POI是可行的，那么是否可以进一步推断人们参与活动的类型。Jiang等人最初提出了一种方法[120]，先对人们待过的或经过的地方进行刻画，然后依据他们访问特定地点的时间来推断他们参与的活动。在许多情况下，对用户的移动行为进行建模可以从“起点-终点”矩阵开始，它描述了人们在特定时间段中在“起点-终点”地址之间移动次数[121-123]。通过给出哪些时空点和哪些活动对应，Alexander等人提出了预测“起点-终点”矩阵的方法。作者从Boston地区数据得到的结果和调查的结果是一致的。</p>\n<h3 id=\"5-3-异常情况监测\"><a href=\"#5-3-异常情况监测\" class=\"headerlink\" title=\"5.3 异常情况监测\"></a>5.3 异常情况监测</h3><p>如果数据包含大量人口的时空数据，它既可以用来对群体的活动规律进行研究，也可以用来研究对群体对紧急情况的反应。许多近期的论文研究了这个问题。Candia等人最开始关注天线端的时序活动[93]。他们提出了一种基于个体行为波动的方法。从图18来看，在异常的情况下，用户将与他们平常的行为表现出很大得波动，但总体平均和普通行为接近。方差可以表示为<br>$$<br>\\sigma(a,t,T)=\\sqrt{\\frac{1}{N-1} \\sum_{i=1}^N \\left(n_i(a,t,T)-\\langle n(a,t,T) \\rangle \\right)^2}<br>$$<br>其中，地点为$a$，时间区间为$[t,t+T]$，个体行为$n_i(a,t,T)$，平均期望行为为$\\langle n(a,t,T) \\rangle$。与平常的方差比较，可以识别出那些用户表现异常的位置，以及那些可能在异常情况下在空间上聚集的地方。在异常情况下，人群的反应可以看做是时间和空间上的错乱。</p>\n<p><img src=\"http://oc7urqs4c.bkt.clouddn.com/mobile-data-18.png\" alt=\"图18 异常事件中活动的变化\"></p>\n<p>在相关的论文中，Bagrow等人分析了在不同情况下人群的反应，比如爆炸、飞机失事或地震[124]。他们观察到，目击者和他们的邻居在事件后马上会表现出信息的扰动。这种反应通常表现在会与平常不经常联系的人的通话，而不是在经常联系节点的通话提升上。通过对信息传播路径的更详细的分析表明群体反应的有效性。在事件发生的数分钟内，从目击者开始的3-4度范围的人都被联系上。Gao等人进一步分析了这些动态变化[125]，在爆炸或飞机失事中相互通话的情况急剧增加，比如回拨。尽管有着不同的特性，同类型的行为扰动都在大规模事件中表现出来，比如音乐会或者游行[125,126]。Altshuler等人最近提出了一种“社会放大器”的方法用来检测异常行为，进而检测突发事件[127]。网络的胶合点是指那些具有高度数的节点，他们可以很好地连接剩余的网络，通过激活他们可以很快地通过社交网络扩散信息。利用这些特殊的节点作为社交放大器，作者指出只要分析那些和网络胶合点行为类似的节点就可以有效地检测整个网络的异常，从而发现突发事件。这种方法具有计算上的优势，因为它只需关注网络中的部分节点，这比监视整个网络要容易得多。</p>\n<p><img src=\"http://oc7urqs4c.bkt.clouddn.com/mobile-data-19.png\" alt=\"图19 突发事件中活动的变化\"></p>\n<p>除了检测突发事件意外，Lu等人研究在灾难以后人群的移动行为是否可以预测，他们采用的是2010年海地地震前后的数据[128]。有趣的是，人们的移动轨迹的可预测性很高，且在地震后的三个月内逐步提高。作者的研究表明人们离开首都后的目的地和他们以前的移动模式高度相关。因此，只要稍加利用，手机数据可以用来监视突发事件，并预测自然灾害后人们的移动行为。这些结果对许多人道主义组织来说将非常有帮助，他们可以尝试通过大数据来挽救生命。2011年日本地震和海啸，许多研究小组共同发起项目，通过联合多种大数据源（比如GPS设备、手机、Twitter和Facebook）来分析将来如何通过这些数据挽救生命。Kryvasheyeu等人做了类似的研究，他们对2012年Sandy飓风期间的Twitter数据进行研究，通过测量朋友关系强度来给出警告[129]。这个领域的研究还需要继续，尤其是目前这么多数据源可以利用的条件下，如何协同使用这些数据源。</p>\n<h3 id=\"5-4-移动行为和社会网络关系\"><a href=\"#5-4-移动行为和社会网络关系\" class=\"headerlink\" title=\"5.4 移动行为和社会网络关系\"></a>5.4 移动行为和社会网络关系</h3><p>移动轨迹和社会交往通常会在一个数据集中出现，从而可以用来研究移动行为和社会网络关系。Calabrese等人的工作发现，相互联系的用户大多数在至少一年的时间内在物理空间中碰面一次[130]。而且，用户绝大多数在碰面之前或之后会相互联系。有趣的是，用户之间的碰面频率和他们联系的频率以及相隔的距离高度相关。</p>\n<p>是否可以进一步通过移动数据预测社会网络关系呢？Wang等人研究发现社交网络中未连接的节点，但是拓扑位置相近、移动模式类似的人容易建立连接。也就是说，通过移动相似性和拓扑距离，他们能够提高传统链路预测算法的性能，从而获得平均准确率75%和召回率66%[131]。类似地，Eagle等人在跨度4年的数据中发现，当从一个地方搬到另一个地方时，人们的社交网络发生剧烈地变化[132]。</p>\n<p>Toole等人通过用户移动行为测量用户相似性，从而来区分不同的社会关系，并通过移动模式来区分不同的社交类型[133]。作者提出了一个移动模型，基于随机决策来决定用户是回到以前访问的地点或者访问新的地点。他们的模型在衡量移动模式和社交类型的相似性上能达到很好地准确率。</p>\n<h2 id=\"7-应用\"><a href=\"#7-应用\" class=\"headerlink\" title=\"7. 应用\"></a>7. 应用</h2><h3 id=\"7-5-犯罪检测\"><a href=\"#7-5-犯罪检测\" class=\"headerlink\" title=\"7.5 犯罪检测\"></a>7.5 犯罪检测</h3><p>在犯罪分析中，警察经常需要调取犯罪嫌疑人的手机数据进行侦查，从而获取证据。这种数据分析不仅可以得到某个犯罪人的行为模式，还可以通过社交网络获得可能的犯罪组织。社交网络分析可以用来分析犯罪网络的结构，还可以用来度量成员之间的信息流动。Messina大学的研究组提出了一个“LogAnalysis”的工具箱用来分析CDR和关联的社交网络，用来检测犯罪组织[178,179]。这个工具箱可以得到一系列网络和节点的指标，例如节点中心度、聚集系数，还可以进一步给出网络的动态变化。作者添加了可视化工具用于分析，从而让分析专家可以很容易地定位更中心的节点、可视化紧密关联的集群和子群。</p>\n<p>这种类型的研究和前面基于CDR数据的研究有所不同，它不是对匿名数据进行研究从而得到人类的行为特征，而是研究围绕特定人的网络，或者是某个嫌疑人群体。</p>\n<p>Bogomolov等人通过另一种方式，从手机数据中提取指标用来预测特定区域在下个月是否会成为犯罪热点[180]。利用动态更新的特征，比如该区域的人口、年龄、性别以及工作/居住/旅游群体等。在预测某个区域在下个月是否会成为犯罪热点，他们的模型可以达到70%的准确率。这种类型的研究可以被用来获得更好地反应时间，或者提前重点关注那些可能发生犯罪的区域。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>Selected from <a href=\"http://oc7urqs4c.bkt.clouddn.com/mobile-data.pdf\" target=\"_blank\" rel=\"noopener\"><em>Blondel et al. A survey of results on mobile phone datasets analysis. EPJ Data Science. 2015, 4(10).</em></a></p>\n<p>Translated by tau @ 2015.8.16</p>\n</blockquote>\n<h2 id=\"5-基于时空数据的人类移动行为分析\"><a href=\"#5-基于时空数据的人类移动行为分析\" class=\"headerlink\" title=\"5. 基于时空数据的人类移动行为分析\"></a>5. 基于时空数据的人类移动行为分析</h2><p>手机数据中记录了大量用户的移动行为，目前已有许多项目对此开展了研究。大量的手机APP提供了基于位置的服务（LBS, Location Based Service）表明了时空数据挖掘上面还有很多潜在应用。本节中，我们主要关注那些在人类移动行为建模和分析上给出了新结论或新方法的研究。</p>","more":"<h3 id=\"5-1-个人移动行为规律\"><a href=\"#5-1-个人移动行为规律\" class=\"headerlink\" title=\"5.1 个人移动行为规律\"></a>5.1 个人移动行为规律</h3><p>这里用于分析的移动轨迹指的是基站编号序列。如图14所示，通过对100,000个用户超过6个月数据的分析，Gonzalez等人发现人类轨迹表现出非常强的时空规律性[97]。不同于以往将人类行为建模为随机行走或Levy飞行。他们的结果显示，人类在不同的活动半径下都表现出非常类似的行为模式。个人移动的规律性主要表现为在绝大部分时间里用户都活动在一小部分位置。如果进行归一化处理，并把零点移至合适的位置，所有用户的移动模式都可以用一个函数来描述。</p>\n<p><img src=\"http://oc7urqs4c.bkt.clouddn.com/mobile-data-14.png\" alt=\"图14 用户在某个位置的概率分布\"></p>\n<p>这些结论得到了Song等人[98]的支持，他们也给出了数据表现出的行为模式与传统随机行走和Levy飞行模型的差别。此外，作者还给出了一种模型用来判断用户移动的倾向性。在他们的模型中，每当用户改变位置时，用户选择新位置的概率与已访问的位置数成反比，即$p_{new}=S^{-\\gamma}$，其中$S$是已访问的位置数，$\\gamma$是常数。当然，用户也可能直接访问以前已访问的地址。尽管他们的模型很简单，但是可以解释用户访问的地址数目随时间增长的变化规律，以及用户访问每个位置的概率分布。</p>\n<p>在另一项研究中，Csaji等人发现每个人经常访问地点的数目非常少[99]。这里经常访问的地点定义为用户有超过5%的电话由该基站位置发出。作者从Portugal手机数据集中随机选出100,000个用户，统计结果表明平均经常访问地点数为2.14，95%的用户经常访问的地点少于4个。</p>\n<p>Bagrow等人则将经常访问地点聚类成为“栖息地”[100]。主要的“栖息地”代表了每天典型的移动行为，而次要的“栖息地”则代表了偶发的旅行行为。有趣的是，他们认为在每个“栖息地”的移动行为都表现出统一的变化模式，即相比于总体的移动行为，“栖息地”的活动半径通常都小很多。</p>\n<p>然而，这些研究结果都给出了移动行为具有一致性的和可预测性，但它们大多是基于发达国家的数据，而在发展中国家则还要考虑文化和语言的因素。Amini等人分析比较了葡萄牙和科特迪瓦人们的移动模式，并指出那些在发达国家数据中表现比较好的模型在科特迪瓦的数据中并不适用[101]。例如，他们指出科特迪瓦的上班族比葡萄牙的要移动更长的距离，且他们的移动模式要更加多样化。</p>\n<p>如果人的移动轨迹不是随机的，如果人经常会回到他以前到过的地方，那么人类的移动行为是否可以预测。Song等人[102]研究了这个问题，并给出了在已知位置访问历史的条件下，在多大程度上可以预测用户接下来的位置。他们采用用户位置序列的熵率来描述可预测性。在计算熵率时，除了要考虑每个位置的访问频率，还要考虑这些访问之间的时间相关性。如图15所示，他们的结果表明，对于某个特定用户，其移动的时间相关性将大大降低不确定性。利用Fano不等式，他们推断出只要有合适的算法，就可能平均意义上预测出用户93%的位置。最有意思的是，不仅平均意义上用户具有高可预测性，而且所有人类都具有很高的预测性。那些经常进行长距离旅行的可预测性并不比经常呆在某个地方的人要差，Song的结果表明所有人类的可预测性是一致的。</p>\n<p><img src=\"http://oc7urqs4c.bkt.clouddn.com/mobile-data-15.png\" alt=\"图15 用户位置序列的熵率\"></p>\n<p>前面这些研究工作都集中在人类的移动行为的可预测性到底有多大，但他们并没有提供任何预测算法，也就是说这些研究仅具有理论价值。Calabrese等人则提出了人类位置的预测模型[103]。他们的算法不仅基于当前用户的历史移动行为，并且基于群体的移动行为，比如需要利用地理特征和POI（Point of Interest）。预测则是综合个体行为和群体行为的结果。个体行为采用的是一阶近似模型，利用Markov链来表示，其中，状态是用户访问的位置，从状态i转移到状态j的概率与数据中观测到的次数成正比。群体行为则用距离影响、POI和访问密度进行加权平均。在包含1百万个人4个月的数据集上，他们的模型在预测用户下一个位置上可以达到60%的准确率。</p>\n<p>Calabrese等人使用的Markov链方法是基于Park等人的研究[104]。他们指出，用户活动半径随时间的变化可以用Markov链转移矩阵的特征分解来解释。更准确地说，转移矩阵的特征向量包含了用户移动的信息。</p>\n<p>除了细粒度的移动行为，Simini等人研究了城市之间的移动行为，并提出了辐射模型[105]，突破了重力模型的一些局限。<br>辐射模型是一种随机模型，城市$i$的人进入另一个城市$j$工作，其概率与城市$i$中的类似工作的数目相关。<br>在给定城市中，工作数目也是随机变量，与城市的总人口相关。如果我们把城市 $i$ 和 $j$ 的距离定义为 $d_{ij}$ ，在两个城市之间平均移动次数与两个城市的人口相关（假设分别为 $m_i$ 和 $n<em>j$ ），还与 $d</em>{ij}$ 范围内的人口数目 $s<em>{ij}$ 相关。<br>$$<br>\\langle T</em>{ij} \\rangle=T_i \\frac{m_i n_j}{(m<em>i+s</em>{ij})(m_i+n<em>j+s</em>{ij})}<br>$$<br>其中，$T_i$是从城市$i$出发的移动次数。</p>\n<p>然而，辐射模型的有效性依赖于人口分布，这有可能在某些发展中国家很难获得。<br>为了克服这些局限，Palchykov等人建议使用一种只用通信模式的模型[106]。<br>该模型认为两个地方$i$和$j$的移动次数是两个地方距离$d<em>{ij}$，以及两个地方的通信密度的函数<br>$$<br>T</em>{ij}=k \\frac{c<em>{ij}}{d</em>{ij}^{\\beta}}<br>$$<br>其中，$k$是归一化常数。作者建议参数$\\beta$的取值为0.98或1.08，这取决于是考虑城市之间还是城市内部。</p>\n<p>移动行为乍看是随机运动，可是却遵守严格的规律。数学模型、预测算法和可视化工具（比如Martino的工作[107]）做了开拓性的研究，可以用来构建更好的人类移动模型，可以用来预测流行病爆发。从个体层面来看，这种规律看起来严格地主宰我们日常的行为，比如Eagle和Pentland表明用户移动模式的6个特征向量就足够描述90%的差异[108]。他们还观察到群体行为具有一致性，这将在下一节描述。</p>\n<h3 id=\"5-2-群体行为的一致性\"><a href=\"#5-2-群体行为的一致性\" class=\"headerlink\" title=\"5.2 群体行为的一致性\"></a>5.2 群体行为的一致性</h3><p>这些数据集可以从更高的层面进行研究。更实际地说，这些大量的数据允许我们去观察和测量人类和环境的交互，还可以度量这些交互的一致性。</p>\n<p>最早得项目，比如Mobile Landscape[109]和Real Time Rome[110]已经开拓了这种研究。然而，Reades等人做了进一步研究[111]，他们利用基站信号作为社区的数字特征。他们指出类似的地点表现出类似的特征，基于基站天线记录的数据，可以对城市空间聚类。聚类表明了城市的划分，比如居民区、商业区、酒吧或公园。简短来说，这种技术可作为简单地人口普查方法，某些地方政府可能对此有兴趣。通过特征分解，有可能进一步获得空间使用的差异[112]。图16中给出了工作日中的四种主要特征向量。通过类似的方法，Csaji等人[99]用k-means聚类不同地方的活动模式，用来检测哪些地方表现出相同的呼叫模式，从而识别出哪些地方表现出显著的工作或家庭呼叫模式。</p>\n<p><img src=\"http://oc7urqs4c.bkt.clouddn.com/mobile-data-16.png\" alt=\"图16 工作日的4个特征向量\"></p>\n<p><img src=\"http://oc7urqs4c.bkt.clouddn.com/mobile-data-17.png\" alt=\"图17 集群的周模式\"></p>\n<p>Karikoski和Soikkeli研究了非常类似的问题，他们利用了Aalto大学OtaSizzle项目中收集的手机数据[113]。作者研究了是否不同环境条件下是否会引发不同的手机使用模式。从用户的移动轨迹中，他们将地点分为了几类：家、办公室、其它有意义的地方、其他地方（指的是路过的地方）。他们指出了在不同的位置环境下，用户有不同的手机使用模式。比如，当人们在家时语音通话通常更长且更频繁使用，而在办公室时则更常使用短信且通话时间也更短。在使用了相同数据的论文中，Jo等人研究了环境、时间与服务使用之间的关联，并给出了典型的手机服务使用模式[114]。作者进一步采用了k-means方法对典型的行为进行聚类，并将用户分为morning-type和evening-type。Trestian等人也研究了类似的问题，他们发现不同的地点对人们使用哪些手机应用也有影响[115]。Naboulsi等人采用类似的方法通过网络快照区分通话模式，网络快照指的是在给定时间窗口内的流量聚合[116]。他们通过对比通过网络的流量的大小和分布计算两个快照之间的相似性。他们进一步给出了典型的使用模式，并提出了一种方法检测网络中的异常行为。有趣的是，虽然方法是类似的，但Naboulsi等人的研究仅仅是基于天线到天线之间的流量，而与前面的研究使用的数据有所差异。</p>\n<p>除了对城市内部的分析外，Isaacman等人研究不同城市居住地的行为差异[117]。通过分析洛杉矶和纽约上万个居住地的移动行为，他们发现洛杉矶人们的平均移动距离是纽约的2倍。他们对于这个现象的解释是人群密度的不均和城市地形的差异。Noulas等人的工作中[53]，通过分析Foursquare位置数据，给出了不同城市的距离指数。距离指数反映了两个地方$i$和$j$关于可能的机会的个数（人口、POI）的差异。给定地理距离$r_{ij}$以及以$i$为圆心的机会个数分布，距离指数可以计算为</p>\n<p>$$<br>rank(i,j)=\\int_0^{2\\pi}\\int<em>0^{r</em>{ij}} p_i(r,\\theta)r\\, \\mathrm{d} r \\mathrm{d}\\theta<br>$$</p>\n<p>相比于人口密度小的城市，人口密度大的城市会在更短的物理距离中有更多的机会，因此人们移动的距离要更短。这里物理距离需要用指数距离来加权。在近期的研究中，Louail等人提出了另一种通过分析城市地理结构量化这种差别的方法，数据采用了31个西班牙大都市的热点或POI[118]。通过利用热点的地理结构，以及不同类型城市的不同和相似性，作者展示了人们之间的平均距离在一天中是变化的。他们将城市区分为单中心城市和多中心城市，单中心城市更依赖于土地利用，而多中心城市更注重土地混合使用。Trasarti等人也分析了人们密度的相关性，并在城市和国家层面上揭示了人口随时间变化的高度相关性[119]。</p>\n<p>如果在城市中检测热点和POI是可行的，那么是否可以进一步推断人们参与活动的类型。Jiang等人最初提出了一种方法[120]，先对人们待过的或经过的地方进行刻画，然后依据他们访问特定地点的时间来推断他们参与的活动。在许多情况下，对用户的移动行为进行建模可以从“起点-终点”矩阵开始，它描述了人们在特定时间段中在“起点-终点”地址之间移动次数[121-123]。通过给出哪些时空点和哪些活动对应，Alexander等人提出了预测“起点-终点”矩阵的方法。作者从Boston地区数据得到的结果和调查的结果是一致的。</p>\n<h3 id=\"5-3-异常情况监测\"><a href=\"#5-3-异常情况监测\" class=\"headerlink\" title=\"5.3 异常情况监测\"></a>5.3 异常情况监测</h3><p>如果数据包含大量人口的时空数据，它既可以用来对群体的活动规律进行研究，也可以用来研究对群体对紧急情况的反应。许多近期的论文研究了这个问题。Candia等人最开始关注天线端的时序活动[93]。他们提出了一种基于个体行为波动的方法。从图18来看，在异常的情况下，用户将与他们平常的行为表现出很大得波动，但总体平均和普通行为接近。方差可以表示为<br>$$<br>\\sigma(a,t,T)=\\sqrt{\\frac{1}{N-1} \\sum_{i=1}^N \\left(n_i(a,t,T)-\\langle n(a,t,T) \\rangle \\right)^2}<br>$$<br>其中，地点为$a$，时间区间为$[t,t+T]$，个体行为$n_i(a,t,T)$，平均期望行为为$\\langle n(a,t,T) \\rangle$。与平常的方差比较，可以识别出那些用户表现异常的位置，以及那些可能在异常情况下在空间上聚集的地方。在异常情况下，人群的反应可以看做是时间和空间上的错乱。</p>\n<p><img src=\"http://oc7urqs4c.bkt.clouddn.com/mobile-data-18.png\" alt=\"图18 异常事件中活动的变化\"></p>\n<p>在相关的论文中，Bagrow等人分析了在不同情况下人群的反应，比如爆炸、飞机失事或地震[124]。他们观察到，目击者和他们的邻居在事件后马上会表现出信息的扰动。这种反应通常表现在会与平常不经常联系的人的通话，而不是在经常联系节点的通话提升上。通过对信息传播路径的更详细的分析表明群体反应的有效性。在事件发生的数分钟内，从目击者开始的3-4度范围的人都被联系上。Gao等人进一步分析了这些动态变化[125]，在爆炸或飞机失事中相互通话的情况急剧增加，比如回拨。尽管有着不同的特性，同类型的行为扰动都在大规模事件中表现出来，比如音乐会或者游行[125,126]。Altshuler等人最近提出了一种“社会放大器”的方法用来检测异常行为，进而检测突发事件[127]。网络的胶合点是指那些具有高度数的节点，他们可以很好地连接剩余的网络，通过激活他们可以很快地通过社交网络扩散信息。利用这些特殊的节点作为社交放大器，作者指出只要分析那些和网络胶合点行为类似的节点就可以有效地检测整个网络的异常，从而发现突发事件。这种方法具有计算上的优势，因为它只需关注网络中的部分节点，这比监视整个网络要容易得多。</p>\n<p><img src=\"http://oc7urqs4c.bkt.clouddn.com/mobile-data-19.png\" alt=\"图19 突发事件中活动的变化\"></p>\n<p>除了检测突发事件意外，Lu等人研究在灾难以后人群的移动行为是否可以预测，他们采用的是2010年海地地震前后的数据[128]。有趣的是，人们的移动轨迹的可预测性很高，且在地震后的三个月内逐步提高。作者的研究表明人们离开首都后的目的地和他们以前的移动模式高度相关。因此，只要稍加利用，手机数据可以用来监视突发事件，并预测自然灾害后人们的移动行为。这些结果对许多人道主义组织来说将非常有帮助，他们可以尝试通过大数据来挽救生命。2011年日本地震和海啸，许多研究小组共同发起项目，通过联合多种大数据源（比如GPS设备、手机、Twitter和Facebook）来分析将来如何通过这些数据挽救生命。Kryvasheyeu等人做了类似的研究，他们对2012年Sandy飓风期间的Twitter数据进行研究，通过测量朋友关系强度来给出警告[129]。这个领域的研究还需要继续，尤其是目前这么多数据源可以利用的条件下，如何协同使用这些数据源。</p>\n<h3 id=\"5-4-移动行为和社会网络关系\"><a href=\"#5-4-移动行为和社会网络关系\" class=\"headerlink\" title=\"5.4 移动行为和社会网络关系\"></a>5.4 移动行为和社会网络关系</h3><p>移动轨迹和社会交往通常会在一个数据集中出现，从而可以用来研究移动行为和社会网络关系。Calabrese等人的工作发现，相互联系的用户大多数在至少一年的时间内在物理空间中碰面一次[130]。而且，用户绝大多数在碰面之前或之后会相互联系。有趣的是，用户之间的碰面频率和他们联系的频率以及相隔的距离高度相关。</p>\n<p>是否可以进一步通过移动数据预测社会网络关系呢？Wang等人研究发现社交网络中未连接的节点，但是拓扑位置相近、移动模式类似的人容易建立连接。也就是说，通过移动相似性和拓扑距离，他们能够提高传统链路预测算法的性能，从而获得平均准确率75%和召回率66%[131]。类似地，Eagle等人在跨度4年的数据中发现，当从一个地方搬到另一个地方时，人们的社交网络发生剧烈地变化[132]。</p>\n<p>Toole等人通过用户移动行为测量用户相似性，从而来区分不同的社会关系，并通过移动模式来区分不同的社交类型[133]。作者提出了一个移动模型，基于随机决策来决定用户是回到以前访问的地点或者访问新的地点。他们的模型在衡量移动模式和社交类型的相似性上能达到很好地准确率。</p>\n<h2 id=\"7-应用\"><a href=\"#7-应用\" class=\"headerlink\" title=\"7. 应用\"></a>7. 应用</h2><h3 id=\"7-5-犯罪检测\"><a href=\"#7-5-犯罪检测\" class=\"headerlink\" title=\"7.5 犯罪检测\"></a>7.5 犯罪检测</h3><p>在犯罪分析中，警察经常需要调取犯罪嫌疑人的手机数据进行侦查，从而获取证据。这种数据分析不仅可以得到某个犯罪人的行为模式，还可以通过社交网络获得可能的犯罪组织。社交网络分析可以用来分析犯罪网络的结构，还可以用来度量成员之间的信息流动。Messina大学的研究组提出了一个“LogAnalysis”的工具箱用来分析CDR和关联的社交网络，用来检测犯罪组织[178,179]。这个工具箱可以得到一系列网络和节点的指标，例如节点中心度、聚集系数，还可以进一步给出网络的动态变化。作者添加了可视化工具用于分析，从而让分析专家可以很容易地定位更中心的节点、可视化紧密关联的集群和子群。</p>\n<p>这种类型的研究和前面基于CDR数据的研究有所不同，它不是对匿名数据进行研究从而得到人类的行为特征，而是研究围绕特定人的网络，或者是某个嫌疑人群体。</p>\n<p>Bogomolov等人通过另一种方式，从手机数据中提取指标用来预测特定区域在下个月是否会成为犯罪热点[180]。利用动态更新的特征，比如该区域的人口、年龄、性别以及工作/居住/旅游群体等。在预测某个区域在下个月是否会成为犯罪热点，他们的模型可以达到70%的准确率。这种类型的研究可以被用来获得更好地反应时间，或者提前重点关注那些可能发生犯罪的区域。</p>"},{"title":"智力游戏自动求解2——智力拼图","date":"2016-08-21T15:36:04.000Z","_content":"\n\n智力拼图（n-puzzle），是一种滑块类游戏，常见的类型有15数字滑块和8数字滑块，也有用图画代替数字的。这种游戏最早可能由Noyes Palmer Chapman在19世纪70年代发明的，也有说起源于中国的重排九宫，来自洛书，是华容道的祖先。\n\n<!-- more -->\n\n一般意义上来说，(n+1)=m×k，m为问题宽度，k为问题高度，但通常情况下m=k。15-puzzle是十六宫格排布，有15个方块和1个空位；而8-puzzle是九宫格排布，有8个方块和1个空位。方块上的数字开始是乱序排列的，需要通过移动方块，使得数字最终按顺序排列，且空格位于右下角。\n\n以15-puzzle为例，假设最初排列为：\n\n    12   1    10  2\n    7    11   4   14\n    5    0    9   15\n    8    13   6   3\n\n最后排列为\n\n    1   2   3   4\n    5   6   7   8\n    9   10  11  12\n    13  14  15  0\n\n则取得胜利。\n\n对于一个n-puzzle问题，有两个问题需要解决：\n1. 对于任何一种排列的n-puzzle问题，是否都可解？\n2. 对于一个可解的n-puzzle，是否存在最优的自动解法？\n\n下面对于这两个问题分别进行分析。\n\n## 一、n-puzzle问题的可解性\n当数字随机排列时，问题不一定可解，当(n+1)=m×k，m>1，k>1时，有(m×k)!/2个排列是无解。\n\n下面先定义n-puzzle的逆序个数：将宫格中的数字按照从左到右从上到下的顺序一字排开，空格不计入序列。以上面的15-puzzle为例，排列后得到的序列为\n\n    12    1    10    2    7    11    4    14    5    9    15    8    13    6    3\n\n序列中某个位置的逆序个数为其之后位置数字比该位置小的个数，如第1个位置数字为12，其逆序个数为11；第2个位置数字为1，其逆序个数为0。序列中所有位置的逆序数之和定义为该n-puzzle问题的逆序数。\n\n假设空位处于第i行，对于n-puzzle问题的可解性，结论是：\n1. 如果问题宽度m为奇数，逆序个数为偶数，问题可解；\n2. 如果问题宽度m为偶数，且空位距离底部的行数k-i为奇数，逆序个数为奇数，问题可解；\n3. 如果问题宽度为偶数，且空位距离底部的行数k-i为偶数，逆序个数为偶数，问题可解。\n\n对于上面的15-puzzle，其宫格宽度为偶数，排列后序列对应的逆序个数为\n\n    11    0    8    0    4    6    1    6    1    3    4    2    2    1    0\n\n总逆序个数为49，为奇数。空位距离底部为1行，为奇数，此问题可解。\n\n具体的证明过程可以参考：\n[http://www.cs.bham.ac.uk/~mdr/teaching/modules04/java2/TilesSolvability.html][1]\n[http://kevingong.com/Math/SixteenPuzzle.html][2] 给出了更一般的情况的证明。\n\n## 二、n-puzzle问题的自动解法\nn-puzzle问题的求解实际上还是一个解空间的自动搜索，通过空位的移动形成不同的解状态，直至获得正确解。组合问题的搜索方式分为两大类：一是无信息的搜索，即盲搜索，如宽度优先搜索、深度优先搜索；二是有信息的搜索，即启发式搜索，如A*搜索、IDA*搜索等。\n\n### 1、无信息搜索\n常用的宽度搜索和深度搜索都可以达到目的，二者互有优劣。从理论上分析来说，空位的每一次移动都会形成一个新解，这比较适合使用宽度优先搜索。\n\n对于n-puzzle问题，这两种方法的搜索效率都不高。每个节点存储的为一个序列，随着搜索量的增加，其存储量也急剧增加。\n\n### 2、启发式搜索\nA*搜索是一种经典的启发式搜索方法，与无信息搜索相比，A*利用了当前状态与最终状态之间的距离信息作为前进的指引方向，自然要比盲目的搜索效率要高很多。\n\n从最短路径搜索的角度来说，A*算法被认为是最好的算法，其核心要点在于选取好的代价函数。通常代价函数可以表示为f(n)=g(n)+h(n)，其中g(n)表示起点到顶点n的实际距离，h(n)表示顶点n到目标的估算距离。\n\n当h(n)=0时，则只需要求g(n)，则转化为单源最短路径问题，即Dijkstra算法。\n\n当h(n)<=n到目标的实际距离，则一定可以求得最优解，且h(n)越小，需要计算的节点越多，算法效率越低。\n\n关于A*搜索，有些比较好的介绍：\n[http://www.policyalmanac.org/games/aStarTutorial.htm][3]\n[http://blog.minstrel.idv.tw/2004/12/star-algorithm.html][4]\n\n对于n-puzzle问题，每个状态可以看作是一个节点，移动空格位置后状态发生变化，由一个节点跳转到另一个节点。\n\n比如将以下状态作为当前节点，\n\n    12   1    10   2\n    7    11   4    14\n    5    0    9    15\n    8    13   6    3\n\n向下移动后获得新的状态\n\n    12   1    10   2\n    7    11   4    14\n    5    13   9    15\n    8    0    6    3\n\n这作为新的节点。\n\n空格最多可以可以向上下左右四个方向移动，即每个节点最多有四个子节点。已知起始状态和最终状态，我们可以很容易地用A\\*算法解决n-puzzle问题。代价函数中h(n)采用的是Manhattan距离，即到达目标所需的最小移动格数。例如，上图中，数字12当前坐标为(0,0)，正确状态下坐标为(4,3)，其Manhattan距离为7。当前状态n中所有数字（不包括0）的Manhattan距离之和即为h(n)。很容易判断出来，h(n)<到目标的实际距离，则A\\*算法一定可以求得最优解。\n\n此外，对于规模更大问题，可以考虑采用A\\*算法的变形IDA\\*。IDA\\*算法全称是Iterative Deepening A\\*，它不保存之前的搜索状态，搜索效率会稍低于A\\*，但所需的内存开销要小。\n\nn-puzzle问题的A\\*搜索代码如下：\n\n```python\n#!/usr/bin/env python\n'''\nFile Name: puzzle.py\nAuthor: tau\nMailto: guantau@163.com\nCreated Time: 2014.05.31\nDescription: solve n-puzzle\n'''\nfrom copy import copy\nimport numpy as np\n \n \ndef move(seq):\n    \"\"\"move blank left, right, up, down\"\"\"\n    pos = seq.index(0)\n    r = pos / m\n    c = pos % m\n    result = []\n    if c != 0:\n        left = copy(seq)\n        left[pos] = left[pos - 1]\n        left[pos - 1] = 0\n        result.append(left)\n    if c != m - 1:\n        right = copy(seq)\n        right[pos] = right[pos + 1]\n        right[pos + 1] = 0\n        result.append(right)\n    if r != 0:\n        up = copy(seq)\n        up[pos] = up[pos - m]\n        up[pos - m] = 0\n        result.append(up)\n    if r != k - 1:\n        down = copy(seq)\n        down[pos] = down[pos + m]\n        down[pos + m] = 0\n        result.append(down)\n \n    return result\n \n \ndef calc_metric(seq):\n    \"\"\"calcuate the distance to the answer from current state\"\"\"\n    metric = 0\n    for i in range(1, m * k):\n        ind = seq.index(i)\n        metric += (ind / m - (i - 1) / m) + (ind % m - (i - 1) % m)\n    return metric\n \n \ndef find_best_state():\n    \"\"\"find the state with lowest metric in the open list\"\"\"\n    f = []\n    for s in open_list:\n        f.append(s[1] + s[2])\n    return open_list[np.argmin(f)]\n \n \ndef Astar():\n    \"\"\"solve puzzle using A* algorithm\"\"\"\n    open_list.append((puzzle, 0, calc_metric(puzzle), 0))\n \n    while len(open_list) != 0:\n        best_state = find_best_state()\n        open_list.remove(best_state)\n        close_list.append(best_state)\n        neighbors = move(best_state[0])\n \n        open_set = [x[0] for x in open_list]\n        close_set = [x[0] for x in close_list]\n \n        if answer in close_set:\n            break\n \n        for n in neighbors:\n            if n in close_set:\n                continue\n            if n not in open_set:\n                open_list.append((n, best_state[1] + 1,\n                                  calc_metric(n), best_state[0]))\n            else:\n                ind = open_set.index(n)\n                if best_state[1] + 1 < open_list[ind][5]:\n                    open_list[ind] = (n, best_state[1] + 1,\n                                      calc_metric(n), best_state[0])\n \n    if len(open_list) == 0:\n        return False\n    else:\n        return True\n \n \ndef get_path():\n    \"\"\"get the path to answer\"\"\"\n    close_set = [x[0] for x in close_list]\n    path = [answer]\n    while path[-1] != puzzle:\n        path.append(close_list[close_set.index(path[-1])][6])\n    return path\n \n \ndef print_mat(mat):\n    \"\"\"docstring for print_mat\"\"\"\n    for i in range(k):\n        a = \"\"\n        for j in range(m):\n            a += str(mat[i * m + j]) + \" \"\n        print a\n \n \ndef is_solvable():\n    \"\"\"check whether the puzzle is solvable\"\"\"\n    seq = copy(puzzle)\n    seq.remove(0)\n    inversions = 0\n    for i in range(len(seq)):\n            for j in range(i + 1, len(seq)):\n                if seq[i] > seq[j]:\n                    inversions += 1\n \n    r = (k - 1) - puzzle.index(0) / m\n    solvable = ((m % 2 == 1 and inversions % 2 == 0) or\n                (m % 2 == 0 and r % 2 == 1 and inversions % 2 == 1) or\n                (m % 2 == 0 and r % 2 == 0 and inversions % 2 == 0))\n \n    return solvable\n \n \nif __name__ == \"__main__\":\n    m = 4    # width\n    k = 4    # height\n    puzzle = [2, 10, 3, 4, 1, 0, 6, 8, 5, 14, 7, 11, 9, 13, 15, 12]\n \n    # the right answer\n    answer = range(1, m * k + 1)\n    answer[m * k - 1] = 0\n    # state=(seq,g,h,parent)\n    open_list = []\n    close_list = []\n \n    if is_solvable():\n        print \"The puzzle is solvable!\"\n        if Astar():\n            steps = get_path()\n            print \"Total steps %d, as follow:\" % len(steps)\n            for i in range(len(steps) - 1, -1, -1):\n                print_mat(steps[i])\n                print \"\\n\"\n    else:\n        print \"The puzzle is unsolvable!\"\n```\n\n  [1]: http://www.cs.bham.ac.uk/~mdr/teaching/modules04/java2/TilesSolvability.html\n  [2]: http://kevingong.com/Math/SixteenPuzzle.html\n  [3]: http://www.policyalmanac.org/games/aStarTutorial.htm\n  [4]: http://blog.minstrel.idv.tw/2004/12/star-algorithm.html\n  [5]: http://www.cs.bham.ac.uk/~mdr/teaching/modules04/java2/TilesSolvability.html\n  [6]: http://www.cs.bham.ac.uk/~mdr/teaching/modules04/java2/TilesSolvability.html\n\n\n","source":"_posts/2016-08-21-puzzle.md","raw":"---\ntitle: 智力游戏自动求解2——智力拼图\ndate: 2016-08-21 23:36:04\ncategories: 写点程序\ntags:\n  - 智力拼图\n---\n\n\n智力拼图（n-puzzle），是一种滑块类游戏，常见的类型有15数字滑块和8数字滑块，也有用图画代替数字的。这种游戏最早可能由Noyes Palmer Chapman在19世纪70年代发明的，也有说起源于中国的重排九宫，来自洛书，是华容道的祖先。\n\n<!-- more -->\n\n一般意义上来说，(n+1)=m×k，m为问题宽度，k为问题高度，但通常情况下m=k。15-puzzle是十六宫格排布，有15个方块和1个空位；而8-puzzle是九宫格排布，有8个方块和1个空位。方块上的数字开始是乱序排列的，需要通过移动方块，使得数字最终按顺序排列，且空格位于右下角。\n\n以15-puzzle为例，假设最初排列为：\n\n    12   1    10  2\n    7    11   4   14\n    5    0    9   15\n    8    13   6   3\n\n最后排列为\n\n    1   2   3   4\n    5   6   7   8\n    9   10  11  12\n    13  14  15  0\n\n则取得胜利。\n\n对于一个n-puzzle问题，有两个问题需要解决：\n1. 对于任何一种排列的n-puzzle问题，是否都可解？\n2. 对于一个可解的n-puzzle，是否存在最优的自动解法？\n\n下面对于这两个问题分别进行分析。\n\n## 一、n-puzzle问题的可解性\n当数字随机排列时，问题不一定可解，当(n+1)=m×k，m>1，k>1时，有(m×k)!/2个排列是无解。\n\n下面先定义n-puzzle的逆序个数：将宫格中的数字按照从左到右从上到下的顺序一字排开，空格不计入序列。以上面的15-puzzle为例，排列后得到的序列为\n\n    12    1    10    2    7    11    4    14    5    9    15    8    13    6    3\n\n序列中某个位置的逆序个数为其之后位置数字比该位置小的个数，如第1个位置数字为12，其逆序个数为11；第2个位置数字为1，其逆序个数为0。序列中所有位置的逆序数之和定义为该n-puzzle问题的逆序数。\n\n假设空位处于第i行，对于n-puzzle问题的可解性，结论是：\n1. 如果问题宽度m为奇数，逆序个数为偶数，问题可解；\n2. 如果问题宽度m为偶数，且空位距离底部的行数k-i为奇数，逆序个数为奇数，问题可解；\n3. 如果问题宽度为偶数，且空位距离底部的行数k-i为偶数，逆序个数为偶数，问题可解。\n\n对于上面的15-puzzle，其宫格宽度为偶数，排列后序列对应的逆序个数为\n\n    11    0    8    0    4    6    1    6    1    3    4    2    2    1    0\n\n总逆序个数为49，为奇数。空位距离底部为1行，为奇数，此问题可解。\n\n具体的证明过程可以参考：\n[http://www.cs.bham.ac.uk/~mdr/teaching/modules04/java2/TilesSolvability.html][1]\n[http://kevingong.com/Math/SixteenPuzzle.html][2] 给出了更一般的情况的证明。\n\n## 二、n-puzzle问题的自动解法\nn-puzzle问题的求解实际上还是一个解空间的自动搜索，通过空位的移动形成不同的解状态，直至获得正确解。组合问题的搜索方式分为两大类：一是无信息的搜索，即盲搜索，如宽度优先搜索、深度优先搜索；二是有信息的搜索，即启发式搜索，如A*搜索、IDA*搜索等。\n\n### 1、无信息搜索\n常用的宽度搜索和深度搜索都可以达到目的，二者互有优劣。从理论上分析来说，空位的每一次移动都会形成一个新解，这比较适合使用宽度优先搜索。\n\n对于n-puzzle问题，这两种方法的搜索效率都不高。每个节点存储的为一个序列，随着搜索量的增加，其存储量也急剧增加。\n\n### 2、启发式搜索\nA*搜索是一种经典的启发式搜索方法，与无信息搜索相比，A*利用了当前状态与最终状态之间的距离信息作为前进的指引方向，自然要比盲目的搜索效率要高很多。\n\n从最短路径搜索的角度来说，A*算法被认为是最好的算法，其核心要点在于选取好的代价函数。通常代价函数可以表示为f(n)=g(n)+h(n)，其中g(n)表示起点到顶点n的实际距离，h(n)表示顶点n到目标的估算距离。\n\n当h(n)=0时，则只需要求g(n)，则转化为单源最短路径问题，即Dijkstra算法。\n\n当h(n)<=n到目标的实际距离，则一定可以求得最优解，且h(n)越小，需要计算的节点越多，算法效率越低。\n\n关于A*搜索，有些比较好的介绍：\n[http://www.policyalmanac.org/games/aStarTutorial.htm][3]\n[http://blog.minstrel.idv.tw/2004/12/star-algorithm.html][4]\n\n对于n-puzzle问题，每个状态可以看作是一个节点，移动空格位置后状态发生变化，由一个节点跳转到另一个节点。\n\n比如将以下状态作为当前节点，\n\n    12   1    10   2\n    7    11   4    14\n    5    0    9    15\n    8    13   6    3\n\n向下移动后获得新的状态\n\n    12   1    10   2\n    7    11   4    14\n    5    13   9    15\n    8    0    6    3\n\n这作为新的节点。\n\n空格最多可以可以向上下左右四个方向移动，即每个节点最多有四个子节点。已知起始状态和最终状态，我们可以很容易地用A\\*算法解决n-puzzle问题。代价函数中h(n)采用的是Manhattan距离，即到达目标所需的最小移动格数。例如，上图中，数字12当前坐标为(0,0)，正确状态下坐标为(4,3)，其Manhattan距离为7。当前状态n中所有数字（不包括0）的Manhattan距离之和即为h(n)。很容易判断出来，h(n)<到目标的实际距离，则A\\*算法一定可以求得最优解。\n\n此外，对于规模更大问题，可以考虑采用A\\*算法的变形IDA\\*。IDA\\*算法全称是Iterative Deepening A\\*，它不保存之前的搜索状态，搜索效率会稍低于A\\*，但所需的内存开销要小。\n\nn-puzzle问题的A\\*搜索代码如下：\n\n```python\n#!/usr/bin/env python\n'''\nFile Name: puzzle.py\nAuthor: tau\nMailto: guantau@163.com\nCreated Time: 2014.05.31\nDescription: solve n-puzzle\n'''\nfrom copy import copy\nimport numpy as np\n \n \ndef move(seq):\n    \"\"\"move blank left, right, up, down\"\"\"\n    pos = seq.index(0)\n    r = pos / m\n    c = pos % m\n    result = []\n    if c != 0:\n        left = copy(seq)\n        left[pos] = left[pos - 1]\n        left[pos - 1] = 0\n        result.append(left)\n    if c != m - 1:\n        right = copy(seq)\n        right[pos] = right[pos + 1]\n        right[pos + 1] = 0\n        result.append(right)\n    if r != 0:\n        up = copy(seq)\n        up[pos] = up[pos - m]\n        up[pos - m] = 0\n        result.append(up)\n    if r != k - 1:\n        down = copy(seq)\n        down[pos] = down[pos + m]\n        down[pos + m] = 0\n        result.append(down)\n \n    return result\n \n \ndef calc_metric(seq):\n    \"\"\"calcuate the distance to the answer from current state\"\"\"\n    metric = 0\n    for i in range(1, m * k):\n        ind = seq.index(i)\n        metric += (ind / m - (i - 1) / m) + (ind % m - (i - 1) % m)\n    return metric\n \n \ndef find_best_state():\n    \"\"\"find the state with lowest metric in the open list\"\"\"\n    f = []\n    for s in open_list:\n        f.append(s[1] + s[2])\n    return open_list[np.argmin(f)]\n \n \ndef Astar():\n    \"\"\"solve puzzle using A* algorithm\"\"\"\n    open_list.append((puzzle, 0, calc_metric(puzzle), 0))\n \n    while len(open_list) != 0:\n        best_state = find_best_state()\n        open_list.remove(best_state)\n        close_list.append(best_state)\n        neighbors = move(best_state[0])\n \n        open_set = [x[0] for x in open_list]\n        close_set = [x[0] for x in close_list]\n \n        if answer in close_set:\n            break\n \n        for n in neighbors:\n            if n in close_set:\n                continue\n            if n not in open_set:\n                open_list.append((n, best_state[1] + 1,\n                                  calc_metric(n), best_state[0]))\n            else:\n                ind = open_set.index(n)\n                if best_state[1] + 1 < open_list[ind][5]:\n                    open_list[ind] = (n, best_state[1] + 1,\n                                      calc_metric(n), best_state[0])\n \n    if len(open_list) == 0:\n        return False\n    else:\n        return True\n \n \ndef get_path():\n    \"\"\"get the path to answer\"\"\"\n    close_set = [x[0] for x in close_list]\n    path = [answer]\n    while path[-1] != puzzle:\n        path.append(close_list[close_set.index(path[-1])][6])\n    return path\n \n \ndef print_mat(mat):\n    \"\"\"docstring for print_mat\"\"\"\n    for i in range(k):\n        a = \"\"\n        for j in range(m):\n            a += str(mat[i * m + j]) + \" \"\n        print a\n \n \ndef is_solvable():\n    \"\"\"check whether the puzzle is solvable\"\"\"\n    seq = copy(puzzle)\n    seq.remove(0)\n    inversions = 0\n    for i in range(len(seq)):\n            for j in range(i + 1, len(seq)):\n                if seq[i] > seq[j]:\n                    inversions += 1\n \n    r = (k - 1) - puzzle.index(0) / m\n    solvable = ((m % 2 == 1 and inversions % 2 == 0) or\n                (m % 2 == 0 and r % 2 == 1 and inversions % 2 == 1) or\n                (m % 2 == 0 and r % 2 == 0 and inversions % 2 == 0))\n \n    return solvable\n \n \nif __name__ == \"__main__\":\n    m = 4    # width\n    k = 4    # height\n    puzzle = [2, 10, 3, 4, 1, 0, 6, 8, 5, 14, 7, 11, 9, 13, 15, 12]\n \n    # the right answer\n    answer = range(1, m * k + 1)\n    answer[m * k - 1] = 0\n    # state=(seq,g,h,parent)\n    open_list = []\n    close_list = []\n \n    if is_solvable():\n        print \"The puzzle is solvable!\"\n        if Astar():\n            steps = get_path()\n            print \"Total steps %d, as follow:\" % len(steps)\n            for i in range(len(steps) - 1, -1, -1):\n                print_mat(steps[i])\n                print \"\\n\"\n    else:\n        print \"The puzzle is unsolvable!\"\n```\n\n  [1]: http://www.cs.bham.ac.uk/~mdr/teaching/modules04/java2/TilesSolvability.html\n  [2]: http://kevingong.com/Math/SixteenPuzzle.html\n  [3]: http://www.policyalmanac.org/games/aStarTutorial.htm\n  [4]: http://blog.minstrel.idv.tw/2004/12/star-algorithm.html\n  [5]: http://www.cs.bham.ac.uk/~mdr/teaching/modules04/java2/TilesSolvability.html\n  [6]: http://www.cs.bham.ac.uk/~mdr/teaching/modules04/java2/TilesSolvability.html\n\n\n","slug":"puzzle","published":1,"updated":"2016-08-27T09:13:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb6k4kvl000aulepsdy0yeg8","content":"<p>智力拼图（n-puzzle），是一种滑块类游戏，常见的类型有15数字滑块和8数字滑块，也有用图画代替数字的。这种游戏最早可能由Noyes Palmer Chapman在19世纪70年代发明的，也有说起源于中国的重排九宫，来自洛书，是华容道的祖先。</p>\n<a id=\"more\"></a>\n<p>一般意义上来说，(n+1)=m×k，m为问题宽度，k为问题高度，但通常情况下m=k。15-puzzle是十六宫格排布，有15个方块和1个空位；而8-puzzle是九宫格排布，有8个方块和1个空位。方块上的数字开始是乱序排列的，需要通过移动方块，使得数字最终按顺序排列，且空格位于右下角。</p>\n<p>以15-puzzle为例，假设最初排列为：</p>\n<pre><code>12   1    10  2\n7    11   4   14\n5    0    9   15\n8    13   6   3\n</code></pre><p>最后排列为</p>\n<pre><code>1   2   3   4\n5   6   7   8\n9   10  11  12\n13  14  15  0\n</code></pre><p>则取得胜利。</p>\n<p>对于一个n-puzzle问题，有两个问题需要解决：</p>\n<ol>\n<li>对于任何一种排列的n-puzzle问题，是否都可解？</li>\n<li>对于一个可解的n-puzzle，是否存在最优的自动解法？</li>\n</ol>\n<p>下面对于这两个问题分别进行分析。</p>\n<h2 id=\"一、n-puzzle问题的可解性\"><a href=\"#一、n-puzzle问题的可解性\" class=\"headerlink\" title=\"一、n-puzzle问题的可解性\"></a>一、n-puzzle问题的可解性</h2><p>当数字随机排列时，问题不一定可解，当(n+1)=m×k，m&gt;1，k&gt;1时，有(m×k)!/2个排列是无解。</p>\n<p>下面先定义n-puzzle的逆序个数：将宫格中的数字按照从左到右从上到下的顺序一字排开，空格不计入序列。以上面的15-puzzle为例，排列后得到的序列为</p>\n<pre><code>12    1    10    2    7    11    4    14    5    9    15    8    13    6    3\n</code></pre><p>序列中某个位置的逆序个数为其之后位置数字比该位置小的个数，如第1个位置数字为12，其逆序个数为11；第2个位置数字为1，其逆序个数为0。序列中所有位置的逆序数之和定义为该n-puzzle问题的逆序数。</p>\n<p>假设空位处于第i行，对于n-puzzle问题的可解性，结论是：</p>\n<ol>\n<li>如果问题宽度m为奇数，逆序个数为偶数，问题可解；</li>\n<li>如果问题宽度m为偶数，且空位距离底部的行数k-i为奇数，逆序个数为奇数，问题可解；</li>\n<li>如果问题宽度为偶数，且空位距离底部的行数k-i为偶数，逆序个数为偶数，问题可解。</li>\n</ol>\n<p>对于上面的15-puzzle，其宫格宽度为偶数，排列后序列对应的逆序个数为</p>\n<pre><code>11    0    8    0    4    6    1    6    1    3    4    2    2    1    0\n</code></pre><p>总逆序个数为49，为奇数。空位距离底部为1行，为奇数，此问题可解。</p>\n<p>具体的证明过程可以参考：<br><a href=\"http://www.cs.bham.ac.uk/~mdr/teaching/modules04/java2/TilesSolvability.html\" target=\"_blank\" rel=\"noopener\">http://www.cs.bham.ac.uk/~mdr/teaching/modules04/java2/TilesSolvability.html</a><br><a href=\"http://kevingong.com/Math/SixteenPuzzle.html\" target=\"_blank\" rel=\"noopener\">http://kevingong.com/Math/SixteenPuzzle.html</a> 给出了更一般的情况的证明。</p>\n<h2 id=\"二、n-puzzle问题的自动解法\"><a href=\"#二、n-puzzle问题的自动解法\" class=\"headerlink\" title=\"二、n-puzzle问题的自动解法\"></a>二、n-puzzle问题的自动解法</h2><p>n-puzzle问题的求解实际上还是一个解空间的自动搜索，通过空位的移动形成不同的解状态，直至获得正确解。组合问题的搜索方式分为两大类：一是无信息的搜索，即盲搜索，如宽度优先搜索、深度优先搜索；二是有信息的搜索，即启发式搜索，如A<em>搜索、IDA</em>搜索等。</p>\n<h3 id=\"1、无信息搜索\"><a href=\"#1、无信息搜索\" class=\"headerlink\" title=\"1、无信息搜索\"></a>1、无信息搜索</h3><p>常用的宽度搜索和深度搜索都可以达到目的，二者互有优劣。从理论上分析来说，空位的每一次移动都会形成一个新解，这比较适合使用宽度优先搜索。</p>\n<p>对于n-puzzle问题，这两种方法的搜索效率都不高。每个节点存储的为一个序列，随着搜索量的增加，其存储量也急剧增加。</p>\n<h3 id=\"2、启发式搜索\"><a href=\"#2、启发式搜索\" class=\"headerlink\" title=\"2、启发式搜索\"></a>2、启发式搜索</h3><p>A<em>搜索是一种经典的启发式搜索方法，与无信息搜索相比，A</em>利用了当前状态与最终状态之间的距离信息作为前进的指引方向，自然要比盲目的搜索效率要高很多。</p>\n<p>从最短路径搜索的角度来说，A*算法被认为是最好的算法，其核心要点在于选取好的代价函数。通常代价函数可以表示为f(n)=g(n)+h(n)，其中g(n)表示起点到顶点n的实际距离，h(n)表示顶点n到目标的估算距离。</p>\n<p>当h(n)=0时，则只需要求g(n)，则转化为单源最短路径问题，即Dijkstra算法。</p>\n<p>当h(n)&lt;=n到目标的实际距离，则一定可以求得最优解，且h(n)越小，需要计算的节点越多，算法效率越低。</p>\n<p>关于A*搜索，有些比较好的介绍：<br><a href=\"http://www.policyalmanac.org/games/aStarTutorial.htm\" target=\"_blank\" rel=\"noopener\">http://www.policyalmanac.org/games/aStarTutorial.htm</a><br><a href=\"http://blog.minstrel.idv.tw/2004/12/star-algorithm.html\" target=\"_blank\" rel=\"noopener\">http://blog.minstrel.idv.tw/2004/12/star-algorithm.html</a></p>\n<p>对于n-puzzle问题，每个状态可以看作是一个节点，移动空格位置后状态发生变化，由一个节点跳转到另一个节点。</p>\n<p>比如将以下状态作为当前节点，</p>\n<pre><code>12   1    10   2\n7    11   4    14\n5    0    9    15\n8    13   6    3\n</code></pre><p>向下移动后获得新的状态</p>\n<pre><code>12   1    10   2\n7    11   4    14\n5    13   9    15\n8    0    6    3\n</code></pre><p>这作为新的节点。</p>\n<p>空格最多可以可以向上下左右四个方向移动，即每个节点最多有四个子节点。已知起始状态和最终状态，我们可以很容易地用A*算法解决n-puzzle问题。代价函数中h(n)采用的是Manhattan距离，即到达目标所需的最小移动格数。例如，上图中，数字12当前坐标为(0,0)，正确状态下坐标为(4,3)，其Manhattan距离为7。当前状态n中所有数字（不包括0）的Manhattan距离之和即为h(n)。很容易判断出来，h(n)&lt;到目标的实际距离，则A*算法一定可以求得最优解。</p>\n<p>此外，对于规模更大问题，可以考虑采用A*算法的变形IDA*。IDA*算法全称是Iterative Deepening A*，它不保存之前的搜索状态，搜索效率会稍低于A*，但所需的内存开销要小。</p>\n<p>n-puzzle问题的A*搜索代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">File Name: puzzle.py</span></span><br><span class=\"line\"><span class=\"string\">Author: tau</span></span><br><span class=\"line\"><span class=\"string\">Mailto: guantau@163.com</span></span><br><span class=\"line\"><span class=\"string\">Created Time: 2014.05.31</span></span><br><span class=\"line\"><span class=\"string\">Description: solve n-puzzle</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> copy <span class=\"keyword\">import</span> copy</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">move</span><span class=\"params\">(seq)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"move blank left, right, up, down\"\"\"</span></span><br><span class=\"line\">    pos = seq.index(<span class=\"number\">0</span>)</span><br><span class=\"line\">    r = pos / m</span><br><span class=\"line\">    c = pos % m</span><br><span class=\"line\">    result = []</span><br><span class=\"line\">    <span class=\"keyword\">if</span> c != <span class=\"number\">0</span>:</span><br><span class=\"line\">        left = copy(seq)</span><br><span class=\"line\">        left[pos] = left[pos - <span class=\"number\">1</span>]</span><br><span class=\"line\">        left[pos - <span class=\"number\">1</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">        result.append(left)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> c != m - <span class=\"number\">1</span>:</span><br><span class=\"line\">        right = copy(seq)</span><br><span class=\"line\">        right[pos] = right[pos + <span class=\"number\">1</span>]</span><br><span class=\"line\">        right[pos + <span class=\"number\">1</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">        result.append(right)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> r != <span class=\"number\">0</span>:</span><br><span class=\"line\">        up = copy(seq)</span><br><span class=\"line\">        up[pos] = up[pos - m]</span><br><span class=\"line\">        up[pos - m] = <span class=\"number\">0</span></span><br><span class=\"line\">        result.append(up)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> r != k - <span class=\"number\">1</span>:</span><br><span class=\"line\">        down = copy(seq)</span><br><span class=\"line\">        down[pos] = down[pos + m]</span><br><span class=\"line\">        down[pos + m] = <span class=\"number\">0</span></span><br><span class=\"line\">        result.append(down)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calc_metric</span><span class=\"params\">(seq)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"calcuate the distance to the answer from current state\"\"\"</span></span><br><span class=\"line\">    metric = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, m * k):</span><br><span class=\"line\">        ind = seq.index(i)</span><br><span class=\"line\">        metric += (ind / m - (i - <span class=\"number\">1</span>) / m) + (ind % m - (i - <span class=\"number\">1</span>) % m)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> metric</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find_best_state</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"find the state with lowest metric in the open list\"\"\"</span></span><br><span class=\"line\">    f = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> open_list:</span><br><span class=\"line\">        f.append(s[<span class=\"number\">1</span>] + s[<span class=\"number\">2</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> open_list[np.argmin(f)]</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Astar</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"solve puzzle using A* algorithm\"\"\"</span></span><br><span class=\"line\">    open_list.append((puzzle, <span class=\"number\">0</span>, calc_metric(puzzle), <span class=\"number\">0</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">while</span> len(open_list) != <span class=\"number\">0</span>:</span><br><span class=\"line\">        best_state = find_best_state()</span><br><span class=\"line\">        open_list.remove(best_state)</span><br><span class=\"line\">        close_list.append(best_state)</span><br><span class=\"line\">        neighbors = move(best_state[<span class=\"number\">0</span>])</span><br><span class=\"line\"> </span><br><span class=\"line\">        open_set = [x[<span class=\"number\">0</span>] <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> open_list]</span><br><span class=\"line\">        close_set = [x[<span class=\"number\">0</span>] <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> close_list]</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">if</span> answer <span class=\"keyword\">in</span> close_set:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> neighbors:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> n <span class=\"keyword\">in</span> close_set:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> n <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> open_set:</span><br><span class=\"line\">                open_list.append((n, best_state[<span class=\"number\">1</span>] + <span class=\"number\">1</span>,</span><br><span class=\"line\">                                  calc_metric(n), best_state[<span class=\"number\">0</span>]))</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                ind = open_set.index(n)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> best_state[<span class=\"number\">1</span>] + <span class=\"number\">1</span> &lt; open_list[ind][<span class=\"number\">5</span>]:</span><br><span class=\"line\">                    open_list[ind] = (n, best_state[<span class=\"number\">1</span>] + <span class=\"number\">1</span>,</span><br><span class=\"line\">                                      calc_metric(n), best_state[<span class=\"number\">0</span>])</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(open_list) == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_path</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"get the path to answer\"\"\"</span></span><br><span class=\"line\">    close_set = [x[<span class=\"number\">0</span>] <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> close_list]</span><br><span class=\"line\">    path = [answer]</span><br><span class=\"line\">    <span class=\"keyword\">while</span> path[<span class=\"number\">-1</span>] != puzzle:</span><br><span class=\"line\">        path.append(close_list[close_set.index(path[<span class=\"number\">-1</span>])][<span class=\"number\">6</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> path</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_mat</span><span class=\"params\">(mat)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"docstring for print_mat\"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(k):</span><br><span class=\"line\">        a = <span class=\"string\">\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(m):</span><br><span class=\"line\">            a += str(mat[i * m + j]) + <span class=\"string\">\" \"</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> a</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_solvable</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"check whether the puzzle is solvable\"\"\"</span></span><br><span class=\"line\">    seq = copy(puzzle)</span><br><span class=\"line\">    seq.remove(<span class=\"number\">0</span>)</span><br><span class=\"line\">    inversions = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(seq)):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(i + <span class=\"number\">1</span>, len(seq)):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> seq[i] &gt; seq[j]:</span><br><span class=\"line\">                    inversions += <span class=\"number\">1</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    r = (k - <span class=\"number\">1</span>) - puzzle.index(<span class=\"number\">0</span>) / m</span><br><span class=\"line\">    solvable = ((m % <span class=\"number\">2</span> == <span class=\"number\">1</span> <span class=\"keyword\">and</span> inversions % <span class=\"number\">2</span> == <span class=\"number\">0</span>) <span class=\"keyword\">or</span></span><br><span class=\"line\">                (m % <span class=\"number\">2</span> == <span class=\"number\">0</span> <span class=\"keyword\">and</span> r % <span class=\"number\">2</span> == <span class=\"number\">1</span> <span class=\"keyword\">and</span> inversions % <span class=\"number\">2</span> == <span class=\"number\">1</span>) <span class=\"keyword\">or</span></span><br><span class=\"line\">                (m % <span class=\"number\">2</span> == <span class=\"number\">0</span> <span class=\"keyword\">and</span> r % <span class=\"number\">2</span> == <span class=\"number\">0</span> <span class=\"keyword\">and</span> inversions % <span class=\"number\">2</span> == <span class=\"number\">0</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> solvable</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    m = <span class=\"number\">4</span>    <span class=\"comment\"># width</span></span><br><span class=\"line\">    k = <span class=\"number\">4</span>    <span class=\"comment\"># height</span></span><br><span class=\"line\">    puzzle = [<span class=\"number\">2</span>, <span class=\"number\">10</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>, <span class=\"number\">14</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">9</span>, <span class=\"number\">13</span>, <span class=\"number\">15</span>, <span class=\"number\">12</span>]</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\"># the right answer</span></span><br><span class=\"line\">    answer = range(<span class=\"number\">1</span>, m * k + <span class=\"number\">1</span>)</span><br><span class=\"line\">    answer[m * k - <span class=\"number\">1</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># state=(seq,g,h,parent)</span></span><br><span class=\"line\">    open_list = []</span><br><span class=\"line\">    close_list = []</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_solvable():</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"The puzzle is solvable!\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> Astar():</span><br><span class=\"line\">            steps = get_path()</span><br><span class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">\"Total steps %d, as follow:\"</span> % len(steps)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(steps) - <span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>):</span><br><span class=\"line\">                print_mat(steps[i])</span><br><span class=\"line\">                <span class=\"keyword\">print</span> <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"The puzzle is unsolvable!\"</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>智力拼图（n-puzzle），是一种滑块类游戏，常见的类型有15数字滑块和8数字滑块，也有用图画代替数字的。这种游戏最早可能由Noyes Palmer Chapman在19世纪70年代发明的，也有说起源于中国的重排九宫，来自洛书，是华容道的祖先。</p>","more":"<p>一般意义上来说，(n+1)=m×k，m为问题宽度，k为问题高度，但通常情况下m=k。15-puzzle是十六宫格排布，有15个方块和1个空位；而8-puzzle是九宫格排布，有8个方块和1个空位。方块上的数字开始是乱序排列的，需要通过移动方块，使得数字最终按顺序排列，且空格位于右下角。</p>\n<p>以15-puzzle为例，假设最初排列为：</p>\n<pre><code>12   1    10  2\n7    11   4   14\n5    0    9   15\n8    13   6   3\n</code></pre><p>最后排列为</p>\n<pre><code>1   2   3   4\n5   6   7   8\n9   10  11  12\n13  14  15  0\n</code></pre><p>则取得胜利。</p>\n<p>对于一个n-puzzle问题，有两个问题需要解决：</p>\n<ol>\n<li>对于任何一种排列的n-puzzle问题，是否都可解？</li>\n<li>对于一个可解的n-puzzle，是否存在最优的自动解法？</li>\n</ol>\n<p>下面对于这两个问题分别进行分析。</p>\n<h2 id=\"一、n-puzzle问题的可解性\"><a href=\"#一、n-puzzle问题的可解性\" class=\"headerlink\" title=\"一、n-puzzle问题的可解性\"></a>一、n-puzzle问题的可解性</h2><p>当数字随机排列时，问题不一定可解，当(n+1)=m×k，m&gt;1，k&gt;1时，有(m×k)!/2个排列是无解。</p>\n<p>下面先定义n-puzzle的逆序个数：将宫格中的数字按照从左到右从上到下的顺序一字排开，空格不计入序列。以上面的15-puzzle为例，排列后得到的序列为</p>\n<pre><code>12    1    10    2    7    11    4    14    5    9    15    8    13    6    3\n</code></pre><p>序列中某个位置的逆序个数为其之后位置数字比该位置小的个数，如第1个位置数字为12，其逆序个数为11；第2个位置数字为1，其逆序个数为0。序列中所有位置的逆序数之和定义为该n-puzzle问题的逆序数。</p>\n<p>假设空位处于第i行，对于n-puzzle问题的可解性，结论是：</p>\n<ol>\n<li>如果问题宽度m为奇数，逆序个数为偶数，问题可解；</li>\n<li>如果问题宽度m为偶数，且空位距离底部的行数k-i为奇数，逆序个数为奇数，问题可解；</li>\n<li>如果问题宽度为偶数，且空位距离底部的行数k-i为偶数，逆序个数为偶数，问题可解。</li>\n</ol>\n<p>对于上面的15-puzzle，其宫格宽度为偶数，排列后序列对应的逆序个数为</p>\n<pre><code>11    0    8    0    4    6    1    6    1    3    4    2    2    1    0\n</code></pre><p>总逆序个数为49，为奇数。空位距离底部为1行，为奇数，此问题可解。</p>\n<p>具体的证明过程可以参考：<br><a href=\"http://www.cs.bham.ac.uk/~mdr/teaching/modules04/java2/TilesSolvability.html\" target=\"_blank\" rel=\"noopener\">http://www.cs.bham.ac.uk/~mdr/teaching/modules04/java2/TilesSolvability.html</a><br><a href=\"http://kevingong.com/Math/SixteenPuzzle.html\" target=\"_blank\" rel=\"noopener\">http://kevingong.com/Math/SixteenPuzzle.html</a> 给出了更一般的情况的证明。</p>\n<h2 id=\"二、n-puzzle问题的自动解法\"><a href=\"#二、n-puzzle问题的自动解法\" class=\"headerlink\" title=\"二、n-puzzle问题的自动解法\"></a>二、n-puzzle问题的自动解法</h2><p>n-puzzle问题的求解实际上还是一个解空间的自动搜索，通过空位的移动形成不同的解状态，直至获得正确解。组合问题的搜索方式分为两大类：一是无信息的搜索，即盲搜索，如宽度优先搜索、深度优先搜索；二是有信息的搜索，即启发式搜索，如A<em>搜索、IDA</em>搜索等。</p>\n<h3 id=\"1、无信息搜索\"><a href=\"#1、无信息搜索\" class=\"headerlink\" title=\"1、无信息搜索\"></a>1、无信息搜索</h3><p>常用的宽度搜索和深度搜索都可以达到目的，二者互有优劣。从理论上分析来说，空位的每一次移动都会形成一个新解，这比较适合使用宽度优先搜索。</p>\n<p>对于n-puzzle问题，这两种方法的搜索效率都不高。每个节点存储的为一个序列，随着搜索量的增加，其存储量也急剧增加。</p>\n<h3 id=\"2、启发式搜索\"><a href=\"#2、启发式搜索\" class=\"headerlink\" title=\"2、启发式搜索\"></a>2、启发式搜索</h3><p>A<em>搜索是一种经典的启发式搜索方法，与无信息搜索相比，A</em>利用了当前状态与最终状态之间的距离信息作为前进的指引方向，自然要比盲目的搜索效率要高很多。</p>\n<p>从最短路径搜索的角度来说，A*算法被认为是最好的算法，其核心要点在于选取好的代价函数。通常代价函数可以表示为f(n)=g(n)+h(n)，其中g(n)表示起点到顶点n的实际距离，h(n)表示顶点n到目标的估算距离。</p>\n<p>当h(n)=0时，则只需要求g(n)，则转化为单源最短路径问题，即Dijkstra算法。</p>\n<p>当h(n)&lt;=n到目标的实际距离，则一定可以求得最优解，且h(n)越小，需要计算的节点越多，算法效率越低。</p>\n<p>关于A*搜索，有些比较好的介绍：<br><a href=\"http://www.policyalmanac.org/games/aStarTutorial.htm\" target=\"_blank\" rel=\"noopener\">http://www.policyalmanac.org/games/aStarTutorial.htm</a><br><a href=\"http://blog.minstrel.idv.tw/2004/12/star-algorithm.html\" target=\"_blank\" rel=\"noopener\">http://blog.minstrel.idv.tw/2004/12/star-algorithm.html</a></p>\n<p>对于n-puzzle问题，每个状态可以看作是一个节点，移动空格位置后状态发生变化，由一个节点跳转到另一个节点。</p>\n<p>比如将以下状态作为当前节点，</p>\n<pre><code>12   1    10   2\n7    11   4    14\n5    0    9    15\n8    13   6    3\n</code></pre><p>向下移动后获得新的状态</p>\n<pre><code>12   1    10   2\n7    11   4    14\n5    13   9    15\n8    0    6    3\n</code></pre><p>这作为新的节点。</p>\n<p>空格最多可以可以向上下左右四个方向移动，即每个节点最多有四个子节点。已知起始状态和最终状态，我们可以很容易地用A*算法解决n-puzzle问题。代价函数中h(n)采用的是Manhattan距离，即到达目标所需的最小移动格数。例如，上图中，数字12当前坐标为(0,0)，正确状态下坐标为(4,3)，其Manhattan距离为7。当前状态n中所有数字（不包括0）的Manhattan距离之和即为h(n)。很容易判断出来，h(n)&lt;到目标的实际距离，则A*算法一定可以求得最优解。</p>\n<p>此外，对于规模更大问题，可以考虑采用A*算法的变形IDA*。IDA*算法全称是Iterative Deepening A*，它不保存之前的搜索状态，搜索效率会稍低于A*，但所需的内存开销要小。</p>\n<p>n-puzzle问题的A*搜索代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">File Name: puzzle.py</span></span><br><span class=\"line\"><span class=\"string\">Author: tau</span></span><br><span class=\"line\"><span class=\"string\">Mailto: guantau@163.com</span></span><br><span class=\"line\"><span class=\"string\">Created Time: 2014.05.31</span></span><br><span class=\"line\"><span class=\"string\">Description: solve n-puzzle</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> copy <span class=\"keyword\">import</span> copy</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">move</span><span class=\"params\">(seq)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"move blank left, right, up, down\"\"\"</span></span><br><span class=\"line\">    pos = seq.index(<span class=\"number\">0</span>)</span><br><span class=\"line\">    r = pos / m</span><br><span class=\"line\">    c = pos % m</span><br><span class=\"line\">    result = []</span><br><span class=\"line\">    <span class=\"keyword\">if</span> c != <span class=\"number\">0</span>:</span><br><span class=\"line\">        left = copy(seq)</span><br><span class=\"line\">        left[pos] = left[pos - <span class=\"number\">1</span>]</span><br><span class=\"line\">        left[pos - <span class=\"number\">1</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">        result.append(left)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> c != m - <span class=\"number\">1</span>:</span><br><span class=\"line\">        right = copy(seq)</span><br><span class=\"line\">        right[pos] = right[pos + <span class=\"number\">1</span>]</span><br><span class=\"line\">        right[pos + <span class=\"number\">1</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">        result.append(right)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> r != <span class=\"number\">0</span>:</span><br><span class=\"line\">        up = copy(seq)</span><br><span class=\"line\">        up[pos] = up[pos - m]</span><br><span class=\"line\">        up[pos - m] = <span class=\"number\">0</span></span><br><span class=\"line\">        result.append(up)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> r != k - <span class=\"number\">1</span>:</span><br><span class=\"line\">        down = copy(seq)</span><br><span class=\"line\">        down[pos] = down[pos + m]</span><br><span class=\"line\">        down[pos + m] = <span class=\"number\">0</span></span><br><span class=\"line\">        result.append(down)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calc_metric</span><span class=\"params\">(seq)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"calcuate the distance to the answer from current state\"\"\"</span></span><br><span class=\"line\">    metric = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, m * k):</span><br><span class=\"line\">        ind = seq.index(i)</span><br><span class=\"line\">        metric += (ind / m - (i - <span class=\"number\">1</span>) / m) + (ind % m - (i - <span class=\"number\">1</span>) % m)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> metric</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find_best_state</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"find the state with lowest metric in the open list\"\"\"</span></span><br><span class=\"line\">    f = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> open_list:</span><br><span class=\"line\">        f.append(s[<span class=\"number\">1</span>] + s[<span class=\"number\">2</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> open_list[np.argmin(f)]</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Astar</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"solve puzzle using A* algorithm\"\"\"</span></span><br><span class=\"line\">    open_list.append((puzzle, <span class=\"number\">0</span>, calc_metric(puzzle), <span class=\"number\">0</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">while</span> len(open_list) != <span class=\"number\">0</span>:</span><br><span class=\"line\">        best_state = find_best_state()</span><br><span class=\"line\">        open_list.remove(best_state)</span><br><span class=\"line\">        close_list.append(best_state)</span><br><span class=\"line\">        neighbors = move(best_state[<span class=\"number\">0</span>])</span><br><span class=\"line\"> </span><br><span class=\"line\">        open_set = [x[<span class=\"number\">0</span>] <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> open_list]</span><br><span class=\"line\">        close_set = [x[<span class=\"number\">0</span>] <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> close_list]</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">if</span> answer <span class=\"keyword\">in</span> close_set:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> neighbors:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> n <span class=\"keyword\">in</span> close_set:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> n <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> open_set:</span><br><span class=\"line\">                open_list.append((n, best_state[<span class=\"number\">1</span>] + <span class=\"number\">1</span>,</span><br><span class=\"line\">                                  calc_metric(n), best_state[<span class=\"number\">0</span>]))</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                ind = open_set.index(n)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> best_state[<span class=\"number\">1</span>] + <span class=\"number\">1</span> &lt; open_list[ind][<span class=\"number\">5</span>]:</span><br><span class=\"line\">                    open_list[ind] = (n, best_state[<span class=\"number\">1</span>] + <span class=\"number\">1</span>,</span><br><span class=\"line\">                                      calc_metric(n), best_state[<span class=\"number\">0</span>])</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(open_list) == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_path</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"get the path to answer\"\"\"</span></span><br><span class=\"line\">    close_set = [x[<span class=\"number\">0</span>] <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> close_list]</span><br><span class=\"line\">    path = [answer]</span><br><span class=\"line\">    <span class=\"keyword\">while</span> path[<span class=\"number\">-1</span>] != puzzle:</span><br><span class=\"line\">        path.append(close_list[close_set.index(path[<span class=\"number\">-1</span>])][<span class=\"number\">6</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> path</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_mat</span><span class=\"params\">(mat)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"docstring for print_mat\"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(k):</span><br><span class=\"line\">        a = <span class=\"string\">\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(m):</span><br><span class=\"line\">            a += str(mat[i * m + j]) + <span class=\"string\">\" \"</span></span><br><span class=\"line\">        <span class=\"keyword\">print</span> a</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">is_solvable</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"check whether the puzzle is solvable\"\"\"</span></span><br><span class=\"line\">    seq = copy(puzzle)</span><br><span class=\"line\">    seq.remove(<span class=\"number\">0</span>)</span><br><span class=\"line\">    inversions = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(seq)):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(i + <span class=\"number\">1</span>, len(seq)):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> seq[i] &gt; seq[j]:</span><br><span class=\"line\">                    inversions += <span class=\"number\">1</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    r = (k - <span class=\"number\">1</span>) - puzzle.index(<span class=\"number\">0</span>) / m</span><br><span class=\"line\">    solvable = ((m % <span class=\"number\">2</span> == <span class=\"number\">1</span> <span class=\"keyword\">and</span> inversions % <span class=\"number\">2</span> == <span class=\"number\">0</span>) <span class=\"keyword\">or</span></span><br><span class=\"line\">                (m % <span class=\"number\">2</span> == <span class=\"number\">0</span> <span class=\"keyword\">and</span> r % <span class=\"number\">2</span> == <span class=\"number\">1</span> <span class=\"keyword\">and</span> inversions % <span class=\"number\">2</span> == <span class=\"number\">1</span>) <span class=\"keyword\">or</span></span><br><span class=\"line\">                (m % <span class=\"number\">2</span> == <span class=\"number\">0</span> <span class=\"keyword\">and</span> r % <span class=\"number\">2</span> == <span class=\"number\">0</span> <span class=\"keyword\">and</span> inversions % <span class=\"number\">2</span> == <span class=\"number\">0</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> solvable</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    m = <span class=\"number\">4</span>    <span class=\"comment\"># width</span></span><br><span class=\"line\">    k = <span class=\"number\">4</span>    <span class=\"comment\"># height</span></span><br><span class=\"line\">    puzzle = [<span class=\"number\">2</span>, <span class=\"number\">10</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>, <span class=\"number\">14</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">9</span>, <span class=\"number\">13</span>, <span class=\"number\">15</span>, <span class=\"number\">12</span>]</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\"># the right answer</span></span><br><span class=\"line\">    answer = range(<span class=\"number\">1</span>, m * k + <span class=\"number\">1</span>)</span><br><span class=\"line\">    answer[m * k - <span class=\"number\">1</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># state=(seq,g,h,parent)</span></span><br><span class=\"line\">    open_list = []</span><br><span class=\"line\">    close_list = []</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_solvable():</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"The puzzle is solvable!\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> Astar():</span><br><span class=\"line\">            steps = get_path()</span><br><span class=\"line\">            <span class=\"keyword\">print</span> <span class=\"string\">\"Total steps %d, as follow:\"</span> % len(steps)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(steps) - <span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>):</span><br><span class=\"line\">                print_mat(steps[i])</span><br><span class=\"line\">                <span class=\"keyword\">print</span> <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"The puzzle is unsolvable!\"</span></span><br></pre></td></tr></table></figure>"},{"title":"智力游戏自动求解1——数独","date":"2016-08-21T15:34:38.000Z","_content":"\n> 引：单位强制使用定制的非智能手机，只能打电话发短信，此外还有一些智力小游戏，比如推箱子、拼图、数独、俄罗斯方块等等。许久没有玩过这些智力小游戏了，玩着玩着就突然想找一些自动求解的方法来攻破这些小游戏。恰好最近在学习python，刚好写点小程序练练手。\n\n先从最简单的数独开始，其求解思想很简单：在给定的初始数字的条件下进行深度优先搜索，当搜索完所有9x9个格子时，就获得了最终的解。\n\n具体步骤：\n1. 数据结构采用一维数组表示9x9格，0表示未填，1-9表示要填的数字；\n2. 搜索时采用递归函数，当某个格子没有可填的数字时，回退到上一状态；\n3. 搜索到达数组尾部时，找到答案。\n\n<!-- more -->\n\n为实现方便，coding时采用的是顺序搜索，求到一个答案后立即返回。因此，两方面可以改进：\n1. 求解所有答案，搜索得到答案后不返回，保存答案并回退状态继续搜索；\n2. 改变搜索顺序，每次优先从可能取值最少的格子开始，这可以减少搜索时间，但也会增加一些代码量。\n\n实现代码如下：\n\n```python\n#!/usr/bin/env python\n# encoding=utf8\n'''\nFile Name: number.py\nAuthor: tau\nMailto: guantau@163.com\nCreated Time: 2014.05.04\nDescription: solve sudoku\n'''\nimport numpy as np\nimport time\n\ndef possible_value(ind, nums):\n    \"\"\"return possible values in position ind\"\"\"\n    pv = range(1, 10)\n    nummat = nums.reshape(9, 9)\n    ri = ind / 9\n    ci = ind - ind / 9 * 9\n    row = nummat[ri, :]\n    col = nummat[:, ci]\n    blk = nummat[ri / 3 * 3:(ri / 3 + 1) * 3, ci / 3 * 3:(ci / 3 + 1) * 3]\n    for x in range(1, 10):\n        if x in row or x in col or x in blk:\n            pv.remove(x)\n    return pv\n\ndef sudoku(ind, nums):\n    \"\"\"recursion\"\"\"\n    while ind < len(nums) and nums[ind] != 0:\n        ind = ind + 1\n    if ind == len(nums):\n        return True\n    else:\n        for v in possible_value(ind, nums):\n            nums[ind] = v\n            if sudoku(ind + 1, nums) is True:\n                return True\n            nums[ind] = 0\n\n\nnumbers = np.array([\n    8, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 3, 6, 0, 0, 0, 0, 0,\n    0, 7, 0, 0, 9, 0, 2, 0, 0,\n    0, 5, 0, 0, 0, 7, 0, 0, 0,\n    0, 0, 0, 0, 4, 5, 7, 0, 0,\n    0, 0, 0, 1, 0, 0, 0, 3, 0,\n    0, 0, 1, 0, 0, 0, 0, 6, 8,\n    0, 0, 8, 5, 0, 0, 0, 1, 0,\n    0, 9, 0, 0, 0, 0, 4, 0, 0\n])\n\nt0 = time.time()\nprint \"Question:\"\nprint numbers.reshape(9, 9)\nsudoku(0, numbers)\nprint \"Answer:\"\nprint numbers.reshape(9, 9)\nt1 = time.time()\nprint \"Time: %f s\" % (t1 - t0)\n```\n\n\n","source":"_posts/2016-08-21-sudoku.md","raw":"---\ntitle: 智力游戏自动求解1——数独\ndate: 2016-08-21 23:34:38\ncategories: 写点程序\ntags:\n  - 数独\n---\n\n> 引：单位强制使用定制的非智能手机，只能打电话发短信，此外还有一些智力小游戏，比如推箱子、拼图、数独、俄罗斯方块等等。许久没有玩过这些智力小游戏了，玩着玩着就突然想找一些自动求解的方法来攻破这些小游戏。恰好最近在学习python，刚好写点小程序练练手。\n\n先从最简单的数独开始，其求解思想很简单：在给定的初始数字的条件下进行深度优先搜索，当搜索完所有9x9个格子时，就获得了最终的解。\n\n具体步骤：\n1. 数据结构采用一维数组表示9x9格，0表示未填，1-9表示要填的数字；\n2. 搜索时采用递归函数，当某个格子没有可填的数字时，回退到上一状态；\n3. 搜索到达数组尾部时，找到答案。\n\n<!-- more -->\n\n为实现方便，coding时采用的是顺序搜索，求到一个答案后立即返回。因此，两方面可以改进：\n1. 求解所有答案，搜索得到答案后不返回，保存答案并回退状态继续搜索；\n2. 改变搜索顺序，每次优先从可能取值最少的格子开始，这可以减少搜索时间，但也会增加一些代码量。\n\n实现代码如下：\n\n```python\n#!/usr/bin/env python\n# encoding=utf8\n'''\nFile Name: number.py\nAuthor: tau\nMailto: guantau@163.com\nCreated Time: 2014.05.04\nDescription: solve sudoku\n'''\nimport numpy as np\nimport time\n\ndef possible_value(ind, nums):\n    \"\"\"return possible values in position ind\"\"\"\n    pv = range(1, 10)\n    nummat = nums.reshape(9, 9)\n    ri = ind / 9\n    ci = ind - ind / 9 * 9\n    row = nummat[ri, :]\n    col = nummat[:, ci]\n    blk = nummat[ri / 3 * 3:(ri / 3 + 1) * 3, ci / 3 * 3:(ci / 3 + 1) * 3]\n    for x in range(1, 10):\n        if x in row or x in col or x in blk:\n            pv.remove(x)\n    return pv\n\ndef sudoku(ind, nums):\n    \"\"\"recursion\"\"\"\n    while ind < len(nums) and nums[ind] != 0:\n        ind = ind + 1\n    if ind == len(nums):\n        return True\n    else:\n        for v in possible_value(ind, nums):\n            nums[ind] = v\n            if sudoku(ind + 1, nums) is True:\n                return True\n            nums[ind] = 0\n\n\nnumbers = np.array([\n    8, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 3, 6, 0, 0, 0, 0, 0,\n    0, 7, 0, 0, 9, 0, 2, 0, 0,\n    0, 5, 0, 0, 0, 7, 0, 0, 0,\n    0, 0, 0, 0, 4, 5, 7, 0, 0,\n    0, 0, 0, 1, 0, 0, 0, 3, 0,\n    0, 0, 1, 0, 0, 0, 0, 6, 8,\n    0, 0, 8, 5, 0, 0, 0, 1, 0,\n    0, 9, 0, 0, 0, 0, 4, 0, 0\n])\n\nt0 = time.time()\nprint \"Question:\"\nprint numbers.reshape(9, 9)\nsudoku(0, numbers)\nprint \"Answer:\"\nprint numbers.reshape(9, 9)\nt1 = time.time()\nprint \"Time: %f s\" % (t1 - t0)\n```\n\n\n","slug":"sudoku","published":1,"updated":"2018-01-30T10:12:42.836Z","_id":"cjb6k4kvn000culepz0wdc3zn","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>引：单位强制使用定制的非智能手机，只能打电话发短信，此外还有一些智力小游戏，比如推箱子、拼图、数独、俄罗斯方块等等。许久没有玩过这些智力小游戏了，玩着玩着就突然想找一些自动求解的方法来攻破这些小游戏。恰好最近在学习python，刚好写点小程序练练手。</p>\n</blockquote>\n<p>先从最简单的数独开始，其求解思想很简单：在给定的初始数字的条件下进行深度优先搜索，当搜索完所有9x9个格子时，就获得了最终的解。</p>\n<p>具体步骤：</p>\n<ol>\n<li>数据结构采用一维数组表示9x9格，0表示未填，1-9表示要填的数字；</li>\n<li>搜索时采用递归函数，当某个格子没有可填的数字时，回退到上一状态；</li>\n<li>搜索到达数组尾部时，找到答案。</li>\n</ol>\n<a id=\"more\"></a>\n<p>为实现方便，coding时采用的是顺序搜索，求到一个答案后立即返回。因此，两方面可以改进：</p>\n<ol>\n<li>求解所有答案，搜索得到答案后不返回，保存答案并回退状态继续搜索；</li>\n<li>改变搜索顺序，每次优先从可能取值最少的格子开始，这可以减少搜索时间，但也会增加一些代码量。</li>\n</ol>\n<p>实现代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># encoding=utf8</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">File Name: number.py</span></span><br><span class=\"line\"><span class=\"string\">Author: tau</span></span><br><span class=\"line\"><span class=\"string\">Mailto: guantau@163.com</span></span><br><span class=\"line\"><span class=\"string\">Created Time: 2014.05.04</span></span><br><span class=\"line\"><span class=\"string\">Description: solve sudoku</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">possible_value</span><span class=\"params\">(ind, nums)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"return possible values in position ind\"\"\"</span></span><br><span class=\"line\">    pv = range(<span class=\"number\">1</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">    nummat = nums.reshape(<span class=\"number\">9</span>, <span class=\"number\">9</span>)</span><br><span class=\"line\">    ri = ind / <span class=\"number\">9</span></span><br><span class=\"line\">    ci = ind - ind / <span class=\"number\">9</span> * <span class=\"number\">9</span></span><br><span class=\"line\">    row = nummat[ri, :]</span><br><span class=\"line\">    col = nummat[:, ci]</span><br><span class=\"line\">    blk = nummat[ri / <span class=\"number\">3</span> * <span class=\"number\">3</span>:(ri / <span class=\"number\">3</span> + <span class=\"number\">1</span>) * <span class=\"number\">3</span>, ci / <span class=\"number\">3</span> * <span class=\"number\">3</span>:(ci / <span class=\"number\">3</span> + <span class=\"number\">1</span>) * <span class=\"number\">3</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">10</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> row <span class=\"keyword\">or</span> x <span class=\"keyword\">in</span> col <span class=\"keyword\">or</span> x <span class=\"keyword\">in</span> blk:</span><br><span class=\"line\">            pv.remove(x)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pv</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sudoku</span><span class=\"params\">(ind, nums)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"recursion\"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ind &lt; len(nums) <span class=\"keyword\">and</span> nums[ind] != <span class=\"number\">0</span>:</span><br><span class=\"line\">        ind = ind + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ind == len(nums):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> possible_value(ind, nums):</span><br><span class=\"line\">            nums[ind] = v</span><br><span class=\"line\">            <span class=\"keyword\">if</span> sudoku(ind + <span class=\"number\">1</span>, nums) <span class=\"keyword\">is</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">            nums[ind] = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">numbers = np.array([</span><br><span class=\"line\">    <span class=\"number\">8</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"number\">0</span>, <span class=\"number\">7</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">9</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">7</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>,</span><br><span class=\"line\">    <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"number\">0</span>, <span class=\"number\">9</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">])</span><br><span class=\"line\"></span><br><span class=\"line\">t0 = time.time()</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"Question:\"</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> numbers.reshape(<span class=\"number\">9</span>, <span class=\"number\">9</span>)</span><br><span class=\"line\">sudoku(<span class=\"number\">0</span>, numbers)</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"Answer:\"</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> numbers.reshape(<span class=\"number\">9</span>, <span class=\"number\">9</span>)</span><br><span class=\"line\">t1 = time.time()</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"Time: %f s\"</span> % (t1 - t0)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>引：单位强制使用定制的非智能手机，只能打电话发短信，此外还有一些智力小游戏，比如推箱子、拼图、数独、俄罗斯方块等等。许久没有玩过这些智力小游戏了，玩着玩着就突然想找一些自动求解的方法来攻破这些小游戏。恰好最近在学习python，刚好写点小程序练练手。</p>\n</blockquote>\n<p>先从最简单的数独开始，其求解思想很简单：在给定的初始数字的条件下进行深度优先搜索，当搜索完所有9x9个格子时，就获得了最终的解。</p>\n<p>具体步骤：</p>\n<ol>\n<li>数据结构采用一维数组表示9x9格，0表示未填，1-9表示要填的数字；</li>\n<li>搜索时采用递归函数，当某个格子没有可填的数字时，回退到上一状态；</li>\n<li>搜索到达数组尾部时，找到答案。</li>\n</ol>","more":"<p>为实现方便，coding时采用的是顺序搜索，求到一个答案后立即返回。因此，两方面可以改进：</p>\n<ol>\n<li>求解所有答案，搜索得到答案后不返回，保存答案并回退状态继续搜索；</li>\n<li>改变搜索顺序，每次优先从可能取值最少的格子开始，这可以减少搜索时间，但也会增加一些代码量。</li>\n</ol>\n<p>实现代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># encoding=utf8</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">File Name: number.py</span></span><br><span class=\"line\"><span class=\"string\">Author: tau</span></span><br><span class=\"line\"><span class=\"string\">Mailto: guantau@163.com</span></span><br><span class=\"line\"><span class=\"string\">Created Time: 2014.05.04</span></span><br><span class=\"line\"><span class=\"string\">Description: solve sudoku</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">possible_value</span><span class=\"params\">(ind, nums)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"return possible values in position ind\"\"\"</span></span><br><span class=\"line\">    pv = range(<span class=\"number\">1</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">    nummat = nums.reshape(<span class=\"number\">9</span>, <span class=\"number\">9</span>)</span><br><span class=\"line\">    ri = ind / <span class=\"number\">9</span></span><br><span class=\"line\">    ci = ind - ind / <span class=\"number\">9</span> * <span class=\"number\">9</span></span><br><span class=\"line\">    row = nummat[ri, :]</span><br><span class=\"line\">    col = nummat[:, ci]</span><br><span class=\"line\">    blk = nummat[ri / <span class=\"number\">3</span> * <span class=\"number\">3</span>:(ri / <span class=\"number\">3</span> + <span class=\"number\">1</span>) * <span class=\"number\">3</span>, ci / <span class=\"number\">3</span> * <span class=\"number\">3</span>:(ci / <span class=\"number\">3</span> + <span class=\"number\">1</span>) * <span class=\"number\">3</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">10</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> x <span class=\"keyword\">in</span> row <span class=\"keyword\">or</span> x <span class=\"keyword\">in</span> col <span class=\"keyword\">or</span> x <span class=\"keyword\">in</span> blk:</span><br><span class=\"line\">            pv.remove(x)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pv</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sudoku</span><span class=\"params\">(ind, nums)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"recursion\"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ind &lt; len(nums) <span class=\"keyword\">and</span> nums[ind] != <span class=\"number\">0</span>:</span><br><span class=\"line\">        ind = ind + <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ind == len(nums):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> possible_value(ind, nums):</span><br><span class=\"line\">            nums[ind] = v</span><br><span class=\"line\">            <span class=\"keyword\">if</span> sudoku(ind + <span class=\"number\">1</span>, nums) <span class=\"keyword\">is</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">            nums[ind] = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">numbers = np.array([</span><br><span class=\"line\">    <span class=\"number\">8</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"number\">0</span>, <span class=\"number\">7</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">9</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">7</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>,</span><br><span class=\"line\">    <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"number\">0</span>, <span class=\"number\">9</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">])</span><br><span class=\"line\"></span><br><span class=\"line\">t0 = time.time()</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"Question:\"</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> numbers.reshape(<span class=\"number\">9</span>, <span class=\"number\">9</span>)</span><br><span class=\"line\">sudoku(<span class=\"number\">0</span>, numbers)</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"Answer:\"</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> numbers.reshape(<span class=\"number\">9</span>, <span class=\"number\">9</span>)</span><br><span class=\"line\">t1 = time.time()</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"Time: %f s\"</span> % (t1 - t0)</span><br></pre></td></tr></table></figure>"},{"title":"vim-latex-suite使用手册","date":"2016-08-21T14:33:47.000Z","_content":"\n## 导语\n> 快捷键是提高效率的不二法则，毕竟十个手指头比两个手指头要快得多。\n使用vim-latex-suite的关键亦是如此。\n\n说明：\n\n* `||`中为在普通模式下输入的命令；\n* `<>`中为按键，C表示Ctrl，A表示Alt，S表示Shift；\n\n<!-- more -->\n\n## 一、模板\n\n### 1. 使用方法\n模板存放在$VIM/ftplugin/latex-suite/templates/中，使用命令`|:TTemplate|`或者从菜单中可以调出可用的模板。\n\n### 2. 定制方法\n在$VIM/ftplugin/latex-suite/templates/中建立相应的文件即可。\n\n## 二、包\n### 1. 使用方法\n宏包存放在$VIM/ftplugin/latex-suite/packages/中，从菜单中或者使用按键`<F5>`、命令`|:TPackage|`都可以调出可用宏包。\n\n### 2. 定制方法\n在$VIM/ftplugin/latex-suite/packages/中建立相应的文件即可，可参考exmpl。\n\n## 三、环境\n\n### 1. 使用方法\n\n#### （1）插入\n* 方法1：`<F5>`，读取当前行的单词并形成环境，如果是空行，则给出环境列表；\n* 方法2：`<S-F1>`-`<S-F4>`，每一个对应一个自定义的环境；\n* 方法3：使3字母序列`Exx`，第一个字母E代表Environment，后两个字母是环境名的简写，比如EFI插入figure环境。\n\n#### （2）包围\n* 方法1：选中需要放入环境中的内容，按`<F5>`；\n* 方法2：选中需要放入环境中的内容，按3字母序列，这里的3字母序列和插入中不同的在于首字母需要改为`<,>`，后两个字母保持不变（小写即可）；\n\n#### （3）修改\n* 方法1：选中需要修改环境名的内容，然后按`<S-F5>`，多重环境时先改变最内层环境；\n\n### 2.定制方法\n设置变量`g:Tex_Env_name`即可，其中'name'是环境名，例如\n\n    let g:Tex_Env_frame = \"\\\\begin{frame}\\<cr>\\\\frametitle{<+title+>}\\<cr><++>\\<cr>\\\\end{frame}<++>\"\n\n有些带标签的环境可设置变量`g:Tex_EnvLabelprefix_name`，例如\n\n    figure, table, theorem, definition,lemma, proposition, corollary, assumption, remark, equation, eqnarray, align, multline\n\n默认给出的环境列表由变量`g:Tex_PromptedEnvironments`设置，默认值为\n\n    'eqnarray\\*,eqnarray, equation,equation\\*,\\[,$$,align,align\\*'\n\n`<S-F1>`-`<S-F4>`对应的环境名由`g:Tex_HotKeyMappings`设置，默认值为\n\n    'eqnarray*,eqnarray,bmatrix'\n\n\n## 四、命令\n\n### 1. 使用方法\n\n#### （1）插入\n\n* 方法1：`<F7>`，提取当前光标所在单词构成命令，如果是空单词，则给出命令列表；\n\n#### （2）包围\n* 方法1：选中需要放入命令的内容，按`<F7>`；\n\n#### （3）修改\n* 方法1：选中需要修改命令名的内容，按`<S-F7>`。\n\n### 2. 定制方法\n设置变量`g:Tex_Com_name`即可，其中'name'是变量名。\n\n默认给出的命令列表由变量`g:Tex_PromptedCommands`控制，默认值为\n\n\t'footnote,cite,pageref,label'\n\n## 五、参考文献\n\n### 1. 使用方法\n共提供四种插入模式：`BBB`、`BBL`、`BBH`和`BBX`。\n它们的插入方式是一致的，输入后会提示需要插入的文献类型。\n\n* `BBB`仅插入该种文献所需的最少字段；\n* `BBL`插入该种文献常用的字段；\n* `BBH`插入一些更多的字段；\n* `BBX`则插入所有的字段。\n\n### 2. 定制方法\n如果需要定制不同插入模式下的字段，那么需要修改全局变量`g:Bib_{type}_options`\n\n该变量在文件$VIM/ftplugin/bib.vim中定义，{type}是文献类型，比如'article'、'book'等。\n变量取值如下表所示：\n\n字符  |  对应的字段\n-----|------------\nw    |       address\na    |        author\nb    |       booktitle\nc    |        chapter\nd    |       edition\ne    |       editor\nh    |       howpublished\ni    |       institution\nk    |       isbn\nj    |       journal\nm    |       month\nz    |       note\nn    |       number\no    |       organization\np    |       pages\nq    |       publisher\nr    |       school\ns    |       series\nt    |       title\nu    |       type\nv    |       volume\ny    |       year\n\n比如，默认条件下使用`BBB`插入'article'\n\n    @ARTICLE{<+key+>,\n        author = {<++>},\n        title = {<++>},\n        journal = {<++>},\n        year = {<++>},\n        otherinfo = {<++>}\n    }<++>\n\n当定义`g:Bib_article_options`为'mnp'，则使用`BBB`插入'article'为\n\n    @ARTICLE{<+key+>,\n        author = {<++>},\n        title = {<++>},\n        journal = {<++>},\n        year = {<++>},\n        month = {<++>},\n        number = {<++>},\n        pages = {<++>},\n        otherinfo = {<++>}\n    }<++>\n\n如果还有一些上面没有列出来的字段需要插入，则需要定义全局变量\n`g:Bib_article_extrafields`\n\n比如定义\n\n    let g:Bib_article_extrafields = \"crossref\\nabstract\"\n\n则'article'的模板会多出两个字段\n\n    crossref = {<++>},\n    abstract = {<++>},\n\n\n## 六、编译及查看\n使用按键`\\ll`开始编译。\n变量`g:Tex_CompileRule_<format>`设置编译规则，<format>是\"pdf\"、\"dvi\"等。\n设置编译依赖，比如\n\n    .tex -> .dvi -> .ps -> .pdf\n\n可以设置为\n\n    let g:Tex_FormatDependency_pdf = 'dvi,ps,pdf'\n\n同时需要设定编译规则\n\n    let g:Tex_CompileRule_dvi = 'latex --interaction=nonstopmode $*'\n    let g:Tex_CompileRule_ps = 'dvips -Ppdf -o $*.ps $*.dvi'\n    let g:Tex_CompileRule_pdf = 'ps2pdf $*.ps'\n\n只编译部分文件，选择模式下选择一部分内容，然后使用\\ll编译这一部分内容，用\\lv来查看结果。对应的命令是`|:TPartComp|`和`|:TPartView|`。\n\n查看使用`\\lv`。规则使用变量`g:Tex_ViewRule_<format>`来定义。\n\n前向搜索使用`\\ls`。在Mac上，需要设置`g:Tex_TreatMacViewerAsUNIX`为1\n\n反向搜索需要设置查看器与vim的沟通方式，比如\n\n    \"C:\\Program Files\\vim\\vim61\\gvim\" -c \":RemoteOpen +%l %f\"\n\n## 七、折叠\nLatex-Suite用插件SyntaxFolds.vim来进行语法折叠。\n折叠是手动的，新写的内容需要按`<F6>`或`\\rf`来开启折叠。\n\n有一系列变量用来控制折叠\n`g:Tex_FoldedSections`控制哪些节需要折叠，默认值为\n\n    part,chapter,section,subsection,subsubsection,paragraph\n\n`g:Tex_FoldedEnvironments`控制哪些环境需要折叠，默认值为\n\n    verbatim,comment,eq,gather,\n    align,figure,table,thebibliography,\n    keywords,abstract,titlepage\n\n`g:Tex_FoldedCommands`控制哪些命令需要折叠，默认值为空。\n`g:Tex_FoldedMisc`控制一些其他需要折叠的内容，默认值为\n\n    item,preamble,<<<\n\n## 八、多文件工程\n假设有如下工程结构\n\n    thesis/\n        main.tex\n        abstract.tex\n        intro/\n            intro.tex\n            figures/\n                fig1.eps\n                fig2.eps\n        chapter1/\n            chap1.tex\n            figures/\n                fig1.eps\n        conclusion/\n            conclusion.tex\n            figures/\n\nmain.tex文件如下\n\n    % file: main.tex\n    \\documentclass{report}\n    \\begin{document}\n\n    \\input{abstract.tex}\n    \\input{intro/intro.tex}\n    \\input{chapter1/chap1.tex}\n    \\input{conclusion/conclusion.tex}\n\n    \\end{document}\n\n只需要创建一个空文件main.tex.latexmain就可以表明main.tex是主文件。\n\n\n## 九、常用快捷键\n\n### 1. 章节\n可使用3字母序列`Sxx`进行插入和修改。\n\n### 2. 字体\n可使用3字母序列`Fxx`进行插入和修改。\n\n### 3. 希腊字母\n\\`a至\\`z分别代表\\alpha到\\zeta，大写情况也类似（但不支持所有大写希腊字母）。\n\n### 4. 智能按键\n`...`在数学模式外是\\ldots，在数学模式中是\\cdots\n\n### 5. 补全\n用`<F9>`可以进行各种类型的补全，包括引用补全（\\ref、\\eqref、\\cite）、文件名补全、命令参数补全。通常需要设置\n\n\tset grepprg=grep\\ -nH\\ $*\n\n### 6. Auc-Tex中的一些快捷键\n数学环境中：\n\n快捷键 | 对应的命令\n------|------------\n\\`^   |   \\Hat{<++>}<++>\n\\`_   |   \\bar{<++>}<++>\n\\`6   |   \\partial\n\\`8   |   \\infty\n\\`/   |   \\frac{<++>}{<++>}<++>\n\\`%   |   \\frac{<++>}{<++>}<++>\n\\`@   |   \\circ\n\\`0   |   ^\\circ\n\\`=   |   \\equiv\n\\`\\   |   \\setminus\n\\`.   |   \\cdot\n\\`*   |   \\times\n\\`&   |   \\wedge\n\\`-   |   \\bigcap\n\\`+   |   \\bigcup\n\\`(   |   \\subset\n\\`)   |   \\supset\n\\`<   |   \\le\n\\`>   |   \\ge\n\\`,   |   \\nonumber\n\\`~   |   \\tilde{<++>}<++>\n\\`;   |   \\dot{<++>}<++>\n\\`:   |   \\ddot{<++>}<++>\n\\`2   |   \\sqrt{<++>}<++>\n\\`&#124;   |   \\Big&#124;\n\\`I   |   \\int_{<++>}^{<++>}<++>\n\nvisual模式下：\n\n快捷键 | 对应的命令\n------|----------\n\\`(   | \\left( \\right)\n\\`[   | \\left[ \\right]\n\\`{   | \\left\\\\{ \\right\\\\}\n\\`$   | 普通选择 $$，行选择 \\\\[ \\\\]\n\n\n### 7. Alt相关\n默认条件下Alt键是菜单栏的热键，如果有冲突则需要设置\n\n\tset winaltkeys=no\n\n* `<Alt-L>`\n在插入模式下，根据当前光标前的字符，插入不同的命令\n\n光标之前的字符 | 对应的命令\n------------|-----------\n(           | \\left( <++> \\right)\n[           | \\left[ <++> \\right]\n&#124;      | \\left&#124; <++> \\right&#124;\n{           | \\left\\{ <++> \\right\\}\n<           | \\langle <++> \\rangle\nq           | \\lefteqn{<++>}<++>\n\n如果当前光标前面没有任何字符，则插入\\label{<++>}。\n\n* `<Alt-B>`\n插入模式中将前面的字符包含在命令\\mathbf{}中。\n\n* `<Alt-C>`\n在插入模式下，\n如果前面的字符是字母或数字，则变成大写并包含在命令\\mathcal{}中；\n其它情况下插入\\cite{}。\n在选择模式下，将选择的字符包含在\\mathcal{}中。\n\n* `<Alt-I>`\n根据不同的环境插入\\item\n\n环境名           |  样式\n----------------|--------\nitemize         |   \\item\nenumerate       |   \\item\ntheindex        |   \\item\nthebibliography |   \\item[<+biblabel+>]{<+bibkey+>} <++>\ndescription     |   \\item[<+label+>] <++>\n\n可以通过变量`g:TeX_ItemStyle_environment`进行修改。\n\n\n## 十、宏定制方法\n\n### 1. 宏文件\n在$VIM/ftplugin/latex-suite/macros/中，每一个文件就是一个宏。\n用命令`|:TMacro|`或从菜单上可以选择使用哪个宏。\n可以用`|:TMacroNew|`、`|:TMacroEdit|`、`|:TMacroDelete|`进行操作。\n\n### 2. IMAP\n可以通过IMAP()定制宏，其语法为\n\n    call IMAP (lhs, rhs, ft [, phs, phe])\n    lhs 缩写\n    rhs 展开的代码\n    ft 适用的文件类型\n    phs,phe 用来表示插入点的起始和终止符号，默认为<+和+>\n\n例如\n\n\t:call IMAP('EFE', \"\\\\begin{figure}\\<CR><++>\\\\end{figure}<++>\", 'tex')\n\n复杂一点的情况\n\n\tcall IMAP('FOO', \"\\<C-r>=AskVimFunc()\\<CR>\", 'vim')\n\t\" Askvimfunc: Asks For Function Name And Sets Up Template\n\t\" Description:\n\tfunction! AskVimFunc()\n\t    let name = input('Name of the function : ')\n\t    if name == ''\n\t        let name = \"<+Function Name+>\"\n\t    end\n\t    let islocal = input('Is this function scriptlocal ? [y]/n : ', 'y')\n\t    if islocal == 'y'\n\t        let sidstr = '<SID>'\n\t    else\n\t        let sidstr = ''\n\t    endif\n\t    return IMAP_PutTextWithMovement(\n\t        \\ \"\\\" \".name.\": <+short description+> \\<cr>\" .\n\t        \\ \"Description: <+long description+>\\<cr>\" .\n\t        \\ \"\\<C-u>function! \".name.\"(<+arguments+>)<++>\\<cr>\" .\n\t        \\       \"<+function body+>\\<cr>\" .\n\t        \\ \"endfunction \\\" \"\n\t        \\ )\n\tendfunction\n","source":"_posts/2016-08-21-vim-latex-suite.md","raw":"---\ntitle: vim-latex-suite使用手册\ndate: 2016-08-21 22:33:47\ncategories: 弄点工具\ntags:\n  - vim\n  - latex\n---\n\n## 导语\n> 快捷键是提高效率的不二法则，毕竟十个手指头比两个手指头要快得多。\n使用vim-latex-suite的关键亦是如此。\n\n说明：\n\n* `||`中为在普通模式下输入的命令；\n* `<>`中为按键，C表示Ctrl，A表示Alt，S表示Shift；\n\n<!-- more -->\n\n## 一、模板\n\n### 1. 使用方法\n模板存放在$VIM/ftplugin/latex-suite/templates/中，使用命令`|:TTemplate|`或者从菜单中可以调出可用的模板。\n\n### 2. 定制方法\n在$VIM/ftplugin/latex-suite/templates/中建立相应的文件即可。\n\n## 二、包\n### 1. 使用方法\n宏包存放在$VIM/ftplugin/latex-suite/packages/中，从菜单中或者使用按键`<F5>`、命令`|:TPackage|`都可以调出可用宏包。\n\n### 2. 定制方法\n在$VIM/ftplugin/latex-suite/packages/中建立相应的文件即可，可参考exmpl。\n\n## 三、环境\n\n### 1. 使用方法\n\n#### （1）插入\n* 方法1：`<F5>`，读取当前行的单词并形成环境，如果是空行，则给出环境列表；\n* 方法2：`<S-F1>`-`<S-F4>`，每一个对应一个自定义的环境；\n* 方法3：使3字母序列`Exx`，第一个字母E代表Environment，后两个字母是环境名的简写，比如EFI插入figure环境。\n\n#### （2）包围\n* 方法1：选中需要放入环境中的内容，按`<F5>`；\n* 方法2：选中需要放入环境中的内容，按3字母序列，这里的3字母序列和插入中不同的在于首字母需要改为`<,>`，后两个字母保持不变（小写即可）；\n\n#### （3）修改\n* 方法1：选中需要修改环境名的内容，然后按`<S-F5>`，多重环境时先改变最内层环境；\n\n### 2.定制方法\n设置变量`g:Tex_Env_name`即可，其中'name'是环境名，例如\n\n    let g:Tex_Env_frame = \"\\\\begin{frame}\\<cr>\\\\frametitle{<+title+>}\\<cr><++>\\<cr>\\\\end{frame}<++>\"\n\n有些带标签的环境可设置变量`g:Tex_EnvLabelprefix_name`，例如\n\n    figure, table, theorem, definition,lemma, proposition, corollary, assumption, remark, equation, eqnarray, align, multline\n\n默认给出的环境列表由变量`g:Tex_PromptedEnvironments`设置，默认值为\n\n    'eqnarray\\*,eqnarray, equation,equation\\*,\\[,$$,align,align\\*'\n\n`<S-F1>`-`<S-F4>`对应的环境名由`g:Tex_HotKeyMappings`设置，默认值为\n\n    'eqnarray*,eqnarray,bmatrix'\n\n\n## 四、命令\n\n### 1. 使用方法\n\n#### （1）插入\n\n* 方法1：`<F7>`，提取当前光标所在单词构成命令，如果是空单词，则给出命令列表；\n\n#### （2）包围\n* 方法1：选中需要放入命令的内容，按`<F7>`；\n\n#### （3）修改\n* 方法1：选中需要修改命令名的内容，按`<S-F7>`。\n\n### 2. 定制方法\n设置变量`g:Tex_Com_name`即可，其中'name'是变量名。\n\n默认给出的命令列表由变量`g:Tex_PromptedCommands`控制，默认值为\n\n\t'footnote,cite,pageref,label'\n\n## 五、参考文献\n\n### 1. 使用方法\n共提供四种插入模式：`BBB`、`BBL`、`BBH`和`BBX`。\n它们的插入方式是一致的，输入后会提示需要插入的文献类型。\n\n* `BBB`仅插入该种文献所需的最少字段；\n* `BBL`插入该种文献常用的字段；\n* `BBH`插入一些更多的字段；\n* `BBX`则插入所有的字段。\n\n### 2. 定制方法\n如果需要定制不同插入模式下的字段，那么需要修改全局变量`g:Bib_{type}_options`\n\n该变量在文件$VIM/ftplugin/bib.vim中定义，{type}是文献类型，比如'article'、'book'等。\n变量取值如下表所示：\n\n字符  |  对应的字段\n-----|------------\nw    |       address\na    |        author\nb    |       booktitle\nc    |        chapter\nd    |       edition\ne    |       editor\nh    |       howpublished\ni    |       institution\nk    |       isbn\nj    |       journal\nm    |       month\nz    |       note\nn    |       number\no    |       organization\np    |       pages\nq    |       publisher\nr    |       school\ns    |       series\nt    |       title\nu    |       type\nv    |       volume\ny    |       year\n\n比如，默认条件下使用`BBB`插入'article'\n\n    @ARTICLE{<+key+>,\n        author = {<++>},\n        title = {<++>},\n        journal = {<++>},\n        year = {<++>},\n        otherinfo = {<++>}\n    }<++>\n\n当定义`g:Bib_article_options`为'mnp'，则使用`BBB`插入'article'为\n\n    @ARTICLE{<+key+>,\n        author = {<++>},\n        title = {<++>},\n        journal = {<++>},\n        year = {<++>},\n        month = {<++>},\n        number = {<++>},\n        pages = {<++>},\n        otherinfo = {<++>}\n    }<++>\n\n如果还有一些上面没有列出来的字段需要插入，则需要定义全局变量\n`g:Bib_article_extrafields`\n\n比如定义\n\n    let g:Bib_article_extrafields = \"crossref\\nabstract\"\n\n则'article'的模板会多出两个字段\n\n    crossref = {<++>},\n    abstract = {<++>},\n\n\n## 六、编译及查看\n使用按键`\\ll`开始编译。\n变量`g:Tex_CompileRule_<format>`设置编译规则，<format>是\"pdf\"、\"dvi\"等。\n设置编译依赖，比如\n\n    .tex -> .dvi -> .ps -> .pdf\n\n可以设置为\n\n    let g:Tex_FormatDependency_pdf = 'dvi,ps,pdf'\n\n同时需要设定编译规则\n\n    let g:Tex_CompileRule_dvi = 'latex --interaction=nonstopmode $*'\n    let g:Tex_CompileRule_ps = 'dvips -Ppdf -o $*.ps $*.dvi'\n    let g:Tex_CompileRule_pdf = 'ps2pdf $*.ps'\n\n只编译部分文件，选择模式下选择一部分内容，然后使用\\ll编译这一部分内容，用\\lv来查看结果。对应的命令是`|:TPartComp|`和`|:TPartView|`。\n\n查看使用`\\lv`。规则使用变量`g:Tex_ViewRule_<format>`来定义。\n\n前向搜索使用`\\ls`。在Mac上，需要设置`g:Tex_TreatMacViewerAsUNIX`为1\n\n反向搜索需要设置查看器与vim的沟通方式，比如\n\n    \"C:\\Program Files\\vim\\vim61\\gvim\" -c \":RemoteOpen +%l %f\"\n\n## 七、折叠\nLatex-Suite用插件SyntaxFolds.vim来进行语法折叠。\n折叠是手动的，新写的内容需要按`<F6>`或`\\rf`来开启折叠。\n\n有一系列变量用来控制折叠\n`g:Tex_FoldedSections`控制哪些节需要折叠，默认值为\n\n    part,chapter,section,subsection,subsubsection,paragraph\n\n`g:Tex_FoldedEnvironments`控制哪些环境需要折叠，默认值为\n\n    verbatim,comment,eq,gather,\n    align,figure,table,thebibliography,\n    keywords,abstract,titlepage\n\n`g:Tex_FoldedCommands`控制哪些命令需要折叠，默认值为空。\n`g:Tex_FoldedMisc`控制一些其他需要折叠的内容，默认值为\n\n    item,preamble,<<<\n\n## 八、多文件工程\n假设有如下工程结构\n\n    thesis/\n        main.tex\n        abstract.tex\n        intro/\n            intro.tex\n            figures/\n                fig1.eps\n                fig2.eps\n        chapter1/\n            chap1.tex\n            figures/\n                fig1.eps\n        conclusion/\n            conclusion.tex\n            figures/\n\nmain.tex文件如下\n\n    % file: main.tex\n    \\documentclass{report}\n    \\begin{document}\n\n    \\input{abstract.tex}\n    \\input{intro/intro.tex}\n    \\input{chapter1/chap1.tex}\n    \\input{conclusion/conclusion.tex}\n\n    \\end{document}\n\n只需要创建一个空文件main.tex.latexmain就可以表明main.tex是主文件。\n\n\n## 九、常用快捷键\n\n### 1. 章节\n可使用3字母序列`Sxx`进行插入和修改。\n\n### 2. 字体\n可使用3字母序列`Fxx`进行插入和修改。\n\n### 3. 希腊字母\n\\`a至\\`z分别代表\\alpha到\\zeta，大写情况也类似（但不支持所有大写希腊字母）。\n\n### 4. 智能按键\n`...`在数学模式外是\\ldots，在数学模式中是\\cdots\n\n### 5. 补全\n用`<F9>`可以进行各种类型的补全，包括引用补全（\\ref、\\eqref、\\cite）、文件名补全、命令参数补全。通常需要设置\n\n\tset grepprg=grep\\ -nH\\ $*\n\n### 6. Auc-Tex中的一些快捷键\n数学环境中：\n\n快捷键 | 对应的命令\n------|------------\n\\`^   |   \\Hat{<++>}<++>\n\\`_   |   \\bar{<++>}<++>\n\\`6   |   \\partial\n\\`8   |   \\infty\n\\`/   |   \\frac{<++>}{<++>}<++>\n\\`%   |   \\frac{<++>}{<++>}<++>\n\\`@   |   \\circ\n\\`0   |   ^\\circ\n\\`=   |   \\equiv\n\\`\\   |   \\setminus\n\\`.   |   \\cdot\n\\`*   |   \\times\n\\`&   |   \\wedge\n\\`-   |   \\bigcap\n\\`+   |   \\bigcup\n\\`(   |   \\subset\n\\`)   |   \\supset\n\\`<   |   \\le\n\\`>   |   \\ge\n\\`,   |   \\nonumber\n\\`~   |   \\tilde{<++>}<++>\n\\`;   |   \\dot{<++>}<++>\n\\`:   |   \\ddot{<++>}<++>\n\\`2   |   \\sqrt{<++>}<++>\n\\`&#124;   |   \\Big&#124;\n\\`I   |   \\int_{<++>}^{<++>}<++>\n\nvisual模式下：\n\n快捷键 | 对应的命令\n------|----------\n\\`(   | \\left( \\right)\n\\`[   | \\left[ \\right]\n\\`{   | \\left\\\\{ \\right\\\\}\n\\`$   | 普通选择 $$，行选择 \\\\[ \\\\]\n\n\n### 7. Alt相关\n默认条件下Alt键是菜单栏的热键，如果有冲突则需要设置\n\n\tset winaltkeys=no\n\n* `<Alt-L>`\n在插入模式下，根据当前光标前的字符，插入不同的命令\n\n光标之前的字符 | 对应的命令\n------------|-----------\n(           | \\left( <++> \\right)\n[           | \\left[ <++> \\right]\n&#124;      | \\left&#124; <++> \\right&#124;\n{           | \\left\\{ <++> \\right\\}\n<           | \\langle <++> \\rangle\nq           | \\lefteqn{<++>}<++>\n\n如果当前光标前面没有任何字符，则插入\\label{<++>}。\n\n* `<Alt-B>`\n插入模式中将前面的字符包含在命令\\mathbf{}中。\n\n* `<Alt-C>`\n在插入模式下，\n如果前面的字符是字母或数字，则变成大写并包含在命令\\mathcal{}中；\n其它情况下插入\\cite{}。\n在选择模式下，将选择的字符包含在\\mathcal{}中。\n\n* `<Alt-I>`\n根据不同的环境插入\\item\n\n环境名           |  样式\n----------------|--------\nitemize         |   \\item\nenumerate       |   \\item\ntheindex        |   \\item\nthebibliography |   \\item[<+biblabel+>]{<+bibkey+>} <++>\ndescription     |   \\item[<+label+>] <++>\n\n可以通过变量`g:TeX_ItemStyle_environment`进行修改。\n\n\n## 十、宏定制方法\n\n### 1. 宏文件\n在$VIM/ftplugin/latex-suite/macros/中，每一个文件就是一个宏。\n用命令`|:TMacro|`或从菜单上可以选择使用哪个宏。\n可以用`|:TMacroNew|`、`|:TMacroEdit|`、`|:TMacroDelete|`进行操作。\n\n### 2. IMAP\n可以通过IMAP()定制宏，其语法为\n\n    call IMAP (lhs, rhs, ft [, phs, phe])\n    lhs 缩写\n    rhs 展开的代码\n    ft 适用的文件类型\n    phs,phe 用来表示插入点的起始和终止符号，默认为<+和+>\n\n例如\n\n\t:call IMAP('EFE', \"\\\\begin{figure}\\<CR><++>\\\\end{figure}<++>\", 'tex')\n\n复杂一点的情况\n\n\tcall IMAP('FOO', \"\\<C-r>=AskVimFunc()\\<CR>\", 'vim')\n\t\" Askvimfunc: Asks For Function Name And Sets Up Template\n\t\" Description:\n\tfunction! AskVimFunc()\n\t    let name = input('Name of the function : ')\n\t    if name == ''\n\t        let name = \"<+Function Name+>\"\n\t    end\n\t    let islocal = input('Is this function scriptlocal ? [y]/n : ', 'y')\n\t    if islocal == 'y'\n\t        let sidstr = '<SID>'\n\t    else\n\t        let sidstr = ''\n\t    endif\n\t    return IMAP_PutTextWithMovement(\n\t        \\ \"\\\" \".name.\": <+short description+> \\<cr>\" .\n\t        \\ \"Description: <+long description+>\\<cr>\" .\n\t        \\ \"\\<C-u>function! \".name.\"(<+arguments+>)<++>\\<cr>\" .\n\t        \\       \"<+function body+>\\<cr>\" .\n\t        \\ \"endfunction \\\" \"\n\t        \\ )\n\tendfunction\n","slug":"vim-latex-suite","published":1,"updated":"2016-08-27T09:14:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb6k4kvr000fuleppqmaqhym","content":"<h2 id=\"导语\"><a href=\"#导语\" class=\"headerlink\" title=\"导语\"></a>导语</h2><blockquote>\n<p>快捷键是提高效率的不二法则，毕竟十个手指头比两个手指头要快得多。<br>使用vim-latex-suite的关键亦是如此。</p>\n</blockquote>\n<p>说明：</p>\n<ul>\n<li><code>||</code>中为在普通模式下输入的命令；</li>\n<li><code>&lt;&gt;</code>中为按键，C表示Ctrl，A表示Alt，S表示Shift；</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"一、模板\"><a href=\"#一、模板\" class=\"headerlink\" title=\"一、模板\"></a>一、模板</h2><h3 id=\"1-使用方法\"><a href=\"#1-使用方法\" class=\"headerlink\" title=\"1. 使用方法\"></a>1. 使用方法</h3><p>模板存放在$VIM/ftplugin/latex-suite/templates/中，使用命令<code>|:TTemplate|</code>或者从菜单中可以调出可用的模板。</p>\n<h3 id=\"2-定制方法\"><a href=\"#2-定制方法\" class=\"headerlink\" title=\"2. 定制方法\"></a>2. 定制方法</h3><p>在$VIM/ftplugin/latex-suite/templates/中建立相应的文件即可。</p>\n<h2 id=\"二、包\"><a href=\"#二、包\" class=\"headerlink\" title=\"二、包\"></a>二、包</h2><h3 id=\"1-使用方法-1\"><a href=\"#1-使用方法-1\" class=\"headerlink\" title=\"1. 使用方法\"></a>1. 使用方法</h3><p>宏包存放在$VIM/ftplugin/latex-suite/packages/中，从菜单中或者使用按键<code>&lt;F5&gt;</code>、命令<code>|:TPackage|</code>都可以调出可用宏包。</p>\n<h3 id=\"2-定制方法-1\"><a href=\"#2-定制方法-1\" class=\"headerlink\" title=\"2. 定制方法\"></a>2. 定制方法</h3><p>在$VIM/ftplugin/latex-suite/packages/中建立相应的文件即可，可参考exmpl。</p>\n<h2 id=\"三、环境\"><a href=\"#三、环境\" class=\"headerlink\" title=\"三、环境\"></a>三、环境</h2><h3 id=\"1-使用方法-2\"><a href=\"#1-使用方法-2\" class=\"headerlink\" title=\"1. 使用方法\"></a>1. 使用方法</h3><h4 id=\"（1）插入\"><a href=\"#（1）插入\" class=\"headerlink\" title=\"（1）插入\"></a>（1）插入</h4><ul>\n<li>方法1：<code>&lt;F5&gt;</code>，读取当前行的单词并形成环境，如果是空行，则给出环境列表；</li>\n<li>方法2：<code>&lt;S-F1&gt;</code>-<code>&lt;S-F4&gt;</code>，每一个对应一个自定义的环境；</li>\n<li>方法3：使3字母序列<code>Exx</code>，第一个字母E代表Environment，后两个字母是环境名的简写，比如EFI插入figure环境。</li>\n</ul>\n<h4 id=\"（2）包围\"><a href=\"#（2）包围\" class=\"headerlink\" title=\"（2）包围\"></a>（2）包围</h4><ul>\n<li>方法1：选中需要放入环境中的内容，按<code>&lt;F5&gt;</code>；</li>\n<li>方法2：选中需要放入环境中的内容，按3字母序列，这里的3字母序列和插入中不同的在于首字母需要改为<code>&lt;,&gt;</code>，后两个字母保持不变（小写即可）；</li>\n</ul>\n<h4 id=\"（3）修改\"><a href=\"#（3）修改\" class=\"headerlink\" title=\"（3）修改\"></a>（3）修改</h4><ul>\n<li>方法1：选中需要修改环境名的内容，然后按<code>&lt;S-F5&gt;</code>，多重环境时先改变最内层环境；</li>\n</ul>\n<h3 id=\"2-定制方法-2\"><a href=\"#2-定制方法-2\" class=\"headerlink\" title=\"2.定制方法\"></a>2.定制方法</h3><p>设置变量<code>g:Tex_Env_name</code>即可，其中’name’是环境名，例如</p>\n<pre><code>let g:Tex_Env_frame = &quot;\\\\begin{frame}\\&lt;cr&gt;\\\\frametitle{&lt;+title+&gt;}\\&lt;cr&gt;&lt;++&gt;\\&lt;cr&gt;\\\\end{frame}&lt;++&gt;&quot;\n</code></pre><p>有些带标签的环境可设置变量<code>g:Tex_EnvLabelprefix_name</code>，例如</p>\n<pre><code>figure, table, theorem, definition,lemma, proposition, corollary, assumption, remark, equation, eqnarray, align, multline\n</code></pre><p>默认给出的环境列表由变量<code>g:Tex_PromptedEnvironments</code>设置，默认值为</p>\n<pre><code>&apos;eqnarray\\*,eqnarray, equation,equation\\*,\\[,$$,align,align\\*&apos;\n</code></pre><p><code>&lt;S-F1&gt;</code>-<code>&lt;S-F4&gt;</code>对应的环境名由<code>g:Tex_HotKeyMappings</code>设置，默认值为</p>\n<pre><code>&apos;eqnarray*,eqnarray,bmatrix&apos;\n</code></pre><h2 id=\"四、命令\"><a href=\"#四、命令\" class=\"headerlink\" title=\"四、命令\"></a>四、命令</h2><h3 id=\"1-使用方法-3\"><a href=\"#1-使用方法-3\" class=\"headerlink\" title=\"1. 使用方法\"></a>1. 使用方法</h3><h4 id=\"（1）插入-1\"><a href=\"#（1）插入-1\" class=\"headerlink\" title=\"（1）插入\"></a>（1）插入</h4><ul>\n<li>方法1：<code>&lt;F7&gt;</code>，提取当前光标所在单词构成命令，如果是空单词，则给出命令列表；</li>\n</ul>\n<h4 id=\"（2）包围-1\"><a href=\"#（2）包围-1\" class=\"headerlink\" title=\"（2）包围\"></a>（2）包围</h4><ul>\n<li>方法1：选中需要放入命令的内容，按<code>&lt;F7&gt;</code>；</li>\n</ul>\n<h4 id=\"（3）修改-1\"><a href=\"#（3）修改-1\" class=\"headerlink\" title=\"（3）修改\"></a>（3）修改</h4><ul>\n<li>方法1：选中需要修改命令名的内容，按<code>&lt;S-F7&gt;</code>。</li>\n</ul>\n<h3 id=\"2-定制方法-3\"><a href=\"#2-定制方法-3\" class=\"headerlink\" title=\"2. 定制方法\"></a>2. 定制方法</h3><p>设置变量<code>g:Tex_Com_name</code>即可，其中’name’是变量名。</p>\n<p>默认给出的命令列表由变量<code>g:Tex_PromptedCommands</code>控制，默认值为</p>\n<pre><code>&apos;footnote,cite,pageref,label&apos;\n</code></pre><h2 id=\"五、参考文献\"><a href=\"#五、参考文献\" class=\"headerlink\" title=\"五、参考文献\"></a>五、参考文献</h2><h3 id=\"1-使用方法-4\"><a href=\"#1-使用方法-4\" class=\"headerlink\" title=\"1. 使用方法\"></a>1. 使用方法</h3><p>共提供四种插入模式：<code>BBB</code>、<code>BBL</code>、<code>BBH</code>和<code>BBX</code>。<br>它们的插入方式是一致的，输入后会提示需要插入的文献类型。</p>\n<ul>\n<li><code>BBB</code>仅插入该种文献所需的最少字段；</li>\n<li><code>BBL</code>插入该种文献常用的字段；</li>\n<li><code>BBH</code>插入一些更多的字段；</li>\n<li><code>BBX</code>则插入所有的字段。</li>\n</ul>\n<h3 id=\"2-定制方法-4\"><a href=\"#2-定制方法-4\" class=\"headerlink\" title=\"2. 定制方法\"></a>2. 定制方法</h3><p>如果需要定制不同插入模式下的字段，那么需要修改全局变量<code>g:Bib_{type}_options</code></p>\n<p>该变量在文件$VIM/ftplugin/bib.vim中定义，{type}是文献类型，比如’article’、’book’等。<br>变量取值如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>对应的字段</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>w</td>\n<td>address</td>\n</tr>\n<tr>\n<td>a</td>\n<td>author</td>\n</tr>\n<tr>\n<td>b</td>\n<td>booktitle</td>\n</tr>\n<tr>\n<td>c</td>\n<td>chapter</td>\n</tr>\n<tr>\n<td>d</td>\n<td>edition</td>\n</tr>\n<tr>\n<td>e</td>\n<td>editor</td>\n</tr>\n<tr>\n<td>h</td>\n<td>howpublished</td>\n</tr>\n<tr>\n<td>i</td>\n<td>institution</td>\n</tr>\n<tr>\n<td>k</td>\n<td>isbn</td>\n</tr>\n<tr>\n<td>j</td>\n<td>journal</td>\n</tr>\n<tr>\n<td>m</td>\n<td>month</td>\n</tr>\n<tr>\n<td>z</td>\n<td>note</td>\n</tr>\n<tr>\n<td>n</td>\n<td>number</td>\n</tr>\n<tr>\n<td>o</td>\n<td>organization</td>\n</tr>\n<tr>\n<td>p</td>\n<td>pages</td>\n</tr>\n<tr>\n<td>q</td>\n<td>publisher</td>\n</tr>\n<tr>\n<td>r</td>\n<td>school</td>\n</tr>\n<tr>\n<td>s</td>\n<td>series</td>\n</tr>\n<tr>\n<td>t</td>\n<td>title</td>\n</tr>\n<tr>\n<td>u</td>\n<td>type</td>\n</tr>\n<tr>\n<td>v</td>\n<td>volume</td>\n</tr>\n<tr>\n<td>y</td>\n<td>year</td>\n</tr>\n</tbody>\n</table>\n<p>比如，默认条件下使用<code>BBB</code>插入’article’</p>\n<pre><code>@ARTICLE{&lt;+key+&gt;,\n    author = {&lt;++&gt;},\n    title = {&lt;++&gt;},\n    journal = {&lt;++&gt;},\n    year = {&lt;++&gt;},\n    otherinfo = {&lt;++&gt;}\n}&lt;++&gt;\n</code></pre><p>当定义<code>g:Bib_article_options</code>为’mnp’，则使用<code>BBB</code>插入’article’为</p>\n<pre><code>@ARTICLE{&lt;+key+&gt;,\n    author = {&lt;++&gt;},\n    title = {&lt;++&gt;},\n    journal = {&lt;++&gt;},\n    year = {&lt;++&gt;},\n    month = {&lt;++&gt;},\n    number = {&lt;++&gt;},\n    pages = {&lt;++&gt;},\n    otherinfo = {&lt;++&gt;}\n}&lt;++&gt;\n</code></pre><p>如果还有一些上面没有列出来的字段需要插入，则需要定义全局变量<br><code>g:Bib_article_extrafields</code></p>\n<p>比如定义</p>\n<pre><code>let g:Bib_article_extrafields = &quot;crossref\\nabstract&quot;\n</code></pre><p>则’article’的模板会多出两个字段</p>\n<pre><code>crossref = {&lt;++&gt;},\nabstract = {&lt;++&gt;},\n</code></pre><h2 id=\"六、编译及查看\"><a href=\"#六、编译及查看\" class=\"headerlink\" title=\"六、编译及查看\"></a>六、编译及查看</h2><p>使用按键<code>\\ll</code>开始编译。<br>变量<code>g:Tex_CompileRule_&lt;format&gt;</code>设置编译规则，<format>是”pdf”、”dvi”等。<br>设置编译依赖，比如</format></p>\n<pre><code>.tex -&gt; .dvi -&gt; .ps -&gt; .pdf\n</code></pre><p>可以设置为</p>\n<pre><code>let g:Tex_FormatDependency_pdf = &apos;dvi,ps,pdf&apos;\n</code></pre><p>同时需要设定编译规则</p>\n<pre><code>let g:Tex_CompileRule_dvi = &apos;latex --interaction=nonstopmode $*&apos;\nlet g:Tex_CompileRule_ps = &apos;dvips -Ppdf -o $*.ps $*.dvi&apos;\nlet g:Tex_CompileRule_pdf = &apos;ps2pdf $*.ps&apos;\n</code></pre><p>只编译部分文件，选择模式下选择一部分内容，然后使用\\ll编译这一部分内容，用\\lv来查看结果。对应的命令是<code>|:TPartComp|</code>和<code>|:TPartView|</code>。</p>\n<p>查看使用<code>\\lv</code>。规则使用变量<code>g:Tex_ViewRule_&lt;format&gt;</code>来定义。</p>\n<p>前向搜索使用<code>\\ls</code>。在Mac上，需要设置<code>g:Tex_TreatMacViewerAsUNIX</code>为1</p>\n<p>反向搜索需要设置查看器与vim的沟通方式，比如</p>\n<pre><code>&quot;C:\\Program Files\\vim\\vim61\\gvim&quot; -c &quot;:RemoteOpen +%l %f&quot;\n</code></pre><h2 id=\"七、折叠\"><a href=\"#七、折叠\" class=\"headerlink\" title=\"七、折叠\"></a>七、折叠</h2><p>Latex-Suite用插件SyntaxFolds.vim来进行语法折叠。<br>折叠是手动的，新写的内容需要按<code>&lt;F6&gt;</code>或<code>\\rf</code>来开启折叠。</p>\n<p>有一系列变量用来控制折叠<br><code>g:Tex_FoldedSections</code>控制哪些节需要折叠，默认值为</p>\n<pre><code>part,chapter,section,subsection,subsubsection,paragraph\n</code></pre><p><code>g:Tex_FoldedEnvironments</code>控制哪些环境需要折叠，默认值为</p>\n<pre><code>verbatim,comment,eq,gather,\nalign,figure,table,thebibliography,\nkeywords,abstract,titlepage\n</code></pre><p><code>g:Tex_FoldedCommands</code>控制哪些命令需要折叠，默认值为空。<br><code>g:Tex_FoldedMisc</code>控制一些其他需要折叠的内容，默认值为</p>\n<pre><code>item,preamble,&lt;&lt;&lt;\n</code></pre><h2 id=\"八、多文件工程\"><a href=\"#八、多文件工程\" class=\"headerlink\" title=\"八、多文件工程\"></a>八、多文件工程</h2><p>假设有如下工程结构</p>\n<pre><code>thesis/\n    main.tex\n    abstract.tex\n    intro/\n        intro.tex\n        figures/\n            fig1.eps\n            fig2.eps\n    chapter1/\n        chap1.tex\n        figures/\n            fig1.eps\n    conclusion/\n        conclusion.tex\n        figures/\n</code></pre><p>main.tex文件如下</p>\n<pre><code>% file: main.tex\n\\documentclass{report}\n\\begin{document}\n\n\\input{abstract.tex}\n\\input{intro/intro.tex}\n\\input{chapter1/chap1.tex}\n\\input{conclusion/conclusion.tex}\n\n\\end{document}\n</code></pre><p>只需要创建一个空文件main.tex.latexmain就可以表明main.tex是主文件。</p>\n<h2 id=\"九、常用快捷键\"><a href=\"#九、常用快捷键\" class=\"headerlink\" title=\"九、常用快捷键\"></a>九、常用快捷键</h2><h3 id=\"1-章节\"><a href=\"#1-章节\" class=\"headerlink\" title=\"1. 章节\"></a>1. 章节</h3><p>可使用3字母序列<code>Sxx</code>进行插入和修改。</p>\n<h3 id=\"2-字体\"><a href=\"#2-字体\" class=\"headerlink\" title=\"2. 字体\"></a>2. 字体</h3><p>可使用3字母序列<code>Fxx</code>进行插入和修改。</p>\n<h3 id=\"3-希腊字母\"><a href=\"#3-希腊字母\" class=\"headerlink\" title=\"3. 希腊字母\"></a>3. 希腊字母</h3><p>`a至`z分别代表\\alpha到\\zeta，大写情况也类似（但不支持所有大写希腊字母）。</p>\n<h3 id=\"4-智能按键\"><a href=\"#4-智能按键\" class=\"headerlink\" title=\"4. 智能按键\"></a>4. 智能按键</h3><p><code>...</code>在数学模式外是\\ldots，在数学模式中是\\cdots</p>\n<h3 id=\"5-补全\"><a href=\"#5-补全\" class=\"headerlink\" title=\"5. 补全\"></a>5. 补全</h3><p>用<code>&lt;F9&gt;</code>可以进行各种类型的补全，包括引用补全（\\ref、\\eqref、\\cite）、文件名补全、命令参数补全。通常需要设置</p>\n<pre><code>set grepprg=grep\\ -nH\\ $*\n</code></pre><h3 id=\"6-Auc-Tex中的一些快捷键\"><a href=\"#6-Auc-Tex中的一些快捷键\" class=\"headerlink\" title=\"6. Auc-Tex中的一些快捷键\"></a>6. Auc-Tex中的一些快捷键</h3><p>数学环境中：</p>\n<table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>对应的命令</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>`^</td>\n<td>\\Hat{&lt;++&gt;}&lt;++&gt;</td>\n</tr>\n<tr>\n<td>`_</td>\n<td>\\bar{&lt;++&gt;}&lt;++&gt;</td>\n</tr>\n<tr>\n<td>`6</td>\n<td>\\partial</td>\n</tr>\n<tr>\n<td>`8</td>\n<td>\\infty</td>\n</tr>\n<tr>\n<td>`/</td>\n<td>\\frac{&lt;++&gt;}{&lt;++&gt;}&lt;++&gt;</td>\n</tr>\n<tr>\n<td>`%</td>\n<td>\\frac{&lt;++&gt;}{&lt;++&gt;}&lt;++&gt;</td>\n</tr>\n<tr>\n<td>`@</td>\n<td>\\circ</td>\n</tr>\n<tr>\n<td>`0</td>\n<td>^\\circ</td>\n</tr>\n<tr>\n<td>`=</td>\n<td>\\equiv</td>\n</tr>\n<tr>\n<td>`\\</td>\n<td>\\setminus</td>\n</tr>\n<tr>\n<td>`.</td>\n<td>\\cdot</td>\n</tr>\n<tr>\n<td>`*</td>\n<td>\\times</td>\n</tr>\n<tr>\n<td>`&amp;</td>\n<td>\\wedge</td>\n</tr>\n<tr>\n<td>`-</td>\n<td>\\bigcap</td>\n</tr>\n<tr>\n<td>`+</td>\n<td>\\bigcup</td>\n</tr>\n<tr>\n<td>`(</td>\n<td>\\subset</td>\n</tr>\n<tr>\n<td>`)</td>\n<td>\\supset</td>\n</tr>\n<tr>\n<td>`&lt;</td>\n<td>\\le</td>\n</tr>\n<tr>\n<td>`&gt;</td>\n<td>\\ge</td>\n</tr>\n<tr>\n<td>`,</td>\n<td>\\nonumber</td>\n</tr>\n<tr>\n<td>`~</td>\n<td>\\tilde{&lt;++&gt;}&lt;++&gt;</td>\n</tr>\n<tr>\n<td>`;</td>\n<td>\\dot{&lt;++&gt;}&lt;++&gt;</td>\n</tr>\n<tr>\n<td>`:</td>\n<td>\\ddot{&lt;++&gt;}&lt;++&gt;</td>\n</tr>\n<tr>\n<td>`2</td>\n<td>\\sqrt{&lt;++&gt;}&lt;++&gt;</td>\n</tr>\n<tr>\n<td>`&#124;</td>\n<td>\\Big&#124;</td>\n</tr>\n<tr>\n<td>`I</td>\n<td>\\int_{&lt;++&gt;}^{&lt;++&gt;}&lt;++&gt;</td>\n</tr>\n</tbody>\n</table>\n<p>visual模式下：</p>\n<table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>对应的命令</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>`(</td>\n<td>\\left( \\right)</td>\n</tr>\n<tr>\n<td>`[</td>\n<td>\\left[ \\right]</td>\n</tr>\n<tr>\n<td>`{</td>\n<td>\\left\\{ \\right\\}</td>\n</tr>\n<tr>\n<td>`$</td>\n<td>普通选择 $$，行选择 \\[ \\]</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"7-Alt相关\"><a href=\"#7-Alt相关\" class=\"headerlink\" title=\"7. Alt相关\"></a>7. Alt相关</h3><p>默认条件下Alt键是菜单栏的热键，如果有冲突则需要设置</p>\n<pre><code>set winaltkeys=no\n</code></pre><ul>\n<li><code>&lt;Alt-L&gt;</code><br>在插入模式下，根据当前光标前的字符，插入不同的命令</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>光标之前的字符</th>\n<th>对应的命令</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>(</td>\n<td>\\left( &lt;++&gt; \\right)</td>\n</tr>\n<tr>\n<td>[</td>\n<td>\\left[ &lt;++&gt; \\right]</td>\n</tr>\n<tr>\n<td>&#124;</td>\n<td>\\left&#124; &lt;++&gt; \\right&#124;</td>\n</tr>\n<tr>\n<td>{</td>\n<td>\\left{ &lt;++&gt; \\right}</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>\\langle &lt;++&gt; \\rangle</td>\n</tr>\n<tr>\n<td>q</td>\n<td>\\lefteqn{&lt;++&gt;}&lt;++&gt;</td>\n</tr>\n</tbody>\n</table>\n<p>如果当前光标前面没有任何字符，则插入\\label{&lt;++&gt;}。</p>\n<ul>\n<li><p><code>&lt;Alt-B&gt;</code><br>插入模式中将前面的字符包含在命令\\mathbf{}中。</p>\n</li>\n<li><p><code>&lt;Alt-C&gt;</code><br>在插入模式下，<br>如果前面的字符是字母或数字，则变成大写并包含在命令\\mathcal{}中；<br>其它情况下插入\\cite{}。<br>在选择模式下，将选择的字符包含在\\mathcal{}中。</p>\n</li>\n<li><p><code>&lt;Alt-I&gt;</code><br>根据不同的环境插入\\item</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>环境名</th>\n<th>样式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>itemize</td>\n<td>\\item</td>\n</tr>\n<tr>\n<td>enumerate</td>\n<td>\\item</td>\n</tr>\n<tr>\n<td>theindex</td>\n<td>\\item</td>\n</tr>\n<tr>\n<td>thebibliography</td>\n<td>\\item[&lt;+biblabel+&gt;]{&lt;+bibkey+&gt;} &lt;++&gt;</td>\n</tr>\n<tr>\n<td>description</td>\n<td>\\item[&lt;+label+&gt;] &lt;++&gt;</td>\n</tr>\n</tbody>\n</table>\n<p>可以通过变量<code>g:TeX_ItemStyle_environment</code>进行修改。</p>\n<h2 id=\"十、宏定制方法\"><a href=\"#十、宏定制方法\" class=\"headerlink\" title=\"十、宏定制方法\"></a>十、宏定制方法</h2><h3 id=\"1-宏文件\"><a href=\"#1-宏文件\" class=\"headerlink\" title=\"1. 宏文件\"></a>1. 宏文件</h3><p>在$VIM/ftplugin/latex-suite/macros/中，每一个文件就是一个宏。<br>用命令<code>|:TMacro|</code>或从菜单上可以选择使用哪个宏。<br>可以用<code>|:TMacroNew|</code>、<code>|:TMacroEdit|</code>、<code>|:TMacroDelete|</code>进行操作。</p>\n<h3 id=\"2-IMAP\"><a href=\"#2-IMAP\" class=\"headerlink\" title=\"2. IMAP\"></a>2. IMAP</h3><p>可以通过IMAP()定制宏，其语法为</p>\n<pre><code>call IMAP (lhs, rhs, ft [, phs, phe])\nlhs 缩写\nrhs 展开的代码\nft 适用的文件类型\nphs,phe 用来表示插入点的起始和终止符号，默认为&lt;+和+&gt;\n</code></pre><p>例如</p>\n<pre><code>:call IMAP(&apos;EFE&apos;, &quot;\\\\begin{figure}\\&lt;CR&gt;&lt;++&gt;\\\\end{figure}&lt;++&gt;&quot;, &apos;tex&apos;)\n</code></pre><p>复杂一点的情况</p>\n<pre><code>call IMAP(&apos;FOO&apos;, &quot;\\&lt;C-r&gt;=AskVimFunc()\\&lt;CR&gt;&quot;, &apos;vim&apos;)\n&quot; Askvimfunc: Asks For Function Name And Sets Up Template\n&quot; Description:\nfunction! AskVimFunc()\n    let name = input(&apos;Name of the function : &apos;)\n    if name == &apos;&apos;\n        let name = &quot;&lt;+Function Name+&gt;&quot;\n    end\n    let islocal = input(&apos;Is this function scriptlocal ? [y]/n : &apos;, &apos;y&apos;)\n    if islocal == &apos;y&apos;\n        let sidstr = &apos;&lt;SID&gt;&apos;\n    else\n        let sidstr = &apos;&apos;\n    endif\n    return IMAP_PutTextWithMovement(\n        \\ &quot;\\&quot; &quot;.name.&quot;: &lt;+short description+&gt; \\&lt;cr&gt;&quot; .\n        \\ &quot;Description: &lt;+long description+&gt;\\&lt;cr&gt;&quot; .\n        \\ &quot;\\&lt;C-u&gt;function! &quot;.name.&quot;(&lt;+arguments+&gt;)&lt;++&gt;\\&lt;cr&gt;&quot; .\n        \\       &quot;&lt;+function body+&gt;\\&lt;cr&gt;&quot; .\n        \\ &quot;endfunction \\&quot; &quot;\n        \\ )\nendfunction\n</code></pre>","site":{"data":{}},"excerpt":"<h2 id=\"导语\"><a href=\"#导语\" class=\"headerlink\" title=\"导语\"></a>导语</h2><blockquote>\n<p>快捷键是提高效率的不二法则，毕竟十个手指头比两个手指头要快得多。<br>使用vim-latex-suite的关键亦是如此。</p>\n</blockquote>\n<p>说明：</p>\n<ul>\n<li><code>||</code>中为在普通模式下输入的命令；</li>\n<li><code>&lt;&gt;</code>中为按键，C表示Ctrl，A表示Alt，S表示Shift；</li>\n</ul>","more":"<h2 id=\"一、模板\"><a href=\"#一、模板\" class=\"headerlink\" title=\"一、模板\"></a>一、模板</h2><h3 id=\"1-使用方法\"><a href=\"#1-使用方法\" class=\"headerlink\" title=\"1. 使用方法\"></a>1. 使用方法</h3><p>模板存放在$VIM/ftplugin/latex-suite/templates/中，使用命令<code>|:TTemplate|</code>或者从菜单中可以调出可用的模板。</p>\n<h3 id=\"2-定制方法\"><a href=\"#2-定制方法\" class=\"headerlink\" title=\"2. 定制方法\"></a>2. 定制方法</h3><p>在$VIM/ftplugin/latex-suite/templates/中建立相应的文件即可。</p>\n<h2 id=\"二、包\"><a href=\"#二、包\" class=\"headerlink\" title=\"二、包\"></a>二、包</h2><h3 id=\"1-使用方法-1\"><a href=\"#1-使用方法-1\" class=\"headerlink\" title=\"1. 使用方法\"></a>1. 使用方法</h3><p>宏包存放在$VIM/ftplugin/latex-suite/packages/中，从菜单中或者使用按键<code>&lt;F5&gt;</code>、命令<code>|:TPackage|</code>都可以调出可用宏包。</p>\n<h3 id=\"2-定制方法-1\"><a href=\"#2-定制方法-1\" class=\"headerlink\" title=\"2. 定制方法\"></a>2. 定制方法</h3><p>在$VIM/ftplugin/latex-suite/packages/中建立相应的文件即可，可参考exmpl。</p>\n<h2 id=\"三、环境\"><a href=\"#三、环境\" class=\"headerlink\" title=\"三、环境\"></a>三、环境</h2><h3 id=\"1-使用方法-2\"><a href=\"#1-使用方法-2\" class=\"headerlink\" title=\"1. 使用方法\"></a>1. 使用方法</h3><h4 id=\"（1）插入\"><a href=\"#（1）插入\" class=\"headerlink\" title=\"（1）插入\"></a>（1）插入</h4><ul>\n<li>方法1：<code>&lt;F5&gt;</code>，读取当前行的单词并形成环境，如果是空行，则给出环境列表；</li>\n<li>方法2：<code>&lt;S-F1&gt;</code>-<code>&lt;S-F4&gt;</code>，每一个对应一个自定义的环境；</li>\n<li>方法3：使3字母序列<code>Exx</code>，第一个字母E代表Environment，后两个字母是环境名的简写，比如EFI插入figure环境。</li>\n</ul>\n<h4 id=\"（2）包围\"><a href=\"#（2）包围\" class=\"headerlink\" title=\"（2）包围\"></a>（2）包围</h4><ul>\n<li>方法1：选中需要放入环境中的内容，按<code>&lt;F5&gt;</code>；</li>\n<li>方法2：选中需要放入环境中的内容，按3字母序列，这里的3字母序列和插入中不同的在于首字母需要改为<code>&lt;,&gt;</code>，后两个字母保持不变（小写即可）；</li>\n</ul>\n<h4 id=\"（3）修改\"><a href=\"#（3）修改\" class=\"headerlink\" title=\"（3）修改\"></a>（3）修改</h4><ul>\n<li>方法1：选中需要修改环境名的内容，然后按<code>&lt;S-F5&gt;</code>，多重环境时先改变最内层环境；</li>\n</ul>\n<h3 id=\"2-定制方法-2\"><a href=\"#2-定制方法-2\" class=\"headerlink\" title=\"2.定制方法\"></a>2.定制方法</h3><p>设置变量<code>g:Tex_Env_name</code>即可，其中’name’是环境名，例如</p>\n<pre><code>let g:Tex_Env_frame = &quot;\\\\begin{frame}\\&lt;cr&gt;\\\\frametitle{&lt;+title+&gt;}\\&lt;cr&gt;&lt;++&gt;\\&lt;cr&gt;\\\\end{frame}&lt;++&gt;&quot;\n</code></pre><p>有些带标签的环境可设置变量<code>g:Tex_EnvLabelprefix_name</code>，例如</p>\n<pre><code>figure, table, theorem, definition,lemma, proposition, corollary, assumption, remark, equation, eqnarray, align, multline\n</code></pre><p>默认给出的环境列表由变量<code>g:Tex_PromptedEnvironments</code>设置，默认值为</p>\n<pre><code>&apos;eqnarray\\*,eqnarray, equation,equation\\*,\\[,$$,align,align\\*&apos;\n</code></pre><p><code>&lt;S-F1&gt;</code>-<code>&lt;S-F4&gt;</code>对应的环境名由<code>g:Tex_HotKeyMappings</code>设置，默认值为</p>\n<pre><code>&apos;eqnarray*,eqnarray,bmatrix&apos;\n</code></pre><h2 id=\"四、命令\"><a href=\"#四、命令\" class=\"headerlink\" title=\"四、命令\"></a>四、命令</h2><h3 id=\"1-使用方法-3\"><a href=\"#1-使用方法-3\" class=\"headerlink\" title=\"1. 使用方法\"></a>1. 使用方法</h3><h4 id=\"（1）插入-1\"><a href=\"#（1）插入-1\" class=\"headerlink\" title=\"（1）插入\"></a>（1）插入</h4><ul>\n<li>方法1：<code>&lt;F7&gt;</code>，提取当前光标所在单词构成命令，如果是空单词，则给出命令列表；</li>\n</ul>\n<h4 id=\"（2）包围-1\"><a href=\"#（2）包围-1\" class=\"headerlink\" title=\"（2）包围\"></a>（2）包围</h4><ul>\n<li>方法1：选中需要放入命令的内容，按<code>&lt;F7&gt;</code>；</li>\n</ul>\n<h4 id=\"（3）修改-1\"><a href=\"#（3）修改-1\" class=\"headerlink\" title=\"（3）修改\"></a>（3）修改</h4><ul>\n<li>方法1：选中需要修改命令名的内容，按<code>&lt;S-F7&gt;</code>。</li>\n</ul>\n<h3 id=\"2-定制方法-3\"><a href=\"#2-定制方法-3\" class=\"headerlink\" title=\"2. 定制方法\"></a>2. 定制方法</h3><p>设置变量<code>g:Tex_Com_name</code>即可，其中’name’是变量名。</p>\n<p>默认给出的命令列表由变量<code>g:Tex_PromptedCommands</code>控制，默认值为</p>\n<pre><code>&apos;footnote,cite,pageref,label&apos;\n</code></pre><h2 id=\"五、参考文献\"><a href=\"#五、参考文献\" class=\"headerlink\" title=\"五、参考文献\"></a>五、参考文献</h2><h3 id=\"1-使用方法-4\"><a href=\"#1-使用方法-4\" class=\"headerlink\" title=\"1. 使用方法\"></a>1. 使用方法</h3><p>共提供四种插入模式：<code>BBB</code>、<code>BBL</code>、<code>BBH</code>和<code>BBX</code>。<br>它们的插入方式是一致的，输入后会提示需要插入的文献类型。</p>\n<ul>\n<li><code>BBB</code>仅插入该种文献所需的最少字段；</li>\n<li><code>BBL</code>插入该种文献常用的字段；</li>\n<li><code>BBH</code>插入一些更多的字段；</li>\n<li><code>BBX</code>则插入所有的字段。</li>\n</ul>\n<h3 id=\"2-定制方法-4\"><a href=\"#2-定制方法-4\" class=\"headerlink\" title=\"2. 定制方法\"></a>2. 定制方法</h3><p>如果需要定制不同插入模式下的字段，那么需要修改全局变量<code>g:Bib_{type}_options</code></p>\n<p>该变量在文件$VIM/ftplugin/bib.vim中定义，{type}是文献类型，比如’article’、’book’等。<br>变量取值如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>对应的字段</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>w</td>\n<td>address</td>\n</tr>\n<tr>\n<td>a</td>\n<td>author</td>\n</tr>\n<tr>\n<td>b</td>\n<td>booktitle</td>\n</tr>\n<tr>\n<td>c</td>\n<td>chapter</td>\n</tr>\n<tr>\n<td>d</td>\n<td>edition</td>\n</tr>\n<tr>\n<td>e</td>\n<td>editor</td>\n</tr>\n<tr>\n<td>h</td>\n<td>howpublished</td>\n</tr>\n<tr>\n<td>i</td>\n<td>institution</td>\n</tr>\n<tr>\n<td>k</td>\n<td>isbn</td>\n</tr>\n<tr>\n<td>j</td>\n<td>journal</td>\n</tr>\n<tr>\n<td>m</td>\n<td>month</td>\n</tr>\n<tr>\n<td>z</td>\n<td>note</td>\n</tr>\n<tr>\n<td>n</td>\n<td>number</td>\n</tr>\n<tr>\n<td>o</td>\n<td>organization</td>\n</tr>\n<tr>\n<td>p</td>\n<td>pages</td>\n</tr>\n<tr>\n<td>q</td>\n<td>publisher</td>\n</tr>\n<tr>\n<td>r</td>\n<td>school</td>\n</tr>\n<tr>\n<td>s</td>\n<td>series</td>\n</tr>\n<tr>\n<td>t</td>\n<td>title</td>\n</tr>\n<tr>\n<td>u</td>\n<td>type</td>\n</tr>\n<tr>\n<td>v</td>\n<td>volume</td>\n</tr>\n<tr>\n<td>y</td>\n<td>year</td>\n</tr>\n</tbody>\n</table>\n<p>比如，默认条件下使用<code>BBB</code>插入’article’</p>\n<pre><code>@ARTICLE{&lt;+key+&gt;,\n    author = {&lt;++&gt;},\n    title = {&lt;++&gt;},\n    journal = {&lt;++&gt;},\n    year = {&lt;++&gt;},\n    otherinfo = {&lt;++&gt;}\n}&lt;++&gt;\n</code></pre><p>当定义<code>g:Bib_article_options</code>为’mnp’，则使用<code>BBB</code>插入’article’为</p>\n<pre><code>@ARTICLE{&lt;+key+&gt;,\n    author = {&lt;++&gt;},\n    title = {&lt;++&gt;},\n    journal = {&lt;++&gt;},\n    year = {&lt;++&gt;},\n    month = {&lt;++&gt;},\n    number = {&lt;++&gt;},\n    pages = {&lt;++&gt;},\n    otherinfo = {&lt;++&gt;}\n}&lt;++&gt;\n</code></pre><p>如果还有一些上面没有列出来的字段需要插入，则需要定义全局变量<br><code>g:Bib_article_extrafields</code></p>\n<p>比如定义</p>\n<pre><code>let g:Bib_article_extrafields = &quot;crossref\\nabstract&quot;\n</code></pre><p>则’article’的模板会多出两个字段</p>\n<pre><code>crossref = {&lt;++&gt;},\nabstract = {&lt;++&gt;},\n</code></pre><h2 id=\"六、编译及查看\"><a href=\"#六、编译及查看\" class=\"headerlink\" title=\"六、编译及查看\"></a>六、编译及查看</h2><p>使用按键<code>\\ll</code>开始编译。<br>变量<code>g:Tex_CompileRule_&lt;format&gt;</code>设置编译规则，<format>是”pdf”、”dvi”等。<br>设置编译依赖，比如</format></p>\n<pre><code>.tex -&gt; .dvi -&gt; .ps -&gt; .pdf\n</code></pre><p>可以设置为</p>\n<pre><code>let g:Tex_FormatDependency_pdf = &apos;dvi,ps,pdf&apos;\n</code></pre><p>同时需要设定编译规则</p>\n<pre><code>let g:Tex_CompileRule_dvi = &apos;latex --interaction=nonstopmode $*&apos;\nlet g:Tex_CompileRule_ps = &apos;dvips -Ppdf -o $*.ps $*.dvi&apos;\nlet g:Tex_CompileRule_pdf = &apos;ps2pdf $*.ps&apos;\n</code></pre><p>只编译部分文件，选择模式下选择一部分内容，然后使用\\ll编译这一部分内容，用\\lv来查看结果。对应的命令是<code>|:TPartComp|</code>和<code>|:TPartView|</code>。</p>\n<p>查看使用<code>\\lv</code>。规则使用变量<code>g:Tex_ViewRule_&lt;format&gt;</code>来定义。</p>\n<p>前向搜索使用<code>\\ls</code>。在Mac上，需要设置<code>g:Tex_TreatMacViewerAsUNIX</code>为1</p>\n<p>反向搜索需要设置查看器与vim的沟通方式，比如</p>\n<pre><code>&quot;C:\\Program Files\\vim\\vim61\\gvim&quot; -c &quot;:RemoteOpen +%l %f&quot;\n</code></pre><h2 id=\"七、折叠\"><a href=\"#七、折叠\" class=\"headerlink\" title=\"七、折叠\"></a>七、折叠</h2><p>Latex-Suite用插件SyntaxFolds.vim来进行语法折叠。<br>折叠是手动的，新写的内容需要按<code>&lt;F6&gt;</code>或<code>\\rf</code>来开启折叠。</p>\n<p>有一系列变量用来控制折叠<br><code>g:Tex_FoldedSections</code>控制哪些节需要折叠，默认值为</p>\n<pre><code>part,chapter,section,subsection,subsubsection,paragraph\n</code></pre><p><code>g:Tex_FoldedEnvironments</code>控制哪些环境需要折叠，默认值为</p>\n<pre><code>verbatim,comment,eq,gather,\nalign,figure,table,thebibliography,\nkeywords,abstract,titlepage\n</code></pre><p><code>g:Tex_FoldedCommands</code>控制哪些命令需要折叠，默认值为空。<br><code>g:Tex_FoldedMisc</code>控制一些其他需要折叠的内容，默认值为</p>\n<pre><code>item,preamble,&lt;&lt;&lt;\n</code></pre><h2 id=\"八、多文件工程\"><a href=\"#八、多文件工程\" class=\"headerlink\" title=\"八、多文件工程\"></a>八、多文件工程</h2><p>假设有如下工程结构</p>\n<pre><code>thesis/\n    main.tex\n    abstract.tex\n    intro/\n        intro.tex\n        figures/\n            fig1.eps\n            fig2.eps\n    chapter1/\n        chap1.tex\n        figures/\n            fig1.eps\n    conclusion/\n        conclusion.tex\n        figures/\n</code></pre><p>main.tex文件如下</p>\n<pre><code>% file: main.tex\n\\documentclass{report}\n\\begin{document}\n\n\\input{abstract.tex}\n\\input{intro/intro.tex}\n\\input{chapter1/chap1.tex}\n\\input{conclusion/conclusion.tex}\n\n\\end{document}\n</code></pre><p>只需要创建一个空文件main.tex.latexmain就可以表明main.tex是主文件。</p>\n<h2 id=\"九、常用快捷键\"><a href=\"#九、常用快捷键\" class=\"headerlink\" title=\"九、常用快捷键\"></a>九、常用快捷键</h2><h3 id=\"1-章节\"><a href=\"#1-章节\" class=\"headerlink\" title=\"1. 章节\"></a>1. 章节</h3><p>可使用3字母序列<code>Sxx</code>进行插入和修改。</p>\n<h3 id=\"2-字体\"><a href=\"#2-字体\" class=\"headerlink\" title=\"2. 字体\"></a>2. 字体</h3><p>可使用3字母序列<code>Fxx</code>进行插入和修改。</p>\n<h3 id=\"3-希腊字母\"><a href=\"#3-希腊字母\" class=\"headerlink\" title=\"3. 希腊字母\"></a>3. 希腊字母</h3><p>`a至`z分别代表\\alpha到\\zeta，大写情况也类似（但不支持所有大写希腊字母）。</p>\n<h3 id=\"4-智能按键\"><a href=\"#4-智能按键\" class=\"headerlink\" title=\"4. 智能按键\"></a>4. 智能按键</h3><p><code>...</code>在数学模式外是\\ldots，在数学模式中是\\cdots</p>\n<h3 id=\"5-补全\"><a href=\"#5-补全\" class=\"headerlink\" title=\"5. 补全\"></a>5. 补全</h3><p>用<code>&lt;F9&gt;</code>可以进行各种类型的补全，包括引用补全（\\ref、\\eqref、\\cite）、文件名补全、命令参数补全。通常需要设置</p>\n<pre><code>set grepprg=grep\\ -nH\\ $*\n</code></pre><h3 id=\"6-Auc-Tex中的一些快捷键\"><a href=\"#6-Auc-Tex中的一些快捷键\" class=\"headerlink\" title=\"6. Auc-Tex中的一些快捷键\"></a>6. Auc-Tex中的一些快捷键</h3><p>数学环境中：</p>\n<table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>对应的命令</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>`^</td>\n<td>\\Hat{&lt;++&gt;}&lt;++&gt;</td>\n</tr>\n<tr>\n<td>`_</td>\n<td>\\bar{&lt;++&gt;}&lt;++&gt;</td>\n</tr>\n<tr>\n<td>`6</td>\n<td>\\partial</td>\n</tr>\n<tr>\n<td>`8</td>\n<td>\\infty</td>\n</tr>\n<tr>\n<td>`/</td>\n<td>\\frac{&lt;++&gt;}{&lt;++&gt;}&lt;++&gt;</td>\n</tr>\n<tr>\n<td>`%</td>\n<td>\\frac{&lt;++&gt;}{&lt;++&gt;}&lt;++&gt;</td>\n</tr>\n<tr>\n<td>`@</td>\n<td>\\circ</td>\n</tr>\n<tr>\n<td>`0</td>\n<td>^\\circ</td>\n</tr>\n<tr>\n<td>`=</td>\n<td>\\equiv</td>\n</tr>\n<tr>\n<td>`\\</td>\n<td>\\setminus</td>\n</tr>\n<tr>\n<td>`.</td>\n<td>\\cdot</td>\n</tr>\n<tr>\n<td>`*</td>\n<td>\\times</td>\n</tr>\n<tr>\n<td>`&amp;</td>\n<td>\\wedge</td>\n</tr>\n<tr>\n<td>`-</td>\n<td>\\bigcap</td>\n</tr>\n<tr>\n<td>`+</td>\n<td>\\bigcup</td>\n</tr>\n<tr>\n<td>`(</td>\n<td>\\subset</td>\n</tr>\n<tr>\n<td>`)</td>\n<td>\\supset</td>\n</tr>\n<tr>\n<td>`&lt;</td>\n<td>\\le</td>\n</tr>\n<tr>\n<td>`&gt;</td>\n<td>\\ge</td>\n</tr>\n<tr>\n<td>`,</td>\n<td>\\nonumber</td>\n</tr>\n<tr>\n<td>`~</td>\n<td>\\tilde{&lt;++&gt;}&lt;++&gt;</td>\n</tr>\n<tr>\n<td>`;</td>\n<td>\\dot{&lt;++&gt;}&lt;++&gt;</td>\n</tr>\n<tr>\n<td>`:</td>\n<td>\\ddot{&lt;++&gt;}&lt;++&gt;</td>\n</tr>\n<tr>\n<td>`2</td>\n<td>\\sqrt{&lt;++&gt;}&lt;++&gt;</td>\n</tr>\n<tr>\n<td>`&#124;</td>\n<td>\\Big&#124;</td>\n</tr>\n<tr>\n<td>`I</td>\n<td>\\int_{&lt;++&gt;}^{&lt;++&gt;}&lt;++&gt;</td>\n</tr>\n</tbody>\n</table>\n<p>visual模式下：</p>\n<table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>对应的命令</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>`(</td>\n<td>\\left( \\right)</td>\n</tr>\n<tr>\n<td>`[</td>\n<td>\\left[ \\right]</td>\n</tr>\n<tr>\n<td>`{</td>\n<td>\\left\\{ \\right\\}</td>\n</tr>\n<tr>\n<td>`$</td>\n<td>普通选择 $$，行选择 \\[ \\]</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"7-Alt相关\"><a href=\"#7-Alt相关\" class=\"headerlink\" title=\"7. Alt相关\"></a>7. Alt相关</h3><p>默认条件下Alt键是菜单栏的热键，如果有冲突则需要设置</p>\n<pre><code>set winaltkeys=no\n</code></pre><ul>\n<li><code>&lt;Alt-L&gt;</code><br>在插入模式下，根据当前光标前的字符，插入不同的命令</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>光标之前的字符</th>\n<th>对应的命令</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>(</td>\n<td>\\left( &lt;++&gt; \\right)</td>\n</tr>\n<tr>\n<td>[</td>\n<td>\\left[ &lt;++&gt; \\right]</td>\n</tr>\n<tr>\n<td>&#124;</td>\n<td>\\left&#124; &lt;++&gt; \\right&#124;</td>\n</tr>\n<tr>\n<td>{</td>\n<td>\\left{ &lt;++&gt; \\right}</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>\\langle &lt;++&gt; \\rangle</td>\n</tr>\n<tr>\n<td>q</td>\n<td>\\lefteqn{&lt;++&gt;}&lt;++&gt;</td>\n</tr>\n</tbody>\n</table>\n<p>如果当前光标前面没有任何字符，则插入\\label{&lt;++&gt;}。</p>\n<ul>\n<li><p><code>&lt;Alt-B&gt;</code><br>插入模式中将前面的字符包含在命令\\mathbf{}中。</p>\n</li>\n<li><p><code>&lt;Alt-C&gt;</code><br>在插入模式下，<br>如果前面的字符是字母或数字，则变成大写并包含在命令\\mathcal{}中；<br>其它情况下插入\\cite{}。<br>在选择模式下，将选择的字符包含在\\mathcal{}中。</p>\n</li>\n<li><p><code>&lt;Alt-I&gt;</code><br>根据不同的环境插入\\item</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>环境名</th>\n<th>样式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>itemize</td>\n<td>\\item</td>\n</tr>\n<tr>\n<td>enumerate</td>\n<td>\\item</td>\n</tr>\n<tr>\n<td>theindex</td>\n<td>\\item</td>\n</tr>\n<tr>\n<td>thebibliography</td>\n<td>\\item[&lt;+biblabel+&gt;]{&lt;+bibkey+&gt;} &lt;++&gt;</td>\n</tr>\n<tr>\n<td>description</td>\n<td>\\item[&lt;+label+&gt;] &lt;++&gt;</td>\n</tr>\n</tbody>\n</table>\n<p>可以通过变量<code>g:TeX_ItemStyle_environment</code>进行修改。</p>\n<h2 id=\"十、宏定制方法\"><a href=\"#十、宏定制方法\" class=\"headerlink\" title=\"十、宏定制方法\"></a>十、宏定制方法</h2><h3 id=\"1-宏文件\"><a href=\"#1-宏文件\" class=\"headerlink\" title=\"1. 宏文件\"></a>1. 宏文件</h3><p>在$VIM/ftplugin/latex-suite/macros/中，每一个文件就是一个宏。<br>用命令<code>|:TMacro|</code>或从菜单上可以选择使用哪个宏。<br>可以用<code>|:TMacroNew|</code>、<code>|:TMacroEdit|</code>、<code>|:TMacroDelete|</code>进行操作。</p>\n<h3 id=\"2-IMAP\"><a href=\"#2-IMAP\" class=\"headerlink\" title=\"2. IMAP\"></a>2. IMAP</h3><p>可以通过IMAP()定制宏，其语法为</p>\n<pre><code>call IMAP (lhs, rhs, ft [, phs, phe])\nlhs 缩写\nrhs 展开的代码\nft 适用的文件类型\nphs,phe 用来表示插入点的起始和终止符号，默认为&lt;+和+&gt;\n</code></pre><p>例如</p>\n<pre><code>:call IMAP(&apos;EFE&apos;, &quot;\\\\begin{figure}\\&lt;CR&gt;&lt;++&gt;\\\\end{figure}&lt;++&gt;&quot;, &apos;tex&apos;)\n</code></pre><p>复杂一点的情况</p>\n<pre><code>call IMAP(&apos;FOO&apos;, &quot;\\&lt;C-r&gt;=AskVimFunc()\\&lt;CR&gt;&quot;, &apos;vim&apos;)\n&quot; Askvimfunc: Asks For Function Name And Sets Up Template\n&quot; Description:\nfunction! AskVimFunc()\n    let name = input(&apos;Name of the function : &apos;)\n    if name == &apos;&apos;\n        let name = &quot;&lt;+Function Name+&gt;&quot;\n    end\n    let islocal = input(&apos;Is this function scriptlocal ? [y]/n : &apos;, &apos;y&apos;)\n    if islocal == &apos;y&apos;\n        let sidstr = &apos;&lt;SID&gt;&apos;\n    else\n        let sidstr = &apos;&apos;\n    endif\n    return IMAP_PutTextWithMovement(\n        \\ &quot;\\&quot; &quot;.name.&quot;: &lt;+short description+&gt; \\&lt;cr&gt;&quot; .\n        \\ &quot;Description: &lt;+long description+&gt;\\&lt;cr&gt;&quot; .\n        \\ &quot;\\&lt;C-u&gt;function! &quot;.name.&quot;(&lt;+arguments+&gt;)&lt;++&gt;\\&lt;cr&gt;&quot; .\n        \\       &quot;&lt;+function body+&gt;\\&lt;cr&gt;&quot; .\n        \\ &quot;endfunction \\&quot; &quot;\n        \\ )\nendfunction\n</code></pre>"},{"title":"武装你的vim","date":"2016-08-21T15:14:37.000Z","_content":"\nvim自带的编辑、快速移动等等强大的功能，但它还不够强大，它还可以有更多的武器。\n\n## 1、vim插件相关：\n（1）vundle：vim插件管理必备。\n（2）genutils：提供了一些书写vim插件有用的函数。\n（3）L9：同样提供了许多书写vim插件有用的函数。\n\n<!-- more -->\n\n## 2、浏览类：\n（1）minibufexpl.vim：以不同的缓冲区显示不同的文件。\n（2）Tabbar：对文件中出现的类、函数、变量等提供概要浏览\n（3）taglist：类似Tagbar。\n（4）The-NERD-Tree：对目录中的文件进行浏览。\n\n## 3、查找类\n（1）文件快速查找：\nCommand-T：根据部分文件名快速找到所需要的文件，需要vim编译时支持ruby。\n（2）文件切换：\nFSwitch：在头文件和源文件之间快速切换。\n（3）类/函数/变量定义查找（类C语言）：\ncscope.vim：需要有cscope可执行程序，创建数据库后可以实现查找。\n\n## 4、补全类：\n（1）neocomplcache：强大的补全功能，集所有的补全方式于一身。\n（2）xptemplate：强大的snippet功能，帮助快速写代码。\n（3）omnicppcomplete：为C/C++提供补全，在./->/::等等后面自动补全，需要ctags支持。\n（4）pythoncomplete：为python提供补全功能。\n\n## 5、括号配对\nAuto-Pairs：自动补齐成对的符号，提供了flymode来跳出多层括号。\n\n## 6、注释类\n（1）The-NERD-Commenter：快速注释功能\n（2）自动形成doxygen风格的注释：\nDoxygenToolkit.vim：为文件、类、函数自动形成doxygen风格的注释。\n\n## 7、可视化显示内容：\n（1）Gundo：将undo内容用树形可读方式展示。\n（2）Marks-Browser：将marks标记用可视化方式展示。\n（3）Tasklist：对文件中标记TODO的内容可视化展示。\n（4）YankRing.vim：可视化显示最近删除的内容。。\n\n## 8、各种语言相关：\n（1）PHP：\nphpfolding.vim：为php提供代码折叠功能。\n（2）python：\npyhon-mode-klen：为python提供了许多实用功能，包括了pylint（pep8规范性检查、语法错误检查）、rope（部分功能）、pydoc（帮助查找）\nropevim：为python提供了定义查找、帮助查找、代码重构等功能。\n（3）HTML：\nsparkup：为html代码书写提供一些实用功能。\n（4）LaTeX：\nvim-latex：书写latex必备插件。\n\n## 9、版本控制：\nvim-fugitive：提供Git相关功能\n\n## 10、调试：\nvimgdb：与gdb接口可实现可视化调试功能。\n\n## 11、缩进：\nvim-pasta：粘贴时自动根据语法进行缩进。\nvim-indent-guides：可视化显示缩进级别。\n\n## 12、状态栏：\nvim-powerline：可以各种设置vim状态栏。\n\n\n","source":"_posts/2016-08-21-vim-plugins.md","raw":"---\ntitle: 武装你的vim\ndate: 2016-08-21 23:14:37\ncategories: 弄点工具\ntags: \n    - vim\n---\n\nvim自带的编辑、快速移动等等强大的功能，但它还不够强大，它还可以有更多的武器。\n\n## 1、vim插件相关：\n（1）vundle：vim插件管理必备。\n（2）genutils：提供了一些书写vim插件有用的函数。\n（3）L9：同样提供了许多书写vim插件有用的函数。\n\n<!-- more -->\n\n## 2、浏览类：\n（1）minibufexpl.vim：以不同的缓冲区显示不同的文件。\n（2）Tabbar：对文件中出现的类、函数、变量等提供概要浏览\n（3）taglist：类似Tagbar。\n（4）The-NERD-Tree：对目录中的文件进行浏览。\n\n## 3、查找类\n（1）文件快速查找：\nCommand-T：根据部分文件名快速找到所需要的文件，需要vim编译时支持ruby。\n（2）文件切换：\nFSwitch：在头文件和源文件之间快速切换。\n（3）类/函数/变量定义查找（类C语言）：\ncscope.vim：需要有cscope可执行程序，创建数据库后可以实现查找。\n\n## 4、补全类：\n（1）neocomplcache：强大的补全功能，集所有的补全方式于一身。\n（2）xptemplate：强大的snippet功能，帮助快速写代码。\n（3）omnicppcomplete：为C/C++提供补全，在./->/::等等后面自动补全，需要ctags支持。\n（4）pythoncomplete：为python提供补全功能。\n\n## 5、括号配对\nAuto-Pairs：自动补齐成对的符号，提供了flymode来跳出多层括号。\n\n## 6、注释类\n（1）The-NERD-Commenter：快速注释功能\n（2）自动形成doxygen风格的注释：\nDoxygenToolkit.vim：为文件、类、函数自动形成doxygen风格的注释。\n\n## 7、可视化显示内容：\n（1）Gundo：将undo内容用树形可读方式展示。\n（2）Marks-Browser：将marks标记用可视化方式展示。\n（3）Tasklist：对文件中标记TODO的内容可视化展示。\n（4）YankRing.vim：可视化显示最近删除的内容。。\n\n## 8、各种语言相关：\n（1）PHP：\nphpfolding.vim：为php提供代码折叠功能。\n（2）python：\npyhon-mode-klen：为python提供了许多实用功能，包括了pylint（pep8规范性检查、语法错误检查）、rope（部分功能）、pydoc（帮助查找）\nropevim：为python提供了定义查找、帮助查找、代码重构等功能。\n（3）HTML：\nsparkup：为html代码书写提供一些实用功能。\n（4）LaTeX：\nvim-latex：书写latex必备插件。\n\n## 9、版本控制：\nvim-fugitive：提供Git相关功能\n\n## 10、调试：\nvimgdb：与gdb接口可实现可视化调试功能。\n\n## 11、缩进：\nvim-pasta：粘贴时自动根据语法进行缩进。\nvim-indent-guides：可视化显示缩进级别。\n\n## 12、状态栏：\nvim-powerline：可以各种设置vim状态栏。\n\n\n","slug":"vim-plugins","published":1,"updated":"2017-12-17T03:29:27.364Z","_id":"cjb6k4kvw000iulep9s0awc05","comments":1,"layout":"post","photos":[],"link":"","content":"<p>vim自带的编辑、快速移动等等强大的功能，但它还不够强大，它还可以有更多的武器。</p>\n<h2 id=\"1、vim插件相关：\"><a href=\"#1、vim插件相关：\" class=\"headerlink\" title=\"1、vim插件相关：\"></a>1、vim插件相关：</h2><p>（1）vundle：vim插件管理必备。<br>（2）genutils：提供了一些书写vim插件有用的函数。<br>（3）L9：同样提供了许多书写vim插件有用的函数。</p>\n<a id=\"more\"></a>\n<h2 id=\"2、浏览类：\"><a href=\"#2、浏览类：\" class=\"headerlink\" title=\"2、浏览类：\"></a>2、浏览类：</h2><p>（1）minibufexpl.vim：以不同的缓冲区显示不同的文件。<br>（2）Tabbar：对文件中出现的类、函数、变量等提供概要浏览<br>（3）taglist：类似Tagbar。<br>（4）The-NERD-Tree：对目录中的文件进行浏览。</p>\n<h2 id=\"3、查找类\"><a href=\"#3、查找类\" class=\"headerlink\" title=\"3、查找类\"></a>3、查找类</h2><p>（1）文件快速查找：<br>Command-T：根据部分文件名快速找到所需要的文件，需要vim编译时支持ruby。<br>（2）文件切换：<br>FSwitch：在头文件和源文件之间快速切换。<br>（3）类/函数/变量定义查找（类C语言）：<br>cscope.vim：需要有cscope可执行程序，创建数据库后可以实现查找。</p>\n<h2 id=\"4、补全类：\"><a href=\"#4、补全类：\" class=\"headerlink\" title=\"4、补全类：\"></a>4、补全类：</h2><p>（1）neocomplcache：强大的补全功能，集所有的补全方式于一身。<br>（2）xptemplate：强大的snippet功能，帮助快速写代码。<br>（3）omnicppcomplete：为C/C++提供补全，在./-&gt;/::等等后面自动补全，需要ctags支持。<br>（4）pythoncomplete：为python提供补全功能。</p>\n<h2 id=\"5、括号配对\"><a href=\"#5、括号配对\" class=\"headerlink\" title=\"5、括号配对\"></a>5、括号配对</h2><p>Auto-Pairs：自动补齐成对的符号，提供了flymode来跳出多层括号。</p>\n<h2 id=\"6、注释类\"><a href=\"#6、注释类\" class=\"headerlink\" title=\"6、注释类\"></a>6、注释类</h2><p>（1）The-NERD-Commenter：快速注释功能<br>（2）自动形成doxygen风格的注释：<br>DoxygenToolkit.vim：为文件、类、函数自动形成doxygen风格的注释。</p>\n<h2 id=\"7、可视化显示内容：\"><a href=\"#7、可视化显示内容：\" class=\"headerlink\" title=\"7、可视化显示内容：\"></a>7、可视化显示内容：</h2><p>（1）Gundo：将undo内容用树形可读方式展示。<br>（2）Marks-Browser：将marks标记用可视化方式展示。<br>（3）Tasklist：对文件中标记TODO的内容可视化展示。<br>（4）YankRing.vim：可视化显示最近删除的内容。。</p>\n<h2 id=\"8、各种语言相关：\"><a href=\"#8、各种语言相关：\" class=\"headerlink\" title=\"8、各种语言相关：\"></a>8、各种语言相关：</h2><p>（1）PHP：<br>phpfolding.vim：为php提供代码折叠功能。<br>（2）python：<br>pyhon-mode-klen：为python提供了许多实用功能，包括了pylint（pep8规范性检查、语法错误检查）、rope（部分功能）、pydoc（帮助查找）<br>ropevim：为python提供了定义查找、帮助查找、代码重构等功能。<br>（3）HTML：<br>sparkup：为html代码书写提供一些实用功能。<br>（4）LaTeX：<br>vim-latex：书写latex必备插件。</p>\n<h2 id=\"9、版本控制：\"><a href=\"#9、版本控制：\" class=\"headerlink\" title=\"9、版本控制：\"></a>9、版本控制：</h2><p>vim-fugitive：提供Git相关功能</p>\n<h2 id=\"10、调试：\"><a href=\"#10、调试：\" class=\"headerlink\" title=\"10、调试：\"></a>10、调试：</h2><p>vimgdb：与gdb接口可实现可视化调试功能。</p>\n<h2 id=\"11、缩进：\"><a href=\"#11、缩进：\" class=\"headerlink\" title=\"11、缩进：\"></a>11、缩进：</h2><p>vim-pasta：粘贴时自动根据语法进行缩进。<br>vim-indent-guides：可视化显示缩进级别。</p>\n<h2 id=\"12、状态栏：\"><a href=\"#12、状态栏：\" class=\"headerlink\" title=\"12、状态栏：\"></a>12、状态栏：</h2><p>vim-powerline：可以各种设置vim状态栏。</p>\n","site":{"data":{}},"excerpt":"<p>vim自带的编辑、快速移动等等强大的功能，但它还不够强大，它还可以有更多的武器。</p>\n<h2 id=\"1、vim插件相关：\"><a href=\"#1、vim插件相关：\" class=\"headerlink\" title=\"1、vim插件相关：\"></a>1、vim插件相关：</h2><p>（1）vundle：vim插件管理必备。<br>（2）genutils：提供了一些书写vim插件有用的函数。<br>（3）L9：同样提供了许多书写vim插件有用的函数。</p>","more":"<h2 id=\"2、浏览类：\"><a href=\"#2、浏览类：\" class=\"headerlink\" title=\"2、浏览类：\"></a>2、浏览类：</h2><p>（1）minibufexpl.vim：以不同的缓冲区显示不同的文件。<br>（2）Tabbar：对文件中出现的类、函数、变量等提供概要浏览<br>（3）taglist：类似Tagbar。<br>（4）The-NERD-Tree：对目录中的文件进行浏览。</p>\n<h2 id=\"3、查找类\"><a href=\"#3、查找类\" class=\"headerlink\" title=\"3、查找类\"></a>3、查找类</h2><p>（1）文件快速查找：<br>Command-T：根据部分文件名快速找到所需要的文件，需要vim编译时支持ruby。<br>（2）文件切换：<br>FSwitch：在头文件和源文件之间快速切换。<br>（3）类/函数/变量定义查找（类C语言）：<br>cscope.vim：需要有cscope可执行程序，创建数据库后可以实现查找。</p>\n<h2 id=\"4、补全类：\"><a href=\"#4、补全类：\" class=\"headerlink\" title=\"4、补全类：\"></a>4、补全类：</h2><p>（1）neocomplcache：强大的补全功能，集所有的补全方式于一身。<br>（2）xptemplate：强大的snippet功能，帮助快速写代码。<br>（3）omnicppcomplete：为C/C++提供补全，在./-&gt;/::等等后面自动补全，需要ctags支持。<br>（4）pythoncomplete：为python提供补全功能。</p>\n<h2 id=\"5、括号配对\"><a href=\"#5、括号配对\" class=\"headerlink\" title=\"5、括号配对\"></a>5、括号配对</h2><p>Auto-Pairs：自动补齐成对的符号，提供了flymode来跳出多层括号。</p>\n<h2 id=\"6、注释类\"><a href=\"#6、注释类\" class=\"headerlink\" title=\"6、注释类\"></a>6、注释类</h2><p>（1）The-NERD-Commenter：快速注释功能<br>（2）自动形成doxygen风格的注释：<br>DoxygenToolkit.vim：为文件、类、函数自动形成doxygen风格的注释。</p>\n<h2 id=\"7、可视化显示内容：\"><a href=\"#7、可视化显示内容：\" class=\"headerlink\" title=\"7、可视化显示内容：\"></a>7、可视化显示内容：</h2><p>（1）Gundo：将undo内容用树形可读方式展示。<br>（2）Marks-Browser：将marks标记用可视化方式展示。<br>（3）Tasklist：对文件中标记TODO的内容可视化展示。<br>（4）YankRing.vim：可视化显示最近删除的内容。。</p>\n<h2 id=\"8、各种语言相关：\"><a href=\"#8、各种语言相关：\" class=\"headerlink\" title=\"8、各种语言相关：\"></a>8、各种语言相关：</h2><p>（1）PHP：<br>phpfolding.vim：为php提供代码折叠功能。<br>（2）python：<br>pyhon-mode-klen：为python提供了许多实用功能，包括了pylint（pep8规范性检查、语法错误检查）、rope（部分功能）、pydoc（帮助查找）<br>ropevim：为python提供了定义查找、帮助查找、代码重构等功能。<br>（3）HTML：<br>sparkup：为html代码书写提供一些实用功能。<br>（4）LaTeX：<br>vim-latex：书写latex必备插件。</p>\n<h2 id=\"9、版本控制：\"><a href=\"#9、版本控制：\" class=\"headerlink\" title=\"9、版本控制：\"></a>9、版本控制：</h2><p>vim-fugitive：提供Git相关功能</p>\n<h2 id=\"10、调试：\"><a href=\"#10、调试：\" class=\"headerlink\" title=\"10、调试：\"></a>10、调试：</h2><p>vimgdb：与gdb接口可实现可视化调试功能。</p>\n<h2 id=\"11、缩进：\"><a href=\"#11、缩进：\" class=\"headerlink\" title=\"11、缩进：\"></a>11、缩进：</h2><p>vim-pasta：粘贴时自动根据语法进行缩进。<br>vim-indent-guides：可视化显示缩进级别。</p>\n<h2 id=\"12、状态栏：\"><a href=\"#12、状态栏：\" class=\"headerlink\" title=\"12、状态栏：\"></a>12、状态栏：</h2><p>vim-powerline：可以各种设置vim状态栏。</p>"},{"title":"高效文本编辑的七个习惯","date":"2016-08-21T15:16:15.000Z","_content":"\n这是Vim作者Bram Moolenaar受到《高效能人士的七个习惯》启发所写的一篇，阐述了他对高效文本编辑的一些看法，或者说他设计Vim的一些初衷。\n\n读后感受有四：\n1. 绝大部分文本为有格式的，这是高效编辑的前提。\n2. 一定有自动化的方法用来减少重复性的劳动。\n3. 勤加练习，习惯成自然；否则，好记性不如烂笔头。\n4. 过犹不及，只要适合自己就可以。\n\n其实这些道理是可以推广的，它们对于很多事情都是适用的。\n\n<!-- more -->\n\n---------------------------------\n\n> 原文地址：http://www.moolenaar.net/habits.html\n作者：Bram Moolenaar\n日期：2000.11\n翻译：guantau\n\n---------------------------------\n如果你需要花大量时间编辑文本，比如写程序、写HTML文件，那么你需要一个好的编辑器并高效地使用它，这样你才能节约大量的时间。本文将给出文本编辑的几条建议，以帮助你更快更好地完成你的工作。\n\n本文将采用开源编辑器Vim来展示如何进行文本高效编辑，当然这些建议也可以推广至其它编辑器。选择合适的编辑器是高效编辑的第一步，这里不讨论哪款编辑器是最好的，适合的就是最好的。如果你不知道使用哪款编辑器，或者对你现在用的编辑器不满意，不妨试一试Vim，它不会让你你失望的。\n\n# 第一部分：编辑单个文件\n\n## 1、快速移动：\n\n花费在阅读和查找的时间其实要比插入或修改文本多得多。阅读和查找这些在文本中移动的操作是非常频繁的，因此你需要了解怎么才能移动得更快。比如需要查找某段文本并找到其出现的所有位置。在Vim中，你可以输入查找命令`/pattern`来做这件事情。但其实，你还可以做得更快更好：\n* 如果你看见某个词，希望找到这个词出现的其它位置，使用命令`*`。它会自动抓取当前光标所在的词语，并找到它出现的下一位置；\n* 如果你设置了`incsearch`选项，Vim会在你输入搜索词时动态显示它出现的第一个位置；\n* 如果你设置了`hlsearch`选项，Vim会高亮所有匹配的位置。比如在程序时，你可以看到某个变量到底在哪些地方使用了。\n\n在结构化文本里，还有更多可以快速移动的可能性。比如，对于C语言，Vim有一些特定的命令：\n* 使用命令`%`可以跳到成对符号的另一端，比如()、{}、甚至#if和#endif，这样你可以检查符号是否匹配；\n* 使用命令`[{`可以跳到当前代码块的起始位置；\n* 使用命令`gd`可以跳到局部变量的定义位置；\n\n当然，还有许多这样的命令。问题的关键是你是否知道这些命令。\n\n你可能会说你不可能记住所有这些命令，所有命令大概有数百个，有些简单、有些复杂。要全部学会这些命令，大概需要数周的时间。但这么做是没有必要地，你需要做的是认清自己的编辑习惯，并只记住那些让你更加高效编辑的命令。\n\n一般有三个基本步骤：\n1. 当你在编辑时，留意你需要不断重复的动作；\n2. 去寻找是否有某个编辑器命令可以使你更快地完成这个动作，可以查帮助文档或问下周围朋友；\n3. 练习使用这些命令，直到你不需要思考就可以使用它。\n\n举例来说：在写C程序的时候，你发现你需要花费大量时间去寻找函数定义在哪里。你现在使用的是命令`*`来搜索该函数名出现的位置，结果你发现匹配出很多它被调用的位置，而不是它定义的位置。那你应该想，是不是能有更快的方法来做这件事情。\n\n通过阅读帮助文件，你发现有跳转到tags的命令。文档解释了如何使用命令来跳转到函数定义位置，这正是你需要的。因此，你需要用程序ctags生成tags文件，然后使用命令`CTRL-]`来跳转到函数定义位置。为了自动生成tags文件，你还可以把相关命令写到Makefile中。\n\n当你使用上述三个步骤时，还需要注意的是：\n* **工欲善其事，必先利其器**。“我只想把工作完成，我没有时间看帮助文件来找合适的新命令”。如果你这么想，你永远将停步不前。\n* **过犹不及**。如果对每件事情，你都想要找到完美的命令，那么你将没有时间来思考你本该完成的工作。仅仅选出那些会花费你更多时间的动作，然后学习完成这些动作的命令，这样你就可以专心在真正的工作上了。\n\n## 2、相同的事情不做第二次：\n\n我们需要编辑的词语是有限的，甚至是局限在某些短语或句子里，比如在计算机程序中关键词集合是固定的。很显然，你不想两次输入完全相同的内容。\n\n很多时候，你想把某个单词改变为另一个。如果需要在整个文件里完成这件事情，你可以使用替换命令`:s`来做。但如果只有某几个地方需要替换，一种方式是用命令`*`找到它出现的下个位置，并用命令`cw`来替换这个词。然后按下`n`跳到下一个位置，并按下`.`重复`cw`命令。\n\n按下`.`可以重复上一个编辑命令，比如插入、删除、替换等。如果你在重新组织你的文件，有很多地方需要作出变化。那么你可以将某一种编辑用命令`.`做完，然后再去做另一种编辑。而那些需要作出变化的位置可以用命令`m`做好标记。\n\n某些函数名或变量名输入起来非常费劲，且容易出错。Vim提供了补全机制使这件事情更容易完成。当你写下名字的一部分时，可以通过命令`CTRL-N`来进行补全。\n\n当你需要重复输入一个短语或一段话时，Vim提供了宏录制的功能。你可以按下`qa`开始录制，你的所有操作将记录到寄存器'a'里面，按下`q`停止录制。当你想重复这些命令时，你只需要按下`@a`就可以了。\n\n当那些你需要重复的命令变得复杂时，想要一次正确输入它们将变得很困难。这时，你应该写一个脚本或宏来完成。比如，你可以为你的代码写一些模板，像函数头等等。\n\n## 3、错了就改：\n\n没有人可以避免在输入的时候不出错，这时你需要做的就是快速定位并改正它。编辑器应该帮助你完成这件事情，但你需要告诉编辑器哪些是对的、哪些是错的。\n\n你可能会重复写错某个单词，这可以用缩写来纠正，比如，`:abbr Lunix Linux`、`:abbr accross across`、`:abbr hte the`。当你输入错误的单词时，编辑器会自动纠正它们。\n\n同样的原理可以用于简化输入，尤其是那些你觉得打起来比较麻烦的词语。比如，`:abbr pn penguin`、`:abbr MS Mandrake Software`。\n\n识别错误还可以用语法高亮的方式来解决。也就是对程序进行语法高亮，并标记错误出现的位置，比如，书写错误、注释错了、括号不匹配之类的。\n\n# 第二部分：编辑多个文件\n\n## 4、文件总是相关联的\n\n通常我们不会只编辑一个文件，而是在许多相互关联的文件之间来回切换，甚至有时同时编辑多个文件。因此，我们需要编辑器帮助我们更加高效地编辑多个文件。\n\n前面提到的标签功能可以在多个文件之间跳转。通常的做法是为整个工程生成一个标签文件。这样，我们可以在当前工程中多个文件之间快速跳转，从而找到函数、结构体、宏等。与手动查找相比，跳转能节约的时间是非常可观的。因此，在浏览程序的第一件事就是为其生成标签文件。\n\n另一个很重要的功能是在多个文件中找到某个词语出现的所有地方，这可以使用`:grep`命令。Vim会列出匹配的结果，并跳转到第一个匹配处。命令`:cn`会跳转到下一个匹配处。当你需要改变某个函数的调用参数时，这将非常有用。\n\n头文件包含许多有用的信息。但是在include文件中找到所需的定义需要花费大量时间。Vim会自动解析头文件，并搜索它们从而找到你需要的词。最常用的操作就是查找函数原型。在光标处使用命令`[I:`，Vim会列出当前光标所在词语在所有头文件中的匹配列表。如果你需要查看更多的上下文，你可以直接跳转到其定义的位置。类似的命令也可以用来检查你是否包含了正确的头文件。\n\n在Vim中，编辑区域可以分割为多个窗口，从而对多个不同的文件进行编辑。这样你可以同时对两个或多个文件的内容进行对比，并在它们之间进行拷贝粘贴。关于打开和关闭窗口、窗口间跳转、临时隐藏某个文件等等，有许多有用的命令。同样地，你可以采用前面列出的三个基本步骤来判断你需要学习哪些命令。\n\n多窗口还有更多的用处。预览标签就是个很好的例子。保持光标在当前编辑位置不变，通过打开一个特殊的预览窗口显示当前光标下函数的定义。如果你把光标移动到另一个函数名上，那么预览窗口会显示这个函数的定义。这种方式同样适用于使用头文件的情况。\n\n## 5、协同工作\n\n编辑器用来编辑文本，email程序用来发送接收消息，操作系统用来运行程序。每个程序有自己擅长的事情。因此，将多个程序联合起来将可以完成更多地工作。\n\n一个简单的例子：你需要写一个不超过500个词的总结。你可以选择当前段落并把它写到wc程序中来统计字数，命令为`:w !wc -w`。其中，`wc -w`是用来统计单词数的。\n\n编辑器是不可能包罗所有的功能的。使用其他程序进行过滤文本意味着你可以额外地增加其他功能。Unix哲学之一就是每个程序只专注地完成一种功能，联合起来完成更复杂的功能。很不幸，大多数编辑器不能和其他程序联合工作。例如，你不能把Netscape中的email编辑器替换成其他的编辑器。这使得很多时候你只能使用半残的编辑器。另一个极端是在编辑器中包含各种各样的功能。Emacs是一个很好的例子（有时它被称为一个可以用来编辑文本的操作系统）。\n\nVim尝试与其他程序进行联合，但这也并不那么容易。目前还无法在MS开发工具、Sniff中把Vim当做编辑器。一些email程序支持外部编辑器，比如Mutt。总之，在多个程序间协同工作还需要改进，这样我们才可能获得一个比各部分之和更好的系统。\n\n## 6、格式化文本\n\n我们经常需要编辑具有某种结构的文本，只是文本的语法有所不同。因此，你可能需要根据文本的语法重新书写相应的插件。这是一件比较复杂的事情。\n\n一种相对简单的事情是借鉴“编辑-编译-修改”循环流程。Vim可以使用`:make`命令进行编译，并显示错误信息从而跳转到相应位置进行修改。你不需要针对该编译器写新的插件，你只需要调整`errorformat`选项即可。它会告诉Vim错误是什么形式的，应该如何跳转到相应位置。对于复杂的gcc编译错误都能搞定，因而其它大多数的编译器也是没有问题的。\n\n有些时候，对于一种类型的文件仅仅是设置一些选项或写一些宏就可以搞定的。比如，跳转到帮助文件，你可以写一个宏提取当前光标的词语，清除缓存并将帮助内容读取到缓存中。这是进行交叉查询的一种简单且高效地方法。\n\n通过前面提到的三个基本步骤，你可以很高效地对任何一种结构化文件进行编辑。记住你需要对这种文件经常要做的操作，找到可以完成这些操作的命令并记住它们。听起来很简单，你只需要开始做。\n\n# 第三部分：勤加练习\n\n## 7、养成习惯\n\n学习驾驶汽车需要付出很多努力，难道这是你继续骑自行车的理由？你需要花费时间去学习新技能。文本编辑也不例外。你需要学习新的命令，并使之成为习惯。\n\n但是，你也不应该尝试去学习编辑器提供的所有命令。那完全是浪费时间。绝大部分人只需要学习10%到20%的命令。只是每个人的命令集合是不一样的。这需要你好好想想哪些重复的工作是可以自动化完成的。如果你只需要做一次，且不希望再次做它，那么不要尝试去优化它。但如果你意识到在过去的一个小时里你多次重复了某件事情。那么，试着查看文档需找可以加快它的速度，或者写一个宏来完成它。如果它是一个较大的任务，比如去除某种特殊排列的文本，那么你可能需要在网上找找是不是有人已经解决了类似的问题。\n\n最基本的步骤是最后一个。对于一个重复性任务，你可能找到了一个很好的解决方案，但周末之后你可能就忘掉了。你需要不断重复这种解决方案直到你可以不加思考地使用它。只有这样你才可能达到你所需要的效率。不要尝试一次学习过多的东西，每次只做一些事情效果会更好。对于那些你不是特别经常要用的命令，你可能要把它写下来，以后再用到的时候可以查询。不管怎样，如果你始终保持目标，你将找到使你编辑更加高效的方法。\n\n---------------------------------------\n\n最后一点要说的，十个手指不只比两个手指高效，也没有那么累。\n\n> 作者简介：\nBram Moolenaar是Vim的主要开发者。他写了Vim的核心功能，并决定哪些开发者写的代码可以进入Vim。他毕业于Delft大学计算机专业。目前，他主要做软件开发，但他还知道怎么做焊工。他是荷兰ICCF的创建者和资助者，主要是帮助乌干达的孤儿。他是系统架构方面的自由作家，但事实上在Vim上花费了他主要的精力。他的邮件是Bram@moolenaar.net。\n\n\n","source":"_posts/2016-08-21-texting-habits.md","raw":"---\ntitle: 高效文本编辑的七个习惯\ndate: 2016-08-21 23:16:15\ncategories: 看点文章\ntags: \n  - vim\n---\n\n这是Vim作者Bram Moolenaar受到《高效能人士的七个习惯》启发所写的一篇，阐述了他对高效文本编辑的一些看法，或者说他设计Vim的一些初衷。\n\n读后感受有四：\n1. 绝大部分文本为有格式的，这是高效编辑的前提。\n2. 一定有自动化的方法用来减少重复性的劳动。\n3. 勤加练习，习惯成自然；否则，好记性不如烂笔头。\n4. 过犹不及，只要适合自己就可以。\n\n其实这些道理是可以推广的，它们对于很多事情都是适用的。\n\n<!-- more -->\n\n---------------------------------\n\n> 原文地址：http://www.moolenaar.net/habits.html\n作者：Bram Moolenaar\n日期：2000.11\n翻译：guantau\n\n---------------------------------\n如果你需要花大量时间编辑文本，比如写程序、写HTML文件，那么你需要一个好的编辑器并高效地使用它，这样你才能节约大量的时间。本文将给出文本编辑的几条建议，以帮助你更快更好地完成你的工作。\n\n本文将采用开源编辑器Vim来展示如何进行文本高效编辑，当然这些建议也可以推广至其它编辑器。选择合适的编辑器是高效编辑的第一步，这里不讨论哪款编辑器是最好的，适合的就是最好的。如果你不知道使用哪款编辑器，或者对你现在用的编辑器不满意，不妨试一试Vim，它不会让你你失望的。\n\n# 第一部分：编辑单个文件\n\n## 1、快速移动：\n\n花费在阅读和查找的时间其实要比插入或修改文本多得多。阅读和查找这些在文本中移动的操作是非常频繁的，因此你需要了解怎么才能移动得更快。比如需要查找某段文本并找到其出现的所有位置。在Vim中，你可以输入查找命令`/pattern`来做这件事情。但其实，你还可以做得更快更好：\n* 如果你看见某个词，希望找到这个词出现的其它位置，使用命令`*`。它会自动抓取当前光标所在的词语，并找到它出现的下一位置；\n* 如果你设置了`incsearch`选项，Vim会在你输入搜索词时动态显示它出现的第一个位置；\n* 如果你设置了`hlsearch`选项，Vim会高亮所有匹配的位置。比如在程序时，你可以看到某个变量到底在哪些地方使用了。\n\n在结构化文本里，还有更多可以快速移动的可能性。比如，对于C语言，Vim有一些特定的命令：\n* 使用命令`%`可以跳到成对符号的另一端，比如()、{}、甚至#if和#endif，这样你可以检查符号是否匹配；\n* 使用命令`[{`可以跳到当前代码块的起始位置；\n* 使用命令`gd`可以跳到局部变量的定义位置；\n\n当然，还有许多这样的命令。问题的关键是你是否知道这些命令。\n\n你可能会说你不可能记住所有这些命令，所有命令大概有数百个，有些简单、有些复杂。要全部学会这些命令，大概需要数周的时间。但这么做是没有必要地，你需要做的是认清自己的编辑习惯，并只记住那些让你更加高效编辑的命令。\n\n一般有三个基本步骤：\n1. 当你在编辑时，留意你需要不断重复的动作；\n2. 去寻找是否有某个编辑器命令可以使你更快地完成这个动作，可以查帮助文档或问下周围朋友；\n3. 练习使用这些命令，直到你不需要思考就可以使用它。\n\n举例来说：在写C程序的时候，你发现你需要花费大量时间去寻找函数定义在哪里。你现在使用的是命令`*`来搜索该函数名出现的位置，结果你发现匹配出很多它被调用的位置，而不是它定义的位置。那你应该想，是不是能有更快的方法来做这件事情。\n\n通过阅读帮助文件，你发现有跳转到tags的命令。文档解释了如何使用命令来跳转到函数定义位置，这正是你需要的。因此，你需要用程序ctags生成tags文件，然后使用命令`CTRL-]`来跳转到函数定义位置。为了自动生成tags文件，你还可以把相关命令写到Makefile中。\n\n当你使用上述三个步骤时，还需要注意的是：\n* **工欲善其事，必先利其器**。“我只想把工作完成，我没有时间看帮助文件来找合适的新命令”。如果你这么想，你永远将停步不前。\n* **过犹不及**。如果对每件事情，你都想要找到完美的命令，那么你将没有时间来思考你本该完成的工作。仅仅选出那些会花费你更多时间的动作，然后学习完成这些动作的命令，这样你就可以专心在真正的工作上了。\n\n## 2、相同的事情不做第二次：\n\n我们需要编辑的词语是有限的，甚至是局限在某些短语或句子里，比如在计算机程序中关键词集合是固定的。很显然，你不想两次输入完全相同的内容。\n\n很多时候，你想把某个单词改变为另一个。如果需要在整个文件里完成这件事情，你可以使用替换命令`:s`来做。但如果只有某几个地方需要替换，一种方式是用命令`*`找到它出现的下个位置，并用命令`cw`来替换这个词。然后按下`n`跳到下一个位置，并按下`.`重复`cw`命令。\n\n按下`.`可以重复上一个编辑命令，比如插入、删除、替换等。如果你在重新组织你的文件，有很多地方需要作出变化。那么你可以将某一种编辑用命令`.`做完，然后再去做另一种编辑。而那些需要作出变化的位置可以用命令`m`做好标记。\n\n某些函数名或变量名输入起来非常费劲，且容易出错。Vim提供了补全机制使这件事情更容易完成。当你写下名字的一部分时，可以通过命令`CTRL-N`来进行补全。\n\n当你需要重复输入一个短语或一段话时，Vim提供了宏录制的功能。你可以按下`qa`开始录制，你的所有操作将记录到寄存器'a'里面，按下`q`停止录制。当你想重复这些命令时，你只需要按下`@a`就可以了。\n\n当那些你需要重复的命令变得复杂时，想要一次正确输入它们将变得很困难。这时，你应该写一个脚本或宏来完成。比如，你可以为你的代码写一些模板，像函数头等等。\n\n## 3、错了就改：\n\n没有人可以避免在输入的时候不出错，这时你需要做的就是快速定位并改正它。编辑器应该帮助你完成这件事情，但你需要告诉编辑器哪些是对的、哪些是错的。\n\n你可能会重复写错某个单词，这可以用缩写来纠正，比如，`:abbr Lunix Linux`、`:abbr accross across`、`:abbr hte the`。当你输入错误的单词时，编辑器会自动纠正它们。\n\n同样的原理可以用于简化输入，尤其是那些你觉得打起来比较麻烦的词语。比如，`:abbr pn penguin`、`:abbr MS Mandrake Software`。\n\n识别错误还可以用语法高亮的方式来解决。也就是对程序进行语法高亮，并标记错误出现的位置，比如，书写错误、注释错了、括号不匹配之类的。\n\n# 第二部分：编辑多个文件\n\n## 4、文件总是相关联的\n\n通常我们不会只编辑一个文件，而是在许多相互关联的文件之间来回切换，甚至有时同时编辑多个文件。因此，我们需要编辑器帮助我们更加高效地编辑多个文件。\n\n前面提到的标签功能可以在多个文件之间跳转。通常的做法是为整个工程生成一个标签文件。这样，我们可以在当前工程中多个文件之间快速跳转，从而找到函数、结构体、宏等。与手动查找相比，跳转能节约的时间是非常可观的。因此，在浏览程序的第一件事就是为其生成标签文件。\n\n另一个很重要的功能是在多个文件中找到某个词语出现的所有地方，这可以使用`:grep`命令。Vim会列出匹配的结果，并跳转到第一个匹配处。命令`:cn`会跳转到下一个匹配处。当你需要改变某个函数的调用参数时，这将非常有用。\n\n头文件包含许多有用的信息。但是在include文件中找到所需的定义需要花费大量时间。Vim会自动解析头文件，并搜索它们从而找到你需要的词。最常用的操作就是查找函数原型。在光标处使用命令`[I:`，Vim会列出当前光标所在词语在所有头文件中的匹配列表。如果你需要查看更多的上下文，你可以直接跳转到其定义的位置。类似的命令也可以用来检查你是否包含了正确的头文件。\n\n在Vim中，编辑区域可以分割为多个窗口，从而对多个不同的文件进行编辑。这样你可以同时对两个或多个文件的内容进行对比，并在它们之间进行拷贝粘贴。关于打开和关闭窗口、窗口间跳转、临时隐藏某个文件等等，有许多有用的命令。同样地，你可以采用前面列出的三个基本步骤来判断你需要学习哪些命令。\n\n多窗口还有更多的用处。预览标签就是个很好的例子。保持光标在当前编辑位置不变，通过打开一个特殊的预览窗口显示当前光标下函数的定义。如果你把光标移动到另一个函数名上，那么预览窗口会显示这个函数的定义。这种方式同样适用于使用头文件的情况。\n\n## 5、协同工作\n\n编辑器用来编辑文本，email程序用来发送接收消息，操作系统用来运行程序。每个程序有自己擅长的事情。因此，将多个程序联合起来将可以完成更多地工作。\n\n一个简单的例子：你需要写一个不超过500个词的总结。你可以选择当前段落并把它写到wc程序中来统计字数，命令为`:w !wc -w`。其中，`wc -w`是用来统计单词数的。\n\n编辑器是不可能包罗所有的功能的。使用其他程序进行过滤文本意味着你可以额外地增加其他功能。Unix哲学之一就是每个程序只专注地完成一种功能，联合起来完成更复杂的功能。很不幸，大多数编辑器不能和其他程序联合工作。例如，你不能把Netscape中的email编辑器替换成其他的编辑器。这使得很多时候你只能使用半残的编辑器。另一个极端是在编辑器中包含各种各样的功能。Emacs是一个很好的例子（有时它被称为一个可以用来编辑文本的操作系统）。\n\nVim尝试与其他程序进行联合，但这也并不那么容易。目前还无法在MS开发工具、Sniff中把Vim当做编辑器。一些email程序支持外部编辑器，比如Mutt。总之，在多个程序间协同工作还需要改进，这样我们才可能获得一个比各部分之和更好的系统。\n\n## 6、格式化文本\n\n我们经常需要编辑具有某种结构的文本，只是文本的语法有所不同。因此，你可能需要根据文本的语法重新书写相应的插件。这是一件比较复杂的事情。\n\n一种相对简单的事情是借鉴“编辑-编译-修改”循环流程。Vim可以使用`:make`命令进行编译，并显示错误信息从而跳转到相应位置进行修改。你不需要针对该编译器写新的插件，你只需要调整`errorformat`选项即可。它会告诉Vim错误是什么形式的，应该如何跳转到相应位置。对于复杂的gcc编译错误都能搞定，因而其它大多数的编译器也是没有问题的。\n\n有些时候，对于一种类型的文件仅仅是设置一些选项或写一些宏就可以搞定的。比如，跳转到帮助文件，你可以写一个宏提取当前光标的词语，清除缓存并将帮助内容读取到缓存中。这是进行交叉查询的一种简单且高效地方法。\n\n通过前面提到的三个基本步骤，你可以很高效地对任何一种结构化文件进行编辑。记住你需要对这种文件经常要做的操作，找到可以完成这些操作的命令并记住它们。听起来很简单，你只需要开始做。\n\n# 第三部分：勤加练习\n\n## 7、养成习惯\n\n学习驾驶汽车需要付出很多努力，难道这是你继续骑自行车的理由？你需要花费时间去学习新技能。文本编辑也不例外。你需要学习新的命令，并使之成为习惯。\n\n但是，你也不应该尝试去学习编辑器提供的所有命令。那完全是浪费时间。绝大部分人只需要学习10%到20%的命令。只是每个人的命令集合是不一样的。这需要你好好想想哪些重复的工作是可以自动化完成的。如果你只需要做一次，且不希望再次做它，那么不要尝试去优化它。但如果你意识到在过去的一个小时里你多次重复了某件事情。那么，试着查看文档需找可以加快它的速度，或者写一个宏来完成它。如果它是一个较大的任务，比如去除某种特殊排列的文本，那么你可能需要在网上找找是不是有人已经解决了类似的问题。\n\n最基本的步骤是最后一个。对于一个重复性任务，你可能找到了一个很好的解决方案，但周末之后你可能就忘掉了。你需要不断重复这种解决方案直到你可以不加思考地使用它。只有这样你才可能达到你所需要的效率。不要尝试一次学习过多的东西，每次只做一些事情效果会更好。对于那些你不是特别经常要用的命令，你可能要把它写下来，以后再用到的时候可以查询。不管怎样，如果你始终保持目标，你将找到使你编辑更加高效的方法。\n\n---------------------------------------\n\n最后一点要说的，十个手指不只比两个手指高效，也没有那么累。\n\n> 作者简介：\nBram Moolenaar是Vim的主要开发者。他写了Vim的核心功能，并决定哪些开发者写的代码可以进入Vim。他毕业于Delft大学计算机专业。目前，他主要做软件开发，但他还知道怎么做焊工。他是荷兰ICCF的创建者和资助者，主要是帮助乌干达的孤儿。他是系统架构方面的自由作家，但事实上在Vim上花费了他主要的精力。他的邮件是Bram@moolenaar.net。\n\n\n","slug":"texting-habits","published":1,"updated":"2017-12-17T03:35:28.934Z","_id":"cjb6k4kvy000julep9m2kg5fe","comments":1,"layout":"post","photos":[],"link":"","content":"<p>这是Vim作者Bram Moolenaar受到《高效能人士的七个习惯》启发所写的一篇，阐述了他对高效文本编辑的一些看法，或者说他设计Vim的一些初衷。</p>\n<p>读后感受有四：</p>\n<ol>\n<li>绝大部分文本为有格式的，这是高效编辑的前提。</li>\n<li>一定有自动化的方法用来减少重复性的劳动。</li>\n<li>勤加练习，习惯成自然；否则，好记性不如烂笔头。</li>\n<li>过犹不及，只要适合自己就可以。</li>\n</ol>\n<p>其实这些道理是可以推广的，它们对于很多事情都是适用的。</p>\n<a id=\"more\"></a>\n<hr>\n<blockquote>\n<p>原文地址：<a href=\"http://www.moolenaar.net/habits.html\" target=\"_blank\" rel=\"noopener\">http://www.moolenaar.net/habits.html</a><br>作者：Bram Moolenaar<br>日期：2000.11<br>翻译：guantau</p>\n</blockquote>\n<hr>\n<p>如果你需要花大量时间编辑文本，比如写程序、写HTML文件，那么你需要一个好的编辑器并高效地使用它，这样你才能节约大量的时间。本文将给出文本编辑的几条建议，以帮助你更快更好地完成你的工作。</p>\n<p>本文将采用开源编辑器Vim来展示如何进行文本高效编辑，当然这些建议也可以推广至其它编辑器。选择合适的编辑器是高效编辑的第一步，这里不讨论哪款编辑器是最好的，适合的就是最好的。如果你不知道使用哪款编辑器，或者对你现在用的编辑器不满意，不妨试一试Vim，它不会让你你失望的。</p>\n<h1 id=\"第一部分：编辑单个文件\"><a href=\"#第一部分：编辑单个文件\" class=\"headerlink\" title=\"第一部分：编辑单个文件\"></a>第一部分：编辑单个文件</h1><h2 id=\"1、快速移动：\"><a href=\"#1、快速移动：\" class=\"headerlink\" title=\"1、快速移动：\"></a>1、快速移动：</h2><p>花费在阅读和查找的时间其实要比插入或修改文本多得多。阅读和查找这些在文本中移动的操作是非常频繁的，因此你需要了解怎么才能移动得更快。比如需要查找某段文本并找到其出现的所有位置。在Vim中，你可以输入查找命令<code>/pattern</code>来做这件事情。但其实，你还可以做得更快更好：</p>\n<ul>\n<li>如果你看见某个词，希望找到这个词出现的其它位置，使用命令<code>*</code>。它会自动抓取当前光标所在的词语，并找到它出现的下一位置；</li>\n<li>如果你设置了<code>incsearch</code>选项，Vim会在你输入搜索词时动态显示它出现的第一个位置；</li>\n<li>如果你设置了<code>hlsearch</code>选项，Vim会高亮所有匹配的位置。比如在程序时，你可以看到某个变量到底在哪些地方使用了。</li>\n</ul>\n<p>在结构化文本里，还有更多可以快速移动的可能性。比如，对于C语言，Vim有一些特定的命令：</p>\n<ul>\n<li>使用命令<code>%</code>可以跳到成对符号的另一端，比如()、{}、甚至#if和#endif，这样你可以检查符号是否匹配；</li>\n<li>使用命令<code>[{</code>可以跳到当前代码块的起始位置；</li>\n<li>使用命令<code>gd</code>可以跳到局部变量的定义位置；</li>\n</ul>\n<p>当然，还有许多这样的命令。问题的关键是你是否知道这些命令。</p>\n<p>你可能会说你不可能记住所有这些命令，所有命令大概有数百个，有些简单、有些复杂。要全部学会这些命令，大概需要数周的时间。但这么做是没有必要地，你需要做的是认清自己的编辑习惯，并只记住那些让你更加高效编辑的命令。</p>\n<p>一般有三个基本步骤：</p>\n<ol>\n<li>当你在编辑时，留意你需要不断重复的动作；</li>\n<li>去寻找是否有某个编辑器命令可以使你更快地完成这个动作，可以查帮助文档或问下周围朋友；</li>\n<li>练习使用这些命令，直到你不需要思考就可以使用它。</li>\n</ol>\n<p>举例来说：在写C程序的时候，你发现你需要花费大量时间去寻找函数定义在哪里。你现在使用的是命令<code>*</code>来搜索该函数名出现的位置，结果你发现匹配出很多它被调用的位置，而不是它定义的位置。那你应该想，是不是能有更快的方法来做这件事情。</p>\n<p>通过阅读帮助文件，你发现有跳转到tags的命令。文档解释了如何使用命令来跳转到函数定义位置，这正是你需要的。因此，你需要用程序ctags生成tags文件，然后使用命令<code>CTRL-]</code>来跳转到函数定义位置。为了自动生成tags文件，你还可以把相关命令写到Makefile中。</p>\n<p>当你使用上述三个步骤时，还需要注意的是：</p>\n<ul>\n<li><strong>工欲善其事，必先利其器</strong>。“我只想把工作完成，我没有时间看帮助文件来找合适的新命令”。如果你这么想，你永远将停步不前。</li>\n<li><strong>过犹不及</strong>。如果对每件事情，你都想要找到完美的命令，那么你将没有时间来思考你本该完成的工作。仅仅选出那些会花费你更多时间的动作，然后学习完成这些动作的命令，这样你就可以专心在真正的工作上了。</li>\n</ul>\n<h2 id=\"2、相同的事情不做第二次：\"><a href=\"#2、相同的事情不做第二次：\" class=\"headerlink\" title=\"2、相同的事情不做第二次：\"></a>2、相同的事情不做第二次：</h2><p>我们需要编辑的词语是有限的，甚至是局限在某些短语或句子里，比如在计算机程序中关键词集合是固定的。很显然，你不想两次输入完全相同的内容。</p>\n<p>很多时候，你想把某个单词改变为另一个。如果需要在整个文件里完成这件事情，你可以使用替换命令<code>:s</code>来做。但如果只有某几个地方需要替换，一种方式是用命令<code>*</code>找到它出现的下个位置，并用命令<code>cw</code>来替换这个词。然后按下<code>n</code>跳到下一个位置，并按下<code>.</code>重复<code>cw</code>命令。</p>\n<p>按下<code>.</code>可以重复上一个编辑命令，比如插入、删除、替换等。如果你在重新组织你的文件，有很多地方需要作出变化。那么你可以将某一种编辑用命令<code>.</code>做完，然后再去做另一种编辑。而那些需要作出变化的位置可以用命令<code>m</code>做好标记。</p>\n<p>某些函数名或变量名输入起来非常费劲，且容易出错。Vim提供了补全机制使这件事情更容易完成。当你写下名字的一部分时，可以通过命令<code>CTRL-N</code>来进行补全。</p>\n<p>当你需要重复输入一个短语或一段话时，Vim提供了宏录制的功能。你可以按下<code>qa</code>开始录制，你的所有操作将记录到寄存器’a’里面，按下<code>q</code>停止录制。当你想重复这些命令时，你只需要按下<code>@a</code>就可以了。</p>\n<p>当那些你需要重复的命令变得复杂时，想要一次正确输入它们将变得很困难。这时，你应该写一个脚本或宏来完成。比如，你可以为你的代码写一些模板，像函数头等等。</p>\n<h2 id=\"3、错了就改：\"><a href=\"#3、错了就改：\" class=\"headerlink\" title=\"3、错了就改：\"></a>3、错了就改：</h2><p>没有人可以避免在输入的时候不出错，这时你需要做的就是快速定位并改正它。编辑器应该帮助你完成这件事情，但你需要告诉编辑器哪些是对的、哪些是错的。</p>\n<p>你可能会重复写错某个单词，这可以用缩写来纠正，比如，<code>:abbr Lunix Linux</code>、<code>:abbr accross across</code>、<code>:abbr hte the</code>。当你输入错误的单词时，编辑器会自动纠正它们。</p>\n<p>同样的原理可以用于简化输入，尤其是那些你觉得打起来比较麻烦的词语。比如，<code>:abbr pn penguin</code>、<code>:abbr MS Mandrake Software</code>。</p>\n<p>识别错误还可以用语法高亮的方式来解决。也就是对程序进行语法高亮，并标记错误出现的位置，比如，书写错误、注释错了、括号不匹配之类的。</p>\n<h1 id=\"第二部分：编辑多个文件\"><a href=\"#第二部分：编辑多个文件\" class=\"headerlink\" title=\"第二部分：编辑多个文件\"></a>第二部分：编辑多个文件</h1><h2 id=\"4、文件总是相关联的\"><a href=\"#4、文件总是相关联的\" class=\"headerlink\" title=\"4、文件总是相关联的\"></a>4、文件总是相关联的</h2><p>通常我们不会只编辑一个文件，而是在许多相互关联的文件之间来回切换，甚至有时同时编辑多个文件。因此，我们需要编辑器帮助我们更加高效地编辑多个文件。</p>\n<p>前面提到的标签功能可以在多个文件之间跳转。通常的做法是为整个工程生成一个标签文件。这样，我们可以在当前工程中多个文件之间快速跳转，从而找到函数、结构体、宏等。与手动查找相比，跳转能节约的时间是非常可观的。因此，在浏览程序的第一件事就是为其生成标签文件。</p>\n<p>另一个很重要的功能是在多个文件中找到某个词语出现的所有地方，这可以使用<code>:grep</code>命令。Vim会列出匹配的结果，并跳转到第一个匹配处。命令<code>:cn</code>会跳转到下一个匹配处。当你需要改变某个函数的调用参数时，这将非常有用。</p>\n<p>头文件包含许多有用的信息。但是在include文件中找到所需的定义需要花费大量时间。Vim会自动解析头文件，并搜索它们从而找到你需要的词。最常用的操作就是查找函数原型。在光标处使用命令<code>[I:</code>，Vim会列出当前光标所在词语在所有头文件中的匹配列表。如果你需要查看更多的上下文，你可以直接跳转到其定义的位置。类似的命令也可以用来检查你是否包含了正确的头文件。</p>\n<p>在Vim中，编辑区域可以分割为多个窗口，从而对多个不同的文件进行编辑。这样你可以同时对两个或多个文件的内容进行对比，并在它们之间进行拷贝粘贴。关于打开和关闭窗口、窗口间跳转、临时隐藏某个文件等等，有许多有用的命令。同样地，你可以采用前面列出的三个基本步骤来判断你需要学习哪些命令。</p>\n<p>多窗口还有更多的用处。预览标签就是个很好的例子。保持光标在当前编辑位置不变，通过打开一个特殊的预览窗口显示当前光标下函数的定义。如果你把光标移动到另一个函数名上，那么预览窗口会显示这个函数的定义。这种方式同样适用于使用头文件的情况。</p>\n<h2 id=\"5、协同工作\"><a href=\"#5、协同工作\" class=\"headerlink\" title=\"5、协同工作\"></a>5、协同工作</h2><p>编辑器用来编辑文本，email程序用来发送接收消息，操作系统用来运行程序。每个程序有自己擅长的事情。因此，将多个程序联合起来将可以完成更多地工作。</p>\n<p>一个简单的例子：你需要写一个不超过500个词的总结。你可以选择当前段落并把它写到wc程序中来统计字数，命令为<code>:w !wc -w</code>。其中，<code>wc -w</code>是用来统计单词数的。</p>\n<p>编辑器是不可能包罗所有的功能的。使用其他程序进行过滤文本意味着你可以额外地增加其他功能。Unix哲学之一就是每个程序只专注地完成一种功能，联合起来完成更复杂的功能。很不幸，大多数编辑器不能和其他程序联合工作。例如，你不能把Netscape中的email编辑器替换成其他的编辑器。这使得很多时候你只能使用半残的编辑器。另一个极端是在编辑器中包含各种各样的功能。Emacs是一个很好的例子（有时它被称为一个可以用来编辑文本的操作系统）。</p>\n<p>Vim尝试与其他程序进行联合，但这也并不那么容易。目前还无法在MS开发工具、Sniff中把Vim当做编辑器。一些email程序支持外部编辑器，比如Mutt。总之，在多个程序间协同工作还需要改进，这样我们才可能获得一个比各部分之和更好的系统。</p>\n<h2 id=\"6、格式化文本\"><a href=\"#6、格式化文本\" class=\"headerlink\" title=\"6、格式化文本\"></a>6、格式化文本</h2><p>我们经常需要编辑具有某种结构的文本，只是文本的语法有所不同。因此，你可能需要根据文本的语法重新书写相应的插件。这是一件比较复杂的事情。</p>\n<p>一种相对简单的事情是借鉴“编辑-编译-修改”循环流程。Vim可以使用<code>:make</code>命令进行编译，并显示错误信息从而跳转到相应位置进行修改。你不需要针对该编译器写新的插件，你只需要调整<code>errorformat</code>选项即可。它会告诉Vim错误是什么形式的，应该如何跳转到相应位置。对于复杂的gcc编译错误都能搞定，因而其它大多数的编译器也是没有问题的。</p>\n<p>有些时候，对于一种类型的文件仅仅是设置一些选项或写一些宏就可以搞定的。比如，跳转到帮助文件，你可以写一个宏提取当前光标的词语，清除缓存并将帮助内容读取到缓存中。这是进行交叉查询的一种简单且高效地方法。</p>\n<p>通过前面提到的三个基本步骤，你可以很高效地对任何一种结构化文件进行编辑。记住你需要对这种文件经常要做的操作，找到可以完成这些操作的命令并记住它们。听起来很简单，你只需要开始做。</p>\n<h1 id=\"第三部分：勤加练习\"><a href=\"#第三部分：勤加练习\" class=\"headerlink\" title=\"第三部分：勤加练习\"></a>第三部分：勤加练习</h1><h2 id=\"7、养成习惯\"><a href=\"#7、养成习惯\" class=\"headerlink\" title=\"7、养成习惯\"></a>7、养成习惯</h2><p>学习驾驶汽车需要付出很多努力，难道这是你继续骑自行车的理由？你需要花费时间去学习新技能。文本编辑也不例外。你需要学习新的命令，并使之成为习惯。</p>\n<p>但是，你也不应该尝试去学习编辑器提供的所有命令。那完全是浪费时间。绝大部分人只需要学习10%到20%的命令。只是每个人的命令集合是不一样的。这需要你好好想想哪些重复的工作是可以自动化完成的。如果你只需要做一次，且不希望再次做它，那么不要尝试去优化它。但如果你意识到在过去的一个小时里你多次重复了某件事情。那么，试着查看文档需找可以加快它的速度，或者写一个宏来完成它。如果它是一个较大的任务，比如去除某种特殊排列的文本，那么你可能需要在网上找找是不是有人已经解决了类似的问题。</p>\n<p>最基本的步骤是最后一个。对于一个重复性任务，你可能找到了一个很好的解决方案，但周末之后你可能就忘掉了。你需要不断重复这种解决方案直到你可以不加思考地使用它。只有这样你才可能达到你所需要的效率。不要尝试一次学习过多的东西，每次只做一些事情效果会更好。对于那些你不是特别经常要用的命令，你可能要把它写下来，以后再用到的时候可以查询。不管怎样，如果你始终保持目标，你将找到使你编辑更加高效的方法。</p>\n<hr>\n<p>最后一点要说的，十个手指不只比两个手指高效，也没有那么累。</p>\n<blockquote>\n<p>作者简介：<br>Bram Moolenaar是Vim的主要开发者。他写了Vim的核心功能，并决定哪些开发者写的代码可以进入Vim。他毕业于Delft大学计算机专业。目前，他主要做软件开发，但他还知道怎么做焊工。他是荷兰ICCF的创建者和资助者，主要是帮助乌干达的孤儿。他是系统架构方面的自由作家，但事实上在Vim上花费了他主要的精力。他的邮件是Bram@moolenaar.net。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>这是Vim作者Bram Moolenaar受到《高效能人士的七个习惯》启发所写的一篇，阐述了他对高效文本编辑的一些看法，或者说他设计Vim的一些初衷。</p>\n<p>读后感受有四：</p>\n<ol>\n<li>绝大部分文本为有格式的，这是高效编辑的前提。</li>\n<li>一定有自动化的方法用来减少重复性的劳动。</li>\n<li>勤加练习，习惯成自然；否则，好记性不如烂笔头。</li>\n<li>过犹不及，只要适合自己就可以。</li>\n</ol>\n<p>其实这些道理是可以推广的，它们对于很多事情都是适用的。</p>","more":"<hr>\n<blockquote>\n<p>原文地址：<a href=\"http://www.moolenaar.net/habits.html\" target=\"_blank\" rel=\"noopener\">http://www.moolenaar.net/habits.html</a><br>作者：Bram Moolenaar<br>日期：2000.11<br>翻译：guantau</p>\n</blockquote>\n<hr>\n<p>如果你需要花大量时间编辑文本，比如写程序、写HTML文件，那么你需要一个好的编辑器并高效地使用它，这样你才能节约大量的时间。本文将给出文本编辑的几条建议，以帮助你更快更好地完成你的工作。</p>\n<p>本文将采用开源编辑器Vim来展示如何进行文本高效编辑，当然这些建议也可以推广至其它编辑器。选择合适的编辑器是高效编辑的第一步，这里不讨论哪款编辑器是最好的，适合的就是最好的。如果你不知道使用哪款编辑器，或者对你现在用的编辑器不满意，不妨试一试Vim，它不会让你你失望的。</p>\n<h1 id=\"第一部分：编辑单个文件\"><a href=\"#第一部分：编辑单个文件\" class=\"headerlink\" title=\"第一部分：编辑单个文件\"></a>第一部分：编辑单个文件</h1><h2 id=\"1、快速移动：\"><a href=\"#1、快速移动：\" class=\"headerlink\" title=\"1、快速移动：\"></a>1、快速移动：</h2><p>花费在阅读和查找的时间其实要比插入或修改文本多得多。阅读和查找这些在文本中移动的操作是非常频繁的，因此你需要了解怎么才能移动得更快。比如需要查找某段文本并找到其出现的所有位置。在Vim中，你可以输入查找命令<code>/pattern</code>来做这件事情。但其实，你还可以做得更快更好：</p>\n<ul>\n<li>如果你看见某个词，希望找到这个词出现的其它位置，使用命令<code>*</code>。它会自动抓取当前光标所在的词语，并找到它出现的下一位置；</li>\n<li>如果你设置了<code>incsearch</code>选项，Vim会在你输入搜索词时动态显示它出现的第一个位置；</li>\n<li>如果你设置了<code>hlsearch</code>选项，Vim会高亮所有匹配的位置。比如在程序时，你可以看到某个变量到底在哪些地方使用了。</li>\n</ul>\n<p>在结构化文本里，还有更多可以快速移动的可能性。比如，对于C语言，Vim有一些特定的命令：</p>\n<ul>\n<li>使用命令<code>%</code>可以跳到成对符号的另一端，比如()、{}、甚至#if和#endif，这样你可以检查符号是否匹配；</li>\n<li>使用命令<code>[{</code>可以跳到当前代码块的起始位置；</li>\n<li>使用命令<code>gd</code>可以跳到局部变量的定义位置；</li>\n</ul>\n<p>当然，还有许多这样的命令。问题的关键是你是否知道这些命令。</p>\n<p>你可能会说你不可能记住所有这些命令，所有命令大概有数百个，有些简单、有些复杂。要全部学会这些命令，大概需要数周的时间。但这么做是没有必要地，你需要做的是认清自己的编辑习惯，并只记住那些让你更加高效编辑的命令。</p>\n<p>一般有三个基本步骤：</p>\n<ol>\n<li>当你在编辑时，留意你需要不断重复的动作；</li>\n<li>去寻找是否有某个编辑器命令可以使你更快地完成这个动作，可以查帮助文档或问下周围朋友；</li>\n<li>练习使用这些命令，直到你不需要思考就可以使用它。</li>\n</ol>\n<p>举例来说：在写C程序的时候，你发现你需要花费大量时间去寻找函数定义在哪里。你现在使用的是命令<code>*</code>来搜索该函数名出现的位置，结果你发现匹配出很多它被调用的位置，而不是它定义的位置。那你应该想，是不是能有更快的方法来做这件事情。</p>\n<p>通过阅读帮助文件，你发现有跳转到tags的命令。文档解释了如何使用命令来跳转到函数定义位置，这正是你需要的。因此，你需要用程序ctags生成tags文件，然后使用命令<code>CTRL-]</code>来跳转到函数定义位置。为了自动生成tags文件，你还可以把相关命令写到Makefile中。</p>\n<p>当你使用上述三个步骤时，还需要注意的是：</p>\n<ul>\n<li><strong>工欲善其事，必先利其器</strong>。“我只想把工作完成，我没有时间看帮助文件来找合适的新命令”。如果你这么想，你永远将停步不前。</li>\n<li><strong>过犹不及</strong>。如果对每件事情，你都想要找到完美的命令，那么你将没有时间来思考你本该完成的工作。仅仅选出那些会花费你更多时间的动作，然后学习完成这些动作的命令，这样你就可以专心在真正的工作上了。</li>\n</ul>\n<h2 id=\"2、相同的事情不做第二次：\"><a href=\"#2、相同的事情不做第二次：\" class=\"headerlink\" title=\"2、相同的事情不做第二次：\"></a>2、相同的事情不做第二次：</h2><p>我们需要编辑的词语是有限的，甚至是局限在某些短语或句子里，比如在计算机程序中关键词集合是固定的。很显然，你不想两次输入完全相同的内容。</p>\n<p>很多时候，你想把某个单词改变为另一个。如果需要在整个文件里完成这件事情，你可以使用替换命令<code>:s</code>来做。但如果只有某几个地方需要替换，一种方式是用命令<code>*</code>找到它出现的下个位置，并用命令<code>cw</code>来替换这个词。然后按下<code>n</code>跳到下一个位置，并按下<code>.</code>重复<code>cw</code>命令。</p>\n<p>按下<code>.</code>可以重复上一个编辑命令，比如插入、删除、替换等。如果你在重新组织你的文件，有很多地方需要作出变化。那么你可以将某一种编辑用命令<code>.</code>做完，然后再去做另一种编辑。而那些需要作出变化的位置可以用命令<code>m</code>做好标记。</p>\n<p>某些函数名或变量名输入起来非常费劲，且容易出错。Vim提供了补全机制使这件事情更容易完成。当你写下名字的一部分时，可以通过命令<code>CTRL-N</code>来进行补全。</p>\n<p>当你需要重复输入一个短语或一段话时，Vim提供了宏录制的功能。你可以按下<code>qa</code>开始录制，你的所有操作将记录到寄存器’a’里面，按下<code>q</code>停止录制。当你想重复这些命令时，你只需要按下<code>@a</code>就可以了。</p>\n<p>当那些你需要重复的命令变得复杂时，想要一次正确输入它们将变得很困难。这时，你应该写一个脚本或宏来完成。比如，你可以为你的代码写一些模板，像函数头等等。</p>\n<h2 id=\"3、错了就改：\"><a href=\"#3、错了就改：\" class=\"headerlink\" title=\"3、错了就改：\"></a>3、错了就改：</h2><p>没有人可以避免在输入的时候不出错，这时你需要做的就是快速定位并改正它。编辑器应该帮助你完成这件事情，但你需要告诉编辑器哪些是对的、哪些是错的。</p>\n<p>你可能会重复写错某个单词，这可以用缩写来纠正，比如，<code>:abbr Lunix Linux</code>、<code>:abbr accross across</code>、<code>:abbr hte the</code>。当你输入错误的单词时，编辑器会自动纠正它们。</p>\n<p>同样的原理可以用于简化输入，尤其是那些你觉得打起来比较麻烦的词语。比如，<code>:abbr pn penguin</code>、<code>:abbr MS Mandrake Software</code>。</p>\n<p>识别错误还可以用语法高亮的方式来解决。也就是对程序进行语法高亮，并标记错误出现的位置，比如，书写错误、注释错了、括号不匹配之类的。</p>\n<h1 id=\"第二部分：编辑多个文件\"><a href=\"#第二部分：编辑多个文件\" class=\"headerlink\" title=\"第二部分：编辑多个文件\"></a>第二部分：编辑多个文件</h1><h2 id=\"4、文件总是相关联的\"><a href=\"#4、文件总是相关联的\" class=\"headerlink\" title=\"4、文件总是相关联的\"></a>4、文件总是相关联的</h2><p>通常我们不会只编辑一个文件，而是在许多相互关联的文件之间来回切换，甚至有时同时编辑多个文件。因此，我们需要编辑器帮助我们更加高效地编辑多个文件。</p>\n<p>前面提到的标签功能可以在多个文件之间跳转。通常的做法是为整个工程生成一个标签文件。这样，我们可以在当前工程中多个文件之间快速跳转，从而找到函数、结构体、宏等。与手动查找相比，跳转能节约的时间是非常可观的。因此，在浏览程序的第一件事就是为其生成标签文件。</p>\n<p>另一个很重要的功能是在多个文件中找到某个词语出现的所有地方，这可以使用<code>:grep</code>命令。Vim会列出匹配的结果，并跳转到第一个匹配处。命令<code>:cn</code>会跳转到下一个匹配处。当你需要改变某个函数的调用参数时，这将非常有用。</p>\n<p>头文件包含许多有用的信息。但是在include文件中找到所需的定义需要花费大量时间。Vim会自动解析头文件，并搜索它们从而找到你需要的词。最常用的操作就是查找函数原型。在光标处使用命令<code>[I:</code>，Vim会列出当前光标所在词语在所有头文件中的匹配列表。如果你需要查看更多的上下文，你可以直接跳转到其定义的位置。类似的命令也可以用来检查你是否包含了正确的头文件。</p>\n<p>在Vim中，编辑区域可以分割为多个窗口，从而对多个不同的文件进行编辑。这样你可以同时对两个或多个文件的内容进行对比，并在它们之间进行拷贝粘贴。关于打开和关闭窗口、窗口间跳转、临时隐藏某个文件等等，有许多有用的命令。同样地，你可以采用前面列出的三个基本步骤来判断你需要学习哪些命令。</p>\n<p>多窗口还有更多的用处。预览标签就是个很好的例子。保持光标在当前编辑位置不变，通过打开一个特殊的预览窗口显示当前光标下函数的定义。如果你把光标移动到另一个函数名上，那么预览窗口会显示这个函数的定义。这种方式同样适用于使用头文件的情况。</p>\n<h2 id=\"5、协同工作\"><a href=\"#5、协同工作\" class=\"headerlink\" title=\"5、协同工作\"></a>5、协同工作</h2><p>编辑器用来编辑文本，email程序用来发送接收消息，操作系统用来运行程序。每个程序有自己擅长的事情。因此，将多个程序联合起来将可以完成更多地工作。</p>\n<p>一个简单的例子：你需要写一个不超过500个词的总结。你可以选择当前段落并把它写到wc程序中来统计字数，命令为<code>:w !wc -w</code>。其中，<code>wc -w</code>是用来统计单词数的。</p>\n<p>编辑器是不可能包罗所有的功能的。使用其他程序进行过滤文本意味着你可以额外地增加其他功能。Unix哲学之一就是每个程序只专注地完成一种功能，联合起来完成更复杂的功能。很不幸，大多数编辑器不能和其他程序联合工作。例如，你不能把Netscape中的email编辑器替换成其他的编辑器。这使得很多时候你只能使用半残的编辑器。另一个极端是在编辑器中包含各种各样的功能。Emacs是一个很好的例子（有时它被称为一个可以用来编辑文本的操作系统）。</p>\n<p>Vim尝试与其他程序进行联合，但这也并不那么容易。目前还无法在MS开发工具、Sniff中把Vim当做编辑器。一些email程序支持外部编辑器，比如Mutt。总之，在多个程序间协同工作还需要改进，这样我们才可能获得一个比各部分之和更好的系统。</p>\n<h2 id=\"6、格式化文本\"><a href=\"#6、格式化文本\" class=\"headerlink\" title=\"6、格式化文本\"></a>6、格式化文本</h2><p>我们经常需要编辑具有某种结构的文本，只是文本的语法有所不同。因此，你可能需要根据文本的语法重新书写相应的插件。这是一件比较复杂的事情。</p>\n<p>一种相对简单的事情是借鉴“编辑-编译-修改”循环流程。Vim可以使用<code>:make</code>命令进行编译，并显示错误信息从而跳转到相应位置进行修改。你不需要针对该编译器写新的插件，你只需要调整<code>errorformat</code>选项即可。它会告诉Vim错误是什么形式的，应该如何跳转到相应位置。对于复杂的gcc编译错误都能搞定，因而其它大多数的编译器也是没有问题的。</p>\n<p>有些时候，对于一种类型的文件仅仅是设置一些选项或写一些宏就可以搞定的。比如，跳转到帮助文件，你可以写一个宏提取当前光标的词语，清除缓存并将帮助内容读取到缓存中。这是进行交叉查询的一种简单且高效地方法。</p>\n<p>通过前面提到的三个基本步骤，你可以很高效地对任何一种结构化文件进行编辑。记住你需要对这种文件经常要做的操作，找到可以完成这些操作的命令并记住它们。听起来很简单，你只需要开始做。</p>\n<h1 id=\"第三部分：勤加练习\"><a href=\"#第三部分：勤加练习\" class=\"headerlink\" title=\"第三部分：勤加练习\"></a>第三部分：勤加练习</h1><h2 id=\"7、养成习惯\"><a href=\"#7、养成习惯\" class=\"headerlink\" title=\"7、养成习惯\"></a>7、养成习惯</h2><p>学习驾驶汽车需要付出很多努力，难道这是你继续骑自行车的理由？你需要花费时间去学习新技能。文本编辑也不例外。你需要学习新的命令，并使之成为习惯。</p>\n<p>但是，你也不应该尝试去学习编辑器提供的所有命令。那完全是浪费时间。绝大部分人只需要学习10%到20%的命令。只是每个人的命令集合是不一样的。这需要你好好想想哪些重复的工作是可以自动化完成的。如果你只需要做一次，且不希望再次做它，那么不要尝试去优化它。但如果你意识到在过去的一个小时里你多次重复了某件事情。那么，试着查看文档需找可以加快它的速度，或者写一个宏来完成它。如果它是一个较大的任务，比如去除某种特殊排列的文本，那么你可能需要在网上找找是不是有人已经解决了类似的问题。</p>\n<p>最基本的步骤是最后一个。对于一个重复性任务，你可能找到了一个很好的解决方案，但周末之后你可能就忘掉了。你需要不断重复这种解决方案直到你可以不加思考地使用它。只有这样你才可能达到你所需要的效率。不要尝试一次学习过多的东西，每次只做一些事情效果会更好。对于那些你不是特别经常要用的命令，你可能要把它写下来，以后再用到的时候可以查询。不管怎样，如果你始终保持目标，你将找到使你编辑更加高效的方法。</p>\n<hr>\n<p>最后一点要说的，十个手指不只比两个手指高效，也没有那么累。</p>\n<blockquote>\n<p>作者简介：<br>Bram Moolenaar是Vim的主要开发者。他写了Vim的核心功能，并决定哪些开发者写的代码可以进入Vim。他毕业于Delft大学计算机专业。目前，他主要做软件开发，但他还知道怎么做焊工。他是荷兰ICCF的创建者和资助者，主要是帮助乌干达的孤儿。他是系统架构方面的自由作家，但事实上在Vim上花费了他主要的精力。他的邮件是Bram@moolenaar.net。</p>\n</blockquote>"},{"title":"vim使用笔记","date":"2016-08-21T15:12:10.000Z","_content":"\n# 一、vim插件管理\n作为编辑器之神，vim强大之处在于可以通过下载或编写各种插件来增强其功能，但对各种插件管理确实是个麻烦事。幸亏有相关的插件管理工具可以使用，vim常用的插件管理工具有两种：pathogen和vundle。vundle可以看作是pathogen的升级版，完全兼容pathogen，除了能够方便组织插件，还能够方便的安装、卸载、升级插件。\n\n安装vundle非常简单，输入命令\n\n    # git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle\n\n然后就可以把想要安装的插件名字写入.vimrc中即可。\n\n<!-- more -->\n\n示例文件：\n\n    set nocompatible          \" be iMproved \n    filetype off              \" required! \n    set rtp+=~/.vim/bundle/vundle/ \n    call vundle#rc() \n    \" let Vundle manage Vundle \n    \" required! \n    Bundle 'gmarik/vundle' \n    \" My bundles here: \n    \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n    \" original repos on GitHub \n    \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n    Bundle 'tpope/vim-fugitive' \n    Bundle 'Lokaltog/vim-easymotion' \n    Bundle 'rstacruz/sparkup', {'rtp': 'vim/'} \n    Bundle 'tpope/vim-rails.git' \n    Bundle 'Lokaltog/vim-powerline' \n    \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" \n    \" vim-scripts repos http://www.vim-scripts.org/vim/scripts.html \n    \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" \n    \" Vim-script library \n    Bundle 'L9' \n    \" General utility functions \n    Bundle 'genutils' \n    \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" \n    \" non-GitHub repos \n    \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n    Bundle 'git://git.wincent.com/command-t.git' \n    \" Git repos on your local machine (i.e. when working on your own plugin) \n    \" Bundle 'file:///Users/gmarik/path/to/plugin' \n    \" ... \n    filetype plugin indent on     \" required! \n    \" \n    \" Brief help \n    \" :BundleList          - list configured bundles \n    \" :BundleInstall(!)    - install (update) bundles \n    \" :BundleSearch(!) foo - search (or refresh cache first) for foo \n    \" :BundleClean(!)      - confirm (or auto-approve) removal of unused bundles \n    \" \n    \" see :h vundle for more details or wiki for FAQ \" NOTE: comments after Bundle commands are not allowed.\n\n# 二、查找类插件\n## 1. command-t\n### （1）简介\ncommand-t用于快速查找和跳转文件及缓冲区，其名称来源于TextMate中“Go to File”的快捷键Command-T。command-t的思想是文件路径名与文件名同样具有重要的标识作用，它在查找时利用了文件完整路径中的所有字符。其强大之处在于可以模糊匹配，输入的任意字符之间可以看作包含通配符。\n\ncommand-t采用了ruby来实现，若在安装和使用时出现错误，可以参考：\nhttp://www.justinbar.net/post/install-vim-with-ruby-support-and-command-t-plugin-on-ubuntu\n\n### （2）使用\n可以使用`:CommandT`命令打开文件跳转界面，用`:CommandTBuffer`命令打开缓冲区跳转界面。\n如果需要对某个特定路径进行搜索时，使用`:CommandT path`。可以设置相应快捷键\n\n    nnoremap <silent> <Leader>ff :CommandT<CR>\n    nnoremap <silent> <Leader>fb :CommandTBuffer<CR>\n\n在字符输入条件下有效的快捷键：\n\n快捷键     | 功能\n:---------|:---------------------------\n&lt;BS&gt; |  delete the character to the left of the cursor    \n&lt;Del&gt;        |  delete the character at the cursor    \n&lt;Left&gt;    |  move the cursor one character to the left   \n&lt;C-h&gt;     |  move the cursor one character to the left    \n&lt;Right&gt;   |  move the cursor one character to the right    \n&lt;C-l&gt;     |  move the cursor one character to the right    \n&lt;C-a&gt;     |  move the cursor to the start (left)    \n&lt;C-e&gt;     |  move the cursor to the end (right)    \n&lt;C-u&gt;     |  clear the contents of the prompt    \n&lt;Tab&gt;     |  change focus to the file listing\n\n在文件列表条件下有效的快捷键：\n\n快捷键     | 功能\n:---------|:---------------------------\n&lt;Tab&gt;     |  change focus to the prompt \n\n在上述两种情况下都有效的快捷键：    \n\n快捷键     | 功能\n:---------|:---------------------------\n&lt;CR&gt;      |  open the selected file    \n&lt;C-CR&gt;    |  open the selected file in a new split window    \n&lt;C-s&gt;     |  open the selected file in a new split window    \n&lt;C-v&gt;     |  open the selected file in a new vertical split window    \n&lt;C-t&gt;     |  open the selected file in a new tab    \n&lt;C-j&gt;     |  select next file in the file listing    \n&lt;C-n&gt;     |  select next file in the file listing    \n&lt;Down&gt;    |  select next file in the file listing    \n&lt;C-k&gt;     |  select previous file in the file listing    \n&lt;C-p&gt;     |  select previous file in the file listing    \n&lt;Up&gt;      |  select previous file in the file listing    \n&lt;C-c&gt;     |  cancel (dismisses file listing)\n\n### （3）其它\n在查找文件、缓冲区等还有些其它的插件，比如：\n* lookupfile，和Command-T相比，它支持通配符和正则表达式，但其对文件的定位能力不及Command-T。\n* FuzzyFinder，Command-T基本涵盖FuzzyFinder所有功能。\n\n## 2. FSwitch\n在互补文件之间进行切换，互补规则以及文件位置可以由用户指定，主要用于C/C++中的头文件和源文件之间的快速切换。\n\n常用设置为：\n\n    au! BufEnter *.cc,*.cpp let b:fswitchdst = 'h' | let b:fswitchlocs = 'reg:/src/include/,reg:|src|include/**|,../inc,../include,.' \n    au! BufEnter *.h let b:fswitchdst = 'cc,cpp' | let b:fswitchlocs = 'reg:/include/src/,reg:/include.*/src/,../src,../source,.' \n    let g:fsnonewfiles = \"on\" \n    nmap <silent> <Leader>fo :FSHere<cr>\n\n# 三、浏览类插件\n## 1. minibufexpl\n\n可以在编辑区上方显示缓冲区名，可方便的查看并切换缓冲区。可以对其进行一定的配置：\n\n### （1）使用C-HJKL在窗口之间进行移动，注意这里是大写\n\n    let g:miniBufExplMapWindowNavVim = 1\n\n为使用方便，我们可以进行额外的设置\n\n    nmap <C-j> <C-W>j\n    nmap <C-k> <C-W>k\n    nmap <C-h> <C-W>h\n    nmap <C-l> <C-W>l\n\n### （2）使用<C-Tab> <C-S-Tab>在缓冲区中进行切换\n\n    let g:miniBufExplMapCTabSwitchBufs = 1\n\n由于bash已有这两个键映射，我们可以使用其它的映射\n\n    map <leader>bn :bn<cr>\n    map <leader>bp :bp<cr>\n\n### （3）映射快捷键关闭缓冲区，在只有一个缓冲区时关闭窗口\n\n    \" Count buffer numbers\n    function! NrBufs()\n        let i = bufnr('$')    \n        let j = 0    \n        while i >= 1        \n            if buflisted(i)            \n                let j+=1        \n            endif        \n            let i-=1    \n        endwhile    \n        return j \n    endfunction \n    \" Close window when there is only one buffer \n    function! BufClose()    \n        let buffer_count = NrBufs()    \n        if buffer_count == 1        \n            execute(\"quit\")    \n        else        \n            execute(\"bdelete\")    \n        endif \n    endfunction\n    nmap <silent> <leader>qq :call BufClose()<cr>\n\n## 2. The-NERD-Tree\n以树形的方式显示文件列表，可以映射显示的快捷键：\n\n    nmap <silent> <leader>tt :NERDTreeToggle<cr>\n\n当然，它还提供了很多书签之类的功能，可以参考其文档。\n\n## 3. taglist\n支持多种语言的源码浏览，包括C/C++、java、perl、python、tcl、sql、php等。常用设置：\n\n    let Tlist_Ctags_Cmd = 'ctags' \n    let Tlist_Show_One_File = 1 \n    let Tlist_Exit_OnlyWindow = 1 \n    let Tlist_Use_Right_Window = 1\n    nmap <silent> <leader>tl :Tlist<cr>\n\n## 4. tagbar\n与taglist类似，但它对其对tag的组织是按照所在范围进行组织，与taglist按照通用类别如‘function’或‘variable’组织方式不同。常用设置：\n\n    let g:tagbar_width = 40 \n    let g:tagbar_expand = 1 \n    nmap <silent> <Leader>tb :TagbarToggle<cr>\n\n# 四、补全类插件\nvim内置有很多补全方式：\n\n补全方式              | 快捷键\n:---------------------|:-----------------\n整行补全              |  CTRL-X CTRL-L\n根据当前文件里关键字补全 |  CTRL-X CTRL-N 或 CTRL-X CTRL-P\n根据头文件内关键字补全   |  CTRL-X CTRL-I\n根据标签补全           |  CTRL-X CTRL-]\n补全宏定义             | CTRL-X CTRL-D\n补全文件名             | CTRL-X CTRL-F\n补全vim命令           |  CTRL-X CTRL-V\n全能补全              |  CTRL-X CTRL-O，即omni补全\n用户自定义补全方式      |  CTRL-X CTRL-U\n根据字典补全           |  CTRL-X CTRL-K\n拼写建议              |  CTRL-X CTRL-S\n根据同义词字典补全      |  CTRL-X CTRL-T\n\n除此之外，还有很多插件也提供了更为便捷的补全方法\n\n## 1. neocomplcache\n非常强大的自动补全插件，可以智能识别需要用哪种模式来补全代码，配置后可以实现使用tab在补全代码之间跳转，并使用Enter来输入选中的代码。\n\n典型配置：\n\n    \" Disable AutoComplPop.\n    let g:acp_enableAtStartup = 0\n    \" Use neocomplcache.\n    let g:neocomplcache_enable_at_startup = 1\n    \" Use smartcase.\n    let g:neocomplcache_enable_smart_case = 1\n    \" Use camel case completion.\n    let g:neocomplcache_enable_camel_case_completion = 1\n    \" Use underbar completion.\n    let g:neocomplcache_enable_underbar_completion = 1\n    \" Set minimum syntax keyword length.\n    let g:neocomplcache_min_syntax_length = 3\n    let g:neocomplcache_lock_buffer_name_pattern = '\\*ku\\*'\n    \" Define dictionary.\n    let g:neocomplcache_dictionary_filetype_lists = {    \\ \n    'default' : '',    \\ \n    'vimshell' : $HOME.'/.vimshell_hist',    \\ \n    'scheme' : $HOME.'/.gosh_completions'    \\ \n    } \n    \" Define keyword. \n    if !exists('g:neocomplcache_keyword_patterns')    \n    let g:neocomplcache_keyword_patterns = {} \n    endif \n    let g:neocomplcache_keyword_patterns['default'] = '\\h\\w*' \n    \" Plugin key-mappings. \n    inoremap <expr><C-g>     neocomplcache#undo_completion() \n    inoremap <expr><C-l>     neocomplcache#complete_common_string() \n    \" Recommended key-mappings. \n    \" <CR>: close popup and save indent. \n    inoremap <expr><CR>  neocomplcache#smart_close_popup() . \"\\<CR>\" \n    \" <TAB>: completion. \n    inoremap <expr><TAB>  pumvisible() ? \"\\<C-n>\" : \"\\<TAB>\" \n    \" <C-h>, <BS>: close popup and delete backword char. \n    inoremap <expr><C-h> neocomplcache#smart_close_popup().\"\\<C-h>\" \n    inoremap <expr><BS> neocomplcache#smart_close_popup().\"\\<C-h>\" \n    inoremap <expr><C-y>  neocomplcache#close_popup() \n    inoremap <expr><C-e>  neocomplcache#cancel_popup() \n    inoremap <expr><Enter>  pumvisible() ? \"\\<C-Y>\" : \"\\<Enter>\" \n    \" AutoComplPop like behavior. \n    let g:neocomplcache_enable_auto_select = 1\n\n## 2. snipMate\nsnipMate可以对各种语言进行补全，从而快速插入代码块。其默认使用的补全键为Tab，这与其它一些补全插件可能有冲突，按照其文档说明可以对其进行重定义：\n\n    ino <c-j> <c-r>=TriggerSnippet()<cr> \n    snor <c-j> <esc>i<right><c-r>=TriggerSnippet()<cr>\n\n## 3. Auto-Pairs\n可以成对地自动插入和删除括号、引号等等，并可以自动定位到括号或引号的尾部。\n\n# 五、注释类插件\n## 1. The NERD Commenter\n可对多种类型的文件进行快速注释与取消，常用的快捷键有：\n\n快捷键      | 功能\n:-----------|:--------------\n&lt;leader&gt;cc | 注释当前行或选中的块\n&lt;leader&gt;cu | 取消注释当前行或选中的块\n&lt;leader&gt;ci | 取反注释状态\n\n# 六、标签类插件\n## 1. ShowMarks\n智能插入标签以及可视化展示标签，常用的快捷键有：\n\n快捷键      | 功能\n:-----------|:--------------\n&lt;leader&gt;mt |可视化开关\n&lt;leader&gt;mh |隐藏当前标签\n&lt;leader&gt;ma |隐藏缓冲区中所有标签\n&lt;leader&gt;mm |自动添加标签\n\n## 2. Marks-Browser\n显示当前文件的标签列表，可设置快捷键：\n\n    nmap <silent> <leader>mk :MarksBrowser<cr>\n\n由于插件默认在窗口上方打开列表，在退出时与minibufexpl有一些冲突，使得minibufexpl显示不正常。\n可以在插件源码中将显示位置改为下方：\n在marksbrowser的第60行，将\n\n    exec \"to sp\" . escape(s:win_title, ' ')\n\n改为\n\n    exec \"bo sp\" . escape(s:win_title, ' ')\n\n## 3. Tasklist\n类似eclipse的任务列表，自动抽取文件中的FIXME、TODO、XXX或自定义关键词，并形成列表展示。\n\n## 4. YankRing\nvim本身提供了最近9次删除记录，用`registers`命令可以查看，用`\"1p`可以粘贴最近删除内容，`\"2p`可以粘贴上次的删除内容。但是vim没有提供记录复制的内容，yankring则将vim中所有的改动记录下来，并提供一个列表用来粘贴想要的内容。可设置快捷键：\n\n    let g:yankring_enabled=1\n    let g:yankring_history_file='.yankring_history_file'\n    map <leader>yr :YRShow<cr>\n\n# 七、python相关插件\n## 1. Python-mode-klen\n集成了包括pylint、ropevim、pydoc、pyflakes、pep8和mccabe等插件，可以方便的进行静态检查、代码重构、折叠、补全、查看文档等等。\n\n### （1）快速浏览\n\n快捷键    | 功能\n:---------|:---------------------\n[[       | Jump to previous class or function (normal, visual, operator modes) \n]]       | Jump to next class or function  (normal, visual, operator modes) \n[M       | Jump to previous class or method (normal, visual, operator modes) \n]M       | Jump to next class or method (normal, visual, operator modes) \naC       | Select a class. Ex: vaC, daC, yaC, caC (normal, operator modes) \niC       | Select inner class. Ex: viC, diC, yiC, ciC (normal, operator modes) \naM       | Select a function or method. Ex: vaM, daM, yaM, caM (normal, operator modes) \niM       | Select inner function or method. Ex: viM, diM, yiM, ciM (normal, operator modes)\n\n### （2）查看文档\n利用pydoc查看文档，快捷键K会将当前光标所在词作为关键词进行查找。\n\n### （3）运行调试\n\n功能    | 快捷键\n:-------|:--------\n运行代码 | &lt;leader&gt;r\n插入断点 | &lt;leader&gt;b\n\n### （4）代码检查 \n支持pylint、pep257、pep8、pyflakes、mccabe等检查器，在代码保存时自动检查，自动去除多余的空格。\n\n可以使用命令`:PymodeLint`和`:PymodeLintToggle`开启检查，用`:PymodeLintAuto`自动校正pep8格式错误。\n\n### （5）转到定义\n可以查看和跳转到函数和类的定义：\n\n功能    | 快捷键\n:-------|:--------\n转到定义 | &lt;C-c&gt;g\n查看定义 | &lt;C-c&gt;d\n\n### （6）代码重构\n重命名光标所在的method/function/class/variables \n\n    let g:pymode_rope_rename_bind = '<C-c>rr'\n\n重命名当前模块\n\n    let g:pymode_rope_rename_bind = '<C-c>rr'\n\n根据pep8规定重排import模块\n\n    let g:pymode_rope_organize_imports_bind = '<C-c>ro'\n\n插入当前光标所在词的模块\n\n    let g:pymode_rope_autoimport_bind = '<C-c>ra'\n\nPython-mode和neocomplcache有些重叠，且neocomplcache占用了Tab键，可以在python文件中将neocomplcache禁止，并映射python-mode的补全键为tab：\n\n    au filetype python let g:neocomplcache_disable_auto_complete = 1\n    let g:pymode_rope_completion_bind = '<tab>'\n\nPython-mode与minibufexpl配合时，当查看定义、运行测试时，缓冲区跳转得并不正确。可以将autoload/pymode目录下的相关文件中的wincmd p命令注释掉：\n* rope.vim文件show_doc函数中，注释掉wincmd p，加上normal gg\n* run.vim文件code_run函数中，注释掉wincmd p\n* doc.vim文件show函数中，注释掉wincmd p\n\n## 2. 调试\n调试并没有找到比较好的插件，Python-mode与pdb、ipdb、pudb配合都有问题，vim-debug的界面并不十分友好，vimpdb插件也有问题。我比较喜欢pudb的调试界面，目前解决办法是映射快捷键调用pudb进行调试：\n\n    map <F6> :!pudb %<CR>\n\n\n","source":"_posts/2016-08-21-vim-notes.md","raw":"---\ntitle: vim使用笔记\ndate: 2016-08-21 23:12:10\ncategories: 弄点工具\ntags: \n  - vim\n---\n\n# 一、vim插件管理\n作为编辑器之神，vim强大之处在于可以通过下载或编写各种插件来增强其功能，但对各种插件管理确实是个麻烦事。幸亏有相关的插件管理工具可以使用，vim常用的插件管理工具有两种：pathogen和vundle。vundle可以看作是pathogen的升级版，完全兼容pathogen，除了能够方便组织插件，还能够方便的安装、卸载、升级插件。\n\n安装vundle非常简单，输入命令\n\n    # git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle\n\n然后就可以把想要安装的插件名字写入.vimrc中即可。\n\n<!-- more -->\n\n示例文件：\n\n    set nocompatible          \" be iMproved \n    filetype off              \" required! \n    set rtp+=~/.vim/bundle/vundle/ \n    call vundle#rc() \n    \" let Vundle manage Vundle \n    \" required! \n    Bundle 'gmarik/vundle' \n    \" My bundles here: \n    \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n    \" original repos on GitHub \n    \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n    Bundle 'tpope/vim-fugitive' \n    Bundle 'Lokaltog/vim-easymotion' \n    Bundle 'rstacruz/sparkup', {'rtp': 'vim/'} \n    Bundle 'tpope/vim-rails.git' \n    Bundle 'Lokaltog/vim-powerline' \n    \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" \n    \" vim-scripts repos http://www.vim-scripts.org/vim/scripts.html \n    \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" \n    \" Vim-script library \n    Bundle 'L9' \n    \" General utility functions \n    Bundle 'genutils' \n    \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" \n    \" non-GitHub repos \n    \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n    Bundle 'git://git.wincent.com/command-t.git' \n    \" Git repos on your local machine (i.e. when working on your own plugin) \n    \" Bundle 'file:///Users/gmarik/path/to/plugin' \n    \" ... \n    filetype plugin indent on     \" required! \n    \" \n    \" Brief help \n    \" :BundleList          - list configured bundles \n    \" :BundleInstall(!)    - install (update) bundles \n    \" :BundleSearch(!) foo - search (or refresh cache first) for foo \n    \" :BundleClean(!)      - confirm (or auto-approve) removal of unused bundles \n    \" \n    \" see :h vundle for more details or wiki for FAQ \" NOTE: comments after Bundle commands are not allowed.\n\n# 二、查找类插件\n## 1. command-t\n### （1）简介\ncommand-t用于快速查找和跳转文件及缓冲区，其名称来源于TextMate中“Go to File”的快捷键Command-T。command-t的思想是文件路径名与文件名同样具有重要的标识作用，它在查找时利用了文件完整路径中的所有字符。其强大之处在于可以模糊匹配，输入的任意字符之间可以看作包含通配符。\n\ncommand-t采用了ruby来实现，若在安装和使用时出现错误，可以参考：\nhttp://www.justinbar.net/post/install-vim-with-ruby-support-and-command-t-plugin-on-ubuntu\n\n### （2）使用\n可以使用`:CommandT`命令打开文件跳转界面，用`:CommandTBuffer`命令打开缓冲区跳转界面。\n如果需要对某个特定路径进行搜索时，使用`:CommandT path`。可以设置相应快捷键\n\n    nnoremap <silent> <Leader>ff :CommandT<CR>\n    nnoremap <silent> <Leader>fb :CommandTBuffer<CR>\n\n在字符输入条件下有效的快捷键：\n\n快捷键     | 功能\n:---------|:---------------------------\n&lt;BS&gt; |  delete the character to the left of the cursor    \n&lt;Del&gt;        |  delete the character at the cursor    \n&lt;Left&gt;    |  move the cursor one character to the left   \n&lt;C-h&gt;     |  move the cursor one character to the left    \n&lt;Right&gt;   |  move the cursor one character to the right    \n&lt;C-l&gt;     |  move the cursor one character to the right    \n&lt;C-a&gt;     |  move the cursor to the start (left)    \n&lt;C-e&gt;     |  move the cursor to the end (right)    \n&lt;C-u&gt;     |  clear the contents of the prompt    \n&lt;Tab&gt;     |  change focus to the file listing\n\n在文件列表条件下有效的快捷键：\n\n快捷键     | 功能\n:---------|:---------------------------\n&lt;Tab&gt;     |  change focus to the prompt \n\n在上述两种情况下都有效的快捷键：    \n\n快捷键     | 功能\n:---------|:---------------------------\n&lt;CR&gt;      |  open the selected file    \n&lt;C-CR&gt;    |  open the selected file in a new split window    \n&lt;C-s&gt;     |  open the selected file in a new split window    \n&lt;C-v&gt;     |  open the selected file in a new vertical split window    \n&lt;C-t&gt;     |  open the selected file in a new tab    \n&lt;C-j&gt;     |  select next file in the file listing    \n&lt;C-n&gt;     |  select next file in the file listing    \n&lt;Down&gt;    |  select next file in the file listing    \n&lt;C-k&gt;     |  select previous file in the file listing    \n&lt;C-p&gt;     |  select previous file in the file listing    \n&lt;Up&gt;      |  select previous file in the file listing    \n&lt;C-c&gt;     |  cancel (dismisses file listing)\n\n### （3）其它\n在查找文件、缓冲区等还有些其它的插件，比如：\n* lookupfile，和Command-T相比，它支持通配符和正则表达式，但其对文件的定位能力不及Command-T。\n* FuzzyFinder，Command-T基本涵盖FuzzyFinder所有功能。\n\n## 2. FSwitch\n在互补文件之间进行切换，互补规则以及文件位置可以由用户指定，主要用于C/C++中的头文件和源文件之间的快速切换。\n\n常用设置为：\n\n    au! BufEnter *.cc,*.cpp let b:fswitchdst = 'h' | let b:fswitchlocs = 'reg:/src/include/,reg:|src|include/**|,../inc,../include,.' \n    au! BufEnter *.h let b:fswitchdst = 'cc,cpp' | let b:fswitchlocs = 'reg:/include/src/,reg:/include.*/src/,../src,../source,.' \n    let g:fsnonewfiles = \"on\" \n    nmap <silent> <Leader>fo :FSHere<cr>\n\n# 三、浏览类插件\n## 1. minibufexpl\n\n可以在编辑区上方显示缓冲区名，可方便的查看并切换缓冲区。可以对其进行一定的配置：\n\n### （1）使用C-HJKL在窗口之间进行移动，注意这里是大写\n\n    let g:miniBufExplMapWindowNavVim = 1\n\n为使用方便，我们可以进行额外的设置\n\n    nmap <C-j> <C-W>j\n    nmap <C-k> <C-W>k\n    nmap <C-h> <C-W>h\n    nmap <C-l> <C-W>l\n\n### （2）使用<C-Tab> <C-S-Tab>在缓冲区中进行切换\n\n    let g:miniBufExplMapCTabSwitchBufs = 1\n\n由于bash已有这两个键映射，我们可以使用其它的映射\n\n    map <leader>bn :bn<cr>\n    map <leader>bp :bp<cr>\n\n### （3）映射快捷键关闭缓冲区，在只有一个缓冲区时关闭窗口\n\n    \" Count buffer numbers\n    function! NrBufs()\n        let i = bufnr('$')    \n        let j = 0    \n        while i >= 1        \n            if buflisted(i)            \n                let j+=1        \n            endif        \n            let i-=1    \n        endwhile    \n        return j \n    endfunction \n    \" Close window when there is only one buffer \n    function! BufClose()    \n        let buffer_count = NrBufs()    \n        if buffer_count == 1        \n            execute(\"quit\")    \n        else        \n            execute(\"bdelete\")    \n        endif \n    endfunction\n    nmap <silent> <leader>qq :call BufClose()<cr>\n\n## 2. The-NERD-Tree\n以树形的方式显示文件列表，可以映射显示的快捷键：\n\n    nmap <silent> <leader>tt :NERDTreeToggle<cr>\n\n当然，它还提供了很多书签之类的功能，可以参考其文档。\n\n## 3. taglist\n支持多种语言的源码浏览，包括C/C++、java、perl、python、tcl、sql、php等。常用设置：\n\n    let Tlist_Ctags_Cmd = 'ctags' \n    let Tlist_Show_One_File = 1 \n    let Tlist_Exit_OnlyWindow = 1 \n    let Tlist_Use_Right_Window = 1\n    nmap <silent> <leader>tl :Tlist<cr>\n\n## 4. tagbar\n与taglist类似，但它对其对tag的组织是按照所在范围进行组织，与taglist按照通用类别如‘function’或‘variable’组织方式不同。常用设置：\n\n    let g:tagbar_width = 40 \n    let g:tagbar_expand = 1 \n    nmap <silent> <Leader>tb :TagbarToggle<cr>\n\n# 四、补全类插件\nvim内置有很多补全方式：\n\n补全方式              | 快捷键\n:---------------------|:-----------------\n整行补全              |  CTRL-X CTRL-L\n根据当前文件里关键字补全 |  CTRL-X CTRL-N 或 CTRL-X CTRL-P\n根据头文件内关键字补全   |  CTRL-X CTRL-I\n根据标签补全           |  CTRL-X CTRL-]\n补全宏定义             | CTRL-X CTRL-D\n补全文件名             | CTRL-X CTRL-F\n补全vim命令           |  CTRL-X CTRL-V\n全能补全              |  CTRL-X CTRL-O，即omni补全\n用户自定义补全方式      |  CTRL-X CTRL-U\n根据字典补全           |  CTRL-X CTRL-K\n拼写建议              |  CTRL-X CTRL-S\n根据同义词字典补全      |  CTRL-X CTRL-T\n\n除此之外，还有很多插件也提供了更为便捷的补全方法\n\n## 1. neocomplcache\n非常强大的自动补全插件，可以智能识别需要用哪种模式来补全代码，配置后可以实现使用tab在补全代码之间跳转，并使用Enter来输入选中的代码。\n\n典型配置：\n\n    \" Disable AutoComplPop.\n    let g:acp_enableAtStartup = 0\n    \" Use neocomplcache.\n    let g:neocomplcache_enable_at_startup = 1\n    \" Use smartcase.\n    let g:neocomplcache_enable_smart_case = 1\n    \" Use camel case completion.\n    let g:neocomplcache_enable_camel_case_completion = 1\n    \" Use underbar completion.\n    let g:neocomplcache_enable_underbar_completion = 1\n    \" Set minimum syntax keyword length.\n    let g:neocomplcache_min_syntax_length = 3\n    let g:neocomplcache_lock_buffer_name_pattern = '\\*ku\\*'\n    \" Define dictionary.\n    let g:neocomplcache_dictionary_filetype_lists = {    \\ \n    'default' : '',    \\ \n    'vimshell' : $HOME.'/.vimshell_hist',    \\ \n    'scheme' : $HOME.'/.gosh_completions'    \\ \n    } \n    \" Define keyword. \n    if !exists('g:neocomplcache_keyword_patterns')    \n    let g:neocomplcache_keyword_patterns = {} \n    endif \n    let g:neocomplcache_keyword_patterns['default'] = '\\h\\w*' \n    \" Plugin key-mappings. \n    inoremap <expr><C-g>     neocomplcache#undo_completion() \n    inoremap <expr><C-l>     neocomplcache#complete_common_string() \n    \" Recommended key-mappings. \n    \" <CR>: close popup and save indent. \n    inoremap <expr><CR>  neocomplcache#smart_close_popup() . \"\\<CR>\" \n    \" <TAB>: completion. \n    inoremap <expr><TAB>  pumvisible() ? \"\\<C-n>\" : \"\\<TAB>\" \n    \" <C-h>, <BS>: close popup and delete backword char. \n    inoremap <expr><C-h> neocomplcache#smart_close_popup().\"\\<C-h>\" \n    inoremap <expr><BS> neocomplcache#smart_close_popup().\"\\<C-h>\" \n    inoremap <expr><C-y>  neocomplcache#close_popup() \n    inoremap <expr><C-e>  neocomplcache#cancel_popup() \n    inoremap <expr><Enter>  pumvisible() ? \"\\<C-Y>\" : \"\\<Enter>\" \n    \" AutoComplPop like behavior. \n    let g:neocomplcache_enable_auto_select = 1\n\n## 2. snipMate\nsnipMate可以对各种语言进行补全，从而快速插入代码块。其默认使用的补全键为Tab，这与其它一些补全插件可能有冲突，按照其文档说明可以对其进行重定义：\n\n    ino <c-j> <c-r>=TriggerSnippet()<cr> \n    snor <c-j> <esc>i<right><c-r>=TriggerSnippet()<cr>\n\n## 3. Auto-Pairs\n可以成对地自动插入和删除括号、引号等等，并可以自动定位到括号或引号的尾部。\n\n# 五、注释类插件\n## 1. The NERD Commenter\n可对多种类型的文件进行快速注释与取消，常用的快捷键有：\n\n快捷键      | 功能\n:-----------|:--------------\n&lt;leader&gt;cc | 注释当前行或选中的块\n&lt;leader&gt;cu | 取消注释当前行或选中的块\n&lt;leader&gt;ci | 取反注释状态\n\n# 六、标签类插件\n## 1. ShowMarks\n智能插入标签以及可视化展示标签，常用的快捷键有：\n\n快捷键      | 功能\n:-----------|:--------------\n&lt;leader&gt;mt |可视化开关\n&lt;leader&gt;mh |隐藏当前标签\n&lt;leader&gt;ma |隐藏缓冲区中所有标签\n&lt;leader&gt;mm |自动添加标签\n\n## 2. Marks-Browser\n显示当前文件的标签列表，可设置快捷键：\n\n    nmap <silent> <leader>mk :MarksBrowser<cr>\n\n由于插件默认在窗口上方打开列表，在退出时与minibufexpl有一些冲突，使得minibufexpl显示不正常。\n可以在插件源码中将显示位置改为下方：\n在marksbrowser的第60行，将\n\n    exec \"to sp\" . escape(s:win_title, ' ')\n\n改为\n\n    exec \"bo sp\" . escape(s:win_title, ' ')\n\n## 3. Tasklist\n类似eclipse的任务列表，自动抽取文件中的FIXME、TODO、XXX或自定义关键词，并形成列表展示。\n\n## 4. YankRing\nvim本身提供了最近9次删除记录，用`registers`命令可以查看，用`\"1p`可以粘贴最近删除内容，`\"2p`可以粘贴上次的删除内容。但是vim没有提供记录复制的内容，yankring则将vim中所有的改动记录下来，并提供一个列表用来粘贴想要的内容。可设置快捷键：\n\n    let g:yankring_enabled=1\n    let g:yankring_history_file='.yankring_history_file'\n    map <leader>yr :YRShow<cr>\n\n# 七、python相关插件\n## 1. Python-mode-klen\n集成了包括pylint、ropevim、pydoc、pyflakes、pep8和mccabe等插件，可以方便的进行静态检查、代码重构、折叠、补全、查看文档等等。\n\n### （1）快速浏览\n\n快捷键    | 功能\n:---------|:---------------------\n[[       | Jump to previous class or function (normal, visual, operator modes) \n]]       | Jump to next class or function  (normal, visual, operator modes) \n[M       | Jump to previous class or method (normal, visual, operator modes) \n]M       | Jump to next class or method (normal, visual, operator modes) \naC       | Select a class. Ex: vaC, daC, yaC, caC (normal, operator modes) \niC       | Select inner class. Ex: viC, diC, yiC, ciC (normal, operator modes) \naM       | Select a function or method. Ex: vaM, daM, yaM, caM (normal, operator modes) \niM       | Select inner function or method. Ex: viM, diM, yiM, ciM (normal, operator modes)\n\n### （2）查看文档\n利用pydoc查看文档，快捷键K会将当前光标所在词作为关键词进行查找。\n\n### （3）运行调试\n\n功能    | 快捷键\n:-------|:--------\n运行代码 | &lt;leader&gt;r\n插入断点 | &lt;leader&gt;b\n\n### （4）代码检查 \n支持pylint、pep257、pep8、pyflakes、mccabe等检查器，在代码保存时自动检查，自动去除多余的空格。\n\n可以使用命令`:PymodeLint`和`:PymodeLintToggle`开启检查，用`:PymodeLintAuto`自动校正pep8格式错误。\n\n### （5）转到定义\n可以查看和跳转到函数和类的定义：\n\n功能    | 快捷键\n:-------|:--------\n转到定义 | &lt;C-c&gt;g\n查看定义 | &lt;C-c&gt;d\n\n### （6）代码重构\n重命名光标所在的method/function/class/variables \n\n    let g:pymode_rope_rename_bind = '<C-c>rr'\n\n重命名当前模块\n\n    let g:pymode_rope_rename_bind = '<C-c>rr'\n\n根据pep8规定重排import模块\n\n    let g:pymode_rope_organize_imports_bind = '<C-c>ro'\n\n插入当前光标所在词的模块\n\n    let g:pymode_rope_autoimport_bind = '<C-c>ra'\n\nPython-mode和neocomplcache有些重叠，且neocomplcache占用了Tab键，可以在python文件中将neocomplcache禁止，并映射python-mode的补全键为tab：\n\n    au filetype python let g:neocomplcache_disable_auto_complete = 1\n    let g:pymode_rope_completion_bind = '<tab>'\n\nPython-mode与minibufexpl配合时，当查看定义、运行测试时，缓冲区跳转得并不正确。可以将autoload/pymode目录下的相关文件中的wincmd p命令注释掉：\n* rope.vim文件show_doc函数中，注释掉wincmd p，加上normal gg\n* run.vim文件code_run函数中，注释掉wincmd p\n* doc.vim文件show函数中，注释掉wincmd p\n\n## 2. 调试\n调试并没有找到比较好的插件，Python-mode与pdb、ipdb、pudb配合都有问题，vim-debug的界面并不十分友好，vimpdb插件也有问题。我比较喜欢pudb的调试界面，目前解决办法是映射快捷键调用pudb进行调试：\n\n    map <F6> :!pudb %<CR>\n\n\n","slug":"vim-notes","published":1,"updated":"2017-12-17T03:29:56.660Z","_id":"cjb6k4kw1000oulepvj4s22js","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"一、vim插件管理\"><a href=\"#一、vim插件管理\" class=\"headerlink\" title=\"一、vim插件管理\"></a>一、vim插件管理</h1><p>作为编辑器之神，vim强大之处在于可以通过下载或编写各种插件来增强其功能，但对各种插件管理确实是个麻烦事。幸亏有相关的插件管理工具可以使用，vim常用的插件管理工具有两种：pathogen和vundle。vundle可以看作是pathogen的升级版，完全兼容pathogen，除了能够方便组织插件，还能够方便的安装、卸载、升级插件。</p>\n<p>安装vundle非常简单，输入命令</p>\n<pre><code># git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle\n</code></pre><p>然后就可以把想要安装的插件名字写入.vimrc中即可。</p>\n<a id=\"more\"></a>\n<p>示例文件：</p>\n<pre><code>set nocompatible          &quot; be iMproved \nfiletype off              &quot; required! \nset rtp+=~/.vim/bundle/vundle/ \ncall vundle#rc() \n&quot; let Vundle manage Vundle \n&quot; required! \nBundle &apos;gmarik/vundle&apos; \n&quot; My bundles here: \n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\n&quot; original repos on GitHub \n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\nBundle &apos;tpope/vim-fugitive&apos; \nBundle &apos;Lokaltog/vim-easymotion&apos; \nBundle &apos;rstacruz/sparkup&apos;, {&apos;rtp&apos;: &apos;vim/&apos;} \nBundle &apos;tpope/vim-rails.git&apos; \nBundle &apos;Lokaltog/vim-powerline&apos; \n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot; \n&quot; vim-scripts repos http://www.vim-scripts.org/vim/scripts.html \n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot; \n&quot; Vim-script library \nBundle &apos;L9&apos; \n&quot; General utility functions \nBundle &apos;genutils&apos; \n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot; \n&quot; non-GitHub repos \n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\nBundle &apos;git://git.wincent.com/command-t.git&apos; \n&quot; Git repos on your local machine (i.e. when working on your own plugin) \n&quot; Bundle &apos;file:///Users/gmarik/path/to/plugin&apos; \n&quot; ... \nfiletype plugin indent on     &quot; required! \n&quot; \n&quot; Brief help \n&quot; :BundleList          - list configured bundles \n&quot; :BundleInstall(!)    - install (update) bundles \n&quot; :BundleSearch(!) foo - search (or refresh cache first) for foo \n&quot; :BundleClean(!)      - confirm (or auto-approve) removal of unused bundles \n&quot; \n&quot; see :h vundle for more details or wiki for FAQ &quot; NOTE: comments after Bundle commands are not allowed.\n</code></pre><h1 id=\"二、查找类插件\"><a href=\"#二、查找类插件\" class=\"headerlink\" title=\"二、查找类插件\"></a>二、查找类插件</h1><h2 id=\"1-command-t\"><a href=\"#1-command-t\" class=\"headerlink\" title=\"1. command-t\"></a>1. command-t</h2><h3 id=\"（1）简介\"><a href=\"#（1）简介\" class=\"headerlink\" title=\"（1）简介\"></a>（1）简介</h3><p>command-t用于快速查找和跳转文件及缓冲区，其名称来源于TextMate中“Go to File”的快捷键Command-T。command-t的思想是文件路径名与文件名同样具有重要的标识作用，它在查找时利用了文件完整路径中的所有字符。其强大之处在于可以模糊匹配，输入的任意字符之间可以看作包含通配符。</p>\n<p>command-t采用了ruby来实现，若在安装和使用时出现错误，可以参考：<br><a href=\"http://www.justinbar.net/post/install-vim-with-ruby-support-and-command-t-plugin-on-ubuntu\" target=\"_blank\" rel=\"noopener\">http://www.justinbar.net/post/install-vim-with-ruby-support-and-command-t-plugin-on-ubuntu</a></p>\n<h3 id=\"（2）使用\"><a href=\"#（2）使用\" class=\"headerlink\" title=\"（2）使用\"></a>（2）使用</h3><p>可以使用<code>:CommandT</code>命令打开文件跳转界面，用<code>:CommandTBuffer</code>命令打开缓冲区跳转界面。<br>如果需要对某个特定路径进行搜索时，使用<code>:CommandT path</code>。可以设置相应快捷键</p>\n<pre><code>nnoremap &lt;silent&gt; &lt;Leader&gt;ff :CommandT&lt;CR&gt;\nnnoremap &lt;silent&gt; &lt;Leader&gt;fb :CommandTBuffer&lt;CR&gt;\n</code></pre><p>在字符输入条件下有效的快捷键：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">快捷键</th>\n<th style=\"text-align:left\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">&lt;BS&gt;</td>\n<td style=\"text-align:left\">delete the character to the left of the cursor    </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;Del&gt;</td>\n<td style=\"text-align:left\">delete the character at the cursor    </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;Left&gt;</td>\n<td style=\"text-align:left\">move the cursor one character to the left   </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;C-h&gt;</td>\n<td style=\"text-align:left\">move the cursor one character to the left    </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;Right&gt;</td>\n<td style=\"text-align:left\">move the cursor one character to the right    </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;C-l&gt;</td>\n<td style=\"text-align:left\">move the cursor one character to the right    </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;C-a&gt;</td>\n<td style=\"text-align:left\">move the cursor to the start (left)    </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;C-e&gt;</td>\n<td style=\"text-align:left\">move the cursor to the end (right)    </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;C-u&gt;</td>\n<td style=\"text-align:left\">clear the contents of the prompt    </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;Tab&gt;</td>\n<td style=\"text-align:left\">change focus to the file listing</td>\n</tr>\n</tbody>\n</table>\n<p>在文件列表条件下有效的快捷键：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">快捷键</th>\n<th style=\"text-align:left\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">&lt;Tab&gt;</td>\n<td style=\"text-align:left\">change focus to the prompt </td>\n</tr>\n</tbody>\n</table>\n<p>在上述两种情况下都有效的快捷键：    </p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">快捷键</th>\n<th style=\"text-align:left\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">&lt;CR&gt;</td>\n<td style=\"text-align:left\">open the selected file    </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;C-CR&gt;</td>\n<td style=\"text-align:left\">open the selected file in a new split window    </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;C-s&gt;</td>\n<td style=\"text-align:left\">open the selected file in a new split window    </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;C-v&gt;</td>\n<td style=\"text-align:left\">open the selected file in a new vertical split window    </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;C-t&gt;</td>\n<td style=\"text-align:left\">open the selected file in a new tab    </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;C-j&gt;</td>\n<td style=\"text-align:left\">select next file in the file listing    </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;C-n&gt;</td>\n<td style=\"text-align:left\">select next file in the file listing    </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;Down&gt;</td>\n<td style=\"text-align:left\">select next file in the file listing    </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;C-k&gt;</td>\n<td style=\"text-align:left\">select previous file in the file listing    </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;C-p&gt;</td>\n<td style=\"text-align:left\">select previous file in the file listing    </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;Up&gt;</td>\n<td style=\"text-align:left\">select previous file in the file listing    </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;C-c&gt;</td>\n<td style=\"text-align:left\">cancel (dismisses file listing)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"（3）其它\"><a href=\"#（3）其它\" class=\"headerlink\" title=\"（3）其它\"></a>（3）其它</h3><p>在查找文件、缓冲区等还有些其它的插件，比如：</p>\n<ul>\n<li>lookupfile，和Command-T相比，它支持通配符和正则表达式，但其对文件的定位能力不及Command-T。</li>\n<li>FuzzyFinder，Command-T基本涵盖FuzzyFinder所有功能。</li>\n</ul>\n<h2 id=\"2-FSwitch\"><a href=\"#2-FSwitch\" class=\"headerlink\" title=\"2. FSwitch\"></a>2. FSwitch</h2><p>在互补文件之间进行切换，互补规则以及文件位置可以由用户指定，主要用于C/C++中的头文件和源文件之间的快速切换。</p>\n<p>常用设置为：</p>\n<pre><code>au! BufEnter *.cc,*.cpp let b:fswitchdst = &apos;h&apos; | let b:fswitchlocs = &apos;reg:/src/include/,reg:|src|include/**|,../inc,../include,.&apos; \nau! BufEnter *.h let b:fswitchdst = &apos;cc,cpp&apos; | let b:fswitchlocs = &apos;reg:/include/src/,reg:/include.*/src/,../src,../source,.&apos; \nlet g:fsnonewfiles = &quot;on&quot; \nnmap &lt;silent&gt; &lt;Leader&gt;fo :FSHere&lt;cr&gt;\n</code></pre><h1 id=\"三、浏览类插件\"><a href=\"#三、浏览类插件\" class=\"headerlink\" title=\"三、浏览类插件\"></a>三、浏览类插件</h1><h2 id=\"1-minibufexpl\"><a href=\"#1-minibufexpl\" class=\"headerlink\" title=\"1. minibufexpl\"></a>1. minibufexpl</h2><p>可以在编辑区上方显示缓冲区名，可方便的查看并切换缓冲区。可以对其进行一定的配置：</p>\n<h3 id=\"（1）使用C-HJKL在窗口之间进行移动，注意这里是大写\"><a href=\"#（1）使用C-HJKL在窗口之间进行移动，注意这里是大写\" class=\"headerlink\" title=\"（1）使用C-HJKL在窗口之间进行移动，注意这里是大写\"></a>（1）使用C-HJKL在窗口之间进行移动，注意这里是大写</h3><pre><code>let g:miniBufExplMapWindowNavVim = 1\n</code></pre><p>为使用方便，我们可以进行额外的设置</p>\n<pre><code>nmap &lt;C-j&gt; &lt;C-W&gt;j\nnmap &lt;C-k&gt; &lt;C-W&gt;k\nnmap &lt;C-h&gt; &lt;C-W&gt;h\nnmap &lt;C-l&gt; &lt;C-W&gt;l\n</code></pre><h3 id=\"（2）使用-在缓冲区中进行切换\"><a href=\"#（2）使用-在缓冲区中进行切换\" class=\"headerlink\" title=\"（2）使用 在缓冲区中进行切换\"></a>（2）使用<c-tab> <c-s-tab>在缓冲区中进行切换</c-s-tab></c-tab></h3><pre><code>let g:miniBufExplMapCTabSwitchBufs = 1\n</code></pre><p>由于bash已有这两个键映射，我们可以使用其它的映射</p>\n<pre><code>map &lt;leader&gt;bn :bn&lt;cr&gt;\nmap &lt;leader&gt;bp :bp&lt;cr&gt;\n</code></pre><h3 id=\"（3）映射快捷键关闭缓冲区，在只有一个缓冲区时关闭窗口\"><a href=\"#（3）映射快捷键关闭缓冲区，在只有一个缓冲区时关闭窗口\" class=\"headerlink\" title=\"（3）映射快捷键关闭缓冲区，在只有一个缓冲区时关闭窗口\"></a>（3）映射快捷键关闭缓冲区，在只有一个缓冲区时关闭窗口</h3><pre><code>&quot; Count buffer numbers\nfunction! NrBufs()\n    let i = bufnr(&apos;$&apos;)    \n    let j = 0    \n    while i &gt;= 1        \n        if buflisted(i)            \n            let j+=1        \n        endif        \n        let i-=1    \n    endwhile    \n    return j \nendfunction \n&quot; Close window when there is only one buffer \nfunction! BufClose()    \n    let buffer_count = NrBufs()    \n    if buffer_count == 1        \n        execute(&quot;quit&quot;)    \n    else        \n        execute(&quot;bdelete&quot;)    \n    endif \nendfunction\nnmap &lt;silent&gt; &lt;leader&gt;qq :call BufClose()&lt;cr&gt;\n</code></pre><h2 id=\"2-The-NERD-Tree\"><a href=\"#2-The-NERD-Tree\" class=\"headerlink\" title=\"2. The-NERD-Tree\"></a>2. The-NERD-Tree</h2><p>以树形的方式显示文件列表，可以映射显示的快捷键：</p>\n<pre><code>nmap &lt;silent&gt; &lt;leader&gt;tt :NERDTreeToggle&lt;cr&gt;\n</code></pre><p>当然，它还提供了很多书签之类的功能，可以参考其文档。</p>\n<h2 id=\"3-taglist\"><a href=\"#3-taglist\" class=\"headerlink\" title=\"3. taglist\"></a>3. taglist</h2><p>支持多种语言的源码浏览，包括C/C++、java、perl、python、tcl、sql、php等。常用设置：</p>\n<pre><code>let Tlist_Ctags_Cmd = &apos;ctags&apos; \nlet Tlist_Show_One_File = 1 \nlet Tlist_Exit_OnlyWindow = 1 \nlet Tlist_Use_Right_Window = 1\nnmap &lt;silent&gt; &lt;leader&gt;tl :Tlist&lt;cr&gt;\n</code></pre><h2 id=\"4-tagbar\"><a href=\"#4-tagbar\" class=\"headerlink\" title=\"4. tagbar\"></a>4. tagbar</h2><p>与taglist类似，但它对其对tag的组织是按照所在范围进行组织，与taglist按照通用类别如‘function’或‘variable’组织方式不同。常用设置：</p>\n<pre><code>let g:tagbar_width = 40 \nlet g:tagbar_expand = 1 \nnmap &lt;silent&gt; &lt;Leader&gt;tb :TagbarToggle&lt;cr&gt;\n</code></pre><h1 id=\"四、补全类插件\"><a href=\"#四、补全类插件\" class=\"headerlink\" title=\"四、补全类插件\"></a>四、补全类插件</h1><p>vim内置有很多补全方式：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">补全方式</th>\n<th style=\"text-align:left\">快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">整行补全</td>\n<td style=\"text-align:left\">CTRL-X CTRL-L</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">根据当前文件里关键字补全</td>\n<td style=\"text-align:left\">CTRL-X CTRL-N 或 CTRL-X CTRL-P</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">根据头文件内关键字补全</td>\n<td style=\"text-align:left\">CTRL-X CTRL-I</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">根据标签补全</td>\n<td style=\"text-align:left\">CTRL-X CTRL-]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">补全宏定义</td>\n<td style=\"text-align:left\">CTRL-X CTRL-D</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">补全文件名</td>\n<td style=\"text-align:left\">CTRL-X CTRL-F</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">补全vim命令</td>\n<td style=\"text-align:left\">CTRL-X CTRL-V</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">全能补全</td>\n<td style=\"text-align:left\">CTRL-X CTRL-O，即omni补全</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">用户自定义补全方式</td>\n<td style=\"text-align:left\">CTRL-X CTRL-U</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">根据字典补全</td>\n<td style=\"text-align:left\">CTRL-X CTRL-K</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">拼写建议</td>\n<td style=\"text-align:left\">CTRL-X CTRL-S</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">根据同义词字典补全</td>\n<td style=\"text-align:left\">CTRL-X CTRL-T</td>\n</tr>\n</tbody>\n</table>\n<p>除此之外，还有很多插件也提供了更为便捷的补全方法</p>\n<h2 id=\"1-neocomplcache\"><a href=\"#1-neocomplcache\" class=\"headerlink\" title=\"1. neocomplcache\"></a>1. neocomplcache</h2><p>非常强大的自动补全插件，可以智能识别需要用哪种模式来补全代码，配置后可以实现使用tab在补全代码之间跳转，并使用Enter来输入选中的代码。</p>\n<p>典型配置：</p>\n<pre><code>&quot; Disable AutoComplPop.\nlet g:acp_enableAtStartup = 0\n&quot; Use neocomplcache.\nlet g:neocomplcache_enable_at_startup = 1\n&quot; Use smartcase.\nlet g:neocomplcache_enable_smart_case = 1\n&quot; Use camel case completion.\nlet g:neocomplcache_enable_camel_case_completion = 1\n&quot; Use underbar completion.\nlet g:neocomplcache_enable_underbar_completion = 1\n&quot; Set minimum syntax keyword length.\nlet g:neocomplcache_min_syntax_length = 3\nlet g:neocomplcache_lock_buffer_name_pattern = &apos;\\*ku\\*&apos;\n&quot; Define dictionary.\nlet g:neocomplcache_dictionary_filetype_lists = {    \\ \n&apos;default&apos; : &apos;&apos;,    \\ \n&apos;vimshell&apos; : $HOME.&apos;/.vimshell_hist&apos;,    \\ \n&apos;scheme&apos; : $HOME.&apos;/.gosh_completions&apos;    \\ \n} \n&quot; Define keyword. \nif !exists(&apos;g:neocomplcache_keyword_patterns&apos;)    \nlet g:neocomplcache_keyword_patterns = {} \nendif \nlet g:neocomplcache_keyword_patterns[&apos;default&apos;] = &apos;\\h\\w*&apos; \n&quot; Plugin key-mappings. \ninoremap &lt;expr&gt;&lt;C-g&gt;     neocomplcache#undo_completion() \ninoremap &lt;expr&gt;&lt;C-l&gt;     neocomplcache#complete_common_string() \n&quot; Recommended key-mappings. \n&quot; &lt;CR&gt;: close popup and save indent. \ninoremap &lt;expr&gt;&lt;CR&gt;  neocomplcache#smart_close_popup() . &quot;\\&lt;CR&gt;&quot; \n&quot; &lt;TAB&gt;: completion. \ninoremap &lt;expr&gt;&lt;TAB&gt;  pumvisible() ? &quot;\\&lt;C-n&gt;&quot; : &quot;\\&lt;TAB&gt;&quot; \n&quot; &lt;C-h&gt;, &lt;BS&gt;: close popup and delete backword char. \ninoremap &lt;expr&gt;&lt;C-h&gt; neocomplcache#smart_close_popup().&quot;\\&lt;C-h&gt;&quot; \ninoremap &lt;expr&gt;&lt;BS&gt; neocomplcache#smart_close_popup().&quot;\\&lt;C-h&gt;&quot; \ninoremap &lt;expr&gt;&lt;C-y&gt;  neocomplcache#close_popup() \ninoremap &lt;expr&gt;&lt;C-e&gt;  neocomplcache#cancel_popup() \ninoremap &lt;expr&gt;&lt;Enter&gt;  pumvisible() ? &quot;\\&lt;C-Y&gt;&quot; : &quot;\\&lt;Enter&gt;&quot; \n&quot; AutoComplPop like behavior. \nlet g:neocomplcache_enable_auto_select = 1\n</code></pre><h2 id=\"2-snipMate\"><a href=\"#2-snipMate\" class=\"headerlink\" title=\"2. snipMate\"></a>2. snipMate</h2><p>snipMate可以对各种语言进行补全，从而快速插入代码块。其默认使用的补全键为Tab，这与其它一些补全插件可能有冲突，按照其文档说明可以对其进行重定义：</p>\n<pre><code>ino &lt;c-j&gt; &lt;c-r&gt;=TriggerSnippet()&lt;cr&gt; \nsnor &lt;c-j&gt; &lt;esc&gt;i&lt;right&gt;&lt;c-r&gt;=TriggerSnippet()&lt;cr&gt;\n</code></pre><h2 id=\"3-Auto-Pairs\"><a href=\"#3-Auto-Pairs\" class=\"headerlink\" title=\"3. Auto-Pairs\"></a>3. Auto-Pairs</h2><p>可以成对地自动插入和删除括号、引号等等，并可以自动定位到括号或引号的尾部。</p>\n<h1 id=\"五、注释类插件\"><a href=\"#五、注释类插件\" class=\"headerlink\" title=\"五、注释类插件\"></a>五、注释类插件</h1><h2 id=\"1-The-NERD-Commenter\"><a href=\"#1-The-NERD-Commenter\" class=\"headerlink\" title=\"1. The NERD Commenter\"></a>1. The NERD Commenter</h2><p>可对多种类型的文件进行快速注释与取消，常用的快捷键有：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">快捷键</th>\n<th style=\"text-align:left\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">&lt;leader&gt;cc</td>\n<td style=\"text-align:left\">注释当前行或选中的块</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;leader&gt;cu</td>\n<td style=\"text-align:left\">取消注释当前行或选中的块</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;leader&gt;ci</td>\n<td style=\"text-align:left\">取反注释状态</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"六、标签类插件\"><a href=\"#六、标签类插件\" class=\"headerlink\" title=\"六、标签类插件\"></a>六、标签类插件</h1><h2 id=\"1-ShowMarks\"><a href=\"#1-ShowMarks\" class=\"headerlink\" title=\"1. ShowMarks\"></a>1. ShowMarks</h2><p>智能插入标签以及可视化展示标签，常用的快捷键有：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">快捷键</th>\n<th style=\"text-align:left\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">&lt;leader&gt;mt</td>\n<td style=\"text-align:left\">可视化开关</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;leader&gt;mh</td>\n<td style=\"text-align:left\">隐藏当前标签</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;leader&gt;ma</td>\n<td style=\"text-align:left\">隐藏缓冲区中所有标签</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;leader&gt;mm</td>\n<td style=\"text-align:left\">自动添加标签</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"2-Marks-Browser\"><a href=\"#2-Marks-Browser\" class=\"headerlink\" title=\"2. Marks-Browser\"></a>2. Marks-Browser</h2><p>显示当前文件的标签列表，可设置快捷键：</p>\n<pre><code>nmap &lt;silent&gt; &lt;leader&gt;mk :MarksBrowser&lt;cr&gt;\n</code></pre><p>由于插件默认在窗口上方打开列表，在退出时与minibufexpl有一些冲突，使得minibufexpl显示不正常。<br>可以在插件源码中将显示位置改为下方：<br>在marksbrowser的第60行，将</p>\n<pre><code>exec &quot;to sp&quot; . escape(s:win_title, &apos; &apos;)\n</code></pre><p>改为</p>\n<pre><code>exec &quot;bo sp&quot; . escape(s:win_title, &apos; &apos;)\n</code></pre><h2 id=\"3-Tasklist\"><a href=\"#3-Tasklist\" class=\"headerlink\" title=\"3. Tasklist\"></a>3. Tasklist</h2><p>类似eclipse的任务列表，自动抽取文件中的FIXME、TODO、XXX或自定义关键词，并形成列表展示。</p>\n<h2 id=\"4-YankRing\"><a href=\"#4-YankRing\" class=\"headerlink\" title=\"4. YankRing\"></a>4. YankRing</h2><p>vim本身提供了最近9次删除记录，用<code>registers</code>命令可以查看，用<code>&quot;1p</code>可以粘贴最近删除内容，<code>&quot;2p</code>可以粘贴上次的删除内容。但是vim没有提供记录复制的内容，yankring则将vim中所有的改动记录下来，并提供一个列表用来粘贴想要的内容。可设置快捷键：</p>\n<pre><code>let g:yankring_enabled=1\nlet g:yankring_history_file=&apos;.yankring_history_file&apos;\nmap &lt;leader&gt;yr :YRShow&lt;cr&gt;\n</code></pre><h1 id=\"七、python相关插件\"><a href=\"#七、python相关插件\" class=\"headerlink\" title=\"七、python相关插件\"></a>七、python相关插件</h1><h2 id=\"1-Python-mode-klen\"><a href=\"#1-Python-mode-klen\" class=\"headerlink\" title=\"1. Python-mode-klen\"></a>1. Python-mode-klen</h2><p>集成了包括pylint、ropevim、pydoc、pyflakes、pep8和mccabe等插件，可以方便的进行静态检查、代码重构、折叠、补全、查看文档等等。</p>\n<h3 id=\"（1）快速浏览\"><a href=\"#（1）快速浏览\" class=\"headerlink\" title=\"（1）快速浏览\"></a>（1）快速浏览</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">快捷键</th>\n<th style=\"text-align:left\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">[[</td>\n<td style=\"text-align:left\">Jump to previous class or function (normal, visual, operator modes) </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">]]</td>\n<td style=\"text-align:left\">Jump to next class or function  (normal, visual, operator modes) </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[M</td>\n<td style=\"text-align:left\">Jump to previous class or method (normal, visual, operator modes) </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">]M</td>\n<td style=\"text-align:left\">Jump to next class or method (normal, visual, operator modes) </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">aC</td>\n<td style=\"text-align:left\">Select a class. Ex: vaC, daC, yaC, caC (normal, operator modes) </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">iC</td>\n<td style=\"text-align:left\">Select inner class. Ex: viC, diC, yiC, ciC (normal, operator modes) </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">aM</td>\n<td style=\"text-align:left\">Select a function or method. Ex: vaM, daM, yaM, caM (normal, operator modes) </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">iM</td>\n<td style=\"text-align:left\">Select inner function or method. Ex: viM, diM, yiM, ciM (normal, operator modes)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"（2）查看文档\"><a href=\"#（2）查看文档\" class=\"headerlink\" title=\"（2）查看文档\"></a>（2）查看文档</h3><p>利用pydoc查看文档，快捷键K会将当前光标所在词作为关键词进行查找。</p>\n<h3 id=\"（3）运行调试\"><a href=\"#（3）运行调试\" class=\"headerlink\" title=\"（3）运行调试\"></a>（3）运行调试</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">功能</th>\n<th style=\"text-align:left\">快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">运行代码</td>\n<td style=\"text-align:left\">&lt;leader&gt;r</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">插入断点</td>\n<td style=\"text-align:left\">&lt;leader&gt;b</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"（4）代码检查\"><a href=\"#（4）代码检查\" class=\"headerlink\" title=\"（4）代码检查\"></a>（4）代码检查</h3><p>支持pylint、pep257、pep8、pyflakes、mccabe等检查器，在代码保存时自动检查，自动去除多余的空格。</p>\n<p>可以使用命令<code>:PymodeLint</code>和<code>:PymodeLintToggle</code>开启检查，用<code>:PymodeLintAuto</code>自动校正pep8格式错误。</p>\n<h3 id=\"（5）转到定义\"><a href=\"#（5）转到定义\" class=\"headerlink\" title=\"（5）转到定义\"></a>（5）转到定义</h3><p>可以查看和跳转到函数和类的定义：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">功能</th>\n<th style=\"text-align:left\">快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">转到定义</td>\n<td style=\"text-align:left\">&lt;C-c&gt;g</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">查看定义</td>\n<td style=\"text-align:left\">&lt;C-c&gt;d</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"（6）代码重构\"><a href=\"#（6）代码重构\" class=\"headerlink\" title=\"（6）代码重构\"></a>（6）代码重构</h3><p>重命名光标所在的method/function/class/variables </p>\n<pre><code>let g:pymode_rope_rename_bind = &apos;&lt;C-c&gt;rr&apos;\n</code></pre><p>重命名当前模块</p>\n<pre><code>let g:pymode_rope_rename_bind = &apos;&lt;C-c&gt;rr&apos;\n</code></pre><p>根据pep8规定重排import模块</p>\n<pre><code>let g:pymode_rope_organize_imports_bind = &apos;&lt;C-c&gt;ro&apos;\n</code></pre><p>插入当前光标所在词的模块</p>\n<pre><code>let g:pymode_rope_autoimport_bind = &apos;&lt;C-c&gt;ra&apos;\n</code></pre><p>Python-mode和neocomplcache有些重叠，且neocomplcache占用了Tab键，可以在python文件中将neocomplcache禁止，并映射python-mode的补全键为tab：</p>\n<pre><code>au filetype python let g:neocomplcache_disable_auto_complete = 1\nlet g:pymode_rope_completion_bind = &apos;&lt;tab&gt;&apos;\n</code></pre><p>Python-mode与minibufexpl配合时，当查看定义、运行测试时，缓冲区跳转得并不正确。可以将autoload/pymode目录下的相关文件中的wincmd p命令注释掉：</p>\n<ul>\n<li>rope.vim文件show_doc函数中，注释掉wincmd p，加上normal gg</li>\n<li>run.vim文件code_run函数中，注释掉wincmd p</li>\n<li>doc.vim文件show函数中，注释掉wincmd p</li>\n</ul>\n<h2 id=\"2-调试\"><a href=\"#2-调试\" class=\"headerlink\" title=\"2. 调试\"></a>2. 调试</h2><p>调试并没有找到比较好的插件，Python-mode与pdb、ipdb、pudb配合都有问题，vim-debug的界面并不十分友好，vimpdb插件也有问题。我比较喜欢pudb的调试界面，目前解决办法是映射快捷键调用pudb进行调试：</p>\n<pre><code>map &lt;F6&gt; :!pudb %&lt;CR&gt;\n</code></pre>","site":{"data":{}},"excerpt":"<h1 id=\"一、vim插件管理\"><a href=\"#一、vim插件管理\" class=\"headerlink\" title=\"一、vim插件管理\"></a>一、vim插件管理</h1><p>作为编辑器之神，vim强大之处在于可以通过下载或编写各种插件来增强其功能，但对各种插件管理确实是个麻烦事。幸亏有相关的插件管理工具可以使用，vim常用的插件管理工具有两种：pathogen和vundle。vundle可以看作是pathogen的升级版，完全兼容pathogen，除了能够方便组织插件，还能够方便的安装、卸载、升级插件。</p>\n<p>安装vundle非常简单，输入命令</p>\n<pre><code># git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle\n</code></pre><p>然后就可以把想要安装的插件名字写入.vimrc中即可。</p>","more":"<p>示例文件：</p>\n<pre><code>set nocompatible          &quot; be iMproved \nfiletype off              &quot; required! \nset rtp+=~/.vim/bundle/vundle/ \ncall vundle#rc() \n&quot; let Vundle manage Vundle \n&quot; required! \nBundle &apos;gmarik/vundle&apos; \n&quot; My bundles here: \n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\n&quot; original repos on GitHub \n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\nBundle &apos;tpope/vim-fugitive&apos; \nBundle &apos;Lokaltog/vim-easymotion&apos; \nBundle &apos;rstacruz/sparkup&apos;, {&apos;rtp&apos;: &apos;vim/&apos;} \nBundle &apos;tpope/vim-rails.git&apos; \nBundle &apos;Lokaltog/vim-powerline&apos; \n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot; \n&quot; vim-scripts repos http://www.vim-scripts.org/vim/scripts.html \n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot; \n&quot; Vim-script library \nBundle &apos;L9&apos; \n&quot; General utility functions \nBundle &apos;genutils&apos; \n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot; \n&quot; non-GitHub repos \n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\nBundle &apos;git://git.wincent.com/command-t.git&apos; \n&quot; Git repos on your local machine (i.e. when working on your own plugin) \n&quot; Bundle &apos;file:///Users/gmarik/path/to/plugin&apos; \n&quot; ... \nfiletype plugin indent on     &quot; required! \n&quot; \n&quot; Brief help \n&quot; :BundleList          - list configured bundles \n&quot; :BundleInstall(!)    - install (update) bundles \n&quot; :BundleSearch(!) foo - search (or refresh cache first) for foo \n&quot; :BundleClean(!)      - confirm (or auto-approve) removal of unused bundles \n&quot; \n&quot; see :h vundle for more details or wiki for FAQ &quot; NOTE: comments after Bundle commands are not allowed.\n</code></pre><h1 id=\"二、查找类插件\"><a href=\"#二、查找类插件\" class=\"headerlink\" title=\"二、查找类插件\"></a>二、查找类插件</h1><h2 id=\"1-command-t\"><a href=\"#1-command-t\" class=\"headerlink\" title=\"1. command-t\"></a>1. command-t</h2><h3 id=\"（1）简介\"><a href=\"#（1）简介\" class=\"headerlink\" title=\"（1）简介\"></a>（1）简介</h3><p>command-t用于快速查找和跳转文件及缓冲区，其名称来源于TextMate中“Go to File”的快捷键Command-T。command-t的思想是文件路径名与文件名同样具有重要的标识作用，它在查找时利用了文件完整路径中的所有字符。其强大之处在于可以模糊匹配，输入的任意字符之间可以看作包含通配符。</p>\n<p>command-t采用了ruby来实现，若在安装和使用时出现错误，可以参考：<br><a href=\"http://www.justinbar.net/post/install-vim-with-ruby-support-and-command-t-plugin-on-ubuntu\" target=\"_blank\" rel=\"noopener\">http://www.justinbar.net/post/install-vim-with-ruby-support-and-command-t-plugin-on-ubuntu</a></p>\n<h3 id=\"（2）使用\"><a href=\"#（2）使用\" class=\"headerlink\" title=\"（2）使用\"></a>（2）使用</h3><p>可以使用<code>:CommandT</code>命令打开文件跳转界面，用<code>:CommandTBuffer</code>命令打开缓冲区跳转界面。<br>如果需要对某个特定路径进行搜索时，使用<code>:CommandT path</code>。可以设置相应快捷键</p>\n<pre><code>nnoremap &lt;silent&gt; &lt;Leader&gt;ff :CommandT&lt;CR&gt;\nnnoremap &lt;silent&gt; &lt;Leader&gt;fb :CommandTBuffer&lt;CR&gt;\n</code></pre><p>在字符输入条件下有效的快捷键：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">快捷键</th>\n<th style=\"text-align:left\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">&lt;BS&gt;</td>\n<td style=\"text-align:left\">delete the character to the left of the cursor    </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;Del&gt;</td>\n<td style=\"text-align:left\">delete the character at the cursor    </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;Left&gt;</td>\n<td style=\"text-align:left\">move the cursor one character to the left   </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;C-h&gt;</td>\n<td style=\"text-align:left\">move the cursor one character to the left    </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;Right&gt;</td>\n<td style=\"text-align:left\">move the cursor one character to the right    </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;C-l&gt;</td>\n<td style=\"text-align:left\">move the cursor one character to the right    </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;C-a&gt;</td>\n<td style=\"text-align:left\">move the cursor to the start (left)    </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;C-e&gt;</td>\n<td style=\"text-align:left\">move the cursor to the end (right)    </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;C-u&gt;</td>\n<td style=\"text-align:left\">clear the contents of the prompt    </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;Tab&gt;</td>\n<td style=\"text-align:left\">change focus to the file listing</td>\n</tr>\n</tbody>\n</table>\n<p>在文件列表条件下有效的快捷键：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">快捷键</th>\n<th style=\"text-align:left\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">&lt;Tab&gt;</td>\n<td style=\"text-align:left\">change focus to the prompt </td>\n</tr>\n</tbody>\n</table>\n<p>在上述两种情况下都有效的快捷键：    </p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">快捷键</th>\n<th style=\"text-align:left\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">&lt;CR&gt;</td>\n<td style=\"text-align:left\">open the selected file    </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;C-CR&gt;</td>\n<td style=\"text-align:left\">open the selected file in a new split window    </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;C-s&gt;</td>\n<td style=\"text-align:left\">open the selected file in a new split window    </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;C-v&gt;</td>\n<td style=\"text-align:left\">open the selected file in a new vertical split window    </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;C-t&gt;</td>\n<td style=\"text-align:left\">open the selected file in a new tab    </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;C-j&gt;</td>\n<td style=\"text-align:left\">select next file in the file listing    </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;C-n&gt;</td>\n<td style=\"text-align:left\">select next file in the file listing    </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;Down&gt;</td>\n<td style=\"text-align:left\">select next file in the file listing    </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;C-k&gt;</td>\n<td style=\"text-align:left\">select previous file in the file listing    </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;C-p&gt;</td>\n<td style=\"text-align:left\">select previous file in the file listing    </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;Up&gt;</td>\n<td style=\"text-align:left\">select previous file in the file listing    </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;C-c&gt;</td>\n<td style=\"text-align:left\">cancel (dismisses file listing)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"（3）其它\"><a href=\"#（3）其它\" class=\"headerlink\" title=\"（3）其它\"></a>（3）其它</h3><p>在查找文件、缓冲区等还有些其它的插件，比如：</p>\n<ul>\n<li>lookupfile，和Command-T相比，它支持通配符和正则表达式，但其对文件的定位能力不及Command-T。</li>\n<li>FuzzyFinder，Command-T基本涵盖FuzzyFinder所有功能。</li>\n</ul>\n<h2 id=\"2-FSwitch\"><a href=\"#2-FSwitch\" class=\"headerlink\" title=\"2. FSwitch\"></a>2. FSwitch</h2><p>在互补文件之间进行切换，互补规则以及文件位置可以由用户指定，主要用于C/C++中的头文件和源文件之间的快速切换。</p>\n<p>常用设置为：</p>\n<pre><code>au! BufEnter *.cc,*.cpp let b:fswitchdst = &apos;h&apos; | let b:fswitchlocs = &apos;reg:/src/include/,reg:|src|include/**|,../inc,../include,.&apos; \nau! BufEnter *.h let b:fswitchdst = &apos;cc,cpp&apos; | let b:fswitchlocs = &apos;reg:/include/src/,reg:/include.*/src/,../src,../source,.&apos; \nlet g:fsnonewfiles = &quot;on&quot; \nnmap &lt;silent&gt; &lt;Leader&gt;fo :FSHere&lt;cr&gt;\n</code></pre><h1 id=\"三、浏览类插件\"><a href=\"#三、浏览类插件\" class=\"headerlink\" title=\"三、浏览类插件\"></a>三、浏览类插件</h1><h2 id=\"1-minibufexpl\"><a href=\"#1-minibufexpl\" class=\"headerlink\" title=\"1. minibufexpl\"></a>1. minibufexpl</h2><p>可以在编辑区上方显示缓冲区名，可方便的查看并切换缓冲区。可以对其进行一定的配置：</p>\n<h3 id=\"（1）使用C-HJKL在窗口之间进行移动，注意这里是大写\"><a href=\"#（1）使用C-HJKL在窗口之间进行移动，注意这里是大写\" class=\"headerlink\" title=\"（1）使用C-HJKL在窗口之间进行移动，注意这里是大写\"></a>（1）使用C-HJKL在窗口之间进行移动，注意这里是大写</h3><pre><code>let g:miniBufExplMapWindowNavVim = 1\n</code></pre><p>为使用方便，我们可以进行额外的设置</p>\n<pre><code>nmap &lt;C-j&gt; &lt;C-W&gt;j\nnmap &lt;C-k&gt; &lt;C-W&gt;k\nnmap &lt;C-h&gt; &lt;C-W&gt;h\nnmap &lt;C-l&gt; &lt;C-W&gt;l\n</code></pre><h3 id=\"（2）使用-在缓冲区中进行切换\"><a href=\"#（2）使用-在缓冲区中进行切换\" class=\"headerlink\" title=\"（2）使用 在缓冲区中进行切换\"></a>（2）使用<c-tab> <c-s-tab>在缓冲区中进行切换</c-s-tab></c-tab></h3><pre><code>let g:miniBufExplMapCTabSwitchBufs = 1\n</code></pre><p>由于bash已有这两个键映射，我们可以使用其它的映射</p>\n<pre><code>map &lt;leader&gt;bn :bn&lt;cr&gt;\nmap &lt;leader&gt;bp :bp&lt;cr&gt;\n</code></pre><h3 id=\"（3）映射快捷键关闭缓冲区，在只有一个缓冲区时关闭窗口\"><a href=\"#（3）映射快捷键关闭缓冲区，在只有一个缓冲区时关闭窗口\" class=\"headerlink\" title=\"（3）映射快捷键关闭缓冲区，在只有一个缓冲区时关闭窗口\"></a>（3）映射快捷键关闭缓冲区，在只有一个缓冲区时关闭窗口</h3><pre><code>&quot; Count buffer numbers\nfunction! NrBufs()\n    let i = bufnr(&apos;$&apos;)    \n    let j = 0    \n    while i &gt;= 1        \n        if buflisted(i)            \n            let j+=1        \n        endif        \n        let i-=1    \n    endwhile    \n    return j \nendfunction \n&quot; Close window when there is only one buffer \nfunction! BufClose()    \n    let buffer_count = NrBufs()    \n    if buffer_count == 1        \n        execute(&quot;quit&quot;)    \n    else        \n        execute(&quot;bdelete&quot;)    \n    endif \nendfunction\nnmap &lt;silent&gt; &lt;leader&gt;qq :call BufClose()&lt;cr&gt;\n</code></pre><h2 id=\"2-The-NERD-Tree\"><a href=\"#2-The-NERD-Tree\" class=\"headerlink\" title=\"2. The-NERD-Tree\"></a>2. The-NERD-Tree</h2><p>以树形的方式显示文件列表，可以映射显示的快捷键：</p>\n<pre><code>nmap &lt;silent&gt; &lt;leader&gt;tt :NERDTreeToggle&lt;cr&gt;\n</code></pre><p>当然，它还提供了很多书签之类的功能，可以参考其文档。</p>\n<h2 id=\"3-taglist\"><a href=\"#3-taglist\" class=\"headerlink\" title=\"3. taglist\"></a>3. taglist</h2><p>支持多种语言的源码浏览，包括C/C++、java、perl、python、tcl、sql、php等。常用设置：</p>\n<pre><code>let Tlist_Ctags_Cmd = &apos;ctags&apos; \nlet Tlist_Show_One_File = 1 \nlet Tlist_Exit_OnlyWindow = 1 \nlet Tlist_Use_Right_Window = 1\nnmap &lt;silent&gt; &lt;leader&gt;tl :Tlist&lt;cr&gt;\n</code></pre><h2 id=\"4-tagbar\"><a href=\"#4-tagbar\" class=\"headerlink\" title=\"4. tagbar\"></a>4. tagbar</h2><p>与taglist类似，但它对其对tag的组织是按照所在范围进行组织，与taglist按照通用类别如‘function’或‘variable’组织方式不同。常用设置：</p>\n<pre><code>let g:tagbar_width = 40 \nlet g:tagbar_expand = 1 \nnmap &lt;silent&gt; &lt;Leader&gt;tb :TagbarToggle&lt;cr&gt;\n</code></pre><h1 id=\"四、补全类插件\"><a href=\"#四、补全类插件\" class=\"headerlink\" title=\"四、补全类插件\"></a>四、补全类插件</h1><p>vim内置有很多补全方式：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">补全方式</th>\n<th style=\"text-align:left\">快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">整行补全</td>\n<td style=\"text-align:left\">CTRL-X CTRL-L</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">根据当前文件里关键字补全</td>\n<td style=\"text-align:left\">CTRL-X CTRL-N 或 CTRL-X CTRL-P</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">根据头文件内关键字补全</td>\n<td style=\"text-align:left\">CTRL-X CTRL-I</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">根据标签补全</td>\n<td style=\"text-align:left\">CTRL-X CTRL-]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">补全宏定义</td>\n<td style=\"text-align:left\">CTRL-X CTRL-D</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">补全文件名</td>\n<td style=\"text-align:left\">CTRL-X CTRL-F</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">补全vim命令</td>\n<td style=\"text-align:left\">CTRL-X CTRL-V</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">全能补全</td>\n<td style=\"text-align:left\">CTRL-X CTRL-O，即omni补全</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">用户自定义补全方式</td>\n<td style=\"text-align:left\">CTRL-X CTRL-U</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">根据字典补全</td>\n<td style=\"text-align:left\">CTRL-X CTRL-K</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">拼写建议</td>\n<td style=\"text-align:left\">CTRL-X CTRL-S</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">根据同义词字典补全</td>\n<td style=\"text-align:left\">CTRL-X CTRL-T</td>\n</tr>\n</tbody>\n</table>\n<p>除此之外，还有很多插件也提供了更为便捷的补全方法</p>\n<h2 id=\"1-neocomplcache\"><a href=\"#1-neocomplcache\" class=\"headerlink\" title=\"1. neocomplcache\"></a>1. neocomplcache</h2><p>非常强大的自动补全插件，可以智能识别需要用哪种模式来补全代码，配置后可以实现使用tab在补全代码之间跳转，并使用Enter来输入选中的代码。</p>\n<p>典型配置：</p>\n<pre><code>&quot; Disable AutoComplPop.\nlet g:acp_enableAtStartup = 0\n&quot; Use neocomplcache.\nlet g:neocomplcache_enable_at_startup = 1\n&quot; Use smartcase.\nlet g:neocomplcache_enable_smart_case = 1\n&quot; Use camel case completion.\nlet g:neocomplcache_enable_camel_case_completion = 1\n&quot; Use underbar completion.\nlet g:neocomplcache_enable_underbar_completion = 1\n&quot; Set minimum syntax keyword length.\nlet g:neocomplcache_min_syntax_length = 3\nlet g:neocomplcache_lock_buffer_name_pattern = &apos;\\*ku\\*&apos;\n&quot; Define dictionary.\nlet g:neocomplcache_dictionary_filetype_lists = {    \\ \n&apos;default&apos; : &apos;&apos;,    \\ \n&apos;vimshell&apos; : $HOME.&apos;/.vimshell_hist&apos;,    \\ \n&apos;scheme&apos; : $HOME.&apos;/.gosh_completions&apos;    \\ \n} \n&quot; Define keyword. \nif !exists(&apos;g:neocomplcache_keyword_patterns&apos;)    \nlet g:neocomplcache_keyword_patterns = {} \nendif \nlet g:neocomplcache_keyword_patterns[&apos;default&apos;] = &apos;\\h\\w*&apos; \n&quot; Plugin key-mappings. \ninoremap &lt;expr&gt;&lt;C-g&gt;     neocomplcache#undo_completion() \ninoremap &lt;expr&gt;&lt;C-l&gt;     neocomplcache#complete_common_string() \n&quot; Recommended key-mappings. \n&quot; &lt;CR&gt;: close popup and save indent. \ninoremap &lt;expr&gt;&lt;CR&gt;  neocomplcache#smart_close_popup() . &quot;\\&lt;CR&gt;&quot; \n&quot; &lt;TAB&gt;: completion. \ninoremap &lt;expr&gt;&lt;TAB&gt;  pumvisible() ? &quot;\\&lt;C-n&gt;&quot; : &quot;\\&lt;TAB&gt;&quot; \n&quot; &lt;C-h&gt;, &lt;BS&gt;: close popup and delete backword char. \ninoremap &lt;expr&gt;&lt;C-h&gt; neocomplcache#smart_close_popup().&quot;\\&lt;C-h&gt;&quot; \ninoremap &lt;expr&gt;&lt;BS&gt; neocomplcache#smart_close_popup().&quot;\\&lt;C-h&gt;&quot; \ninoremap &lt;expr&gt;&lt;C-y&gt;  neocomplcache#close_popup() \ninoremap &lt;expr&gt;&lt;C-e&gt;  neocomplcache#cancel_popup() \ninoremap &lt;expr&gt;&lt;Enter&gt;  pumvisible() ? &quot;\\&lt;C-Y&gt;&quot; : &quot;\\&lt;Enter&gt;&quot; \n&quot; AutoComplPop like behavior. \nlet g:neocomplcache_enable_auto_select = 1\n</code></pre><h2 id=\"2-snipMate\"><a href=\"#2-snipMate\" class=\"headerlink\" title=\"2. snipMate\"></a>2. snipMate</h2><p>snipMate可以对各种语言进行补全，从而快速插入代码块。其默认使用的补全键为Tab，这与其它一些补全插件可能有冲突，按照其文档说明可以对其进行重定义：</p>\n<pre><code>ino &lt;c-j&gt; &lt;c-r&gt;=TriggerSnippet()&lt;cr&gt; \nsnor &lt;c-j&gt; &lt;esc&gt;i&lt;right&gt;&lt;c-r&gt;=TriggerSnippet()&lt;cr&gt;\n</code></pre><h2 id=\"3-Auto-Pairs\"><a href=\"#3-Auto-Pairs\" class=\"headerlink\" title=\"3. Auto-Pairs\"></a>3. Auto-Pairs</h2><p>可以成对地自动插入和删除括号、引号等等，并可以自动定位到括号或引号的尾部。</p>\n<h1 id=\"五、注释类插件\"><a href=\"#五、注释类插件\" class=\"headerlink\" title=\"五、注释类插件\"></a>五、注释类插件</h1><h2 id=\"1-The-NERD-Commenter\"><a href=\"#1-The-NERD-Commenter\" class=\"headerlink\" title=\"1. The NERD Commenter\"></a>1. The NERD Commenter</h2><p>可对多种类型的文件进行快速注释与取消，常用的快捷键有：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">快捷键</th>\n<th style=\"text-align:left\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">&lt;leader&gt;cc</td>\n<td style=\"text-align:left\">注释当前行或选中的块</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;leader&gt;cu</td>\n<td style=\"text-align:left\">取消注释当前行或选中的块</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;leader&gt;ci</td>\n<td style=\"text-align:left\">取反注释状态</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"六、标签类插件\"><a href=\"#六、标签类插件\" class=\"headerlink\" title=\"六、标签类插件\"></a>六、标签类插件</h1><h2 id=\"1-ShowMarks\"><a href=\"#1-ShowMarks\" class=\"headerlink\" title=\"1. ShowMarks\"></a>1. ShowMarks</h2><p>智能插入标签以及可视化展示标签，常用的快捷键有：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">快捷键</th>\n<th style=\"text-align:left\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">&lt;leader&gt;mt</td>\n<td style=\"text-align:left\">可视化开关</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;leader&gt;mh</td>\n<td style=\"text-align:left\">隐藏当前标签</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;leader&gt;ma</td>\n<td style=\"text-align:left\">隐藏缓冲区中所有标签</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">&lt;leader&gt;mm</td>\n<td style=\"text-align:left\">自动添加标签</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"2-Marks-Browser\"><a href=\"#2-Marks-Browser\" class=\"headerlink\" title=\"2. Marks-Browser\"></a>2. Marks-Browser</h2><p>显示当前文件的标签列表，可设置快捷键：</p>\n<pre><code>nmap &lt;silent&gt; &lt;leader&gt;mk :MarksBrowser&lt;cr&gt;\n</code></pre><p>由于插件默认在窗口上方打开列表，在退出时与minibufexpl有一些冲突，使得minibufexpl显示不正常。<br>可以在插件源码中将显示位置改为下方：<br>在marksbrowser的第60行，将</p>\n<pre><code>exec &quot;to sp&quot; . escape(s:win_title, &apos; &apos;)\n</code></pre><p>改为</p>\n<pre><code>exec &quot;bo sp&quot; . escape(s:win_title, &apos; &apos;)\n</code></pre><h2 id=\"3-Tasklist\"><a href=\"#3-Tasklist\" class=\"headerlink\" title=\"3. Tasklist\"></a>3. Tasklist</h2><p>类似eclipse的任务列表，自动抽取文件中的FIXME、TODO、XXX或自定义关键词，并形成列表展示。</p>\n<h2 id=\"4-YankRing\"><a href=\"#4-YankRing\" class=\"headerlink\" title=\"4. YankRing\"></a>4. YankRing</h2><p>vim本身提供了最近9次删除记录，用<code>registers</code>命令可以查看，用<code>&quot;1p</code>可以粘贴最近删除内容，<code>&quot;2p</code>可以粘贴上次的删除内容。但是vim没有提供记录复制的内容，yankring则将vim中所有的改动记录下来，并提供一个列表用来粘贴想要的内容。可设置快捷键：</p>\n<pre><code>let g:yankring_enabled=1\nlet g:yankring_history_file=&apos;.yankring_history_file&apos;\nmap &lt;leader&gt;yr :YRShow&lt;cr&gt;\n</code></pre><h1 id=\"七、python相关插件\"><a href=\"#七、python相关插件\" class=\"headerlink\" title=\"七、python相关插件\"></a>七、python相关插件</h1><h2 id=\"1-Python-mode-klen\"><a href=\"#1-Python-mode-klen\" class=\"headerlink\" title=\"1. Python-mode-klen\"></a>1. Python-mode-klen</h2><p>集成了包括pylint、ropevim、pydoc、pyflakes、pep8和mccabe等插件，可以方便的进行静态检查、代码重构、折叠、补全、查看文档等等。</p>\n<h3 id=\"（1）快速浏览\"><a href=\"#（1）快速浏览\" class=\"headerlink\" title=\"（1）快速浏览\"></a>（1）快速浏览</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">快捷键</th>\n<th style=\"text-align:left\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">[[</td>\n<td style=\"text-align:left\">Jump to previous class or function (normal, visual, operator modes) </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">]]</td>\n<td style=\"text-align:left\">Jump to next class or function  (normal, visual, operator modes) </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[M</td>\n<td style=\"text-align:left\">Jump to previous class or method (normal, visual, operator modes) </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">]M</td>\n<td style=\"text-align:left\">Jump to next class or method (normal, visual, operator modes) </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">aC</td>\n<td style=\"text-align:left\">Select a class. Ex: vaC, daC, yaC, caC (normal, operator modes) </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">iC</td>\n<td style=\"text-align:left\">Select inner class. Ex: viC, diC, yiC, ciC (normal, operator modes) </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">aM</td>\n<td style=\"text-align:left\">Select a function or method. Ex: vaM, daM, yaM, caM (normal, operator modes) </td>\n</tr>\n<tr>\n<td style=\"text-align:left\">iM</td>\n<td style=\"text-align:left\">Select inner function or method. Ex: viM, diM, yiM, ciM (normal, operator modes)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"（2）查看文档\"><a href=\"#（2）查看文档\" class=\"headerlink\" title=\"（2）查看文档\"></a>（2）查看文档</h3><p>利用pydoc查看文档，快捷键K会将当前光标所在词作为关键词进行查找。</p>\n<h3 id=\"（3）运行调试\"><a href=\"#（3）运行调试\" class=\"headerlink\" title=\"（3）运行调试\"></a>（3）运行调试</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">功能</th>\n<th style=\"text-align:left\">快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">运行代码</td>\n<td style=\"text-align:left\">&lt;leader&gt;r</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">插入断点</td>\n<td style=\"text-align:left\">&lt;leader&gt;b</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"（4）代码检查\"><a href=\"#（4）代码检查\" class=\"headerlink\" title=\"（4）代码检查\"></a>（4）代码检查</h3><p>支持pylint、pep257、pep8、pyflakes、mccabe等检查器，在代码保存时自动检查，自动去除多余的空格。</p>\n<p>可以使用命令<code>:PymodeLint</code>和<code>:PymodeLintToggle</code>开启检查，用<code>:PymodeLintAuto</code>自动校正pep8格式错误。</p>\n<h3 id=\"（5）转到定义\"><a href=\"#（5）转到定义\" class=\"headerlink\" title=\"（5）转到定义\"></a>（5）转到定义</h3><p>可以查看和跳转到函数和类的定义：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">功能</th>\n<th style=\"text-align:left\">快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">转到定义</td>\n<td style=\"text-align:left\">&lt;C-c&gt;g</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">查看定义</td>\n<td style=\"text-align:left\">&lt;C-c&gt;d</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"（6）代码重构\"><a href=\"#（6）代码重构\" class=\"headerlink\" title=\"（6）代码重构\"></a>（6）代码重构</h3><p>重命名光标所在的method/function/class/variables </p>\n<pre><code>let g:pymode_rope_rename_bind = &apos;&lt;C-c&gt;rr&apos;\n</code></pre><p>重命名当前模块</p>\n<pre><code>let g:pymode_rope_rename_bind = &apos;&lt;C-c&gt;rr&apos;\n</code></pre><p>根据pep8规定重排import模块</p>\n<pre><code>let g:pymode_rope_organize_imports_bind = &apos;&lt;C-c&gt;ro&apos;\n</code></pre><p>插入当前光标所在词的模块</p>\n<pre><code>let g:pymode_rope_autoimport_bind = &apos;&lt;C-c&gt;ra&apos;\n</code></pre><p>Python-mode和neocomplcache有些重叠，且neocomplcache占用了Tab键，可以在python文件中将neocomplcache禁止，并映射python-mode的补全键为tab：</p>\n<pre><code>au filetype python let g:neocomplcache_disable_auto_complete = 1\nlet g:pymode_rope_completion_bind = &apos;&lt;tab&gt;&apos;\n</code></pre><p>Python-mode与minibufexpl配合时，当查看定义、运行测试时，缓冲区跳转得并不正确。可以将autoload/pymode目录下的相关文件中的wincmd p命令注释掉：</p>\n<ul>\n<li>rope.vim文件show_doc函数中，注释掉wincmd p，加上normal gg</li>\n<li>run.vim文件code_run函数中，注释掉wincmd p</li>\n<li>doc.vim文件show函数中，注释掉wincmd p</li>\n</ul>\n<h2 id=\"2-调试\"><a href=\"#2-调试\" class=\"headerlink\" title=\"2. 调试\"></a>2. 调试</h2><p>调试并没有找到比较好的插件，Python-mode与pdb、ipdb、pudb配合都有问题，vim-debug的界面并不十分友好，vimpdb插件也有问题。我比较喜欢pudb的调试界面，目前解决办法是映射快捷键调用pudb进行调试：</p>\n<pre><code>map &lt;F6&gt; :!pudb %&lt;CR&gt;\n</code></pre>"},{"title":"tau是什么","date":"2016-08-21T12:48:45.000Z","_content":"\nτ是希腊的第十九个字母，美国英语是tau，国际音标/tau/。\n作为理工科中常出现的符号，τ通常代表的有：\n\n - 一个时间区间；\n - 指数衰减量的平均寿命；\n - 力学中的力矩；\n - τ子，一种粒子物理中的基本粒子；\n - 自发发射过程的寿命；\n - RC电路的时间常数；\n - 相对论中的原时；\n - 黄金分割率0.618；\n - 数论中的拉马努金τ函数；\n - 天文学中，透明度的衡量，或者说，有多少阳光不能穿透大气；\n - 表示论中的缠结算子；\n - Tau 蛋白，一种与微管结合的蛋白；\n - 连续介质力学中的剪应力；\n - 高欧拉商数的除数个数（OEIS中的数列A000005）；\n - 类型论中的类型变量，如简单类型λ演算；\n - 拓扑学中一个指定的拓扑；\n - 圆周率的2倍（2π），即圆的周长与半径之比。\n\n尤其是最后一条，数学界已有争论，其实真正的圆周率应该为τ，这样各种公式将变得更加优美、更加符合直观理解（具体可移步[http://www.guokr.com/article/58678/][1]）\n\nSo, please call me tau.\n\n\n  [1]: http://www.guokr.com/article/58678/\n\n\n","source":"_posts/2016-08-21-what-is-tau.md","raw":"---\ntitle: tau是什么\ndate: 2016-08-21 20:48:45\ncategories: 聊点感想\ntags: tau\n---\n\nτ是希腊的第十九个字母，美国英语是tau，国际音标/tau/。\n作为理工科中常出现的符号，τ通常代表的有：\n\n - 一个时间区间；\n - 指数衰减量的平均寿命；\n - 力学中的力矩；\n - τ子，一种粒子物理中的基本粒子；\n - 自发发射过程的寿命；\n - RC电路的时间常数；\n - 相对论中的原时；\n - 黄金分割率0.618；\n - 数论中的拉马努金τ函数；\n - 天文学中，透明度的衡量，或者说，有多少阳光不能穿透大气；\n - 表示论中的缠结算子；\n - Tau 蛋白，一种与微管结合的蛋白；\n - 连续介质力学中的剪应力；\n - 高欧拉商数的除数个数（OEIS中的数列A000005）；\n - 类型论中的类型变量，如简单类型λ演算；\n - 拓扑学中一个指定的拓扑；\n - 圆周率的2倍（2π），即圆的周长与半径之比。\n\n尤其是最后一条，数学界已有争论，其实真正的圆周率应该为τ，这样各种公式将变得更加优美、更加符合直观理解（具体可移步[http://www.guokr.com/article/58678/][1]）\n\nSo, please call me tau.\n\n\n  [1]: http://www.guokr.com/article/58678/\n\n\n","slug":"what-is-tau","published":1,"updated":"2017-12-17T03:34:02.932Z","_id":"cjb6k4kw3000qulepuz2p086e","comments":1,"layout":"post","photos":[],"link":"","content":"<p>τ是希腊的第十九个字母，美国英语是tau，国际音标/tau/。<br>作为理工科中常出现的符号，τ通常代表的有：</p>\n<ul>\n<li>一个时间区间；</li>\n<li>指数衰减量的平均寿命；</li>\n<li>力学中的力矩；</li>\n<li>τ子，一种粒子物理中的基本粒子；</li>\n<li>自发发射过程的寿命；</li>\n<li>RC电路的时间常数；</li>\n<li>相对论中的原时；</li>\n<li>黄金分割率0.618；</li>\n<li>数论中的拉马努金τ函数；</li>\n<li>天文学中，透明度的衡量，或者说，有多少阳光不能穿透大气；</li>\n<li>表示论中的缠结算子；</li>\n<li>Tau 蛋白，一种与微管结合的蛋白；</li>\n<li>连续介质力学中的剪应力；</li>\n<li>高欧拉商数的除数个数（OEIS中的数列A000005）；</li>\n<li>类型论中的类型变量，如简单类型λ演算；</li>\n<li>拓扑学中一个指定的拓扑；</li>\n<li>圆周率的2倍（2π），即圆的周长与半径之比。</li>\n</ul>\n<p>尤其是最后一条，数学界已有争论，其实真正的圆周率应该为τ，这样各种公式将变得更加优美、更加符合直观理解（具体可移步<a href=\"http://www.guokr.com/article/58678/\" target=\"_blank\" rel=\"noopener\">http://www.guokr.com/article/58678/</a>）</p>\n<p>So, please call me tau.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>τ是希腊的第十九个字母，美国英语是tau，国际音标/tau/。<br>作为理工科中常出现的符号，τ通常代表的有：</p>\n<ul>\n<li>一个时间区间；</li>\n<li>指数衰减量的平均寿命；</li>\n<li>力学中的力矩；</li>\n<li>τ子，一种粒子物理中的基本粒子；</li>\n<li>自发发射过程的寿命；</li>\n<li>RC电路的时间常数；</li>\n<li>相对论中的原时；</li>\n<li>黄金分割率0.618；</li>\n<li>数论中的拉马努金τ函数；</li>\n<li>天文学中，透明度的衡量，或者说，有多少阳光不能穿透大气；</li>\n<li>表示论中的缠结算子；</li>\n<li>Tau 蛋白，一种与微管结合的蛋白；</li>\n<li>连续介质力学中的剪应力；</li>\n<li>高欧拉商数的除数个数（OEIS中的数列A000005）；</li>\n<li>类型论中的类型变量，如简单类型λ演算；</li>\n<li>拓扑学中一个指定的拓扑；</li>\n<li>圆周率的2倍（2π），即圆的周长与半径之比。</li>\n</ul>\n<p>尤其是最后一条，数学界已有争论，其实真正的圆周率应该为τ，这样各种公式将变得更加优美、更加符合直观理解（具体可移步<a href=\"http://www.guokr.com/article/58678/\" target=\"_blank\" rel=\"noopener\">http://www.guokr.com/article/58678/</a>）</p>\n<p>So, please call me tau.</p>\n"},{"title":"WiFi密码破解笔记","date":"2016-08-21T15:32:38.000Z","_content":"\nWiFi常用的安全机制有三种：WEP、WPA、WPA2。\n\n由于存在协议漏洞，WEP只要抓取到足够多的初始向量数据包（一般2w个），即可实现完全破解，这类的工具非常多。\n\nWPA和WPA2则相对安全得多，目前破解的思路有两种：\n\n<!-- more -->\n\n## 1. 字典攻击：\n\n获取客户端和路由器之间得握手协议包，采用字典攻击的方式暴力破解密码。\n\n当采用一些简单的生日、单词、电话号码作为密码时，很容易实现破解，网上已有相关字典。若采用稍微复杂的密码，如密码采用8位大小写字母和数字混合，在运算速度为500K个/秒时，暴力破解需要时间14年（暴力破解时间可参考  [http://lastbit.com/pswcalc.asp][1] ）。\n\nWPA/WPA2密码支持8-63位，如果设置较长较复杂的密码，字典攻击破解难度将很大。\n字典攻击方法需要两步，一是抓取握手协议包，二是穷举字典破解。\n\n常用的工具：\n* 开源工具aircrack-ng（[http://www.aircrack-ng.org/][2]），包括了无线抓包和密码破解程序\n* 抓包工具Omnipeek（[http://www.wildpackets.com/products/omnipeek_network_analyzer][3]）\n* 国产软件无线网络分析软件科来（[http://www.colasoft.com.cn/download/capsa.php][4]）\n* 密码计算软件ewsa（[http://cn.elcomsoft.com/ewsa.html][5]）优势是可以用GPU加速密码破解过程\n\n网上有很多公开的字典库，直接搜索即可下载。还有一些字典生成器，如黑刀、万能钥匙、木头字典生成器等等。\n\n## 2. WPS攻击：\n\n当路由器开启了WPS功能，可采用WPS攻击，破解路由器PIN码，从而获得其密码。\n\n采用字典攻击的方式无疑是一种效率很低的方法，如果没有估计到别人的密码模式，要破解是十分困难的。现在很多路由器开启了WPS，通过攻击路由器PIN码这种方式可以将破解效率大大提高。路由器PIN码只有8位，破解时可分为前后4位分别破解，只需要11000次的尝试即可实现破解（每次尝试可能需要数秒，视信号强度和路由器而定）。一旦已知PIN码，就可立即计算出WiFi密码。即使更换了WiFi密码，只要PIN码不变，也能立刻算出密码。\n\n主要工具为：\n* Reaver（WPS Cracker，[http://code.google.com/p/reaver-wps/][6]）\n\n---------------\nWiFi密码破解的方法就是这些，总的来说，要保证WiFi的足够安全，原则就是：关闭WEP，关闭WPS，使用WPA2，提高密码强度。\n\n现在有一些系统把WiFi破解的工具进行了集成，并做了图形化界面方便使用，比如XiaoPanOS、CDLinux、Beini等。这些系统镜像都比较小，可以直接烧制在U盘上随身携带，以后到了其他地方，就不愁没有WiFi了。：）\n\n\n  [1]: http://lastbit.com/pswcalc.asp\n  [2]: http://www.aircrack-ng.org/\n  [3]: http://www.wildpackets.com/products/omnipeek_network_analyzer\n  [4]: http://www.colasoft.com.cn/download/capsa.php\n  [5]: http://cn.elcomsoft.com/ewsa.html\n  [6]: http://code.google.com/p/reaver-wps/\n\n\n","source":"_posts/2016-08-21-wifi-crack.md","raw":"---\ntitle: WiFi密码破解笔记\ndate: 2016-08-21 23:32:38\ncategories: 弄点工具\ntags:\n  - WiFi\n  - crack\n---\n\nWiFi常用的安全机制有三种：WEP、WPA、WPA2。\n\n由于存在协议漏洞，WEP只要抓取到足够多的初始向量数据包（一般2w个），即可实现完全破解，这类的工具非常多。\n\nWPA和WPA2则相对安全得多，目前破解的思路有两种：\n\n<!-- more -->\n\n## 1. 字典攻击：\n\n获取客户端和路由器之间得握手协议包，采用字典攻击的方式暴力破解密码。\n\n当采用一些简单的生日、单词、电话号码作为密码时，很容易实现破解，网上已有相关字典。若采用稍微复杂的密码，如密码采用8位大小写字母和数字混合，在运算速度为500K个/秒时，暴力破解需要时间14年（暴力破解时间可参考  [http://lastbit.com/pswcalc.asp][1] ）。\n\nWPA/WPA2密码支持8-63位，如果设置较长较复杂的密码，字典攻击破解难度将很大。\n字典攻击方法需要两步，一是抓取握手协议包，二是穷举字典破解。\n\n常用的工具：\n* 开源工具aircrack-ng（[http://www.aircrack-ng.org/][2]），包括了无线抓包和密码破解程序\n* 抓包工具Omnipeek（[http://www.wildpackets.com/products/omnipeek_network_analyzer][3]）\n* 国产软件无线网络分析软件科来（[http://www.colasoft.com.cn/download/capsa.php][4]）\n* 密码计算软件ewsa（[http://cn.elcomsoft.com/ewsa.html][5]）优势是可以用GPU加速密码破解过程\n\n网上有很多公开的字典库，直接搜索即可下载。还有一些字典生成器，如黑刀、万能钥匙、木头字典生成器等等。\n\n## 2. WPS攻击：\n\n当路由器开启了WPS功能，可采用WPS攻击，破解路由器PIN码，从而获得其密码。\n\n采用字典攻击的方式无疑是一种效率很低的方法，如果没有估计到别人的密码模式，要破解是十分困难的。现在很多路由器开启了WPS，通过攻击路由器PIN码这种方式可以将破解效率大大提高。路由器PIN码只有8位，破解时可分为前后4位分别破解，只需要11000次的尝试即可实现破解（每次尝试可能需要数秒，视信号强度和路由器而定）。一旦已知PIN码，就可立即计算出WiFi密码。即使更换了WiFi密码，只要PIN码不变，也能立刻算出密码。\n\n主要工具为：\n* Reaver（WPS Cracker，[http://code.google.com/p/reaver-wps/][6]）\n\n---------------\nWiFi密码破解的方法就是这些，总的来说，要保证WiFi的足够安全，原则就是：关闭WEP，关闭WPS，使用WPA2，提高密码强度。\n\n现在有一些系统把WiFi破解的工具进行了集成，并做了图形化界面方便使用，比如XiaoPanOS、CDLinux、Beini等。这些系统镜像都比较小，可以直接烧制在U盘上随身携带，以后到了其他地方，就不愁没有WiFi了。：）\n\n\n  [1]: http://lastbit.com/pswcalc.asp\n  [2]: http://www.aircrack-ng.org/\n  [3]: http://www.wildpackets.com/products/omnipeek_network_analyzer\n  [4]: http://www.colasoft.com.cn/download/capsa.php\n  [5]: http://cn.elcomsoft.com/ewsa.html\n  [6]: http://code.google.com/p/reaver-wps/\n\n\n","slug":"wifi-crack","published":1,"updated":"2017-12-17T03:30:08.323Z","_id":"cjb6k4kw6000tulepemast2l7","comments":1,"layout":"post","photos":[],"link":"","content":"<p>WiFi常用的安全机制有三种：WEP、WPA、WPA2。</p>\n<p>由于存在协议漏洞，WEP只要抓取到足够多的初始向量数据包（一般2w个），即可实现完全破解，这类的工具非常多。</p>\n<p>WPA和WPA2则相对安全得多，目前破解的思路有两种：</p>\n<a id=\"more\"></a>\n<h2 id=\"1-字典攻击：\"><a href=\"#1-字典攻击：\" class=\"headerlink\" title=\"1. 字典攻击：\"></a>1. 字典攻击：</h2><p>获取客户端和路由器之间得握手协议包，采用字典攻击的方式暴力破解密码。</p>\n<p>当采用一些简单的生日、单词、电话号码作为密码时，很容易实现破解，网上已有相关字典。若采用稍微复杂的密码，如密码采用8位大小写字母和数字混合，在运算速度为500K个/秒时，暴力破解需要时间14年（暴力破解时间可参考  <a href=\"http://lastbit.com/pswcalc.asp\" target=\"_blank\" rel=\"noopener\">http://lastbit.com/pswcalc.asp</a> ）。</p>\n<p>WPA/WPA2密码支持8-63位，如果设置较长较复杂的密码，字典攻击破解难度将很大。<br>字典攻击方法需要两步，一是抓取握手协议包，二是穷举字典破解。</p>\n<p>常用的工具：</p>\n<ul>\n<li>开源工具aircrack-ng（<a href=\"http://www.aircrack-ng.org/\" target=\"_blank\" rel=\"noopener\">http://www.aircrack-ng.org/</a>），包括了无线抓包和密码破解程序</li>\n<li>抓包工具Omnipeek（<a href=\"http://www.wildpackets.com/products/omnipeek_network_analyzer\" target=\"_blank\" rel=\"noopener\">http://www.wildpackets.com/products/omnipeek_network_analyzer</a>）</li>\n<li>国产软件无线网络分析软件科来（<a href=\"http://www.colasoft.com.cn/download/capsa.php\" target=\"_blank\" rel=\"noopener\">http://www.colasoft.com.cn/download/capsa.php</a>）</li>\n<li>密码计算软件ewsa（<a href=\"http://cn.elcomsoft.com/ewsa.html\" target=\"_blank\" rel=\"noopener\">http://cn.elcomsoft.com/ewsa.html</a>）优势是可以用GPU加速密码破解过程</li>\n</ul>\n<p>网上有很多公开的字典库，直接搜索即可下载。还有一些字典生成器，如黑刀、万能钥匙、木头字典生成器等等。</p>\n<h2 id=\"2-WPS攻击：\"><a href=\"#2-WPS攻击：\" class=\"headerlink\" title=\"2. WPS攻击：\"></a>2. WPS攻击：</h2><p>当路由器开启了WPS功能，可采用WPS攻击，破解路由器PIN码，从而获得其密码。</p>\n<p>采用字典攻击的方式无疑是一种效率很低的方法，如果没有估计到别人的密码模式，要破解是十分困难的。现在很多路由器开启了WPS，通过攻击路由器PIN码这种方式可以将破解效率大大提高。路由器PIN码只有8位，破解时可分为前后4位分别破解，只需要11000次的尝试即可实现破解（每次尝试可能需要数秒，视信号强度和路由器而定）。一旦已知PIN码，就可立即计算出WiFi密码。即使更换了WiFi密码，只要PIN码不变，也能立刻算出密码。</p>\n<p>主要工具为：</p>\n<ul>\n<li>Reaver（WPS Cracker，<a href=\"http://code.google.com/p/reaver-wps/\" target=\"_blank\" rel=\"noopener\">http://code.google.com/p/reaver-wps/</a>）</li>\n</ul>\n<hr>\n<p>WiFi密码破解的方法就是这些，总的来说，要保证WiFi的足够安全，原则就是：关闭WEP，关闭WPS，使用WPA2，提高密码强度。</p>\n<p>现在有一些系统把WiFi破解的工具进行了集成，并做了图形化界面方便使用，比如XiaoPanOS、CDLinux、Beini等。这些系统镜像都比较小，可以直接烧制在U盘上随身携带，以后到了其他地方，就不愁没有WiFi了。：）</p>\n","site":{"data":{}},"excerpt":"<p>WiFi常用的安全机制有三种：WEP、WPA、WPA2。</p>\n<p>由于存在协议漏洞，WEP只要抓取到足够多的初始向量数据包（一般2w个），即可实现完全破解，这类的工具非常多。</p>\n<p>WPA和WPA2则相对安全得多，目前破解的思路有两种：</p>","more":"<h2 id=\"1-字典攻击：\"><a href=\"#1-字典攻击：\" class=\"headerlink\" title=\"1. 字典攻击：\"></a>1. 字典攻击：</h2><p>获取客户端和路由器之间得握手协议包，采用字典攻击的方式暴力破解密码。</p>\n<p>当采用一些简单的生日、单词、电话号码作为密码时，很容易实现破解，网上已有相关字典。若采用稍微复杂的密码，如密码采用8位大小写字母和数字混合，在运算速度为500K个/秒时，暴力破解需要时间14年（暴力破解时间可参考  <a href=\"http://lastbit.com/pswcalc.asp\" target=\"_blank\" rel=\"noopener\">http://lastbit.com/pswcalc.asp</a> ）。</p>\n<p>WPA/WPA2密码支持8-63位，如果设置较长较复杂的密码，字典攻击破解难度将很大。<br>字典攻击方法需要两步，一是抓取握手协议包，二是穷举字典破解。</p>\n<p>常用的工具：</p>\n<ul>\n<li>开源工具aircrack-ng（<a href=\"http://www.aircrack-ng.org/\" target=\"_blank\" rel=\"noopener\">http://www.aircrack-ng.org/</a>），包括了无线抓包和密码破解程序</li>\n<li>抓包工具Omnipeek（<a href=\"http://www.wildpackets.com/products/omnipeek_network_analyzer\" target=\"_blank\" rel=\"noopener\">http://www.wildpackets.com/products/omnipeek_network_analyzer</a>）</li>\n<li>国产软件无线网络分析软件科来（<a href=\"http://www.colasoft.com.cn/download/capsa.php\" target=\"_blank\" rel=\"noopener\">http://www.colasoft.com.cn/download/capsa.php</a>）</li>\n<li>密码计算软件ewsa（<a href=\"http://cn.elcomsoft.com/ewsa.html\" target=\"_blank\" rel=\"noopener\">http://cn.elcomsoft.com/ewsa.html</a>）优势是可以用GPU加速密码破解过程</li>\n</ul>\n<p>网上有很多公开的字典库，直接搜索即可下载。还有一些字典生成器，如黑刀、万能钥匙、木头字典生成器等等。</p>\n<h2 id=\"2-WPS攻击：\"><a href=\"#2-WPS攻击：\" class=\"headerlink\" title=\"2. WPS攻击：\"></a>2. WPS攻击：</h2><p>当路由器开启了WPS功能，可采用WPS攻击，破解路由器PIN码，从而获得其密码。</p>\n<p>采用字典攻击的方式无疑是一种效率很低的方法，如果没有估计到别人的密码模式，要破解是十分困难的。现在很多路由器开启了WPS，通过攻击路由器PIN码这种方式可以将破解效率大大提高。路由器PIN码只有8位，破解时可分为前后4位分别破解，只需要11000次的尝试即可实现破解（每次尝试可能需要数秒，视信号强度和路由器而定）。一旦已知PIN码，就可立即计算出WiFi密码。即使更换了WiFi密码，只要PIN码不变，也能立刻算出密码。</p>\n<p>主要工具为：</p>\n<ul>\n<li>Reaver（WPS Cracker，<a href=\"http://code.google.com/p/reaver-wps/\" target=\"_blank\" rel=\"noopener\">http://code.google.com/p/reaver-wps/</a>）</li>\n</ul>\n<hr>\n<p>WiFi密码破解的方法就是这些，总的来说，要保证WiFi的足够安全，原则就是：关闭WEP，关闭WPS，使用WPA2，提高密码强度。</p>\n<p>现在有一些系统把WiFi破解的工具进行了集成，并做了图形化界面方便使用，比如XiaoPanOS、CDLinux、Beini等。这些系统镜像都比较小，可以直接烧制在U盘上随身携带，以后到了其他地方，就不愁没有WiFi了。：）</p>"},{"title":"在小米路由器mini上实现去广告","date":"2016-08-21T15:31:01.000Z","_content":"\n所谓去广告，指的是去掉网页上弹出的乱七八糟的广告，还有视频网站播放前的广告。常见的几款去广告软件包括：\n1. ADSafe：目前支持Windows和Android，去除效果还不错。\n2. AD Muncher（奶牛）：老牌的广告去除软件，原来收费，现在已免费，仅支持Windows。\n3. bloxy（保护伞）：仅支持Windows。\n4. adbyby：目前支持平台最全的，包括Windows、Linux、Mac、Openwrt。\n5. ADMon：目前支持Windows平台。\n6. Adblock：浏览器插件，也就是只能在浏览器上使用。\n\n对于非插件的去广告软件来讲，其原理是用带过滤功能的开源代理服务器privoxy加上Adblock-Easylist China及Easylist的开源广告规则库来实现的，通过正则表达式和CSS进行过滤。\n\n在路由器上部署是最理想的，这样所有的设备都能共享了，这么看来只有用adbyby了。\n\n小米路由器mini开通ssh后就可以干活了，用scp把下载的adbyby传到/tmp目录下，修改配置文件adhook.ini中扩展规则为 https://easylist-downloads.adblockplus.org/easylistchina+easylist.txt 即可。\n\n广告无踪影，生活顿时又美好了一点点！\n","source":"_posts/2016-08-21-xiaomi-mini.md","raw":"---\ntitle: 在小米路由器mini上实现去广告\ndate: 2016-08-21 23:31:01\ncategories: 弄点工具\ntags:\n  - 小米路由器\n  - 去广告\n---\n\n所谓去广告，指的是去掉网页上弹出的乱七八糟的广告，还有视频网站播放前的广告。常见的几款去广告软件包括：\n1. ADSafe：目前支持Windows和Android，去除效果还不错。\n2. AD Muncher（奶牛）：老牌的广告去除软件，原来收费，现在已免费，仅支持Windows。\n3. bloxy（保护伞）：仅支持Windows。\n4. adbyby：目前支持平台最全的，包括Windows、Linux、Mac、Openwrt。\n5. ADMon：目前支持Windows平台。\n6. Adblock：浏览器插件，也就是只能在浏览器上使用。\n\n对于非插件的去广告软件来讲，其原理是用带过滤功能的开源代理服务器privoxy加上Adblock-Easylist China及Easylist的开源广告规则库来实现的，通过正则表达式和CSS进行过滤。\n\n在路由器上部署是最理想的，这样所有的设备都能共享了，这么看来只有用adbyby了。\n\n小米路由器mini开通ssh后就可以干活了，用scp把下载的adbyby传到/tmp目录下，修改配置文件adhook.ini中扩展规则为 https://easylist-downloads.adblockplus.org/easylistchina+easylist.txt 即可。\n\n广告无踪影，生活顿时又美好了一点点！\n","slug":"xiaomi-mini","published":1,"updated":"2016-08-27T09:17:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb6k4kw8000wulepwop27ri8","content":"<p>所谓去广告，指的是去掉网页上弹出的乱七八糟的广告，还有视频网站播放前的广告。常见的几款去广告软件包括：</p>\n<ol>\n<li>ADSafe：目前支持Windows和Android，去除效果还不错。</li>\n<li>AD Muncher（奶牛）：老牌的广告去除软件，原来收费，现在已免费，仅支持Windows。</li>\n<li>bloxy（保护伞）：仅支持Windows。</li>\n<li>adbyby：目前支持平台最全的，包括Windows、Linux、Mac、Openwrt。</li>\n<li>ADMon：目前支持Windows平台。</li>\n<li>Adblock：浏览器插件，也就是只能在浏览器上使用。</li>\n</ol>\n<p>对于非插件的去广告软件来讲，其原理是用带过滤功能的开源代理服务器privoxy加上Adblock-Easylist China及Easylist的开源广告规则库来实现的，通过正则表达式和CSS进行过滤。</p>\n<p>在路由器上部署是最理想的，这样所有的设备都能共享了，这么看来只有用adbyby了。</p>\n<p>小米路由器mini开通ssh后就可以干活了，用scp把下载的adbyby传到/tmp目录下，修改配置文件adhook.ini中扩展规则为 <a href=\"https://easylist-downloads.adblockplus.org/easylistchina+easylist.txt\" target=\"_blank\" rel=\"noopener\">https://easylist-downloads.adblockplus.org/easylistchina+easylist.txt</a> 即可。</p>\n<p>广告无踪影，生活顿时又美好了一点点！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>所谓去广告，指的是去掉网页上弹出的乱七八糟的广告，还有视频网站播放前的广告。常见的几款去广告软件包括：</p>\n<ol>\n<li>ADSafe：目前支持Windows和Android，去除效果还不错。</li>\n<li>AD Muncher（奶牛）：老牌的广告去除软件，原来收费，现在已免费，仅支持Windows。</li>\n<li>bloxy（保护伞）：仅支持Windows。</li>\n<li>adbyby：目前支持平台最全的，包括Windows、Linux、Mac、Openwrt。</li>\n<li>ADMon：目前支持Windows平台。</li>\n<li>Adblock：浏览器插件，也就是只能在浏览器上使用。</li>\n</ol>\n<p>对于非插件的去广告软件来讲，其原理是用带过滤功能的开源代理服务器privoxy加上Adblock-Easylist China及Easylist的开源广告规则库来实现的，通过正则表达式和CSS进行过滤。</p>\n<p>在路由器上部署是最理想的，这样所有的设备都能共享了，这么看来只有用adbyby了。</p>\n<p>小米路由器mini开通ssh后就可以干活了，用scp把下载的adbyby传到/tmp目录下，修改配置文件adhook.ini中扩展规则为 <a href=\"https://easylist-downloads.adblockplus.org/easylistchina+easylist.txt\" target=\"_blank\" rel=\"noopener\">https://easylist-downloads.adblockplus.org/easylistchina+easylist.txt</a> 即可。</p>\n<p>广告无踪影，生活顿时又美好了一点点！</p>\n"},{"title":"房产投资收益计算","date":"2016-08-25T10:36:44.000Z","_content":"\n假设当前房产价格为$V$，首付款为$P$，需要贷款$D=V-P$，贷款利率为$d\\%$（月利率为$\\beta=d\\%/12$），贷款年限为$N$个月，贷款方式为等额本息。\n\n# 问题一\n如果在第$M$个月时出售房产，出售价格为$V'$，该套房产的收益为多少？\n\n<!-- more -->\n\n## 贷款利息计算\n每个月需要还款为\n$$x=D\\cdot \\beta \\cdot \\frac{(1+\\beta)^N}{(1+\\beta)^N-1}$$\n第$n$个月需要还的利息为\n$$x_n=D\\cdot \\beta \\cdot (1+\\beta)^{n-1} - x \\cdot [(1+\\beta)^{n-1}-1],n=1,2,\\dots,N$$\n总共需要支付利息\n$$X = x\\cdot N-D$$\n\n## 房产持有成本\n若购买房产需要的手续费为$F$，在购入房产后，第$m$个月我们所用掉的成本为\n$$A_m=P+F+x\\cdot (m-1)$$\n还欠银行的钱为\n$$B_m=D \\cdot (1+\\beta)^{m-1} - x \\cdot [(1+\\beta)^{m-1}-1]/\\beta$$\n即，此时的持有成本为\n$$C_m=A_m+B_m$$\n\n## 房产收益\n在第$m$个月时，房产以价格$Q_m$出售，利润为$E_m=Q_m-C_m$。\n\n假设房价每年的上涨幅度为$q\\%$（月涨幅$\\gamma=q\\%/12$），则第$m$个月时，房价为\n$$\nQ_m=V\\cdot(1+\\gamma)^m\n$$\n\n## 例子\n假设购买房产时的条件如下表所示：\n\n| 变量   | 值     |\n| :--- | :---- |\n| 房产价格 | 430万元 |\n| 首付款  | 30%   |\n| 贷款   | 70%   |\n| 利率   | 4.9%  |\n| 贷款期数 | 360   |\n| 契税   | 1.5%  |\n| 增值税  | 5%    |\n| 中介费  | 1%    |\n\n那么，画出房产持有成本随月数的曲线如下图所示：\n![房产持有成本曲线][1]\n\n假设房价每年的上涨幅度为$6\\%$，画出房价随月数的变化曲线如下图所示\n![房价上涨曲线][2]\n\n对应至每一年的持有成本如下表所示，在相应的时间点将售价减去持有成本即为得到的收益。\n\n|年数|持有成本(万元)|收益（万元）\n|:----|:----|:---|\n|0|452.95|-20.8|\n|1|467.59|-8.794|\n|2|482.02|5.0819|\n|3|496.20|20.941|\n|4|510.13|38.904|\n|5|523.80|59.096|\n|6|537.20|81.652|\n|7|550.31|106.71|\n|8|563.11|134.43|\n|9|575.59|164.97|\n|10|587.74|198.50|\n|11|599.54|235.20|\n|12|610.97|275.26|\n|13|622.00|318.88|\n|14|632.64|366.28|\n|15|642.84|417.69|\n|16|652.59|473.34|\n|17|661.88|533.51|\n|18|670.66|598.45|\n|19|678.93|668.46|\n|20|686.65|743.84|\n|21|693.80|824.93|\n|22|700.34|912.06|\n|23|706.25|1005.5|\n|24|711.50|1105.9|\n|25|716.05|1213.4|\n|26|719.87|1328.6|\n|27|722.91|1451.9|\n|28|725.15|1583.8|\n|29|726.54|1724.9|\n\n| 30   | 727.04 | 1875.6 |\n| ---- | ------ | ------ |\n|      |        |        |\n\n# 问题二\n如果将首付款、手续费以及月供用于理财，这种方式是否会比购买房产更划算？\n\n## 理财总收入\n假设投资理财的年收益率为$p\\%$（月利率为$\\alpha=p\\%/12$），那么，第m个月的投资理财总收入为\n$$\n\\begin{align}\nL_m &=(P+F)\\cdot(1+\\alpha)^m+x\\cdot (1+\\alpha)^{m-1}+\\cdots+x\\\\\\\\\n&=(P+F)\\cdot(1+\\alpha)^m+x\\cdot\\frac{(1+\\alpha)^m-1}{\\alpha}\n\\end{align}\n$$\n\n## 理财收益\n在第m个月，投资理财的利润为$L_m-A_m$。\n\n## 例子\n以上一节中的数据为例，假设投资理财的年收益率为6%，那么投资理财收入如下图所示\n![投资理财收入][3]\n\n具体到每一年，投资理财所得收入及相应的利润为\n\n| 月数   | 收入（万元） | 利润（万元） |\n| :--- | :----- | :----- |\n| 0    | 154.30 | 2.3572 |\n| 1    | 183.53 | 12.410 |\n| 2    | 214.55 | 24.266 |\n| 3    | 247.49 | 38.035 |\n| 4    | 282.46 | 53.836 |\n| 5    | 319.59 | 71.794 |\n| 6    | 359.01 | 92.042 |\n| 7    | 400.86 | 114.72 |\n| 8    | 445.29 | 139.98 |\n| 9    | 492.46 | 167.98 |\n| 10   | 542.54 | 198.89 |\n| 11   | 595.70 | 232.89 |\n| 12   | 652.15 | 270.16 |\n| 13   | 712.08 | 310.92 |\n| 14   | 775.71 | 355.38 |\n| 15   | 843.26 | 403.76 |\n| 16   | 914.98 | 456.31 |\n| 17   | 991.12 | 513.28 |\n| 18   | 1071.9 | 574.94 |\n| 19   | 1157.7 | 641.60 |\n| 20   | 1248.8 | 713.54 |\n| 21   | 1345.6 | 791.11 |\n| 22   | 1448.3 | 874.64 |\n| 23   | 1557.3 | 964.50 |\n| 24   | 1673.1 | 1061.0 |\n| 25   | 1796.0 | 1164.8 |\n| 26   | 1926.5 | 1276.1 |\n| 27   | 2065.0 | 1395.4 |\n| 28   | 2212.1 | 1523.4 |\n| 29   | 2368.2 | 1660.3 |\n| 30   | 2534.0 | 1806.9 |\n\n\n## 结论\n从上述例子可以得出一个初步结论：当房价上涨速度与投资理财收益率相同时，我们获得的利润是差不多的。但是，考虑到房子的居住属性和其带来的心理作用，投资房产似乎更划算一些。此外，由于没有考虑到房子的损耗等因素，可能还需要更精确的计算。\n\n\n[1]: http://oc7urqs4c.bkt.clouddn.com/house_money.png\n[2]: http://oc7urqs4c.bkt.clouddn.com/price-money.png\n[3]: http://oc7urqs4c.bkt.clouddn.com/fin_money.png\n\n\n","source":"_posts/2016-08-25-house-money.md","raw":"---\ntitle: 房产投资收益计算\ndate: 2016-08-25 18:36:44\ncategories: 聊点感想\ntags:\n  - house\n---\n\n假设当前房产价格为$V$，首付款为$P$，需要贷款$D=V-P$，贷款利率为$d\\%$（月利率为$\\beta=d\\%/12$），贷款年限为$N$个月，贷款方式为等额本息。\n\n# 问题一\n如果在第$M$个月时出售房产，出售价格为$V'$，该套房产的收益为多少？\n\n<!-- more -->\n\n## 贷款利息计算\n每个月需要还款为\n$$x=D\\cdot \\beta \\cdot \\frac{(1+\\beta)^N}{(1+\\beta)^N-1}$$\n第$n$个月需要还的利息为\n$$x_n=D\\cdot \\beta \\cdot (1+\\beta)^{n-1} - x \\cdot [(1+\\beta)^{n-1}-1],n=1,2,\\dots,N$$\n总共需要支付利息\n$$X = x\\cdot N-D$$\n\n## 房产持有成本\n若购买房产需要的手续费为$F$，在购入房产后，第$m$个月我们所用掉的成本为\n$$A_m=P+F+x\\cdot (m-1)$$\n还欠银行的钱为\n$$B_m=D \\cdot (1+\\beta)^{m-1} - x \\cdot [(1+\\beta)^{m-1}-1]/\\beta$$\n即，此时的持有成本为\n$$C_m=A_m+B_m$$\n\n## 房产收益\n在第$m$个月时，房产以价格$Q_m$出售，利润为$E_m=Q_m-C_m$。\n\n假设房价每年的上涨幅度为$q\\%$（月涨幅$\\gamma=q\\%/12$），则第$m$个月时，房价为\n$$\nQ_m=V\\cdot(1+\\gamma)^m\n$$\n\n## 例子\n假设购买房产时的条件如下表所示：\n\n| 变量   | 值     |\n| :--- | :---- |\n| 房产价格 | 430万元 |\n| 首付款  | 30%   |\n| 贷款   | 70%   |\n| 利率   | 4.9%  |\n| 贷款期数 | 360   |\n| 契税   | 1.5%  |\n| 增值税  | 5%    |\n| 中介费  | 1%    |\n\n那么，画出房产持有成本随月数的曲线如下图所示：\n![房产持有成本曲线][1]\n\n假设房价每年的上涨幅度为$6\\%$，画出房价随月数的变化曲线如下图所示\n![房价上涨曲线][2]\n\n对应至每一年的持有成本如下表所示，在相应的时间点将售价减去持有成本即为得到的收益。\n\n|年数|持有成本(万元)|收益（万元）\n|:----|:----|:---|\n|0|452.95|-20.8|\n|1|467.59|-8.794|\n|2|482.02|5.0819|\n|3|496.20|20.941|\n|4|510.13|38.904|\n|5|523.80|59.096|\n|6|537.20|81.652|\n|7|550.31|106.71|\n|8|563.11|134.43|\n|9|575.59|164.97|\n|10|587.74|198.50|\n|11|599.54|235.20|\n|12|610.97|275.26|\n|13|622.00|318.88|\n|14|632.64|366.28|\n|15|642.84|417.69|\n|16|652.59|473.34|\n|17|661.88|533.51|\n|18|670.66|598.45|\n|19|678.93|668.46|\n|20|686.65|743.84|\n|21|693.80|824.93|\n|22|700.34|912.06|\n|23|706.25|1005.5|\n|24|711.50|1105.9|\n|25|716.05|1213.4|\n|26|719.87|1328.6|\n|27|722.91|1451.9|\n|28|725.15|1583.8|\n|29|726.54|1724.9|\n\n| 30   | 727.04 | 1875.6 |\n| ---- | ------ | ------ |\n|      |        |        |\n\n# 问题二\n如果将首付款、手续费以及月供用于理财，这种方式是否会比购买房产更划算？\n\n## 理财总收入\n假设投资理财的年收益率为$p\\%$（月利率为$\\alpha=p\\%/12$），那么，第m个月的投资理财总收入为\n$$\n\\begin{align}\nL_m &=(P+F)\\cdot(1+\\alpha)^m+x\\cdot (1+\\alpha)^{m-1}+\\cdots+x\\\\\\\\\n&=(P+F)\\cdot(1+\\alpha)^m+x\\cdot\\frac{(1+\\alpha)^m-1}{\\alpha}\n\\end{align}\n$$\n\n## 理财收益\n在第m个月，投资理财的利润为$L_m-A_m$。\n\n## 例子\n以上一节中的数据为例，假设投资理财的年收益率为6%，那么投资理财收入如下图所示\n![投资理财收入][3]\n\n具体到每一年，投资理财所得收入及相应的利润为\n\n| 月数   | 收入（万元） | 利润（万元） |\n| :--- | :----- | :----- |\n| 0    | 154.30 | 2.3572 |\n| 1    | 183.53 | 12.410 |\n| 2    | 214.55 | 24.266 |\n| 3    | 247.49 | 38.035 |\n| 4    | 282.46 | 53.836 |\n| 5    | 319.59 | 71.794 |\n| 6    | 359.01 | 92.042 |\n| 7    | 400.86 | 114.72 |\n| 8    | 445.29 | 139.98 |\n| 9    | 492.46 | 167.98 |\n| 10   | 542.54 | 198.89 |\n| 11   | 595.70 | 232.89 |\n| 12   | 652.15 | 270.16 |\n| 13   | 712.08 | 310.92 |\n| 14   | 775.71 | 355.38 |\n| 15   | 843.26 | 403.76 |\n| 16   | 914.98 | 456.31 |\n| 17   | 991.12 | 513.28 |\n| 18   | 1071.9 | 574.94 |\n| 19   | 1157.7 | 641.60 |\n| 20   | 1248.8 | 713.54 |\n| 21   | 1345.6 | 791.11 |\n| 22   | 1448.3 | 874.64 |\n| 23   | 1557.3 | 964.50 |\n| 24   | 1673.1 | 1061.0 |\n| 25   | 1796.0 | 1164.8 |\n| 26   | 1926.5 | 1276.1 |\n| 27   | 2065.0 | 1395.4 |\n| 28   | 2212.1 | 1523.4 |\n| 29   | 2368.2 | 1660.3 |\n| 30   | 2534.0 | 1806.9 |\n\n\n## 结论\n从上述例子可以得出一个初步结论：当房价上涨速度与投资理财收益率相同时，我们获得的利润是差不多的。但是，考虑到房子的居住属性和其带来的心理作用，投资房产似乎更划算一些。此外，由于没有考虑到房子的损耗等因素，可能还需要更精确的计算。\n\n\n[1]: http://oc7urqs4c.bkt.clouddn.com/house_money.png\n[2]: http://oc7urqs4c.bkt.clouddn.com/price-money.png\n[3]: http://oc7urqs4c.bkt.clouddn.com/fin_money.png\n\n\n","slug":"house-money","published":1,"updated":"2017-12-17T03:34:11.166Z","_id":"cjb6k4kw9000zulepmbhr0itk","comments":1,"layout":"post","photos":[],"link":"","content":"<p>假设当前房产价格为$V$，首付款为$P$，需要贷款$D=V-P$，贷款利率为$d\\%$（月利率为$\\beta=d\\%/12$），贷款年限为$N$个月，贷款方式为等额本息。</p>\n<h1 id=\"问题一\"><a href=\"#问题一\" class=\"headerlink\" title=\"问题一\"></a>问题一</h1><p>如果在第$M$个月时出售房产，出售价格为$V’$，该套房产的收益为多少？</p>\n<a id=\"more\"></a>\n<h2 id=\"贷款利息计算\"><a href=\"#贷款利息计算\" class=\"headerlink\" title=\"贷款利息计算\"></a>贷款利息计算</h2><p>每个月需要还款为<br>$$x=D\\cdot \\beta \\cdot \\frac{(1+\\beta)^N}{(1+\\beta)^N-1}$$<br>第$n$个月需要还的利息为<br>$$x_n=D\\cdot \\beta \\cdot (1+\\beta)^{n-1} - x \\cdot [(1+\\beta)^{n-1}-1],n=1,2,\\dots,N$$<br>总共需要支付利息<br>$$X = x\\cdot N-D$$</p>\n<h2 id=\"房产持有成本\"><a href=\"#房产持有成本\" class=\"headerlink\" title=\"房产持有成本\"></a>房产持有成本</h2><p>若购买房产需要的手续费为$F$，在购入房产后，第$m$个月我们所用掉的成本为<br>$$A_m=P+F+x\\cdot (m-1)$$<br>还欠银行的钱为<br>$$B_m=D \\cdot (1+\\beta)^{m-1} - x \\cdot [(1+\\beta)^{m-1}-1]/\\beta$$<br>即，此时的持有成本为<br>$$C_m=A_m+B_m$$</p>\n<h2 id=\"房产收益\"><a href=\"#房产收益\" class=\"headerlink\" title=\"房产收益\"></a>房产收益</h2><p>在第$m$个月时，房产以价格$Q_m$出售，利润为$E_m=Q_m-C_m$。</p>\n<p>假设房价每年的上涨幅度为$q\\%$（月涨幅$\\gamma=q\\%/12$），则第$m$个月时，房价为<br>$$<br>Q_m=V\\cdot(1+\\gamma)^m<br>$$</p>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><p>假设购买房产时的条件如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">变量</th>\n<th style=\"text-align:left\">值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">房产价格</td>\n<td style=\"text-align:left\">430万元</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">首付款</td>\n<td style=\"text-align:left\">30%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">贷款</td>\n<td style=\"text-align:left\">70%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">利率</td>\n<td style=\"text-align:left\">4.9%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">贷款期数</td>\n<td style=\"text-align:left\">360</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">契税</td>\n<td style=\"text-align:left\">1.5%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">增值税</td>\n<td style=\"text-align:left\">5%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">中介费</td>\n<td style=\"text-align:left\">1%</td>\n</tr>\n</tbody>\n</table>\n<p>那么，画出房产持有成本随月数的曲线如下图所示：<br><img src=\"http://oc7urqs4c.bkt.clouddn.com/house_money.png\" alt=\"房产持有成本曲线\"></p>\n<p>假设房价每年的上涨幅度为$6\\%$，画出房价随月数的变化曲线如下图所示<br><img src=\"http://oc7urqs4c.bkt.clouddn.com/price-money.png\" alt=\"房价上涨曲线\"></p>\n<p>对应至每一年的持有成本如下表所示，在相应的时间点将售价减去持有成本即为得到的收益。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">年数</th>\n<th style=\"text-align:left\">持有成本(万元)</th>\n<th style=\"text-align:left\">收益（万元）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">452.95</td>\n<td style=\"text-align:left\">-20.8</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">467.59</td>\n<td style=\"text-align:left\">-8.794</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">482.02</td>\n<td style=\"text-align:left\">5.0819</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">496.20</td>\n<td style=\"text-align:left\">20.941</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">510.13</td>\n<td style=\"text-align:left\">38.904</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">523.80</td>\n<td style=\"text-align:left\">59.096</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\">537.20</td>\n<td style=\"text-align:left\">81.652</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7</td>\n<td style=\"text-align:left\">550.31</td>\n<td style=\"text-align:left\">106.71</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\">563.11</td>\n<td style=\"text-align:left\">134.43</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">9</td>\n<td style=\"text-align:left\">575.59</td>\n<td style=\"text-align:left\">164.97</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">587.74</td>\n<td style=\"text-align:left\">198.50</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">11</td>\n<td style=\"text-align:left\">599.54</td>\n<td style=\"text-align:left\">235.20</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">12</td>\n<td style=\"text-align:left\">610.97</td>\n<td style=\"text-align:left\">275.26</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">13</td>\n<td style=\"text-align:left\">622.00</td>\n<td style=\"text-align:left\">318.88</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">14</td>\n<td style=\"text-align:left\">632.64</td>\n<td style=\"text-align:left\">366.28</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\">642.84</td>\n<td style=\"text-align:left\">417.69</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">16</td>\n<td style=\"text-align:left\">652.59</td>\n<td style=\"text-align:left\">473.34</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">17</td>\n<td style=\"text-align:left\">661.88</td>\n<td style=\"text-align:left\">533.51</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">18</td>\n<td style=\"text-align:left\">670.66</td>\n<td style=\"text-align:left\">598.45</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">19</td>\n<td style=\"text-align:left\">678.93</td>\n<td style=\"text-align:left\">668.46</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">20</td>\n<td style=\"text-align:left\">686.65</td>\n<td style=\"text-align:left\">743.84</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">21</td>\n<td style=\"text-align:left\">693.80</td>\n<td style=\"text-align:left\">824.93</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">22</td>\n<td style=\"text-align:left\">700.34</td>\n<td style=\"text-align:left\">912.06</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">23</td>\n<td style=\"text-align:left\">706.25</td>\n<td style=\"text-align:left\">1005.5</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">24</td>\n<td style=\"text-align:left\">711.50</td>\n<td style=\"text-align:left\">1105.9</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">25</td>\n<td style=\"text-align:left\">716.05</td>\n<td style=\"text-align:left\">1213.4</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">26</td>\n<td style=\"text-align:left\">719.87</td>\n<td style=\"text-align:left\">1328.6</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">27</td>\n<td style=\"text-align:left\">722.91</td>\n<td style=\"text-align:left\">1451.9</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">28</td>\n<td style=\"text-align:left\">725.15</td>\n<td style=\"text-align:left\">1583.8</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">29</td>\n<td style=\"text-align:left\">726.54</td>\n<td style=\"text-align:left\">1724.9</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>30</th>\n<th>727.04</th>\n<th>1875.6</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"问题二\"><a href=\"#问题二\" class=\"headerlink\" title=\"问题二\"></a>问题二</h1><p>如果将首付款、手续费以及月供用于理财，这种方式是否会比购买房产更划算？</p>\n<h2 id=\"理财总收入\"><a href=\"#理财总收入\" class=\"headerlink\" title=\"理财总收入\"></a>理财总收入</h2><p>假设投资理财的年收益率为$p\\%$（月利率为$\\alpha=p\\%/12$），那么，第m个月的投资理财总收入为<br>$$<br>\\begin{align}<br>L_m &amp;=(P+F)\\cdot(1+\\alpha)^m+x\\cdot (1+\\alpha)^{m-1}+\\cdots+x\\\\<br>&amp;=(P+F)\\cdot(1+\\alpha)^m+x\\cdot\\frac{(1+\\alpha)^m-1}{\\alpha}<br>\\end{align}<br>$$</p>\n<h2 id=\"理财收益\"><a href=\"#理财收益\" class=\"headerlink\" title=\"理财收益\"></a>理财收益</h2><p>在第m个月，投资理财的利润为$L_m-A_m$。</p>\n<h2 id=\"例子-1\"><a href=\"#例子-1\" class=\"headerlink\" title=\"例子\"></a>例子</h2><p>以上一节中的数据为例，假设投资理财的年收益率为6%，那么投资理财收入如下图所示<br><img src=\"http://oc7urqs4c.bkt.clouddn.com/fin_money.png\" alt=\"投资理财收入\"></p>\n<p>具体到每一年，投资理财所得收入及相应的利润为</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">月数</th>\n<th style=\"text-align:left\">收入（万元）</th>\n<th style=\"text-align:left\">利润（万元）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">154.30</td>\n<td style=\"text-align:left\">2.3572</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">183.53</td>\n<td style=\"text-align:left\">12.410</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">214.55</td>\n<td style=\"text-align:left\">24.266</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">247.49</td>\n<td style=\"text-align:left\">38.035</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">282.46</td>\n<td style=\"text-align:left\">53.836</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">319.59</td>\n<td style=\"text-align:left\">71.794</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\">359.01</td>\n<td style=\"text-align:left\">92.042</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7</td>\n<td style=\"text-align:left\">400.86</td>\n<td style=\"text-align:left\">114.72</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\">445.29</td>\n<td style=\"text-align:left\">139.98</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">9</td>\n<td style=\"text-align:left\">492.46</td>\n<td style=\"text-align:left\">167.98</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">542.54</td>\n<td style=\"text-align:left\">198.89</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">11</td>\n<td style=\"text-align:left\">595.70</td>\n<td style=\"text-align:left\">232.89</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">12</td>\n<td style=\"text-align:left\">652.15</td>\n<td style=\"text-align:left\">270.16</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">13</td>\n<td style=\"text-align:left\">712.08</td>\n<td style=\"text-align:left\">310.92</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">14</td>\n<td style=\"text-align:left\">775.71</td>\n<td style=\"text-align:left\">355.38</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\">843.26</td>\n<td style=\"text-align:left\">403.76</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">16</td>\n<td style=\"text-align:left\">914.98</td>\n<td style=\"text-align:left\">456.31</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">17</td>\n<td style=\"text-align:left\">991.12</td>\n<td style=\"text-align:left\">513.28</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">18</td>\n<td style=\"text-align:left\">1071.9</td>\n<td style=\"text-align:left\">574.94</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">19</td>\n<td style=\"text-align:left\">1157.7</td>\n<td style=\"text-align:left\">641.60</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">20</td>\n<td style=\"text-align:left\">1248.8</td>\n<td style=\"text-align:left\">713.54</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">21</td>\n<td style=\"text-align:left\">1345.6</td>\n<td style=\"text-align:left\">791.11</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">22</td>\n<td style=\"text-align:left\">1448.3</td>\n<td style=\"text-align:left\">874.64</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">23</td>\n<td style=\"text-align:left\">1557.3</td>\n<td style=\"text-align:left\">964.50</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">24</td>\n<td style=\"text-align:left\">1673.1</td>\n<td style=\"text-align:left\">1061.0</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">25</td>\n<td style=\"text-align:left\">1796.0</td>\n<td style=\"text-align:left\">1164.8</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">26</td>\n<td style=\"text-align:left\">1926.5</td>\n<td style=\"text-align:left\">1276.1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">27</td>\n<td style=\"text-align:left\">2065.0</td>\n<td style=\"text-align:left\">1395.4</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">28</td>\n<td style=\"text-align:left\">2212.1</td>\n<td style=\"text-align:left\">1523.4</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">29</td>\n<td style=\"text-align:left\">2368.2</td>\n<td style=\"text-align:left\">1660.3</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">30</td>\n<td style=\"text-align:left\">2534.0</td>\n<td style=\"text-align:left\">1806.9</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>从上述例子可以得出一个初步结论：当房价上涨速度与投资理财收益率相同时，我们获得的利润是差不多的。但是，考虑到房子的居住属性和其带来的心理作用，投资房产似乎更划算一些。此外，由于没有考虑到房子的损耗等因素，可能还需要更精确的计算。</p>\n","site":{"data":{}},"excerpt":"<p>假设当前房产价格为$V$，首付款为$P$，需要贷款$D=V-P$，贷款利率为$d\\%$（月利率为$\\beta=d\\%/12$），贷款年限为$N$个月，贷款方式为等额本息。</p>\n<h1 id=\"问题一\"><a href=\"#问题一\" class=\"headerlink\" title=\"问题一\"></a>问题一</h1><p>如果在第$M$个月时出售房产，出售价格为$V’$，该套房产的收益为多少？</p>","more":"<h2 id=\"贷款利息计算\"><a href=\"#贷款利息计算\" class=\"headerlink\" title=\"贷款利息计算\"></a>贷款利息计算</h2><p>每个月需要还款为<br>$$x=D\\cdot \\beta \\cdot \\frac{(1+\\beta)^N}{(1+\\beta)^N-1}$$<br>第$n$个月需要还的利息为<br>$$x_n=D\\cdot \\beta \\cdot (1+\\beta)^{n-1} - x \\cdot [(1+\\beta)^{n-1}-1],n=1,2,\\dots,N$$<br>总共需要支付利息<br>$$X = x\\cdot N-D$$</p>\n<h2 id=\"房产持有成本\"><a href=\"#房产持有成本\" class=\"headerlink\" title=\"房产持有成本\"></a>房产持有成本</h2><p>若购买房产需要的手续费为$F$，在购入房产后，第$m$个月我们所用掉的成本为<br>$$A_m=P+F+x\\cdot (m-1)$$<br>还欠银行的钱为<br>$$B_m=D \\cdot (1+\\beta)^{m-1} - x \\cdot [(1+\\beta)^{m-1}-1]/\\beta$$<br>即，此时的持有成本为<br>$$C_m=A_m+B_m$$</p>\n<h2 id=\"房产收益\"><a href=\"#房产收益\" class=\"headerlink\" title=\"房产收益\"></a>房产收益</h2><p>在第$m$个月时，房产以价格$Q_m$出售，利润为$E_m=Q_m-C_m$。</p>\n<p>假设房价每年的上涨幅度为$q\\%$（月涨幅$\\gamma=q\\%/12$），则第$m$个月时，房价为<br>$$<br>Q_m=V\\cdot(1+\\gamma)^m<br>$$</p>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><p>假设购买房产时的条件如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">变量</th>\n<th style=\"text-align:left\">值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">房产价格</td>\n<td style=\"text-align:left\">430万元</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">首付款</td>\n<td style=\"text-align:left\">30%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">贷款</td>\n<td style=\"text-align:left\">70%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">利率</td>\n<td style=\"text-align:left\">4.9%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">贷款期数</td>\n<td style=\"text-align:left\">360</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">契税</td>\n<td style=\"text-align:left\">1.5%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">增值税</td>\n<td style=\"text-align:left\">5%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">中介费</td>\n<td style=\"text-align:left\">1%</td>\n</tr>\n</tbody>\n</table>\n<p>那么，画出房产持有成本随月数的曲线如下图所示：<br><img src=\"http://oc7urqs4c.bkt.clouddn.com/house_money.png\" alt=\"房产持有成本曲线\"></p>\n<p>假设房价每年的上涨幅度为$6\\%$，画出房价随月数的变化曲线如下图所示<br><img src=\"http://oc7urqs4c.bkt.clouddn.com/price-money.png\" alt=\"房价上涨曲线\"></p>\n<p>对应至每一年的持有成本如下表所示，在相应的时间点将售价减去持有成本即为得到的收益。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">年数</th>\n<th style=\"text-align:left\">持有成本(万元)</th>\n<th style=\"text-align:left\">收益（万元）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">452.95</td>\n<td style=\"text-align:left\">-20.8</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">467.59</td>\n<td style=\"text-align:left\">-8.794</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">482.02</td>\n<td style=\"text-align:left\">5.0819</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">496.20</td>\n<td style=\"text-align:left\">20.941</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">510.13</td>\n<td style=\"text-align:left\">38.904</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">523.80</td>\n<td style=\"text-align:left\">59.096</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\">537.20</td>\n<td style=\"text-align:left\">81.652</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7</td>\n<td style=\"text-align:left\">550.31</td>\n<td style=\"text-align:left\">106.71</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\">563.11</td>\n<td style=\"text-align:left\">134.43</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">9</td>\n<td style=\"text-align:left\">575.59</td>\n<td style=\"text-align:left\">164.97</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">587.74</td>\n<td style=\"text-align:left\">198.50</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">11</td>\n<td style=\"text-align:left\">599.54</td>\n<td style=\"text-align:left\">235.20</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">12</td>\n<td style=\"text-align:left\">610.97</td>\n<td style=\"text-align:left\">275.26</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">13</td>\n<td style=\"text-align:left\">622.00</td>\n<td style=\"text-align:left\">318.88</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">14</td>\n<td style=\"text-align:left\">632.64</td>\n<td style=\"text-align:left\">366.28</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\">642.84</td>\n<td style=\"text-align:left\">417.69</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">16</td>\n<td style=\"text-align:left\">652.59</td>\n<td style=\"text-align:left\">473.34</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">17</td>\n<td style=\"text-align:left\">661.88</td>\n<td style=\"text-align:left\">533.51</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">18</td>\n<td style=\"text-align:left\">670.66</td>\n<td style=\"text-align:left\">598.45</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">19</td>\n<td style=\"text-align:left\">678.93</td>\n<td style=\"text-align:left\">668.46</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">20</td>\n<td style=\"text-align:left\">686.65</td>\n<td style=\"text-align:left\">743.84</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">21</td>\n<td style=\"text-align:left\">693.80</td>\n<td style=\"text-align:left\">824.93</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">22</td>\n<td style=\"text-align:left\">700.34</td>\n<td style=\"text-align:left\">912.06</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">23</td>\n<td style=\"text-align:left\">706.25</td>\n<td style=\"text-align:left\">1005.5</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">24</td>\n<td style=\"text-align:left\">711.50</td>\n<td style=\"text-align:left\">1105.9</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">25</td>\n<td style=\"text-align:left\">716.05</td>\n<td style=\"text-align:left\">1213.4</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">26</td>\n<td style=\"text-align:left\">719.87</td>\n<td style=\"text-align:left\">1328.6</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">27</td>\n<td style=\"text-align:left\">722.91</td>\n<td style=\"text-align:left\">1451.9</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">28</td>\n<td style=\"text-align:left\">725.15</td>\n<td style=\"text-align:left\">1583.8</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">29</td>\n<td style=\"text-align:left\">726.54</td>\n<td style=\"text-align:left\">1724.9</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>30</th>\n<th>727.04</th>\n<th>1875.6</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"问题二\"><a href=\"#问题二\" class=\"headerlink\" title=\"问题二\"></a>问题二</h1><p>如果将首付款、手续费以及月供用于理财，这种方式是否会比购买房产更划算？</p>\n<h2 id=\"理财总收入\"><a href=\"#理财总收入\" class=\"headerlink\" title=\"理财总收入\"></a>理财总收入</h2><p>假设投资理财的年收益率为$p\\%$（月利率为$\\alpha=p\\%/12$），那么，第m个月的投资理财总收入为<br>$$<br>\\begin{align}<br>L_m &amp;=(P+F)\\cdot(1+\\alpha)^m+x\\cdot (1+\\alpha)^{m-1}+\\cdots+x\\\\<br>&amp;=(P+F)\\cdot(1+\\alpha)^m+x\\cdot\\frac{(1+\\alpha)^m-1}{\\alpha}<br>\\end{align}<br>$$</p>\n<h2 id=\"理财收益\"><a href=\"#理财收益\" class=\"headerlink\" title=\"理财收益\"></a>理财收益</h2><p>在第m个月，投资理财的利润为$L_m-A_m$。</p>\n<h2 id=\"例子-1\"><a href=\"#例子-1\" class=\"headerlink\" title=\"例子\"></a>例子</h2><p>以上一节中的数据为例，假设投资理财的年收益率为6%，那么投资理财收入如下图所示<br><img src=\"http://oc7urqs4c.bkt.clouddn.com/fin_money.png\" alt=\"投资理财收入\"></p>\n<p>具体到每一年，投资理财所得收入及相应的利润为</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">月数</th>\n<th style=\"text-align:left\">收入（万元）</th>\n<th style=\"text-align:left\">利润（万元）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">154.30</td>\n<td style=\"text-align:left\">2.3572</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">183.53</td>\n<td style=\"text-align:left\">12.410</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">214.55</td>\n<td style=\"text-align:left\">24.266</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">247.49</td>\n<td style=\"text-align:left\">38.035</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">282.46</td>\n<td style=\"text-align:left\">53.836</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">319.59</td>\n<td style=\"text-align:left\">71.794</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\">359.01</td>\n<td style=\"text-align:left\">92.042</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7</td>\n<td style=\"text-align:left\">400.86</td>\n<td style=\"text-align:left\">114.72</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\">445.29</td>\n<td style=\"text-align:left\">139.98</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">9</td>\n<td style=\"text-align:left\">492.46</td>\n<td style=\"text-align:left\">167.98</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">10</td>\n<td style=\"text-align:left\">542.54</td>\n<td style=\"text-align:left\">198.89</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">11</td>\n<td style=\"text-align:left\">595.70</td>\n<td style=\"text-align:left\">232.89</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">12</td>\n<td style=\"text-align:left\">652.15</td>\n<td style=\"text-align:left\">270.16</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">13</td>\n<td style=\"text-align:left\">712.08</td>\n<td style=\"text-align:left\">310.92</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">14</td>\n<td style=\"text-align:left\">775.71</td>\n<td style=\"text-align:left\">355.38</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">15</td>\n<td style=\"text-align:left\">843.26</td>\n<td style=\"text-align:left\">403.76</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">16</td>\n<td style=\"text-align:left\">914.98</td>\n<td style=\"text-align:left\">456.31</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">17</td>\n<td style=\"text-align:left\">991.12</td>\n<td style=\"text-align:left\">513.28</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">18</td>\n<td style=\"text-align:left\">1071.9</td>\n<td style=\"text-align:left\">574.94</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">19</td>\n<td style=\"text-align:left\">1157.7</td>\n<td style=\"text-align:left\">641.60</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">20</td>\n<td style=\"text-align:left\">1248.8</td>\n<td style=\"text-align:left\">713.54</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">21</td>\n<td style=\"text-align:left\">1345.6</td>\n<td style=\"text-align:left\">791.11</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">22</td>\n<td style=\"text-align:left\">1448.3</td>\n<td style=\"text-align:left\">874.64</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">23</td>\n<td style=\"text-align:left\">1557.3</td>\n<td style=\"text-align:left\">964.50</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">24</td>\n<td style=\"text-align:left\">1673.1</td>\n<td style=\"text-align:left\">1061.0</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">25</td>\n<td style=\"text-align:left\">1796.0</td>\n<td style=\"text-align:left\">1164.8</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">26</td>\n<td style=\"text-align:left\">1926.5</td>\n<td style=\"text-align:left\">1276.1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">27</td>\n<td style=\"text-align:left\">2065.0</td>\n<td style=\"text-align:left\">1395.4</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">28</td>\n<td style=\"text-align:left\">2212.1</td>\n<td style=\"text-align:left\">1523.4</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">29</td>\n<td style=\"text-align:left\">2368.2</td>\n<td style=\"text-align:left\">1660.3</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">30</td>\n<td style=\"text-align:left\">2534.0</td>\n<td style=\"text-align:left\">1806.9</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>从上述例子可以得出一个初步结论：当房价上涨速度与投资理财收益率相同时，我们获得的利润是差不多的。但是，考虑到房子的居住属性和其带来的心理作用，投资房产似乎更划算一些。此外，由于没有考虑到房子的损耗等因素，可能还需要更精确的计算。</p>"},{"title":"Spark读取csv文件方法","date":"2017-03-16T13:13:00.000Z","_content":"\n直接采用split的方法是不太好的，比如\n\n```python\nsc.textFile('file.csv')\n    .map(lambda line: (line.split(',')[0], line.split(',')[1]))\n    .collect()\n```\n\n这种方法容易出错，且读取的值无法自动识别类型。\n\n可以稍微改进一下，比如\n\n```python\nimport csv\nrdd = sc.textFile(\"file.csv\")\nrdd = rdd.mapPartitions(lambda x: csv.reader(x))\n```\n\n或者，先将数据用pandas读入，然后再转化为DataFrame\n\n```python\nfrom pyspark import SparkContext\nfrom pyspark.sql import SQLContext\nimport pandas as pd\n\nsc = SparkContext('local','example')  # if using locally\nsql_sc = SQLContext(sc)\n\nSpark_Full = sc.emptyRDD()\nchunk_100k = pd.read_csv(\"Your_Data_File.csv\", chunksize=100000)\n# if you have headers in your csv file:\nheaders = list(pd.read_csv(\"Your_Data_File.csv\", nrows=0).columns)\n\nfor chunky in chunk_100k:\n    Spark_Full +=  sc.parallelize(chunky.values.tolist())\n\nYourSparkDataFrame = Spark_Full.toDF(headers)\n# if you do not have headers, leave empty instead:\n# YourSparkDataFrame = Spark_Full.toDF()\nYourSparkDataFrame.show()\n```\n\n其实，Spark 2.0之后可以很方便使用SQLContext的读取csv文件，读取得到的格式为DataFrame：\n\n```python\nfrom pyspark import SparkContext\nfrom pyspark.sql import SQLContext\nsc = SparkContext()\nsqlctx = SQLContext(sc)\nsqlctx.read.csv(\n    \"some_input_file.csv\", header=True, mode=\"DROPMALFORMED\", schema=schema\n)\n```\n\n或者\n\n```python\n(sqlctx.read\n    .schema(schema)\n    .option(\"header\", \"true\")\n    .option(\"mode\", \"DROPMALFORMED\")\n    .csv(\"some_input_file.csv\"))\n```\n\n如果已知schema，则可以直接指定，防止自动推测发生错误\n\n```python\nfrom pyspark.sql.types import StructType, StructField\nfrom pyspark.sql.types import DoubleType, IntegerType, StringType\n\nschema = StructType([\n    StructField(\"A\", IntegerType()),\n    StructField(\"B\", DoubleType()),\n    StructField(\"C\", StringType())\n])\n```\n\n如果是Spark1.x，那么可以采用Databricks推出的[spark-csv](https://github.com/databricks/spark-csv)，其实这就是2.0版本以后读取csv的代码。\n\n另外，github上还有另一个非官方版本的[spark-csv](https://github.com/seahboonsiew/pyspark-csv)。\n\n","source":"_posts/2017-03-16-spark-csv.md","raw":"---\ntitle: Spark读取csv文件方法\ndate: 2017-03-16 21:13:00\ncategories: 写点程序\ntags: \n  - spark\n  - csv\n---\n\n直接采用split的方法是不太好的，比如\n\n```python\nsc.textFile('file.csv')\n    .map(lambda line: (line.split(',')[0], line.split(',')[1]))\n    .collect()\n```\n\n这种方法容易出错，且读取的值无法自动识别类型。\n\n可以稍微改进一下，比如\n\n```python\nimport csv\nrdd = sc.textFile(\"file.csv\")\nrdd = rdd.mapPartitions(lambda x: csv.reader(x))\n```\n\n或者，先将数据用pandas读入，然后再转化为DataFrame\n\n```python\nfrom pyspark import SparkContext\nfrom pyspark.sql import SQLContext\nimport pandas as pd\n\nsc = SparkContext('local','example')  # if using locally\nsql_sc = SQLContext(sc)\n\nSpark_Full = sc.emptyRDD()\nchunk_100k = pd.read_csv(\"Your_Data_File.csv\", chunksize=100000)\n# if you have headers in your csv file:\nheaders = list(pd.read_csv(\"Your_Data_File.csv\", nrows=0).columns)\n\nfor chunky in chunk_100k:\n    Spark_Full +=  sc.parallelize(chunky.values.tolist())\n\nYourSparkDataFrame = Spark_Full.toDF(headers)\n# if you do not have headers, leave empty instead:\n# YourSparkDataFrame = Spark_Full.toDF()\nYourSparkDataFrame.show()\n```\n\n其实，Spark 2.0之后可以很方便使用SQLContext的读取csv文件，读取得到的格式为DataFrame：\n\n```python\nfrom pyspark import SparkContext\nfrom pyspark.sql import SQLContext\nsc = SparkContext()\nsqlctx = SQLContext(sc)\nsqlctx.read.csv(\n    \"some_input_file.csv\", header=True, mode=\"DROPMALFORMED\", schema=schema\n)\n```\n\n或者\n\n```python\n(sqlctx.read\n    .schema(schema)\n    .option(\"header\", \"true\")\n    .option(\"mode\", \"DROPMALFORMED\")\n    .csv(\"some_input_file.csv\"))\n```\n\n如果已知schema，则可以直接指定，防止自动推测发生错误\n\n```python\nfrom pyspark.sql.types import StructType, StructField\nfrom pyspark.sql.types import DoubleType, IntegerType, StringType\n\nschema = StructType([\n    StructField(\"A\", IntegerType()),\n    StructField(\"B\", DoubleType()),\n    StructField(\"C\", StringType())\n])\n```\n\n如果是Spark1.x，那么可以采用Databricks推出的[spark-csv](https://github.com/databricks/spark-csv)，其实这就是2.0版本以后读取csv的代码。\n\n另外，github上还有另一个非官方版本的[spark-csv](https://github.com/seahboonsiew/pyspark-csv)。\n\n","slug":"spark-csv","published":1,"updated":"2017-12-17T03:28:02.180Z","_id":"cjb6k4kwa0011ulepy725yz03","comments":1,"layout":"post","photos":[],"link":"","content":"<p>直接采用split的方法是不太好的，比如</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc.textFile(<span class=\"string\">'file.csv'</span>)</span><br><span class=\"line\">    .map(<span class=\"keyword\">lambda</span> line: (line.split(<span class=\"string\">','</span>)[<span class=\"number\">0</span>], line.split(<span class=\"string\">','</span>)[<span class=\"number\">1</span>]))</span><br><span class=\"line\">    .collect()</span><br></pre></td></tr></table></figure>\n<p>这种方法容易出错，且读取的值无法自动识别类型。</p>\n<p>可以稍微改进一下，比如</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> csv</span><br><span class=\"line\">rdd = sc.textFile(<span class=\"string\">\"file.csv\"</span>)</span><br><span class=\"line\">rdd = rdd.mapPartitions(<span class=\"keyword\">lambda</span> x: csv.reader(x))</span><br></pre></td></tr></table></figure>\n<p>或者，先将数据用pandas读入，然后再转化为DataFrame</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyspark <span class=\"keyword\">import</span> SparkContext</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyspark.sql <span class=\"keyword\">import</span> SQLContext</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\">sc = SparkContext(<span class=\"string\">'local'</span>,<span class=\"string\">'example'</span>)  <span class=\"comment\"># if using locally</span></span><br><span class=\"line\">sql_sc = SQLContext(sc)</span><br><span class=\"line\"></span><br><span class=\"line\">Spark_Full = sc.emptyRDD()</span><br><span class=\"line\">chunk_100k = pd.read_csv(<span class=\"string\">\"Your_Data_File.csv\"</span>, chunksize=<span class=\"number\">100000</span>)</span><br><span class=\"line\"><span class=\"comment\"># if you have headers in your csv file:</span></span><br><span class=\"line\">headers = list(pd.read_csv(<span class=\"string\">\"Your_Data_File.csv\"</span>, nrows=<span class=\"number\">0</span>).columns)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> chunky <span class=\"keyword\">in</span> chunk_100k:</span><br><span class=\"line\">    Spark_Full +=  sc.parallelize(chunky.values.tolist())</span><br><span class=\"line\"></span><br><span class=\"line\">YourSparkDataFrame = Spark_Full.toDF(headers)</span><br><span class=\"line\"><span class=\"comment\"># if you do not have headers, leave empty instead:</span></span><br><span class=\"line\"><span class=\"comment\"># YourSparkDataFrame = Spark_Full.toDF()</span></span><br><span class=\"line\">YourSparkDataFrame.show()</span><br></pre></td></tr></table></figure>\n<p>其实，Spark 2.0之后可以很方便使用SQLContext的读取csv文件，读取得到的格式为DataFrame：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyspark <span class=\"keyword\">import</span> SparkContext</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyspark.sql <span class=\"keyword\">import</span> SQLContext</span><br><span class=\"line\">sc = SparkContext()</span><br><span class=\"line\">sqlctx = SQLContext(sc)</span><br><span class=\"line\">sqlctx.read.csv(</span><br><span class=\"line\">    <span class=\"string\">\"some_input_file.csv\"</span>, header=<span class=\"keyword\">True</span>, mode=<span class=\"string\">\"DROPMALFORMED\"</span>, schema=schema</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(sqlctx.read</span><br><span class=\"line\">    .schema(schema)</span><br><span class=\"line\">    .option(<span class=\"string\">\"header\"</span>, <span class=\"string\">\"true\"</span>)</span><br><span class=\"line\">    .option(<span class=\"string\">\"mode\"</span>, <span class=\"string\">\"DROPMALFORMED\"</span>)</span><br><span class=\"line\">    .csv(<span class=\"string\">\"some_input_file.csv\"</span>))</span><br></pre></td></tr></table></figure>\n<p>如果已知schema，则可以直接指定，防止自动推测发生错误</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyspark.sql.types <span class=\"keyword\">import</span> StructType, StructField</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyspark.sql.types <span class=\"keyword\">import</span> DoubleType, IntegerType, StringType</span><br><span class=\"line\"></span><br><span class=\"line\">schema = StructType([</span><br><span class=\"line\">    StructField(<span class=\"string\">\"A\"</span>, IntegerType()),</span><br><span class=\"line\">    StructField(<span class=\"string\">\"B\"</span>, DoubleType()),</span><br><span class=\"line\">    StructField(<span class=\"string\">\"C\"</span>, StringType())</span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure>\n<p>如果是Spark1.x，那么可以采用Databricks推出的<a href=\"https://github.com/databricks/spark-csv\" target=\"_blank\" rel=\"noopener\">spark-csv</a>，其实这就是2.0版本以后读取csv的代码。</p>\n<p>另外，github上还有另一个非官方版本的<a href=\"https://github.com/seahboonsiew/pyspark-csv\" target=\"_blank\" rel=\"noopener\">spark-csv</a>。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>直接采用split的方法是不太好的，比如</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc.textFile(<span class=\"string\">'file.csv'</span>)</span><br><span class=\"line\">    .map(<span class=\"keyword\">lambda</span> line: (line.split(<span class=\"string\">','</span>)[<span class=\"number\">0</span>], line.split(<span class=\"string\">','</span>)[<span class=\"number\">1</span>]))</span><br><span class=\"line\">    .collect()</span><br></pre></td></tr></table></figure>\n<p>这种方法容易出错，且读取的值无法自动识别类型。</p>\n<p>可以稍微改进一下，比如</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> csv</span><br><span class=\"line\">rdd = sc.textFile(<span class=\"string\">\"file.csv\"</span>)</span><br><span class=\"line\">rdd = rdd.mapPartitions(<span class=\"keyword\">lambda</span> x: csv.reader(x))</span><br></pre></td></tr></table></figure>\n<p>或者，先将数据用pandas读入，然后再转化为DataFrame</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyspark <span class=\"keyword\">import</span> SparkContext</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyspark.sql <span class=\"keyword\">import</span> SQLContext</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\">sc = SparkContext(<span class=\"string\">'local'</span>,<span class=\"string\">'example'</span>)  <span class=\"comment\"># if using locally</span></span><br><span class=\"line\">sql_sc = SQLContext(sc)</span><br><span class=\"line\"></span><br><span class=\"line\">Spark_Full = sc.emptyRDD()</span><br><span class=\"line\">chunk_100k = pd.read_csv(<span class=\"string\">\"Your_Data_File.csv\"</span>, chunksize=<span class=\"number\">100000</span>)</span><br><span class=\"line\"><span class=\"comment\"># if you have headers in your csv file:</span></span><br><span class=\"line\">headers = list(pd.read_csv(<span class=\"string\">\"Your_Data_File.csv\"</span>, nrows=<span class=\"number\">0</span>).columns)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> chunky <span class=\"keyword\">in</span> chunk_100k:</span><br><span class=\"line\">    Spark_Full +=  sc.parallelize(chunky.values.tolist())</span><br><span class=\"line\"></span><br><span class=\"line\">YourSparkDataFrame = Spark_Full.toDF(headers)</span><br><span class=\"line\"><span class=\"comment\"># if you do not have headers, leave empty instead:</span></span><br><span class=\"line\"><span class=\"comment\"># YourSparkDataFrame = Spark_Full.toDF()</span></span><br><span class=\"line\">YourSparkDataFrame.show()</span><br></pre></td></tr></table></figure>\n<p>其实，Spark 2.0之后可以很方便使用SQLContext的读取csv文件，读取得到的格式为DataFrame：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyspark <span class=\"keyword\">import</span> SparkContext</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyspark.sql <span class=\"keyword\">import</span> SQLContext</span><br><span class=\"line\">sc = SparkContext()</span><br><span class=\"line\">sqlctx = SQLContext(sc)</span><br><span class=\"line\">sqlctx.read.csv(</span><br><span class=\"line\">    <span class=\"string\">\"some_input_file.csv\"</span>, header=<span class=\"keyword\">True</span>, mode=<span class=\"string\">\"DROPMALFORMED\"</span>, schema=schema</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(sqlctx.read</span><br><span class=\"line\">    .schema(schema)</span><br><span class=\"line\">    .option(<span class=\"string\">\"header\"</span>, <span class=\"string\">\"true\"</span>)</span><br><span class=\"line\">    .option(<span class=\"string\">\"mode\"</span>, <span class=\"string\">\"DROPMALFORMED\"</span>)</span><br><span class=\"line\">    .csv(<span class=\"string\">\"some_input_file.csv\"</span>))</span><br></pre></td></tr></table></figure>\n<p>如果已知schema，则可以直接指定，防止自动推测发生错误</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pyspark.sql.types <span class=\"keyword\">import</span> StructType, StructField</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyspark.sql.types <span class=\"keyword\">import</span> DoubleType, IntegerType, StringType</span><br><span class=\"line\"></span><br><span class=\"line\">schema = StructType([</span><br><span class=\"line\">    StructField(<span class=\"string\">\"A\"</span>, IntegerType()),</span><br><span class=\"line\">    StructField(<span class=\"string\">\"B\"</span>, DoubleType()),</span><br><span class=\"line\">    StructField(<span class=\"string\">\"C\"</span>, StringType())</span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure>\n<p>如果是Spark1.x，那么可以采用Databricks推出的<a href=\"https://github.com/databricks/spark-csv\" target=\"_blank\" rel=\"noopener\">spark-csv</a>，其实这就是2.0版本以后读取csv的代码。</p>\n<p>另外，github上还有另一个非官方版本的<a href=\"https://github.com/seahboonsiew/pyspark-csv\" target=\"_blank\" rel=\"noopener\">spark-csv</a>。</p>\n"},{"title":"ArduPilot修改记录","date":"2016-09-06T13:21:40.000Z","_content":"\n\n\n下载原版ArduPilot，并进行初始化：\n\n```sh\n$ git clone https://github.com/ArduPilot/ardupilot.git\n$ cd ardupilot\n$ git submodule init\n$ git submodule update\n```\n\n\n\n## 原版ArduPilot修改为DM1\n\n在`libraries/AP_HAL_Linux/`目录下增加文件`RCInput_DM1.h`，`RCInput_DM1.cpp`，`RCOutput_DM1.h`，`RCOutput_DM1.cpp`，`pak_stm32.h`\n\n\n\n在`libraries/AP_HAL_Linux/HAL_Linux_Class.cpp`文件中修改\n\n```cpp\n#elif CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_DM1\nstatic RCInput_DM1 rcinDriver;\n\n#elif CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_DM1\nstatic RCOutput_DM1 rcoutDriver;\n```\n\n\n\n在`libraries/AP_HAL_Linux/Scheduler.cpp`文件中修改\n\n```cpp\n#if CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_NAVIO ||    \\\n    CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_ERLEBRAIN2 || \\\n    CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_BH || \\\n    CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_PXFMINI || \\\n    CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_DM1\n#define APM_LINUX_RCIN_RATE             2000\n#define APM_LINUX_TONEALARM_RATE        100\n#define APM_LINUX_IO_RATE               50\n```\n\n\n\n在`libraries/AP_HAL_Linux/SPIDevice.cpp`文件中增加\n\n```cpp\n#elif CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_DM1\nSPIDesc SPIDeviceManager::_device[] = {\n    SPIDesc(\"mpu9250\", 0, 0, SPI_MODE_0, 8, SPI_CS_KERNEL, 1*MHZ, 10*MHZ),\n    SPIDesc(\"stm32\", 0, 1, SPI_MODE_0, 8, SPI_CS_KERNEL,  1*MHZ, 10*MHZ),\n};\n```\n\n\n\n在`libraries/AP_HAL/AP_HAL_Boards.h`文件中增加DM1定义\n\n```cpp\n#define HAL_BOARD_SUBTYPE_LINUX_DM1        1016\n```\n\n```cpp\n#elif CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_DM1\n#define HAL_BOARD_LOG_DIRECTORY \"/var/APM/logs\"\n#define HAL_BOARD_TERRAIN_DIRECTORY \"/var/APM/terrain\"\n#define HAL_INS_DEFAULT HAL_INS_MPU9250_SPI\n#define HAL_INS_MPU9250_NAME \"mpu9250\"\n#define HAL_BARO_DEFAULT HAL_BARO_MS5611_I2C\n#define HAL_BARO_MS5611_I2C_BUS 1\n#define HAL_BARO_MS5611_I2C_ADDR 0x77\n#define HAL_BARO_MS5611_USE_TIMER false\n#define HAL_COMPASS_DEFAULT HAL_COMPASS_AK8963_MPU9250\n```\n\n\n\n在`mk/environ.mk`文件中增加\n\n```cpp\nifneq ($(findstring dm1, $(MAKECMDGOALS)),)\nHAL_BOARD = HAL_BOARD_LINUX\nHAL_BOARD_SUBTYPE = HAL_BOARD_SUBTYPE_LINUX_DM1\nendif\n```\n\n\n\n在`mk/help.mk`文件中增加\n\n```cpp\n\t@echo \"  dm1 - the BPi + NavIO2 cape combination\"\n```\n\n\n\n在`mk/targets.mk`文件中增加\n\n```cpp\ndm1: HAL_BOARD = HAL_BOARD_LINUX\ndm1: TOOLCHAIN = RPI\ndm1: BUILDSYS_DEPRECATED = 1\ndm1: all\n```\n\n\n\n在`Tools/ardupilotwaf/boards.py`文件中添加对dm1的支持，关于waf的使用方法可以参考[waf编译工具使用方法](http://blog.guantau.com/2016/09/06/waf-tool/)\n\n```python\nclass dm1(linux):\n    toolchain = 'arm-linux-gnueabihf'\n\n    def configure_env(self, cfg, env):\n        super(dm1, self).configure_env(cfg, env)\n\n        env.DEFINES.update(\n            CONFIG_HAL_BOARD_SUBTYPE = 'HAL_BOARD_SUBTYPE_LINUX_DM1',\n        )\n```\n\n\n\n\n\n\n\n\n\n下面是在早期ArduPilot上面所做的修改\n\n## libraries/AP_HAL_Linux/HAL_Linux_Class.cpp\n\n目前RCInput_DM1还有问题，将其注释掉\n```cpp\n//guantau\n// #elif CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_DM1\n// static RCInput_DM1 rcinDriver;\n```\n\n## libraries/AP_InertialSensor/AP_InertialSensor_MPU9250.h\n添加函数`accumulate()`，该函数在AP_InertialSensor_Backend.h中申明为纯虚函数\n```cpp\n//guantau\nvoid accumulate() override;\n```\n\n\n## libraries/AP_InertialSensor/AP_InertialSensor_MPU9250.cpp\n\n实现函数`accumulate()`，用于非定时读取情况下手动读取数据\n```cpp\n//guantau\nvoid AP_InertialSensor_MPU9250::accumulate()\n{\n    _poll_data();\n}\n```\n\n在函数`_hardware_init()`中，修改初始化代码\n\n```CPP\nbool AP_InertialSensor_MPU9250::_hardware_init(void)\n{\n    if (!_dev->get_semaphore()->take(100)) {\n        AP_HAL::panic(\"MPU6000: Unable to get semaphore\");\n    }\n\n    // initially run the bus at low speed\n    _dev->set_speed(AP_HAL::Device::SPEED_LOW);\n\n    uint8_t value = _register_read(MPUREG_WHOAMI);\n    if (value != MPUREG_WHOAMI_MPU9250 && value != MPUREG_WHOAMI_MPU9255) {\n        hal.console->printf(\"MPU9250: unexpected WHOAMI 0x%x\\n\", (unsigned)value);\n        _dev->get_semaphore()->give();\n        _dev->set_speed(AP_HAL::Device::SPEED_HIGH);\n        return false;\n    }\n\n    // Clock Source\n    _register_write(MPUREG_PWR_MGMT_1, BIT_PWR_MGMT_1_CLK_XGYRO);\n    hal.scheduler->delay(100);\n\n    // Enable Acc & Gyro\n    _register_write(MPUREG_PWR_MGMT_2, 0x00);\n    hal.scheduler->delay(100);\n\n    // Use DLPF set Gyroscope bandwidth 184Hz, temperature bandwidth 188Hz\n    _register_write(MPUREG_CONFIG, BITS_DLPF_CFG_188HZ);\n    hal.scheduler->delay(100);\n\n    // Gyro scale 2000º/s\n    _register_write(MPUREG_GYRO_CONFIG, BITS_GYRO_FS_2000DPS);\n    hal.scheduler->delay(100);\n\n    // RM-MPU-9250A-00.pdf, pg. 15, select accel full scale 16g\n    _register_write(MPUREG_ACCEL_CONFIG, 0x18);\n    hal.scheduler->delay(100);\n\n    // Set Acc Data Rates, Enable Acc LPF , Bandwidth 184Hz\n    _register_write(MPUREG_ACCEL_CONFIG_2, 0x09);\n    hal.scheduler->delay(100);\n\n    // clear interrupt on any read, and hold the data ready pin high\n    // until we clear the interrupt\n    _register_write(MPUREG_INT_PIN_CFG, 0x30);\n    hal.scheduler->delay(100);\n\n    // Chip reset\n    // uint8_t tries;\n    // for (tries = 0; tries < 5; tries++) {\n        //uint8_t user_ctrl = _register_read(MPUREG_USER_CTRL);\n\n        /* First disable the master I2C to avoid hanging the slaves on the\n         * aulixiliar I2C bus - it will be enabled again if the AuxiliaryBus\n         * is used */\n        //if (user_ctrl & BIT_USER_CTRL_I2C_MST_EN) {\n        //    _register_write(MPUREG_USER_CTRL, user_ctrl & ~BIT_USER_CTRL_I2C_MST_EN);\n        //    hal.scheduler->delay(10);\n        //}\n\n        // reset device\n        //_register_write(MPUREG_PWR_MGMT_1, BIT_PWR_MGMT_1_DEVICE_RESET);\n        //hal.scheduler->delay(100);\n\n        /* bus-dependent initialization */\n        //if (_dev->bus_type == AP_HAL::Device::BUS_TYPE_SPI) {\n            /* Disable I2C bus if SPI selected (Recommended in Datasheet to be\n             * done just after the device is reset) */\n            //_register_write(MPUREG_USER_CTRL, BIT_USER_CTRL_I2C_IF_DIS);\n        //}\n\n        // Wake up device and select GyroZ clock. Note that the\n        // MPU9250 starts up in sleep mode, and it can take some time\n        // for it to come out of sleep\n\n        // _register_write(MPUREG_PWR_MGMT_1, BIT_PWR_MGMT_1_CLK_ZGYRO);\n        // hal.scheduler->delay(5);\n\n        // // check it has woken up\n        // if (_register_read(MPUREG_PWR_MGMT_1) == BIT_PWR_MGMT_1_CLK_ZGYRO) {\n            // break;\n        // }\n\n        // hal.scheduler->delay(10);\n        // if (_data_ready()) {\n            // break;\n        // }\n\n// #if MPU9250_DEBUG\n        // _dump_registers();\n// #endif\n    // }\n    // if (tries == 5) {\n        // hal.console->println(\"Failed to boot MPU9250 5 times\");\n        // goto fail_tries;\n    // }\n\n    _dev->set_speed(AP_HAL::Device::SPEED_HIGH);\n    _dev->get_semaphore()->give();\n\n    return true;\n\n// fail_tries:\n// fail_whoami:\n    // _dev->get_semaphore()->give();\n    // _dev->set_speed(AP_HAL::Device::SPEED_HIGH);\n    // return false;\n}\n```\n\n\n\n在函数`start()`中，去掉初始化代码，去掉定时读取的代码\n\n```cpp\nvoid AP_InertialSensor_MPU9250::start()\n{\n    hal.scheduler->suspend_timer_procs();\n\n    if (!_dev->get_semaphore()->take(100)) {\n        AP_HAL::panic(\"MPU92500: Unable to get semaphore\");\n    }\n\n    // initially run the bus at low speed\n    _dev->set_speed(AP_HAL::Device::SPEED_LOW);\n\n    // // only used for wake-up in accelerometer only low power mode\n    // _register_write(MPUREG_PWR_MGMT_2, 0x00);\n    // hal.scheduler->delay(1);\n\n    // // disable sensor filtering\n    // _register_write(MPUREG_CONFIG, BITS_DLPF_CFG_256HZ_NOLPF2);\n\n    // // set sample rate to 1kHz, and use the 2 pole filter to give the\n    // // desired rate\n    // _register_write(MPUREG_SMPLRT_DIV, DEFAULT_SMPLRT_DIV); // guantau\n    // hal.scheduler->delay(1);\n\n    // // Gyro scale 2000º/s\n    // _register_write(MPUREG_GYRO_CONFIG, BITS_GYRO_FS_2000DPS);\n    // hal.scheduler->delay(1);\n\n    _product_id = AP_PRODUCT_ID_MPU9250;\n\n    // // RM-MPU-9250A-00.pdf, pg. 15, select accel full scale 16g\n    // _register_write(MPUREG_ACCEL_CONFIG,3<<3);\n\n    // // configure interrupt to fire when new data arrives\n    // _register_write(MPUREG_INT_ENABLE, BIT_RAW_RDY_EN);\n\n    // // clear interrupt on any read, and hold the data ready pin high\n    // // until we clear the interrupt\n    // uint8_t value = _register_read(MPUREG_INT_PIN_CFG);\n    // value |= BIT_INT_RD_CLEAR | BIT_LATCH_INT_EN;\n    // _register_write(MPUREG_INT_PIN_CFG, value);\n\n    // now that we have initialised, we set the bus speed to high\n    _dev->set_speed(AP_HAL::Device::SPEED_HIGH);\n\n    _dev->get_semaphore()->give();\n\n    // grab the used instances\n    _gyro_instance = _imu.register_gyro(DEFAULT_SAMPLE_RATE);\n    _accel_instance = _imu.register_accel(DEFAULT_SAMPLE_RATE);\n\n    hal.scheduler->resume_timer_procs();\n\n    // start the timer process to read samples\n    // hal.scheduler->register_timer_process(\n        // FUNCTOR_BIND_MEMBER(&AP_InertialSensor_MPU9250::_poll_data, void));\n\n    //guantau\n    _poll_data();\n}\n```\n\n\n\n在函数`_configure_slaves()`中修改初始化代码\n\n```cpp\nvoid AP_MPU9250_AuxiliaryBus::_configure_slaves()\n{\n    auto &backend = AP_InertialSensor_MPU9250::from(_ins_backend);\n\n    // guantau\n    // I2C Master mode\n    backend._register_write(MPUREG_USER_CTRL, BIT_USER_CTRL_I2C_MST_EN);\n    hal.scheduler->delay(100);\n\n    // I2C configuration multi-master  IIC 400KHz\n    backend._register_write(MPUREG_I2C_MST_CTRL, I2C_MST_CLOCK_400KHZ);\n    hal.scheduler->delay(100);\n\n    // Set the I2C slave addres of AK8963 and set for write.\n    backend._register_write(MPUREG_I2C_SLV0_ADDR, 0x0C);\n    hal.scheduler->delay(100);\n\n    // I2C slave 0 register address from where to begin data transfer\n    backend._register_write(MPUREG_I2C_SLV0_REG, 0x0B);\n    hal.scheduler->delay(100);\n\n    // Reset AK8963\n    backend._register_write(MPUREG_I2C_SLV0_DO, 0x01);\n    hal.scheduler->delay(100);\n\n    // Enable I2C and set 1 byte\n    backend._register_write(MPUREG_I2C_SLV0_CTRL, 0x81);\n    hal.scheduler->delay(100);\n\n    // I2C slave 0 register address from where to begin data transfer\n    backend._register_write(MPUREG_I2C_SLV0_REG, 0x0A);\n    hal.scheduler->delay(100);\n\n    // Register value to continuous measurement in 16bit\n    backend._register_write(MPUREG_I2C_SLV0_DO, 0x12);\n    hal.scheduler->delay(100);\n\n    // Enable I2C and set 1 byte\n    backend._register_write(MPUREG_I2C_SLV0_CTRL, 0x81);\n    hal.scheduler->delay(100);\n\n//    /* Enable the I2C master to slaves on the auxiliary I2C bus*/\n//    uint8_t user_ctrl = backend._register_read(MPUREG_USER_CTRL);\n//    backend._register_write(MPUREG_USER_CTRL, user_ctrl | BIT_USER_CTRL_I2C_MST_EN);\n//\n//    /* stop condition between reads; clock at 400kHz */\n//    backend._register_write(MPUREG_I2C_MST_CTRL,\n//                            I2C_MST_CLOCK_400KHZ | I2C_MST_P_NSR);\n//\n//    /* Hard-code divider for internal sample rate, 1 kHz, resulting in a\n//     * sample rate of 100Hz */\n//    backend._register_write(MPUREG_I2C_SLV4_CTRL, 9);\n//\n//    /* All slaves are subject to the sample rate */\n//    backend._register_write(MPUREG_I2C_MST_DELAY_CTRL,\n//                            I2C_SLV0_DLY_EN | I2C_SLV1_DLY_EN |\n//                            I2C_SLV2_DLY_EN | I2C_SLV3_DLY_EN);\n}\n```\n\n## libraries/AP_Compass/AP_Compass_AK8963.h\n\n添加函数`accumulate()`，该函数在AP_Compass_Backend.h中申明为纯虚函数\n\n```cpp\n//guantau\nvoid accumulate() override;\n```\n\n## libraries/AP_Compass/AP_Compass_AK8963.cpp\n\n实现函数`accumulate()`，用于非定时读取情况下手动读取数据\n\n```cpp\n//guantau\nvoid AP_Compass_AK8963::accumulate()\n{\n    _update();\n}\n```\n\n修改初始化代码`init()`，去除定时读取的任务\n\n```cpp\nbool AP_Compass_AK8963::init()\n{\n    ...\n    ...\n    /* timer needs to be called every 10ms so set the freq_div to 10 */\n    // _timesliced = hal.scheduler->register_timer_process(FUNCTOR_BIND_MEMBER(&AP_Compass_AK8963::_update, void), 10);\n    //guantau\n    _update();\n\t...\n\t...\n}\n```\n\n\n\n\n\n## libraries/AP_HAL_Linux/examples/BusTest/BusTest.cpp\n\n在函数`loop()`中，若循环读取SPI总线的时延过小，则会出现死机的情况。\n\n","source":"_posts/2016-09-06-revise-ardupilot.md","raw":"---\ntitle: ArduPilot修改记录\ndate: 2016-09-06 21:21:40\ncategories: 弄点工具\ntags: \n  - ArduPilot\n---\n\n\n\n下载原版ArduPilot，并进行初始化：\n\n```sh\n$ git clone https://github.com/ArduPilot/ardupilot.git\n$ cd ardupilot\n$ git submodule init\n$ git submodule update\n```\n\n\n\n## 原版ArduPilot修改为DM1\n\n在`libraries/AP_HAL_Linux/`目录下增加文件`RCInput_DM1.h`，`RCInput_DM1.cpp`，`RCOutput_DM1.h`，`RCOutput_DM1.cpp`，`pak_stm32.h`\n\n\n\n在`libraries/AP_HAL_Linux/HAL_Linux_Class.cpp`文件中修改\n\n```cpp\n#elif CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_DM1\nstatic RCInput_DM1 rcinDriver;\n\n#elif CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_DM1\nstatic RCOutput_DM1 rcoutDriver;\n```\n\n\n\n在`libraries/AP_HAL_Linux/Scheduler.cpp`文件中修改\n\n```cpp\n#if CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_NAVIO ||    \\\n    CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_ERLEBRAIN2 || \\\n    CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_BH || \\\n    CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_PXFMINI || \\\n    CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_DM1\n#define APM_LINUX_RCIN_RATE             2000\n#define APM_LINUX_TONEALARM_RATE        100\n#define APM_LINUX_IO_RATE               50\n```\n\n\n\n在`libraries/AP_HAL_Linux/SPIDevice.cpp`文件中增加\n\n```cpp\n#elif CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_DM1\nSPIDesc SPIDeviceManager::_device[] = {\n    SPIDesc(\"mpu9250\", 0, 0, SPI_MODE_0, 8, SPI_CS_KERNEL, 1*MHZ, 10*MHZ),\n    SPIDesc(\"stm32\", 0, 1, SPI_MODE_0, 8, SPI_CS_KERNEL,  1*MHZ, 10*MHZ),\n};\n```\n\n\n\n在`libraries/AP_HAL/AP_HAL_Boards.h`文件中增加DM1定义\n\n```cpp\n#define HAL_BOARD_SUBTYPE_LINUX_DM1        1016\n```\n\n```cpp\n#elif CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_DM1\n#define HAL_BOARD_LOG_DIRECTORY \"/var/APM/logs\"\n#define HAL_BOARD_TERRAIN_DIRECTORY \"/var/APM/terrain\"\n#define HAL_INS_DEFAULT HAL_INS_MPU9250_SPI\n#define HAL_INS_MPU9250_NAME \"mpu9250\"\n#define HAL_BARO_DEFAULT HAL_BARO_MS5611_I2C\n#define HAL_BARO_MS5611_I2C_BUS 1\n#define HAL_BARO_MS5611_I2C_ADDR 0x77\n#define HAL_BARO_MS5611_USE_TIMER false\n#define HAL_COMPASS_DEFAULT HAL_COMPASS_AK8963_MPU9250\n```\n\n\n\n在`mk/environ.mk`文件中增加\n\n```cpp\nifneq ($(findstring dm1, $(MAKECMDGOALS)),)\nHAL_BOARD = HAL_BOARD_LINUX\nHAL_BOARD_SUBTYPE = HAL_BOARD_SUBTYPE_LINUX_DM1\nendif\n```\n\n\n\n在`mk/help.mk`文件中增加\n\n```cpp\n\t@echo \"  dm1 - the BPi + NavIO2 cape combination\"\n```\n\n\n\n在`mk/targets.mk`文件中增加\n\n```cpp\ndm1: HAL_BOARD = HAL_BOARD_LINUX\ndm1: TOOLCHAIN = RPI\ndm1: BUILDSYS_DEPRECATED = 1\ndm1: all\n```\n\n\n\n在`Tools/ardupilotwaf/boards.py`文件中添加对dm1的支持，关于waf的使用方法可以参考[waf编译工具使用方法](http://blog.guantau.com/2016/09/06/waf-tool/)\n\n```python\nclass dm1(linux):\n    toolchain = 'arm-linux-gnueabihf'\n\n    def configure_env(self, cfg, env):\n        super(dm1, self).configure_env(cfg, env)\n\n        env.DEFINES.update(\n            CONFIG_HAL_BOARD_SUBTYPE = 'HAL_BOARD_SUBTYPE_LINUX_DM1',\n        )\n```\n\n\n\n\n\n\n\n\n\n下面是在早期ArduPilot上面所做的修改\n\n## libraries/AP_HAL_Linux/HAL_Linux_Class.cpp\n\n目前RCInput_DM1还有问题，将其注释掉\n```cpp\n//guantau\n// #elif CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_DM1\n// static RCInput_DM1 rcinDriver;\n```\n\n## libraries/AP_InertialSensor/AP_InertialSensor_MPU9250.h\n添加函数`accumulate()`，该函数在AP_InertialSensor_Backend.h中申明为纯虚函数\n```cpp\n//guantau\nvoid accumulate() override;\n```\n\n\n## libraries/AP_InertialSensor/AP_InertialSensor_MPU9250.cpp\n\n实现函数`accumulate()`，用于非定时读取情况下手动读取数据\n```cpp\n//guantau\nvoid AP_InertialSensor_MPU9250::accumulate()\n{\n    _poll_data();\n}\n```\n\n在函数`_hardware_init()`中，修改初始化代码\n\n```CPP\nbool AP_InertialSensor_MPU9250::_hardware_init(void)\n{\n    if (!_dev->get_semaphore()->take(100)) {\n        AP_HAL::panic(\"MPU6000: Unable to get semaphore\");\n    }\n\n    // initially run the bus at low speed\n    _dev->set_speed(AP_HAL::Device::SPEED_LOW);\n\n    uint8_t value = _register_read(MPUREG_WHOAMI);\n    if (value != MPUREG_WHOAMI_MPU9250 && value != MPUREG_WHOAMI_MPU9255) {\n        hal.console->printf(\"MPU9250: unexpected WHOAMI 0x%x\\n\", (unsigned)value);\n        _dev->get_semaphore()->give();\n        _dev->set_speed(AP_HAL::Device::SPEED_HIGH);\n        return false;\n    }\n\n    // Clock Source\n    _register_write(MPUREG_PWR_MGMT_1, BIT_PWR_MGMT_1_CLK_XGYRO);\n    hal.scheduler->delay(100);\n\n    // Enable Acc & Gyro\n    _register_write(MPUREG_PWR_MGMT_2, 0x00);\n    hal.scheduler->delay(100);\n\n    // Use DLPF set Gyroscope bandwidth 184Hz, temperature bandwidth 188Hz\n    _register_write(MPUREG_CONFIG, BITS_DLPF_CFG_188HZ);\n    hal.scheduler->delay(100);\n\n    // Gyro scale 2000º/s\n    _register_write(MPUREG_GYRO_CONFIG, BITS_GYRO_FS_2000DPS);\n    hal.scheduler->delay(100);\n\n    // RM-MPU-9250A-00.pdf, pg. 15, select accel full scale 16g\n    _register_write(MPUREG_ACCEL_CONFIG, 0x18);\n    hal.scheduler->delay(100);\n\n    // Set Acc Data Rates, Enable Acc LPF , Bandwidth 184Hz\n    _register_write(MPUREG_ACCEL_CONFIG_2, 0x09);\n    hal.scheduler->delay(100);\n\n    // clear interrupt on any read, and hold the data ready pin high\n    // until we clear the interrupt\n    _register_write(MPUREG_INT_PIN_CFG, 0x30);\n    hal.scheduler->delay(100);\n\n    // Chip reset\n    // uint8_t tries;\n    // for (tries = 0; tries < 5; tries++) {\n        //uint8_t user_ctrl = _register_read(MPUREG_USER_CTRL);\n\n        /* First disable the master I2C to avoid hanging the slaves on the\n         * aulixiliar I2C bus - it will be enabled again if the AuxiliaryBus\n         * is used */\n        //if (user_ctrl & BIT_USER_CTRL_I2C_MST_EN) {\n        //    _register_write(MPUREG_USER_CTRL, user_ctrl & ~BIT_USER_CTRL_I2C_MST_EN);\n        //    hal.scheduler->delay(10);\n        //}\n\n        // reset device\n        //_register_write(MPUREG_PWR_MGMT_1, BIT_PWR_MGMT_1_DEVICE_RESET);\n        //hal.scheduler->delay(100);\n\n        /* bus-dependent initialization */\n        //if (_dev->bus_type == AP_HAL::Device::BUS_TYPE_SPI) {\n            /* Disable I2C bus if SPI selected (Recommended in Datasheet to be\n             * done just after the device is reset) */\n            //_register_write(MPUREG_USER_CTRL, BIT_USER_CTRL_I2C_IF_DIS);\n        //}\n\n        // Wake up device and select GyroZ clock. Note that the\n        // MPU9250 starts up in sleep mode, and it can take some time\n        // for it to come out of sleep\n\n        // _register_write(MPUREG_PWR_MGMT_1, BIT_PWR_MGMT_1_CLK_ZGYRO);\n        // hal.scheduler->delay(5);\n\n        // // check it has woken up\n        // if (_register_read(MPUREG_PWR_MGMT_1) == BIT_PWR_MGMT_1_CLK_ZGYRO) {\n            // break;\n        // }\n\n        // hal.scheduler->delay(10);\n        // if (_data_ready()) {\n            // break;\n        // }\n\n// #if MPU9250_DEBUG\n        // _dump_registers();\n// #endif\n    // }\n    // if (tries == 5) {\n        // hal.console->println(\"Failed to boot MPU9250 5 times\");\n        // goto fail_tries;\n    // }\n\n    _dev->set_speed(AP_HAL::Device::SPEED_HIGH);\n    _dev->get_semaphore()->give();\n\n    return true;\n\n// fail_tries:\n// fail_whoami:\n    // _dev->get_semaphore()->give();\n    // _dev->set_speed(AP_HAL::Device::SPEED_HIGH);\n    // return false;\n}\n```\n\n\n\n在函数`start()`中，去掉初始化代码，去掉定时读取的代码\n\n```cpp\nvoid AP_InertialSensor_MPU9250::start()\n{\n    hal.scheduler->suspend_timer_procs();\n\n    if (!_dev->get_semaphore()->take(100)) {\n        AP_HAL::panic(\"MPU92500: Unable to get semaphore\");\n    }\n\n    // initially run the bus at low speed\n    _dev->set_speed(AP_HAL::Device::SPEED_LOW);\n\n    // // only used for wake-up in accelerometer only low power mode\n    // _register_write(MPUREG_PWR_MGMT_2, 0x00);\n    // hal.scheduler->delay(1);\n\n    // // disable sensor filtering\n    // _register_write(MPUREG_CONFIG, BITS_DLPF_CFG_256HZ_NOLPF2);\n\n    // // set sample rate to 1kHz, and use the 2 pole filter to give the\n    // // desired rate\n    // _register_write(MPUREG_SMPLRT_DIV, DEFAULT_SMPLRT_DIV); // guantau\n    // hal.scheduler->delay(1);\n\n    // // Gyro scale 2000º/s\n    // _register_write(MPUREG_GYRO_CONFIG, BITS_GYRO_FS_2000DPS);\n    // hal.scheduler->delay(1);\n\n    _product_id = AP_PRODUCT_ID_MPU9250;\n\n    // // RM-MPU-9250A-00.pdf, pg. 15, select accel full scale 16g\n    // _register_write(MPUREG_ACCEL_CONFIG,3<<3);\n\n    // // configure interrupt to fire when new data arrives\n    // _register_write(MPUREG_INT_ENABLE, BIT_RAW_RDY_EN);\n\n    // // clear interrupt on any read, and hold the data ready pin high\n    // // until we clear the interrupt\n    // uint8_t value = _register_read(MPUREG_INT_PIN_CFG);\n    // value |= BIT_INT_RD_CLEAR | BIT_LATCH_INT_EN;\n    // _register_write(MPUREG_INT_PIN_CFG, value);\n\n    // now that we have initialised, we set the bus speed to high\n    _dev->set_speed(AP_HAL::Device::SPEED_HIGH);\n\n    _dev->get_semaphore()->give();\n\n    // grab the used instances\n    _gyro_instance = _imu.register_gyro(DEFAULT_SAMPLE_RATE);\n    _accel_instance = _imu.register_accel(DEFAULT_SAMPLE_RATE);\n\n    hal.scheduler->resume_timer_procs();\n\n    // start the timer process to read samples\n    // hal.scheduler->register_timer_process(\n        // FUNCTOR_BIND_MEMBER(&AP_InertialSensor_MPU9250::_poll_data, void));\n\n    //guantau\n    _poll_data();\n}\n```\n\n\n\n在函数`_configure_slaves()`中修改初始化代码\n\n```cpp\nvoid AP_MPU9250_AuxiliaryBus::_configure_slaves()\n{\n    auto &backend = AP_InertialSensor_MPU9250::from(_ins_backend);\n\n    // guantau\n    // I2C Master mode\n    backend._register_write(MPUREG_USER_CTRL, BIT_USER_CTRL_I2C_MST_EN);\n    hal.scheduler->delay(100);\n\n    // I2C configuration multi-master  IIC 400KHz\n    backend._register_write(MPUREG_I2C_MST_CTRL, I2C_MST_CLOCK_400KHZ);\n    hal.scheduler->delay(100);\n\n    // Set the I2C slave addres of AK8963 and set for write.\n    backend._register_write(MPUREG_I2C_SLV0_ADDR, 0x0C);\n    hal.scheduler->delay(100);\n\n    // I2C slave 0 register address from where to begin data transfer\n    backend._register_write(MPUREG_I2C_SLV0_REG, 0x0B);\n    hal.scheduler->delay(100);\n\n    // Reset AK8963\n    backend._register_write(MPUREG_I2C_SLV0_DO, 0x01);\n    hal.scheduler->delay(100);\n\n    // Enable I2C and set 1 byte\n    backend._register_write(MPUREG_I2C_SLV0_CTRL, 0x81);\n    hal.scheduler->delay(100);\n\n    // I2C slave 0 register address from where to begin data transfer\n    backend._register_write(MPUREG_I2C_SLV0_REG, 0x0A);\n    hal.scheduler->delay(100);\n\n    // Register value to continuous measurement in 16bit\n    backend._register_write(MPUREG_I2C_SLV0_DO, 0x12);\n    hal.scheduler->delay(100);\n\n    // Enable I2C and set 1 byte\n    backend._register_write(MPUREG_I2C_SLV0_CTRL, 0x81);\n    hal.scheduler->delay(100);\n\n//    /* Enable the I2C master to slaves on the auxiliary I2C bus*/\n//    uint8_t user_ctrl = backend._register_read(MPUREG_USER_CTRL);\n//    backend._register_write(MPUREG_USER_CTRL, user_ctrl | BIT_USER_CTRL_I2C_MST_EN);\n//\n//    /* stop condition between reads; clock at 400kHz */\n//    backend._register_write(MPUREG_I2C_MST_CTRL,\n//                            I2C_MST_CLOCK_400KHZ | I2C_MST_P_NSR);\n//\n//    /* Hard-code divider for internal sample rate, 1 kHz, resulting in a\n//     * sample rate of 100Hz */\n//    backend._register_write(MPUREG_I2C_SLV4_CTRL, 9);\n//\n//    /* All slaves are subject to the sample rate */\n//    backend._register_write(MPUREG_I2C_MST_DELAY_CTRL,\n//                            I2C_SLV0_DLY_EN | I2C_SLV1_DLY_EN |\n//                            I2C_SLV2_DLY_EN | I2C_SLV3_DLY_EN);\n}\n```\n\n## libraries/AP_Compass/AP_Compass_AK8963.h\n\n添加函数`accumulate()`，该函数在AP_Compass_Backend.h中申明为纯虚函数\n\n```cpp\n//guantau\nvoid accumulate() override;\n```\n\n## libraries/AP_Compass/AP_Compass_AK8963.cpp\n\n实现函数`accumulate()`，用于非定时读取情况下手动读取数据\n\n```cpp\n//guantau\nvoid AP_Compass_AK8963::accumulate()\n{\n    _update();\n}\n```\n\n修改初始化代码`init()`，去除定时读取的任务\n\n```cpp\nbool AP_Compass_AK8963::init()\n{\n    ...\n    ...\n    /* timer needs to be called every 10ms so set the freq_div to 10 */\n    // _timesliced = hal.scheduler->register_timer_process(FUNCTOR_BIND_MEMBER(&AP_Compass_AK8963::_update, void), 10);\n    //guantau\n    _update();\n\t...\n\t...\n}\n```\n\n\n\n\n\n## libraries/AP_HAL_Linux/examples/BusTest/BusTest.cpp\n\n在函数`loop()`中，若循环读取SPI总线的时延过小，则会出现死机的情况。\n\n","slug":"revise-ardupilot","published":1,"updated":"2016-09-25T11:57:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb6k4kwc0014ulepousj0yvn","content":"<p>下载原版ArduPilot，并进行初始化：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/ArduPilot/ardupilot.git</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> ardupilot</span><br><span class=\"line\">$ git submodule init</span><br><span class=\"line\">$ git submodule update</span><br></pre></td></tr></table></figure>\n<h2 id=\"原版ArduPilot修改为DM1\"><a href=\"#原版ArduPilot修改为DM1\" class=\"headerlink\" title=\"原版ArduPilot修改为DM1\"></a>原版ArduPilot修改为DM1</h2><p>在<code>libraries/AP_HAL_Linux/</code>目录下增加文件<code>RCInput_DM1.h</code>，<code>RCInput_DM1.cpp</code>，<code>RCOutput_DM1.h</code>，<code>RCOutput_DM1.cpp</code>，<code>pak_stm32.h</code></p>\n<p>在<code>libraries/AP_HAL_Linux/HAL_Linux_Class.cpp</code>文件中修改</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">elif</span> CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_DM1</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> RCInput_DM1 rcinDriver;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">elif</span> CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_DM1</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> RCOutput_DM1 rcoutDriver;</span><br></pre></td></tr></table></figure>\n<p>在<code>libraries/AP_HAL_Linux/Scheduler.cpp</code>文件中修改</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_NAVIO ||    \\</span></span><br><span class=\"line\">    CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_ERLEBRAIN2 || \\</span><br><span class=\"line\">    CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_BH || \\</span><br><span class=\"line\">    CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_PXFMINI || \\</span><br><span class=\"line\">    CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_DM1</span><br><span class=\"line\">#define APM_LINUX_RCIN_RATE             <span class=\"number\">2000</span></span><br><span class=\"line\">#define APM_LINUX_TONEALARM_RATE        <span class=\"number\">100</span></span><br><span class=\"line\">#define APM_LINUX_IO_RATE               <span class=\"number\">50</span></span><br></pre></td></tr></table></figure>\n<p>在<code>libraries/AP_HAL_Linux/SPIDevice.cpp</code>文件中增加</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">elif</span> CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_DM1</span></span><br><span class=\"line\">SPIDesc SPIDeviceManager::_device[] = &#123;</span><br><span class=\"line\">    SPIDesc(<span class=\"string\">\"mpu9250\"</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, SPI_MODE_0, <span class=\"number\">8</span>, SPI_CS_KERNEL, <span class=\"number\">1</span>*MHZ, <span class=\"number\">10</span>*MHZ),</span><br><span class=\"line\">    SPIDesc(<span class=\"string\">\"stm32\"</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, SPI_MODE_0, <span class=\"number\">8</span>, SPI_CS_KERNEL,  <span class=\"number\">1</span>*MHZ, <span class=\"number\">10</span>*MHZ),</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>在<code>libraries/AP_HAL/AP_HAL_Boards.h</code>文件中增加DM1定义</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> HAL_BOARD_SUBTYPE_LINUX_DM1        1016</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">elif</span> CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_DM1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> HAL_BOARD_LOG_DIRECTORY <span class=\"meta-string\">\"/var/APM/logs\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> HAL_BOARD_TERRAIN_DIRECTORY <span class=\"meta-string\">\"/var/APM/terrain\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> HAL_INS_DEFAULT HAL_INS_MPU9250_SPI</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> HAL_INS_MPU9250_NAME <span class=\"meta-string\">\"mpu9250\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> HAL_BARO_DEFAULT HAL_BARO_MS5611_I2C</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> HAL_BARO_MS5611_I2C_BUS 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> HAL_BARO_MS5611_I2C_ADDR 0x77</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> HAL_BARO_MS5611_USE_TIMER false</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> HAL_COMPASS_DEFAULT HAL_COMPASS_AK8963_MPU9250</span></span><br></pre></td></tr></table></figure>\n<p>在<code>mk/environ.mk</code>文件中增加</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifneq ($(findstring dm1, $(MAKECMDGOALS)),)</span><br><span class=\"line\">HAL_BOARD = HAL_BOARD_LINUX</span><br><span class=\"line\">HAL_BOARD_SUBTYPE = HAL_BOARD_SUBTYPE_LINUX_DM1</span><br><span class=\"line\">endif</span><br></pre></td></tr></table></figure>\n<p>在<code>mk/help.mk</code>文件中增加</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@echo <span class=\"string\">\"  dm1 - the BPi + NavIO2 cape combination\"</span></span><br></pre></td></tr></table></figure>\n<p>在<code>mk/targets.mk</code>文件中增加</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dm1: HAL_BOARD = HAL_BOARD_LINUX</span><br><span class=\"line\">dm1: TOOLCHAIN = RPI</span><br><span class=\"line\">dm1: BUILDSYS_DEPRECATED = <span class=\"number\">1</span></span><br><span class=\"line\">dm1: all</span><br></pre></td></tr></table></figure>\n<p>在<code>Tools/ardupilotwaf/boards.py</code>文件中添加对dm1的支持，关于waf的使用方法可以参考<a href=\"http://blog.guantau.com/2016/09/06/waf-tool/\">waf编译工具使用方法</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">dm1</span><span class=\"params\">(linux)</span>:</span></span><br><span class=\"line\">    toolchain = <span class=\"string\">'arm-linux-gnueabihf'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">configure_env</span><span class=\"params\">(self, cfg, env)</span>:</span></span><br><span class=\"line\">        super(dm1, self).configure_env(cfg, env)</span><br><span class=\"line\"></span><br><span class=\"line\">        env.DEFINES.update(</span><br><span class=\"line\">            CONFIG_HAL_BOARD_SUBTYPE = <span class=\"string\">'HAL_BOARD_SUBTYPE_LINUX_DM1'</span>,</span><br><span class=\"line\">        )</span><br></pre></td></tr></table></figure>\n<p>下面是在早期ArduPilot上面所做的修改</p>\n<h2 id=\"libraries-AP-HAL-Linux-HAL-Linux-Class-cpp\"><a href=\"#libraries-AP-HAL-Linux-HAL-Linux-Class-cpp\" class=\"headerlink\" title=\"libraries/AP_HAL_Linux/HAL_Linux_Class.cpp\"></a>libraries/AP_HAL_Linux/HAL_Linux_Class.cpp</h2><p>目前RCInput_DM1还有问题，将其注释掉<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//guantau</span></span><br><span class=\"line\"><span class=\"comment\">// #elif CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_DM1</span></span><br><span class=\"line\"><span class=\"comment\">// static RCInput_DM1 rcinDriver;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"libraries-AP-InertialSensor-AP-InertialSensor-MPU9250-h\"><a href=\"#libraries-AP-InertialSensor-AP-InertialSensor-MPU9250-h\" class=\"headerlink\" title=\"libraries/AP_InertialSensor/AP_InertialSensor_MPU9250.h\"></a>libraries/AP_InertialSensor/AP_InertialSensor_MPU9250.h</h2><p>添加函数<code>accumulate()</code>，该函数在AP_InertialSensor_Backend.h中申明为纯虚函数<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//guantau</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">accumulate</span><span class=\"params\">()</span> override</span>;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"libraries-AP-InertialSensor-AP-InertialSensor-MPU9250-cpp\"><a href=\"#libraries-AP-InertialSensor-AP-InertialSensor-MPU9250-cpp\" class=\"headerlink\" title=\"libraries/AP_InertialSensor/AP_InertialSensor_MPU9250.cpp\"></a>libraries/AP_InertialSensor/AP_InertialSensor_MPU9250.cpp</h2><p>实现函数<code>accumulate()</code>，用于非定时读取情况下手动读取数据<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//guantau</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> AP_InertialSensor_MPU9250::accumulate()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _poll_data();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在函数<code>_hardware_init()</code>中，修改初始化代码</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">bool</span> AP_InertialSensor_MPU9250::_hardware_init(<span class=\"keyword\">void</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!_dev-&gt;get_semaphore()-&gt;take(<span class=\"number\">100</span>)) &#123;</span><br><span class=\"line\">        AP_HAL::panic(<span class=\"string\">\"MPU6000: Unable to get semaphore\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// initially run the bus at low speed</span></span><br><span class=\"line\">    _dev-&gt;set_speed(AP_HAL::Device::SPEED_LOW);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">uint8_t</span> value = _register_read(MPUREG_WHOAMI);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value != MPUREG_WHOAMI_MPU9250 &amp;&amp; value != MPUREG_WHOAMI_MPU9255) &#123;</span><br><span class=\"line\">        hal.console-&gt;<span class=\"built_in\">printf</span>(<span class=\"string\">\"MPU9250: unexpected WHOAMI 0x%x\\n\"</span>, (<span class=\"keyword\">unsigned</span>)value);</span><br><span class=\"line\">        _dev-&gt;get_semaphore()-&gt;give();</span><br><span class=\"line\">        _dev-&gt;set_speed(AP_HAL::Device::SPEED_HIGH);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Clock Source</span></span><br><span class=\"line\">    _register_write(MPUREG_PWR_MGMT_1, BIT_PWR_MGMT_1_CLK_XGYRO);</span><br><span class=\"line\">    hal.scheduler-&gt;delay(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Enable Acc &amp; Gyro</span></span><br><span class=\"line\">    _register_write(MPUREG_PWR_MGMT_2, <span class=\"number\">0x00</span>);</span><br><span class=\"line\">    hal.scheduler-&gt;delay(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Use DLPF set Gyroscope bandwidth 184Hz, temperature bandwidth 188Hz</span></span><br><span class=\"line\">    _register_write(MPUREG_CONFIG, BITS_DLPF_CFG_188HZ);</span><br><span class=\"line\">    hal.scheduler-&gt;delay(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Gyro scale 2000º/s</span></span><br><span class=\"line\">    _register_write(MPUREG_GYRO_CONFIG, BITS_GYRO_FS_2000DPS);</span><br><span class=\"line\">    hal.scheduler-&gt;delay(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// RM-MPU-9250A-00.pdf, pg. 15, select accel full scale 16g</span></span><br><span class=\"line\">    _register_write(MPUREG_ACCEL_CONFIG, <span class=\"number\">0x18</span>);</span><br><span class=\"line\">    hal.scheduler-&gt;delay(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Set Acc Data Rates, Enable Acc LPF , Bandwidth 184Hz</span></span><br><span class=\"line\">    _register_write(MPUREG_ACCEL_CONFIG_2, <span class=\"number\">0x09</span>);</span><br><span class=\"line\">    hal.scheduler-&gt;delay(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// clear interrupt on any read, and hold the data ready pin high</span></span><br><span class=\"line\">    <span class=\"comment\">// until we clear the interrupt</span></span><br><span class=\"line\">    _register_write(MPUREG_INT_PIN_CFG, <span class=\"number\">0x30</span>);</span><br><span class=\"line\">    hal.scheduler-&gt;delay(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Chip reset</span></span><br><span class=\"line\">    <span class=\"comment\">// uint8_t tries;</span></span><br><span class=\"line\">    <span class=\"comment\">// for (tries = 0; tries &lt; 5; tries++) &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//uint8_t user_ctrl = _register_read(MPUREG_USER_CTRL);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* First disable the master I2C to avoid hanging the slaves on the</span></span><br><span class=\"line\"><span class=\"comment\">         * aulixiliar I2C bus - it will be enabled again if the AuxiliaryBus</span></span><br><span class=\"line\"><span class=\"comment\">         * is used */</span></span><br><span class=\"line\">        <span class=\"comment\">//if (user_ctrl &amp; BIT_USER_CTRL_I2C_MST_EN) &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//    _register_write(MPUREG_USER_CTRL, user_ctrl &amp; ~BIT_USER_CTRL_I2C_MST_EN);</span></span><br><span class=\"line\">        <span class=\"comment\">//    hal.scheduler-&gt;delay(10);</span></span><br><span class=\"line\">        <span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// reset device</span></span><br><span class=\"line\">        <span class=\"comment\">//_register_write(MPUREG_PWR_MGMT_1, BIT_PWR_MGMT_1_DEVICE_RESET);</span></span><br><span class=\"line\">        <span class=\"comment\">//hal.scheduler-&gt;delay(100);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* bus-dependent initialization */</span></span><br><span class=\"line\">        <span class=\"comment\">//if (_dev-&gt;bus_type == AP_HAL::Device::BUS_TYPE_SPI) &#123;</span></span><br><span class=\"line\">            <span class=\"comment\">/* Disable I2C bus if SPI selected (Recommended in Datasheet to be</span></span><br><span class=\"line\"><span class=\"comment\">             * done just after the device is reset) */</span></span><br><span class=\"line\">            <span class=\"comment\">//_register_write(MPUREG_USER_CTRL, BIT_USER_CTRL_I2C_IF_DIS);</span></span><br><span class=\"line\">        <span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Wake up device and select GyroZ clock. Note that the</span></span><br><span class=\"line\">        <span class=\"comment\">// MPU9250 starts up in sleep mode, and it can take some time</span></span><br><span class=\"line\">        <span class=\"comment\">// for it to come out of sleep</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// _register_write(MPUREG_PWR_MGMT_1, BIT_PWR_MGMT_1_CLK_ZGYRO);</span></span><br><span class=\"line\">        <span class=\"comment\">// hal.scheduler-&gt;delay(5);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// // check it has woken up</span></span><br><span class=\"line\">        <span class=\"comment\">// if (_register_read(MPUREG_PWR_MGMT_1) == BIT_PWR_MGMT_1_CLK_ZGYRO) &#123;</span></span><br><span class=\"line\">            <span class=\"comment\">// break;</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// hal.scheduler-&gt;delay(10);</span></span><br><span class=\"line\">        <span class=\"comment\">// if (_data_ready()) &#123;</span></span><br><span class=\"line\">            <span class=\"comment\">// break;</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// #if MPU9250_DEBUG</span></span><br><span class=\"line\">        <span class=\"comment\">// _dump_registers();</span></span><br><span class=\"line\"><span class=\"comment\">// #endif</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// if (tries == 5) &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">// hal.console-&gt;println(\"Failed to boot MPU9250 5 times\");</span></span><br><span class=\"line\">        <span class=\"comment\">// goto fail_tries;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    _dev-&gt;set_speed(AP_HAL::Device::SPEED_HIGH);</span><br><span class=\"line\">    _dev-&gt;get_semaphore()-&gt;give();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// fail_tries:</span></span><br><span class=\"line\"><span class=\"comment\">// fail_whoami:</span></span><br><span class=\"line\">    <span class=\"comment\">// _dev-&gt;get_semaphore()-&gt;give();</span></span><br><span class=\"line\">    <span class=\"comment\">// _dev-&gt;set_speed(AP_HAL::Device::SPEED_HIGH);</span></span><br><span class=\"line\">    <span class=\"comment\">// return false;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在函数<code>start()</code>中，去掉初始化代码，去掉定时读取的代码</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> AP_InertialSensor_MPU9250::start()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    hal.scheduler-&gt;suspend_timer_procs();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!_dev-&gt;get_semaphore()-&gt;take(<span class=\"number\">100</span>)) &#123;</span><br><span class=\"line\">        AP_HAL::panic(<span class=\"string\">\"MPU92500: Unable to get semaphore\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// initially run the bus at low speed</span></span><br><span class=\"line\">    _dev-&gt;set_speed(AP_HAL::Device::SPEED_LOW);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// // only used for wake-up in accelerometer only low power mode</span></span><br><span class=\"line\">    <span class=\"comment\">// _register_write(MPUREG_PWR_MGMT_2, 0x00);</span></span><br><span class=\"line\">    <span class=\"comment\">// hal.scheduler-&gt;delay(1);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// // disable sensor filtering</span></span><br><span class=\"line\">    <span class=\"comment\">// _register_write(MPUREG_CONFIG, BITS_DLPF_CFG_256HZ_NOLPF2);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// // set sample rate to 1kHz, and use the 2 pole filter to give the</span></span><br><span class=\"line\">    <span class=\"comment\">// // desired rate</span></span><br><span class=\"line\">    <span class=\"comment\">// _register_write(MPUREG_SMPLRT_DIV, DEFAULT_SMPLRT_DIV); // guantau</span></span><br><span class=\"line\">    <span class=\"comment\">// hal.scheduler-&gt;delay(1);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// // Gyro scale 2000º/s</span></span><br><span class=\"line\">    <span class=\"comment\">// _register_write(MPUREG_GYRO_CONFIG, BITS_GYRO_FS_2000DPS);</span></span><br><span class=\"line\">    <span class=\"comment\">// hal.scheduler-&gt;delay(1);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    _product_id = AP_PRODUCT_ID_MPU9250;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// // RM-MPU-9250A-00.pdf, pg. 15, select accel full scale 16g</span></span><br><span class=\"line\">    <span class=\"comment\">// _register_write(MPUREG_ACCEL_CONFIG,3&lt;&lt;3);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// // configure interrupt to fire when new data arrives</span></span><br><span class=\"line\">    <span class=\"comment\">// _register_write(MPUREG_INT_ENABLE, BIT_RAW_RDY_EN);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// // clear interrupt on any read, and hold the data ready pin high</span></span><br><span class=\"line\">    <span class=\"comment\">// // until we clear the interrupt</span></span><br><span class=\"line\">    <span class=\"comment\">// uint8_t value = _register_read(MPUREG_INT_PIN_CFG);</span></span><br><span class=\"line\">    <span class=\"comment\">// value |= BIT_INT_RD_CLEAR | BIT_LATCH_INT_EN;</span></span><br><span class=\"line\">    <span class=\"comment\">// _register_write(MPUREG_INT_PIN_CFG, value);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// now that we have initialised, we set the bus speed to high</span></span><br><span class=\"line\">    _dev-&gt;set_speed(AP_HAL::Device::SPEED_HIGH);</span><br><span class=\"line\"></span><br><span class=\"line\">    _dev-&gt;get_semaphore()-&gt;give();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// grab the used instances</span></span><br><span class=\"line\">    _gyro_instance = _imu.register_gyro(DEFAULT_SAMPLE_RATE);</span><br><span class=\"line\">    _accel_instance = _imu.register_accel(DEFAULT_SAMPLE_RATE);</span><br><span class=\"line\"></span><br><span class=\"line\">    hal.scheduler-&gt;resume_timer_procs();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// start the timer process to read samples</span></span><br><span class=\"line\">    <span class=\"comment\">// hal.scheduler-&gt;register_timer_process(</span></span><br><span class=\"line\">        <span class=\"comment\">// FUNCTOR_BIND_MEMBER(&amp;AP_InertialSensor_MPU9250::_poll_data, void));</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//guantau</span></span><br><span class=\"line\">    _poll_data();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在函数<code>_configure_slaves()</code>中修改初始化代码</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> AP_MPU9250_AuxiliaryBus::_configure_slaves()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> &amp;backend = AP_InertialSensor_MPU9250::from(_ins_backend);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// guantau</span></span><br><span class=\"line\">    <span class=\"comment\">// I2C Master mode</span></span><br><span class=\"line\">    backend._register_write(MPUREG_USER_CTRL, BIT_USER_CTRL_I2C_MST_EN);</span><br><span class=\"line\">    hal.scheduler-&gt;delay(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// I2C configuration multi-master  IIC 400KHz</span></span><br><span class=\"line\">    backend._register_write(MPUREG_I2C_MST_CTRL, I2C_MST_CLOCK_400KHZ);</span><br><span class=\"line\">    hal.scheduler-&gt;delay(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Set the I2C slave addres of AK8963 and set for write.</span></span><br><span class=\"line\">    backend._register_write(MPUREG_I2C_SLV0_ADDR, <span class=\"number\">0x0C</span>);</span><br><span class=\"line\">    hal.scheduler-&gt;delay(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// I2C slave 0 register address from where to begin data transfer</span></span><br><span class=\"line\">    backend._register_write(MPUREG_I2C_SLV0_REG, <span class=\"number\">0x0B</span>);</span><br><span class=\"line\">    hal.scheduler-&gt;delay(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Reset AK8963</span></span><br><span class=\"line\">    backend._register_write(MPUREG_I2C_SLV0_DO, <span class=\"number\">0x01</span>);</span><br><span class=\"line\">    hal.scheduler-&gt;delay(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Enable I2C and set 1 byte</span></span><br><span class=\"line\">    backend._register_write(MPUREG_I2C_SLV0_CTRL, <span class=\"number\">0x81</span>);</span><br><span class=\"line\">    hal.scheduler-&gt;delay(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// I2C slave 0 register address from where to begin data transfer</span></span><br><span class=\"line\">    backend._register_write(MPUREG_I2C_SLV0_REG, <span class=\"number\">0x0A</span>);</span><br><span class=\"line\">    hal.scheduler-&gt;delay(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Register value to continuous measurement in 16bit</span></span><br><span class=\"line\">    backend._register_write(MPUREG_I2C_SLV0_DO, <span class=\"number\">0x12</span>);</span><br><span class=\"line\">    hal.scheduler-&gt;delay(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Enable I2C and set 1 byte</span></span><br><span class=\"line\">    backend._register_write(MPUREG_I2C_SLV0_CTRL, <span class=\"number\">0x81</span>);</span><br><span class=\"line\">    hal.scheduler-&gt;delay(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    /* Enable the I2C master to slaves on the auxiliary I2C bus*/</span></span><br><span class=\"line\"><span class=\"comment\">//    uint8_t user_ctrl = backend._register_read(MPUREG_USER_CTRL);</span></span><br><span class=\"line\"><span class=\"comment\">//    backend._register_write(MPUREG_USER_CTRL, user_ctrl | BIT_USER_CTRL_I2C_MST_EN);</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//    /* stop condition between reads; clock at 400kHz */</span></span><br><span class=\"line\"><span class=\"comment\">//    backend._register_write(MPUREG_I2C_MST_CTRL,</span></span><br><span class=\"line\"><span class=\"comment\">//                            I2C_MST_CLOCK_400KHZ | I2C_MST_P_NSR);</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//    /* Hard-code divider for internal sample rate, 1 kHz, resulting in a</span></span><br><span class=\"line\"><span class=\"comment\">//     * sample rate of 100Hz */</span></span><br><span class=\"line\"><span class=\"comment\">//    backend._register_write(MPUREG_I2C_SLV4_CTRL, 9);</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//    /* All slaves are subject to the sample rate */</span></span><br><span class=\"line\"><span class=\"comment\">//    backend._register_write(MPUREG_I2C_MST_DELAY_CTRL,</span></span><br><span class=\"line\"><span class=\"comment\">//                            I2C_SLV0_DLY_EN | I2C_SLV1_DLY_EN |</span></span><br><span class=\"line\"><span class=\"comment\">//                            I2C_SLV2_DLY_EN | I2C_SLV3_DLY_EN);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"libraries-AP-Compass-AP-Compass-AK8963-h\"><a href=\"#libraries-AP-Compass-AP-Compass-AK8963-h\" class=\"headerlink\" title=\"libraries/AP_Compass/AP_Compass_AK8963.h\"></a>libraries/AP_Compass/AP_Compass_AK8963.h</h2><p>添加函数<code>accumulate()</code>，该函数在AP_Compass_Backend.h中申明为纯虚函数</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//guantau</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">accumulate</span><span class=\"params\">()</span> override</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"libraries-AP-Compass-AP-Compass-AK8963-cpp\"><a href=\"#libraries-AP-Compass-AP-Compass-AK8963-cpp\" class=\"headerlink\" title=\"libraries/AP_Compass/AP_Compass_AK8963.cpp\"></a>libraries/AP_Compass/AP_Compass_AK8963.cpp</h2><p>实现函数<code>accumulate()</code>，用于非定时读取情况下手动读取数据</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//guantau</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> AP_Compass_AK8963::accumulate()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _update();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改初始化代码<code>init()</code>，去除定时读取的任务</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">bool</span> AP_Compass_AK8963::init()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">/* timer needs to be called every 10ms so set the freq_div to 10 */</span></span><br><span class=\"line\">    <span class=\"comment\">// _timesliced = hal.scheduler-&gt;register_timer_process(FUNCTOR_BIND_MEMBER(&amp;AP_Compass_AK8963::_update, void), 10);</span></span><br><span class=\"line\">    <span class=\"comment\">//guantau</span></span><br><span class=\"line\">    _update();</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"libraries-AP-HAL-Linux-examples-BusTest-BusTest-cpp\"><a href=\"#libraries-AP-HAL-Linux-examples-BusTest-BusTest-cpp\" class=\"headerlink\" title=\"libraries/AP_HAL_Linux/examples/BusTest/BusTest.cpp\"></a>libraries/AP_HAL_Linux/examples/BusTest/BusTest.cpp</h2><p>在函数<code>loop()</code>中，若循环读取SPI总线的时延过小，则会出现死机的情况。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>下载原版ArduPilot，并进行初始化：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/ArduPilot/ardupilot.git</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> ardupilot</span><br><span class=\"line\">$ git submodule init</span><br><span class=\"line\">$ git submodule update</span><br></pre></td></tr></table></figure>\n<h2 id=\"原版ArduPilot修改为DM1\"><a href=\"#原版ArduPilot修改为DM1\" class=\"headerlink\" title=\"原版ArduPilot修改为DM1\"></a>原版ArduPilot修改为DM1</h2><p>在<code>libraries/AP_HAL_Linux/</code>目录下增加文件<code>RCInput_DM1.h</code>，<code>RCInput_DM1.cpp</code>，<code>RCOutput_DM1.h</code>，<code>RCOutput_DM1.cpp</code>，<code>pak_stm32.h</code></p>\n<p>在<code>libraries/AP_HAL_Linux/HAL_Linux_Class.cpp</code>文件中修改</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">elif</span> CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_DM1</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> RCInput_DM1 rcinDriver;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">elif</span> CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_DM1</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> RCOutput_DM1 rcoutDriver;</span><br></pre></td></tr></table></figure>\n<p>在<code>libraries/AP_HAL_Linux/Scheduler.cpp</code>文件中修改</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_NAVIO ||    \\</span></span><br><span class=\"line\">    CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_ERLEBRAIN2 || \\</span><br><span class=\"line\">    CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_BH || \\</span><br><span class=\"line\">    CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_PXFMINI || \\</span><br><span class=\"line\">    CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_DM1</span><br><span class=\"line\">#define APM_LINUX_RCIN_RATE             <span class=\"number\">2000</span></span><br><span class=\"line\">#define APM_LINUX_TONEALARM_RATE        <span class=\"number\">100</span></span><br><span class=\"line\">#define APM_LINUX_IO_RATE               <span class=\"number\">50</span></span><br></pre></td></tr></table></figure>\n<p>在<code>libraries/AP_HAL_Linux/SPIDevice.cpp</code>文件中增加</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">elif</span> CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_DM1</span></span><br><span class=\"line\">SPIDesc SPIDeviceManager::_device[] = &#123;</span><br><span class=\"line\">    SPIDesc(<span class=\"string\">\"mpu9250\"</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, SPI_MODE_0, <span class=\"number\">8</span>, SPI_CS_KERNEL, <span class=\"number\">1</span>*MHZ, <span class=\"number\">10</span>*MHZ),</span><br><span class=\"line\">    SPIDesc(<span class=\"string\">\"stm32\"</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, SPI_MODE_0, <span class=\"number\">8</span>, SPI_CS_KERNEL,  <span class=\"number\">1</span>*MHZ, <span class=\"number\">10</span>*MHZ),</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>在<code>libraries/AP_HAL/AP_HAL_Boards.h</code>文件中增加DM1定义</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> HAL_BOARD_SUBTYPE_LINUX_DM1        1016</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">elif</span> CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_DM1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> HAL_BOARD_LOG_DIRECTORY <span class=\"meta-string\">\"/var/APM/logs\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> HAL_BOARD_TERRAIN_DIRECTORY <span class=\"meta-string\">\"/var/APM/terrain\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> HAL_INS_DEFAULT HAL_INS_MPU9250_SPI</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> HAL_INS_MPU9250_NAME <span class=\"meta-string\">\"mpu9250\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> HAL_BARO_DEFAULT HAL_BARO_MS5611_I2C</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> HAL_BARO_MS5611_I2C_BUS 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> HAL_BARO_MS5611_I2C_ADDR 0x77</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> HAL_BARO_MS5611_USE_TIMER false</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> HAL_COMPASS_DEFAULT HAL_COMPASS_AK8963_MPU9250</span></span><br></pre></td></tr></table></figure>\n<p>在<code>mk/environ.mk</code>文件中增加</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifneq ($(findstring dm1, $(MAKECMDGOALS)),)</span><br><span class=\"line\">HAL_BOARD = HAL_BOARD_LINUX</span><br><span class=\"line\">HAL_BOARD_SUBTYPE = HAL_BOARD_SUBTYPE_LINUX_DM1</span><br><span class=\"line\">endif</span><br></pre></td></tr></table></figure>\n<p>在<code>mk/help.mk</code>文件中增加</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@echo <span class=\"string\">\"  dm1 - the BPi + NavIO2 cape combination\"</span></span><br></pre></td></tr></table></figure>\n<p>在<code>mk/targets.mk</code>文件中增加</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dm1: HAL_BOARD = HAL_BOARD_LINUX</span><br><span class=\"line\">dm1: TOOLCHAIN = RPI</span><br><span class=\"line\">dm1: BUILDSYS_DEPRECATED = <span class=\"number\">1</span></span><br><span class=\"line\">dm1: all</span><br></pre></td></tr></table></figure>\n<p>在<code>Tools/ardupilotwaf/boards.py</code>文件中添加对dm1的支持，关于waf的使用方法可以参考<a href=\"http://blog.guantau.com/2016/09/06/waf-tool/\">waf编译工具使用方法</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">dm1</span><span class=\"params\">(linux)</span>:</span></span><br><span class=\"line\">    toolchain = <span class=\"string\">'arm-linux-gnueabihf'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">configure_env</span><span class=\"params\">(self, cfg, env)</span>:</span></span><br><span class=\"line\">        super(dm1, self).configure_env(cfg, env)</span><br><span class=\"line\"></span><br><span class=\"line\">        env.DEFINES.update(</span><br><span class=\"line\">            CONFIG_HAL_BOARD_SUBTYPE = <span class=\"string\">'HAL_BOARD_SUBTYPE_LINUX_DM1'</span>,</span><br><span class=\"line\">        )</span><br></pre></td></tr></table></figure>\n<p>下面是在早期ArduPilot上面所做的修改</p>\n<h2 id=\"libraries-AP-HAL-Linux-HAL-Linux-Class-cpp\"><a href=\"#libraries-AP-HAL-Linux-HAL-Linux-Class-cpp\" class=\"headerlink\" title=\"libraries/AP_HAL_Linux/HAL_Linux_Class.cpp\"></a>libraries/AP_HAL_Linux/HAL_Linux_Class.cpp</h2><p>目前RCInput_DM1还有问题，将其注释掉<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//guantau</span></span><br><span class=\"line\"><span class=\"comment\">// #elif CONFIG_HAL_BOARD_SUBTYPE == HAL_BOARD_SUBTYPE_LINUX_DM1</span></span><br><span class=\"line\"><span class=\"comment\">// static RCInput_DM1 rcinDriver;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"libraries-AP-InertialSensor-AP-InertialSensor-MPU9250-h\"><a href=\"#libraries-AP-InertialSensor-AP-InertialSensor-MPU9250-h\" class=\"headerlink\" title=\"libraries/AP_InertialSensor/AP_InertialSensor_MPU9250.h\"></a>libraries/AP_InertialSensor/AP_InertialSensor_MPU9250.h</h2><p>添加函数<code>accumulate()</code>，该函数在AP_InertialSensor_Backend.h中申明为纯虚函数<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//guantau</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">accumulate</span><span class=\"params\">()</span> override</span>;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"libraries-AP-InertialSensor-AP-InertialSensor-MPU9250-cpp\"><a href=\"#libraries-AP-InertialSensor-AP-InertialSensor-MPU9250-cpp\" class=\"headerlink\" title=\"libraries/AP_InertialSensor/AP_InertialSensor_MPU9250.cpp\"></a>libraries/AP_InertialSensor/AP_InertialSensor_MPU9250.cpp</h2><p>实现函数<code>accumulate()</code>，用于非定时读取情况下手动读取数据<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//guantau</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> AP_InertialSensor_MPU9250::accumulate()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _poll_data();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在函数<code>_hardware_init()</code>中，修改初始化代码</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">bool</span> AP_InertialSensor_MPU9250::_hardware_init(<span class=\"keyword\">void</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!_dev-&gt;get_semaphore()-&gt;take(<span class=\"number\">100</span>)) &#123;</span><br><span class=\"line\">        AP_HAL::panic(<span class=\"string\">\"MPU6000: Unable to get semaphore\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// initially run the bus at low speed</span></span><br><span class=\"line\">    _dev-&gt;set_speed(AP_HAL::Device::SPEED_LOW);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">uint8_t</span> value = _register_read(MPUREG_WHOAMI);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value != MPUREG_WHOAMI_MPU9250 &amp;&amp; value != MPUREG_WHOAMI_MPU9255) &#123;</span><br><span class=\"line\">        hal.console-&gt;<span class=\"built_in\">printf</span>(<span class=\"string\">\"MPU9250: unexpected WHOAMI 0x%x\\n\"</span>, (<span class=\"keyword\">unsigned</span>)value);</span><br><span class=\"line\">        _dev-&gt;get_semaphore()-&gt;give();</span><br><span class=\"line\">        _dev-&gt;set_speed(AP_HAL::Device::SPEED_HIGH);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Clock Source</span></span><br><span class=\"line\">    _register_write(MPUREG_PWR_MGMT_1, BIT_PWR_MGMT_1_CLK_XGYRO);</span><br><span class=\"line\">    hal.scheduler-&gt;delay(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Enable Acc &amp; Gyro</span></span><br><span class=\"line\">    _register_write(MPUREG_PWR_MGMT_2, <span class=\"number\">0x00</span>);</span><br><span class=\"line\">    hal.scheduler-&gt;delay(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Use DLPF set Gyroscope bandwidth 184Hz, temperature bandwidth 188Hz</span></span><br><span class=\"line\">    _register_write(MPUREG_CONFIG, BITS_DLPF_CFG_188HZ);</span><br><span class=\"line\">    hal.scheduler-&gt;delay(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Gyro scale 2000º/s</span></span><br><span class=\"line\">    _register_write(MPUREG_GYRO_CONFIG, BITS_GYRO_FS_2000DPS);</span><br><span class=\"line\">    hal.scheduler-&gt;delay(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// RM-MPU-9250A-00.pdf, pg. 15, select accel full scale 16g</span></span><br><span class=\"line\">    _register_write(MPUREG_ACCEL_CONFIG, <span class=\"number\">0x18</span>);</span><br><span class=\"line\">    hal.scheduler-&gt;delay(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Set Acc Data Rates, Enable Acc LPF , Bandwidth 184Hz</span></span><br><span class=\"line\">    _register_write(MPUREG_ACCEL_CONFIG_2, <span class=\"number\">0x09</span>);</span><br><span class=\"line\">    hal.scheduler-&gt;delay(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// clear interrupt on any read, and hold the data ready pin high</span></span><br><span class=\"line\">    <span class=\"comment\">// until we clear the interrupt</span></span><br><span class=\"line\">    _register_write(MPUREG_INT_PIN_CFG, <span class=\"number\">0x30</span>);</span><br><span class=\"line\">    hal.scheduler-&gt;delay(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Chip reset</span></span><br><span class=\"line\">    <span class=\"comment\">// uint8_t tries;</span></span><br><span class=\"line\">    <span class=\"comment\">// for (tries = 0; tries &lt; 5; tries++) &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//uint8_t user_ctrl = _register_read(MPUREG_USER_CTRL);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* First disable the master I2C to avoid hanging the slaves on the</span></span><br><span class=\"line\"><span class=\"comment\">         * aulixiliar I2C bus - it will be enabled again if the AuxiliaryBus</span></span><br><span class=\"line\"><span class=\"comment\">         * is used */</span></span><br><span class=\"line\">        <span class=\"comment\">//if (user_ctrl &amp; BIT_USER_CTRL_I2C_MST_EN) &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//    _register_write(MPUREG_USER_CTRL, user_ctrl &amp; ~BIT_USER_CTRL_I2C_MST_EN);</span></span><br><span class=\"line\">        <span class=\"comment\">//    hal.scheduler-&gt;delay(10);</span></span><br><span class=\"line\">        <span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// reset device</span></span><br><span class=\"line\">        <span class=\"comment\">//_register_write(MPUREG_PWR_MGMT_1, BIT_PWR_MGMT_1_DEVICE_RESET);</span></span><br><span class=\"line\">        <span class=\"comment\">//hal.scheduler-&gt;delay(100);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* bus-dependent initialization */</span></span><br><span class=\"line\">        <span class=\"comment\">//if (_dev-&gt;bus_type == AP_HAL::Device::BUS_TYPE_SPI) &#123;</span></span><br><span class=\"line\">            <span class=\"comment\">/* Disable I2C bus if SPI selected (Recommended in Datasheet to be</span></span><br><span class=\"line\"><span class=\"comment\">             * done just after the device is reset) */</span></span><br><span class=\"line\">            <span class=\"comment\">//_register_write(MPUREG_USER_CTRL, BIT_USER_CTRL_I2C_IF_DIS);</span></span><br><span class=\"line\">        <span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Wake up device and select GyroZ clock. Note that the</span></span><br><span class=\"line\">        <span class=\"comment\">// MPU9250 starts up in sleep mode, and it can take some time</span></span><br><span class=\"line\">        <span class=\"comment\">// for it to come out of sleep</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// _register_write(MPUREG_PWR_MGMT_1, BIT_PWR_MGMT_1_CLK_ZGYRO);</span></span><br><span class=\"line\">        <span class=\"comment\">// hal.scheduler-&gt;delay(5);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// // check it has woken up</span></span><br><span class=\"line\">        <span class=\"comment\">// if (_register_read(MPUREG_PWR_MGMT_1) == BIT_PWR_MGMT_1_CLK_ZGYRO) &#123;</span></span><br><span class=\"line\">            <span class=\"comment\">// break;</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// hal.scheduler-&gt;delay(10);</span></span><br><span class=\"line\">        <span class=\"comment\">// if (_data_ready()) &#123;</span></span><br><span class=\"line\">            <span class=\"comment\">// break;</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// #if MPU9250_DEBUG</span></span><br><span class=\"line\">        <span class=\"comment\">// _dump_registers();</span></span><br><span class=\"line\"><span class=\"comment\">// #endif</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// if (tries == 5) &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">// hal.console-&gt;println(\"Failed to boot MPU9250 5 times\");</span></span><br><span class=\"line\">        <span class=\"comment\">// goto fail_tries;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    _dev-&gt;set_speed(AP_HAL::Device::SPEED_HIGH);</span><br><span class=\"line\">    _dev-&gt;get_semaphore()-&gt;give();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// fail_tries:</span></span><br><span class=\"line\"><span class=\"comment\">// fail_whoami:</span></span><br><span class=\"line\">    <span class=\"comment\">// _dev-&gt;get_semaphore()-&gt;give();</span></span><br><span class=\"line\">    <span class=\"comment\">// _dev-&gt;set_speed(AP_HAL::Device::SPEED_HIGH);</span></span><br><span class=\"line\">    <span class=\"comment\">// return false;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在函数<code>start()</code>中，去掉初始化代码，去掉定时读取的代码</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> AP_InertialSensor_MPU9250::start()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    hal.scheduler-&gt;suspend_timer_procs();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!_dev-&gt;get_semaphore()-&gt;take(<span class=\"number\">100</span>)) &#123;</span><br><span class=\"line\">        AP_HAL::panic(<span class=\"string\">\"MPU92500: Unable to get semaphore\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// initially run the bus at low speed</span></span><br><span class=\"line\">    _dev-&gt;set_speed(AP_HAL::Device::SPEED_LOW);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// // only used for wake-up in accelerometer only low power mode</span></span><br><span class=\"line\">    <span class=\"comment\">// _register_write(MPUREG_PWR_MGMT_2, 0x00);</span></span><br><span class=\"line\">    <span class=\"comment\">// hal.scheduler-&gt;delay(1);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// // disable sensor filtering</span></span><br><span class=\"line\">    <span class=\"comment\">// _register_write(MPUREG_CONFIG, BITS_DLPF_CFG_256HZ_NOLPF2);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// // set sample rate to 1kHz, and use the 2 pole filter to give the</span></span><br><span class=\"line\">    <span class=\"comment\">// // desired rate</span></span><br><span class=\"line\">    <span class=\"comment\">// _register_write(MPUREG_SMPLRT_DIV, DEFAULT_SMPLRT_DIV); // guantau</span></span><br><span class=\"line\">    <span class=\"comment\">// hal.scheduler-&gt;delay(1);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// // Gyro scale 2000º/s</span></span><br><span class=\"line\">    <span class=\"comment\">// _register_write(MPUREG_GYRO_CONFIG, BITS_GYRO_FS_2000DPS);</span></span><br><span class=\"line\">    <span class=\"comment\">// hal.scheduler-&gt;delay(1);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    _product_id = AP_PRODUCT_ID_MPU9250;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// // RM-MPU-9250A-00.pdf, pg. 15, select accel full scale 16g</span></span><br><span class=\"line\">    <span class=\"comment\">// _register_write(MPUREG_ACCEL_CONFIG,3&lt;&lt;3);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// // configure interrupt to fire when new data arrives</span></span><br><span class=\"line\">    <span class=\"comment\">// _register_write(MPUREG_INT_ENABLE, BIT_RAW_RDY_EN);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// // clear interrupt on any read, and hold the data ready pin high</span></span><br><span class=\"line\">    <span class=\"comment\">// // until we clear the interrupt</span></span><br><span class=\"line\">    <span class=\"comment\">// uint8_t value = _register_read(MPUREG_INT_PIN_CFG);</span></span><br><span class=\"line\">    <span class=\"comment\">// value |= BIT_INT_RD_CLEAR | BIT_LATCH_INT_EN;</span></span><br><span class=\"line\">    <span class=\"comment\">// _register_write(MPUREG_INT_PIN_CFG, value);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// now that we have initialised, we set the bus speed to high</span></span><br><span class=\"line\">    _dev-&gt;set_speed(AP_HAL::Device::SPEED_HIGH);</span><br><span class=\"line\"></span><br><span class=\"line\">    _dev-&gt;get_semaphore()-&gt;give();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// grab the used instances</span></span><br><span class=\"line\">    _gyro_instance = _imu.register_gyro(DEFAULT_SAMPLE_RATE);</span><br><span class=\"line\">    _accel_instance = _imu.register_accel(DEFAULT_SAMPLE_RATE);</span><br><span class=\"line\"></span><br><span class=\"line\">    hal.scheduler-&gt;resume_timer_procs();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// start the timer process to read samples</span></span><br><span class=\"line\">    <span class=\"comment\">// hal.scheduler-&gt;register_timer_process(</span></span><br><span class=\"line\">        <span class=\"comment\">// FUNCTOR_BIND_MEMBER(&amp;AP_InertialSensor_MPU9250::_poll_data, void));</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//guantau</span></span><br><span class=\"line\">    _poll_data();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在函数<code>_configure_slaves()</code>中修改初始化代码</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> AP_MPU9250_AuxiliaryBus::_configure_slaves()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> &amp;backend = AP_InertialSensor_MPU9250::from(_ins_backend);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// guantau</span></span><br><span class=\"line\">    <span class=\"comment\">// I2C Master mode</span></span><br><span class=\"line\">    backend._register_write(MPUREG_USER_CTRL, BIT_USER_CTRL_I2C_MST_EN);</span><br><span class=\"line\">    hal.scheduler-&gt;delay(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// I2C configuration multi-master  IIC 400KHz</span></span><br><span class=\"line\">    backend._register_write(MPUREG_I2C_MST_CTRL, I2C_MST_CLOCK_400KHZ);</span><br><span class=\"line\">    hal.scheduler-&gt;delay(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Set the I2C slave addres of AK8963 and set for write.</span></span><br><span class=\"line\">    backend._register_write(MPUREG_I2C_SLV0_ADDR, <span class=\"number\">0x0C</span>);</span><br><span class=\"line\">    hal.scheduler-&gt;delay(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// I2C slave 0 register address from where to begin data transfer</span></span><br><span class=\"line\">    backend._register_write(MPUREG_I2C_SLV0_REG, <span class=\"number\">0x0B</span>);</span><br><span class=\"line\">    hal.scheduler-&gt;delay(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Reset AK8963</span></span><br><span class=\"line\">    backend._register_write(MPUREG_I2C_SLV0_DO, <span class=\"number\">0x01</span>);</span><br><span class=\"line\">    hal.scheduler-&gt;delay(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Enable I2C and set 1 byte</span></span><br><span class=\"line\">    backend._register_write(MPUREG_I2C_SLV0_CTRL, <span class=\"number\">0x81</span>);</span><br><span class=\"line\">    hal.scheduler-&gt;delay(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// I2C slave 0 register address from where to begin data transfer</span></span><br><span class=\"line\">    backend._register_write(MPUREG_I2C_SLV0_REG, <span class=\"number\">0x0A</span>);</span><br><span class=\"line\">    hal.scheduler-&gt;delay(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Register value to continuous measurement in 16bit</span></span><br><span class=\"line\">    backend._register_write(MPUREG_I2C_SLV0_DO, <span class=\"number\">0x12</span>);</span><br><span class=\"line\">    hal.scheduler-&gt;delay(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Enable I2C and set 1 byte</span></span><br><span class=\"line\">    backend._register_write(MPUREG_I2C_SLV0_CTRL, <span class=\"number\">0x81</span>);</span><br><span class=\"line\">    hal.scheduler-&gt;delay(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    /* Enable the I2C master to slaves on the auxiliary I2C bus*/</span></span><br><span class=\"line\"><span class=\"comment\">//    uint8_t user_ctrl = backend._register_read(MPUREG_USER_CTRL);</span></span><br><span class=\"line\"><span class=\"comment\">//    backend._register_write(MPUREG_USER_CTRL, user_ctrl | BIT_USER_CTRL_I2C_MST_EN);</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//    /* stop condition between reads; clock at 400kHz */</span></span><br><span class=\"line\"><span class=\"comment\">//    backend._register_write(MPUREG_I2C_MST_CTRL,</span></span><br><span class=\"line\"><span class=\"comment\">//                            I2C_MST_CLOCK_400KHZ | I2C_MST_P_NSR);</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//    /* Hard-code divider for internal sample rate, 1 kHz, resulting in a</span></span><br><span class=\"line\"><span class=\"comment\">//     * sample rate of 100Hz */</span></span><br><span class=\"line\"><span class=\"comment\">//    backend._register_write(MPUREG_I2C_SLV4_CTRL, 9);</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//    /* All slaves are subject to the sample rate */</span></span><br><span class=\"line\"><span class=\"comment\">//    backend._register_write(MPUREG_I2C_MST_DELAY_CTRL,</span></span><br><span class=\"line\"><span class=\"comment\">//                            I2C_SLV0_DLY_EN | I2C_SLV1_DLY_EN |</span></span><br><span class=\"line\"><span class=\"comment\">//                            I2C_SLV2_DLY_EN | I2C_SLV3_DLY_EN);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"libraries-AP-Compass-AP-Compass-AK8963-h\"><a href=\"#libraries-AP-Compass-AP-Compass-AK8963-h\" class=\"headerlink\" title=\"libraries/AP_Compass/AP_Compass_AK8963.h\"></a>libraries/AP_Compass/AP_Compass_AK8963.h</h2><p>添加函数<code>accumulate()</code>，该函数在AP_Compass_Backend.h中申明为纯虚函数</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//guantau</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">accumulate</span><span class=\"params\">()</span> override</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"libraries-AP-Compass-AP-Compass-AK8963-cpp\"><a href=\"#libraries-AP-Compass-AP-Compass-AK8963-cpp\" class=\"headerlink\" title=\"libraries/AP_Compass/AP_Compass_AK8963.cpp\"></a>libraries/AP_Compass/AP_Compass_AK8963.cpp</h2><p>实现函数<code>accumulate()</code>，用于非定时读取情况下手动读取数据</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//guantau</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> AP_Compass_AK8963::accumulate()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _update();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改初始化代码<code>init()</code>，去除定时读取的任务</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">bool</span> AP_Compass_AK8963::init()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">/* timer needs to be called every 10ms so set the freq_div to 10 */</span></span><br><span class=\"line\">    <span class=\"comment\">// _timesliced = hal.scheduler-&gt;register_timer_process(FUNCTOR_BIND_MEMBER(&amp;AP_Compass_AK8963::_update, void), 10);</span></span><br><span class=\"line\">    <span class=\"comment\">//guantau</span></span><br><span class=\"line\">    _update();</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"libraries-AP-HAL-Linux-examples-BusTest-BusTest-cpp\"><a href=\"#libraries-AP-HAL-Linux-examples-BusTest-BusTest-cpp\" class=\"headerlink\" title=\"libraries/AP_HAL_Linux/examples/BusTest/BusTest.cpp\"></a>libraries/AP_HAL_Linux/examples/BusTest/BusTest.cpp</h2><p>在函数<code>loop()</code>中，若循环读取SPI总线的时延过小，则会出现死机的情况。</p>\n"},{"title":"zotero的一些使用经验","date":"2016-08-21T15:18:55.000Z","_content":"\n在科研活动中，我们需要参考大量的科技文献。科技文献管理一般要经历获取、存储、应用三个过程，不管怎么看，科技文献管理都是一件挺麻烦的事情：\n1. 在查找文献时，我们通常会得到很多附加的信息，比如下载的网址、与文献相关的代码、期刊名称等等。这些信息对于我们应用文献有着比较重要的作用，但是它们记录起来可是相当麻烦。\n2. 随着工作的开展，各种各样的文件堆积如山，而资源管理器一般只用目录名和文件名进行索引，丢失了大量的元数据信息，此时想要寻找特定内容时将会变得非常困难。\n3. 撰写期刊论文、学位论文、项目申请报告的时候，标注参考文献出处是一项考验耐性、细心和记忆力的工作。如何高效地建立参考文献列表是所有研究者都会遇到的实际问题。\n\n好在是有一些工具是能够帮助处理这些麻烦的，比如Endnote、Mendeley、Zotero、NoteExpress、NoteFirst等，这其中我觉得最顺手的就是Zotero。如果你也有遇到上面提到的那些问题，不妨试试它。\n\n<!-- more -->\n\n## Zotero是什么\nzotero用于管理参考文献，本质上是FireFox浏览器的插件。它突破了传统管理参考文献的思路：参考文献应该直接从浏览器获取，而不是间接性地由人工下载添加进某个管理软件中，而且参考文献中的各项信息应该由计算机和软件自动识别完成，而不是由人主观识别复制粘贴到管理软件中。\n\n它最初基于FireFox开发，现已有支持Chrome及Safari版的插件，但功能较FireFox版的少很多。现已推出有standalone版本，支持Win、Mac和Linux，功能完整。\n\n已经有人写了一系列的好文章来介绍Zotero了：\n* [Zotero（1）：文献管理软件Zotero基础及进阶示范](http://www.yangzhiping.com/tech/zotero1.html) \n* [Zotero（2）：作为知识管理工具的Zotero ](http://www.yangzhiping.com/tech/zotero2.html) \n* [Zotero（3）：平板与社交：再谈研究辅助工具Zotero兼配套APP](http://www.yangzhiping.com/tech/zotero3.html) \n* [Zotero（4）：Zotero之Zotfile插件的使用](http://www.yangzhiping.com/tech/zotero4.html) \n* [Zotero（5）：电子文献管理攻略](http://www.yangzhiping.com/tech/zotero5.html) \n* [Zotero（6）：如何批量下载PDF与组建个性化知识库](http://www.yangzhiping.com/tech/zotero6.html)\n\n## Zotero数据目录\nZotero的管理架构是：**库-分类-条目**。库条目可以同时属于多个分类，条目可以设置多个标签，从而可以从多个角度组织文献。\n\nZotero数据目录主要包含以下文件和目录：\n* zotero.sqlite 数据库文件，保存所有文献的相关信息；\n* storage/ 数据目录，保存附件中的各种文件；\n* styles/ 样式目录，存放参考文献样式；\n* translators/ 抓取器目录，一系列js脚本，用来从各种网站上抓取信息。\n\n## 第三方同步方案\nZotero的云同步功能可以同步笔记和文献pdf等到云端，从而解决了异地、异机、异设备终端的办公问题。该功能非常好，但Zotero只提供100 M的免费空间，该空间显然不够文献的存储使用，当然你可以通过购买增大空间。\n\n我采用的是第三方的同步方案。Zotero官方建议在用第三方同步工具时，安全的办法是仅同步storage目录，因为如果同步数据库文件很容易造成损坏。Zotero的数据文件可以分为两个部分，一个是存放便签、笔记等的数据文件，一个是存放原始pdf文献文件的附件，后者存放在storage文件夹里。实现时很简单，就是将storage拷贝至第三方的同步盘目录中，然后在Zotero数据目录中建立符号链接即可。\n\n## 强制设为英文界面\n在安装目录下找到 defaults/preferences/perfs.js，将\n\n    pref(\"intl.locale.matchOS\", true)\n\n改为\n\n    pref(\"intl.locale.matchOS\", false)\n\n即可。\n\n## 查看条目所属分类\n一个条目可以指定很多分类，选中某个条目后，按住Ctrl键（Mac下是option键，Linux下是Alt键），包含该条目的分类将会高亮。\n\n## 参考文献样式\n可以在 http://www.zotero.org/styles/ 找到常见的参考文献样式，你可以自定义样式，比如在线编辑器 http://steveridout.com/csl/visualEditor/  。\n\n## 常用扩展\n### [Zotfile](http://www.columbia.edu/~jpl2136/zotfile.html) \nZotero默认存储附件时用的是随机符号作为目录名，这可能会让你直接打开数据目录寻找文件时造成一定的困扰。而Zotfile可以按一定格式进行组织，并用链接的方式进行关联。Zotfile默认是用绝对路径的方式关联，这样会导致在不同的机器上找不到文件。我的做法是：\n1. 更改Zotero的链接方式为相对路径，基准路径为Zotero数据目录所在位置；\n2. 在Zotero数据目录中建立zotfile目录用来存储附件；\n3. 更改Zotfile的文件路径为上述建立的zotfile目录位置，子目录按年份存放；\n4. 为了实现第三方同步盘进行同步，可以将实际的目录放在同步盘中，只在Zotero数据目录下建立软链接即可。\n\n### [abbreviations-for-zotero](http://citationstylist.org/abbreviations-for-zotero/) \n期刊名简写插件。\n\n### [Better bibtex](https://zotplus.github.io/better-bibtex/) \n可以选择在导出bibtex格式时保留哪些域，去掉哪些域。\n\n## 配合工具\n### [Docear](http://www.docear.org)\n仅仅用Zotero将文献按照一定的分类、标签组织起来其实还是不够的。要文献真正能派上用场，还需要进一步精细地对文献进行组织。比如文献[5]给出的这几张图：\n\n![1.jpg][a]\n![2.jpg][b]\n![3.jpg][c]\n\nDocear就是这样一种文献整理工具，并能够将Zotero中存储的大量信息链接起来。\n\n## 参考文档\n[1] [Zotero快速入门](https://www.zotero.org/support/zh/quick_start_guide)\n[2] [Zotero常用技巧](https://www.zotero.org/support/zh/tips_and_tricks)\n[3] [参考文献管理工具zotero的使用经验分享](http://emuch.net/html/201410/7981977.html)\n[4] [Zotero文献管理、科研笔记不完全教程](http://blog.sina.com.cn/s/blog_565e747c01014toj.html)\n[5] [科研文献资料的高效管理](http://blog.sina.com.cn/s/blog_6daf1c5b0100z8nn.html)\n[6] [Zotero同步不足的解决方案](http://www.douban.com/group/topic/48495741/)\n[7] [文献管理软件Zotero的一点使用感受](http://www.cnblogs.com/huashiyiqike/p/3265177.html)\n\n\n  [a]: http://oc7urqs4c.bkt.clouddn.com/docear-1.jpg\n  [b]: http://oc7urqs4c.bkt.clouddn.com/docear-2.jpg\n  [c]: http://oc7urqs4c.bkt.clouddn.com/docear-3.jpg\n\n\n","source":"_posts/2016-08-21-zotero-tips.md","raw":"---\ntitle: zotero的一些使用经验\ndate: 2016-08-21 23:18:55\ncategories: 聊点感想\ntags:\n    - zotero\n    - research\n---\n\n在科研活动中，我们需要参考大量的科技文献。科技文献管理一般要经历获取、存储、应用三个过程，不管怎么看，科技文献管理都是一件挺麻烦的事情：\n1. 在查找文献时，我们通常会得到很多附加的信息，比如下载的网址、与文献相关的代码、期刊名称等等。这些信息对于我们应用文献有着比较重要的作用，但是它们记录起来可是相当麻烦。\n2. 随着工作的开展，各种各样的文件堆积如山，而资源管理器一般只用目录名和文件名进行索引，丢失了大量的元数据信息，此时想要寻找特定内容时将会变得非常困难。\n3. 撰写期刊论文、学位论文、项目申请报告的时候，标注参考文献出处是一项考验耐性、细心和记忆力的工作。如何高效地建立参考文献列表是所有研究者都会遇到的实际问题。\n\n好在是有一些工具是能够帮助处理这些麻烦的，比如Endnote、Mendeley、Zotero、NoteExpress、NoteFirst等，这其中我觉得最顺手的就是Zotero。如果你也有遇到上面提到的那些问题，不妨试试它。\n\n<!-- more -->\n\n## Zotero是什么\nzotero用于管理参考文献，本质上是FireFox浏览器的插件。它突破了传统管理参考文献的思路：参考文献应该直接从浏览器获取，而不是间接性地由人工下载添加进某个管理软件中，而且参考文献中的各项信息应该由计算机和软件自动识别完成，而不是由人主观识别复制粘贴到管理软件中。\n\n它最初基于FireFox开发，现已有支持Chrome及Safari版的插件，但功能较FireFox版的少很多。现已推出有standalone版本，支持Win、Mac和Linux，功能完整。\n\n已经有人写了一系列的好文章来介绍Zotero了：\n* [Zotero（1）：文献管理软件Zotero基础及进阶示范](http://www.yangzhiping.com/tech/zotero1.html) \n* [Zotero（2）：作为知识管理工具的Zotero ](http://www.yangzhiping.com/tech/zotero2.html) \n* [Zotero（3）：平板与社交：再谈研究辅助工具Zotero兼配套APP](http://www.yangzhiping.com/tech/zotero3.html) \n* [Zotero（4）：Zotero之Zotfile插件的使用](http://www.yangzhiping.com/tech/zotero4.html) \n* [Zotero（5）：电子文献管理攻略](http://www.yangzhiping.com/tech/zotero5.html) \n* [Zotero（6）：如何批量下载PDF与组建个性化知识库](http://www.yangzhiping.com/tech/zotero6.html)\n\n## Zotero数据目录\nZotero的管理架构是：**库-分类-条目**。库条目可以同时属于多个分类，条目可以设置多个标签，从而可以从多个角度组织文献。\n\nZotero数据目录主要包含以下文件和目录：\n* zotero.sqlite 数据库文件，保存所有文献的相关信息；\n* storage/ 数据目录，保存附件中的各种文件；\n* styles/ 样式目录，存放参考文献样式；\n* translators/ 抓取器目录，一系列js脚本，用来从各种网站上抓取信息。\n\n## 第三方同步方案\nZotero的云同步功能可以同步笔记和文献pdf等到云端，从而解决了异地、异机、异设备终端的办公问题。该功能非常好，但Zotero只提供100 M的免费空间，该空间显然不够文献的存储使用，当然你可以通过购买增大空间。\n\n我采用的是第三方的同步方案。Zotero官方建议在用第三方同步工具时，安全的办法是仅同步storage目录，因为如果同步数据库文件很容易造成损坏。Zotero的数据文件可以分为两个部分，一个是存放便签、笔记等的数据文件，一个是存放原始pdf文献文件的附件，后者存放在storage文件夹里。实现时很简单，就是将storage拷贝至第三方的同步盘目录中，然后在Zotero数据目录中建立符号链接即可。\n\n## 强制设为英文界面\n在安装目录下找到 defaults/preferences/perfs.js，将\n\n    pref(\"intl.locale.matchOS\", true)\n\n改为\n\n    pref(\"intl.locale.matchOS\", false)\n\n即可。\n\n## 查看条目所属分类\n一个条目可以指定很多分类，选中某个条目后，按住Ctrl键（Mac下是option键，Linux下是Alt键），包含该条目的分类将会高亮。\n\n## 参考文献样式\n可以在 http://www.zotero.org/styles/ 找到常见的参考文献样式，你可以自定义样式，比如在线编辑器 http://steveridout.com/csl/visualEditor/  。\n\n## 常用扩展\n### [Zotfile](http://www.columbia.edu/~jpl2136/zotfile.html) \nZotero默认存储附件时用的是随机符号作为目录名，这可能会让你直接打开数据目录寻找文件时造成一定的困扰。而Zotfile可以按一定格式进行组织，并用链接的方式进行关联。Zotfile默认是用绝对路径的方式关联，这样会导致在不同的机器上找不到文件。我的做法是：\n1. 更改Zotero的链接方式为相对路径，基准路径为Zotero数据目录所在位置；\n2. 在Zotero数据目录中建立zotfile目录用来存储附件；\n3. 更改Zotfile的文件路径为上述建立的zotfile目录位置，子目录按年份存放；\n4. 为了实现第三方同步盘进行同步，可以将实际的目录放在同步盘中，只在Zotero数据目录下建立软链接即可。\n\n### [abbreviations-for-zotero](http://citationstylist.org/abbreviations-for-zotero/) \n期刊名简写插件。\n\n### [Better bibtex](https://zotplus.github.io/better-bibtex/) \n可以选择在导出bibtex格式时保留哪些域，去掉哪些域。\n\n## 配合工具\n### [Docear](http://www.docear.org)\n仅仅用Zotero将文献按照一定的分类、标签组织起来其实还是不够的。要文献真正能派上用场，还需要进一步精细地对文献进行组织。比如文献[5]给出的这几张图：\n\n![1.jpg][a]\n![2.jpg][b]\n![3.jpg][c]\n\nDocear就是这样一种文献整理工具，并能够将Zotero中存储的大量信息链接起来。\n\n## 参考文档\n[1] [Zotero快速入门](https://www.zotero.org/support/zh/quick_start_guide)\n[2] [Zotero常用技巧](https://www.zotero.org/support/zh/tips_and_tricks)\n[3] [参考文献管理工具zotero的使用经验分享](http://emuch.net/html/201410/7981977.html)\n[4] [Zotero文献管理、科研笔记不完全教程](http://blog.sina.com.cn/s/blog_565e747c01014toj.html)\n[5] [科研文献资料的高效管理](http://blog.sina.com.cn/s/blog_6daf1c5b0100z8nn.html)\n[6] [Zotero同步不足的解决方案](http://www.douban.com/group/topic/48495741/)\n[7] [文献管理软件Zotero的一点使用感受](http://www.cnblogs.com/huashiyiqike/p/3265177.html)\n\n\n  [a]: http://oc7urqs4c.bkt.clouddn.com/docear-1.jpg\n  [b]: http://oc7urqs4c.bkt.clouddn.com/docear-2.jpg\n  [c]: http://oc7urqs4c.bkt.clouddn.com/docear-3.jpg\n\n\n","slug":"zotero-tips","published":1,"updated":"2017-12-17T03:32:09.869Z","_id":"cjb6k4kwe0018uleppffujbr7","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在科研活动中，我们需要参考大量的科技文献。科技文献管理一般要经历获取、存储、应用三个过程，不管怎么看，科技文献管理都是一件挺麻烦的事情：</p>\n<ol>\n<li>在查找文献时，我们通常会得到很多附加的信息，比如下载的网址、与文献相关的代码、期刊名称等等。这些信息对于我们应用文献有着比较重要的作用，但是它们记录起来可是相当麻烦。</li>\n<li>随着工作的开展，各种各样的文件堆积如山，而资源管理器一般只用目录名和文件名进行索引，丢失了大量的元数据信息，此时想要寻找特定内容时将会变得非常困难。</li>\n<li>撰写期刊论文、学位论文、项目申请报告的时候，标注参考文献出处是一项考验耐性、细心和记忆力的工作。如何高效地建立参考文献列表是所有研究者都会遇到的实际问题。</li>\n</ol>\n<p>好在是有一些工具是能够帮助处理这些麻烦的，比如Endnote、Mendeley、Zotero、NoteExpress、NoteFirst等，这其中我觉得最顺手的就是Zotero。如果你也有遇到上面提到的那些问题，不妨试试它。</p>\n<a id=\"more\"></a>\n<h2 id=\"Zotero是什么\"><a href=\"#Zotero是什么\" class=\"headerlink\" title=\"Zotero是什么\"></a>Zotero是什么</h2><p>zotero用于管理参考文献，本质上是FireFox浏览器的插件。它突破了传统管理参考文献的思路：参考文献应该直接从浏览器获取，而不是间接性地由人工下载添加进某个管理软件中，而且参考文献中的各项信息应该由计算机和软件自动识别完成，而不是由人主观识别复制粘贴到管理软件中。</p>\n<p>它最初基于FireFox开发，现已有支持Chrome及Safari版的插件，但功能较FireFox版的少很多。现已推出有standalone版本，支持Win、Mac和Linux，功能完整。</p>\n<p>已经有人写了一系列的好文章来介绍Zotero了：</p>\n<ul>\n<li><a href=\"http://www.yangzhiping.com/tech/zotero1.html\" target=\"_blank\" rel=\"noopener\">Zotero（1）：文献管理软件Zotero基础及进阶示范</a> </li>\n<li><a href=\"http://www.yangzhiping.com/tech/zotero2.html\" target=\"_blank\" rel=\"noopener\">Zotero（2）：作为知识管理工具的Zotero </a> </li>\n<li><a href=\"http://www.yangzhiping.com/tech/zotero3.html\" target=\"_blank\" rel=\"noopener\">Zotero（3）：平板与社交：再谈研究辅助工具Zotero兼配套APP</a> </li>\n<li><a href=\"http://www.yangzhiping.com/tech/zotero4.html\" target=\"_blank\" rel=\"noopener\">Zotero（4）：Zotero之Zotfile插件的使用</a> </li>\n<li><a href=\"http://www.yangzhiping.com/tech/zotero5.html\" target=\"_blank\" rel=\"noopener\">Zotero（5）：电子文献管理攻略</a> </li>\n<li><a href=\"http://www.yangzhiping.com/tech/zotero6.html\" target=\"_blank\" rel=\"noopener\">Zotero（6）：如何批量下载PDF与组建个性化知识库</a></li>\n</ul>\n<h2 id=\"Zotero数据目录\"><a href=\"#Zotero数据目录\" class=\"headerlink\" title=\"Zotero数据目录\"></a>Zotero数据目录</h2><p>Zotero的管理架构是：<strong>库-分类-条目</strong>。库条目可以同时属于多个分类，条目可以设置多个标签，从而可以从多个角度组织文献。</p>\n<p>Zotero数据目录主要包含以下文件和目录：</p>\n<ul>\n<li>zotero.sqlite 数据库文件，保存所有文献的相关信息；</li>\n<li>storage/ 数据目录，保存附件中的各种文件；</li>\n<li>styles/ 样式目录，存放参考文献样式；</li>\n<li>translators/ 抓取器目录，一系列js脚本，用来从各种网站上抓取信息。</li>\n</ul>\n<h2 id=\"第三方同步方案\"><a href=\"#第三方同步方案\" class=\"headerlink\" title=\"第三方同步方案\"></a>第三方同步方案</h2><p>Zotero的云同步功能可以同步笔记和文献pdf等到云端，从而解决了异地、异机、异设备终端的办公问题。该功能非常好，但Zotero只提供100 M的免费空间，该空间显然不够文献的存储使用，当然你可以通过购买增大空间。</p>\n<p>我采用的是第三方的同步方案。Zotero官方建议在用第三方同步工具时，安全的办法是仅同步storage目录，因为如果同步数据库文件很容易造成损坏。Zotero的数据文件可以分为两个部分，一个是存放便签、笔记等的数据文件，一个是存放原始pdf文献文件的附件，后者存放在storage文件夹里。实现时很简单，就是将storage拷贝至第三方的同步盘目录中，然后在Zotero数据目录中建立符号链接即可。</p>\n<h2 id=\"强制设为英文界面\"><a href=\"#强制设为英文界面\" class=\"headerlink\" title=\"强制设为英文界面\"></a>强制设为英文界面</h2><p>在安装目录下找到 defaults/preferences/perfs.js，将</p>\n<pre><code>pref(&quot;intl.locale.matchOS&quot;, true)\n</code></pre><p>改为</p>\n<pre><code>pref(&quot;intl.locale.matchOS&quot;, false)\n</code></pre><p>即可。</p>\n<h2 id=\"查看条目所属分类\"><a href=\"#查看条目所属分类\" class=\"headerlink\" title=\"查看条目所属分类\"></a>查看条目所属分类</h2><p>一个条目可以指定很多分类，选中某个条目后，按住Ctrl键（Mac下是option键，Linux下是Alt键），包含该条目的分类将会高亮。</p>\n<h2 id=\"参考文献样式\"><a href=\"#参考文献样式\" class=\"headerlink\" title=\"参考文献样式\"></a>参考文献样式</h2><p>可以在 <a href=\"http://www.zotero.org/styles/\" target=\"_blank\" rel=\"noopener\">http://www.zotero.org/styles/</a> 找到常见的参考文献样式，你可以自定义样式，比如在线编辑器 <a href=\"http://steveridout.com/csl/visualEditor/\" target=\"_blank\" rel=\"noopener\">http://steveridout.com/csl/visualEditor/</a>  。</p>\n<h2 id=\"常用扩展\"><a href=\"#常用扩展\" class=\"headerlink\" title=\"常用扩展\"></a>常用扩展</h2><h3 id=\"Zotfile\"><a href=\"#Zotfile\" class=\"headerlink\" title=\"Zotfile\"></a><a href=\"http://www.columbia.edu/~jpl2136/zotfile.html\" target=\"_blank\" rel=\"noopener\">Zotfile</a></h3><p>Zotero默认存储附件时用的是随机符号作为目录名，这可能会让你直接打开数据目录寻找文件时造成一定的困扰。而Zotfile可以按一定格式进行组织，并用链接的方式进行关联。Zotfile默认是用绝对路径的方式关联，这样会导致在不同的机器上找不到文件。我的做法是：</p>\n<ol>\n<li>更改Zotero的链接方式为相对路径，基准路径为Zotero数据目录所在位置；</li>\n<li>在Zotero数据目录中建立zotfile目录用来存储附件；</li>\n<li>更改Zotfile的文件路径为上述建立的zotfile目录位置，子目录按年份存放；</li>\n<li>为了实现第三方同步盘进行同步，可以将实际的目录放在同步盘中，只在Zotero数据目录下建立软链接即可。</li>\n</ol>\n<h3 id=\"abbreviations-for-zotero\"><a href=\"#abbreviations-for-zotero\" class=\"headerlink\" title=\"abbreviations-for-zotero\"></a><a href=\"http://citationstylist.org/abbreviations-for-zotero/\" target=\"_blank\" rel=\"noopener\">abbreviations-for-zotero</a></h3><p>期刊名简写插件。</p>\n<h3 id=\"Better-bibtex\"><a href=\"#Better-bibtex\" class=\"headerlink\" title=\"Better bibtex\"></a><a href=\"https://zotplus.github.io/better-bibtex/\" target=\"_blank\" rel=\"noopener\">Better bibtex</a></h3><p>可以选择在导出bibtex格式时保留哪些域，去掉哪些域。</p>\n<h2 id=\"配合工具\"><a href=\"#配合工具\" class=\"headerlink\" title=\"配合工具\"></a>配合工具</h2><h3 id=\"Docear\"><a href=\"#Docear\" class=\"headerlink\" title=\"Docear\"></a><a href=\"http://www.docear.org\" target=\"_blank\" rel=\"noopener\">Docear</a></h3><p>仅仅用Zotero将文献按照一定的分类、标签组织起来其实还是不够的。要文献真正能派上用场，还需要进一步精细地对文献进行组织。比如文献[5]给出的这几张图：</p>\n<p><img src=\"http://oc7urqs4c.bkt.clouddn.com/docear-1.jpg\" alt=\"1.jpg\"><br><img src=\"http://oc7urqs4c.bkt.clouddn.com/docear-2.jpg\" alt=\"2.jpg\"><br><img src=\"http://oc7urqs4c.bkt.clouddn.com/docear-3.jpg\" alt=\"3.jpg\"></p>\n<p>Docear就是这样一种文献整理工具，并能够将Zotero中存储的大量信息链接起来。</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><p>[1] <a href=\"https://www.zotero.org/support/zh/quick_start_guide\" target=\"_blank\" rel=\"noopener\">Zotero快速入门</a><br>[2] <a href=\"https://www.zotero.org/support/zh/tips_and_tricks\" target=\"_blank\" rel=\"noopener\">Zotero常用技巧</a><br>[3] <a href=\"http://emuch.net/html/201410/7981977.html\" target=\"_blank\" rel=\"noopener\">参考文献管理工具zotero的使用经验分享</a><br>[4] <a href=\"http://blog.sina.com.cn/s/blog_565e747c01014toj.html\" target=\"_blank\" rel=\"noopener\">Zotero文献管理、科研笔记不完全教程</a><br>[5] <a href=\"http://blog.sina.com.cn/s/blog_6daf1c5b0100z8nn.html\" target=\"_blank\" rel=\"noopener\">科研文献资料的高效管理</a><br>[6] <a href=\"http://www.douban.com/group/topic/48495741/\" target=\"_blank\" rel=\"noopener\">Zotero同步不足的解决方案</a><br>[7] <a href=\"http://www.cnblogs.com/huashiyiqike/p/3265177.html\" target=\"_blank\" rel=\"noopener\">文献管理软件Zotero的一点使用感受</a></p>\n","site":{"data":{}},"excerpt":"<p>在科研活动中，我们需要参考大量的科技文献。科技文献管理一般要经历获取、存储、应用三个过程，不管怎么看，科技文献管理都是一件挺麻烦的事情：</p>\n<ol>\n<li>在查找文献时，我们通常会得到很多附加的信息，比如下载的网址、与文献相关的代码、期刊名称等等。这些信息对于我们应用文献有着比较重要的作用，但是它们记录起来可是相当麻烦。</li>\n<li>随着工作的开展，各种各样的文件堆积如山，而资源管理器一般只用目录名和文件名进行索引，丢失了大量的元数据信息，此时想要寻找特定内容时将会变得非常困难。</li>\n<li>撰写期刊论文、学位论文、项目申请报告的时候，标注参考文献出处是一项考验耐性、细心和记忆力的工作。如何高效地建立参考文献列表是所有研究者都会遇到的实际问题。</li>\n</ol>\n<p>好在是有一些工具是能够帮助处理这些麻烦的，比如Endnote、Mendeley、Zotero、NoteExpress、NoteFirst等，这其中我觉得最顺手的就是Zotero。如果你也有遇到上面提到的那些问题，不妨试试它。</p>","more":"<h2 id=\"Zotero是什么\"><a href=\"#Zotero是什么\" class=\"headerlink\" title=\"Zotero是什么\"></a>Zotero是什么</h2><p>zotero用于管理参考文献，本质上是FireFox浏览器的插件。它突破了传统管理参考文献的思路：参考文献应该直接从浏览器获取，而不是间接性地由人工下载添加进某个管理软件中，而且参考文献中的各项信息应该由计算机和软件自动识别完成，而不是由人主观识别复制粘贴到管理软件中。</p>\n<p>它最初基于FireFox开发，现已有支持Chrome及Safari版的插件，但功能较FireFox版的少很多。现已推出有standalone版本，支持Win、Mac和Linux，功能完整。</p>\n<p>已经有人写了一系列的好文章来介绍Zotero了：</p>\n<ul>\n<li><a href=\"http://www.yangzhiping.com/tech/zotero1.html\" target=\"_blank\" rel=\"noopener\">Zotero（1）：文献管理软件Zotero基础及进阶示范</a> </li>\n<li><a href=\"http://www.yangzhiping.com/tech/zotero2.html\" target=\"_blank\" rel=\"noopener\">Zotero（2）：作为知识管理工具的Zotero </a> </li>\n<li><a href=\"http://www.yangzhiping.com/tech/zotero3.html\" target=\"_blank\" rel=\"noopener\">Zotero（3）：平板与社交：再谈研究辅助工具Zotero兼配套APP</a> </li>\n<li><a href=\"http://www.yangzhiping.com/tech/zotero4.html\" target=\"_blank\" rel=\"noopener\">Zotero（4）：Zotero之Zotfile插件的使用</a> </li>\n<li><a href=\"http://www.yangzhiping.com/tech/zotero5.html\" target=\"_blank\" rel=\"noopener\">Zotero（5）：电子文献管理攻略</a> </li>\n<li><a href=\"http://www.yangzhiping.com/tech/zotero6.html\" target=\"_blank\" rel=\"noopener\">Zotero（6）：如何批量下载PDF与组建个性化知识库</a></li>\n</ul>\n<h2 id=\"Zotero数据目录\"><a href=\"#Zotero数据目录\" class=\"headerlink\" title=\"Zotero数据目录\"></a>Zotero数据目录</h2><p>Zotero的管理架构是：<strong>库-分类-条目</strong>。库条目可以同时属于多个分类，条目可以设置多个标签，从而可以从多个角度组织文献。</p>\n<p>Zotero数据目录主要包含以下文件和目录：</p>\n<ul>\n<li>zotero.sqlite 数据库文件，保存所有文献的相关信息；</li>\n<li>storage/ 数据目录，保存附件中的各种文件；</li>\n<li>styles/ 样式目录，存放参考文献样式；</li>\n<li>translators/ 抓取器目录，一系列js脚本，用来从各种网站上抓取信息。</li>\n</ul>\n<h2 id=\"第三方同步方案\"><a href=\"#第三方同步方案\" class=\"headerlink\" title=\"第三方同步方案\"></a>第三方同步方案</h2><p>Zotero的云同步功能可以同步笔记和文献pdf等到云端，从而解决了异地、异机、异设备终端的办公问题。该功能非常好，但Zotero只提供100 M的免费空间，该空间显然不够文献的存储使用，当然你可以通过购买增大空间。</p>\n<p>我采用的是第三方的同步方案。Zotero官方建议在用第三方同步工具时，安全的办法是仅同步storage目录，因为如果同步数据库文件很容易造成损坏。Zotero的数据文件可以分为两个部分，一个是存放便签、笔记等的数据文件，一个是存放原始pdf文献文件的附件，后者存放在storage文件夹里。实现时很简单，就是将storage拷贝至第三方的同步盘目录中，然后在Zotero数据目录中建立符号链接即可。</p>\n<h2 id=\"强制设为英文界面\"><a href=\"#强制设为英文界面\" class=\"headerlink\" title=\"强制设为英文界面\"></a>强制设为英文界面</h2><p>在安装目录下找到 defaults/preferences/perfs.js，将</p>\n<pre><code>pref(&quot;intl.locale.matchOS&quot;, true)\n</code></pre><p>改为</p>\n<pre><code>pref(&quot;intl.locale.matchOS&quot;, false)\n</code></pre><p>即可。</p>\n<h2 id=\"查看条目所属分类\"><a href=\"#查看条目所属分类\" class=\"headerlink\" title=\"查看条目所属分类\"></a>查看条目所属分类</h2><p>一个条目可以指定很多分类，选中某个条目后，按住Ctrl键（Mac下是option键，Linux下是Alt键），包含该条目的分类将会高亮。</p>\n<h2 id=\"参考文献样式\"><a href=\"#参考文献样式\" class=\"headerlink\" title=\"参考文献样式\"></a>参考文献样式</h2><p>可以在 <a href=\"http://www.zotero.org/styles/\" target=\"_blank\" rel=\"noopener\">http://www.zotero.org/styles/</a> 找到常见的参考文献样式，你可以自定义样式，比如在线编辑器 <a href=\"http://steveridout.com/csl/visualEditor/\" target=\"_blank\" rel=\"noopener\">http://steveridout.com/csl/visualEditor/</a>  。</p>\n<h2 id=\"常用扩展\"><a href=\"#常用扩展\" class=\"headerlink\" title=\"常用扩展\"></a>常用扩展</h2><h3 id=\"Zotfile\"><a href=\"#Zotfile\" class=\"headerlink\" title=\"Zotfile\"></a><a href=\"http://www.columbia.edu/~jpl2136/zotfile.html\" target=\"_blank\" rel=\"noopener\">Zotfile</a></h3><p>Zotero默认存储附件时用的是随机符号作为目录名，这可能会让你直接打开数据目录寻找文件时造成一定的困扰。而Zotfile可以按一定格式进行组织，并用链接的方式进行关联。Zotfile默认是用绝对路径的方式关联，这样会导致在不同的机器上找不到文件。我的做法是：</p>\n<ol>\n<li>更改Zotero的链接方式为相对路径，基准路径为Zotero数据目录所在位置；</li>\n<li>在Zotero数据目录中建立zotfile目录用来存储附件；</li>\n<li>更改Zotfile的文件路径为上述建立的zotfile目录位置，子目录按年份存放；</li>\n<li>为了实现第三方同步盘进行同步，可以将实际的目录放在同步盘中，只在Zotero数据目录下建立软链接即可。</li>\n</ol>\n<h3 id=\"abbreviations-for-zotero\"><a href=\"#abbreviations-for-zotero\" class=\"headerlink\" title=\"abbreviations-for-zotero\"></a><a href=\"http://citationstylist.org/abbreviations-for-zotero/\" target=\"_blank\" rel=\"noopener\">abbreviations-for-zotero</a></h3><p>期刊名简写插件。</p>\n<h3 id=\"Better-bibtex\"><a href=\"#Better-bibtex\" class=\"headerlink\" title=\"Better bibtex\"></a><a href=\"https://zotplus.github.io/better-bibtex/\" target=\"_blank\" rel=\"noopener\">Better bibtex</a></h3><p>可以选择在导出bibtex格式时保留哪些域，去掉哪些域。</p>\n<h2 id=\"配合工具\"><a href=\"#配合工具\" class=\"headerlink\" title=\"配合工具\"></a>配合工具</h2><h3 id=\"Docear\"><a href=\"#Docear\" class=\"headerlink\" title=\"Docear\"></a><a href=\"http://www.docear.org\" target=\"_blank\" rel=\"noopener\">Docear</a></h3><p>仅仅用Zotero将文献按照一定的分类、标签组织起来其实还是不够的。要文献真正能派上用场，还需要进一步精细地对文献进行组织。比如文献[5]给出的这几张图：</p>\n<p><img src=\"http://oc7urqs4c.bkt.clouddn.com/docear-1.jpg\" alt=\"1.jpg\"><br><img src=\"http://oc7urqs4c.bkt.clouddn.com/docear-2.jpg\" alt=\"2.jpg\"><br><img src=\"http://oc7urqs4c.bkt.clouddn.com/docear-3.jpg\" alt=\"3.jpg\"></p>\n<p>Docear就是这样一种文献整理工具，并能够将Zotero中存储的大量信息链接起来。</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><p>[1] <a href=\"https://www.zotero.org/support/zh/quick_start_guide\" target=\"_blank\" rel=\"noopener\">Zotero快速入门</a><br>[2] <a href=\"https://www.zotero.org/support/zh/tips_and_tricks\" target=\"_blank\" rel=\"noopener\">Zotero常用技巧</a><br>[3] <a href=\"http://emuch.net/html/201410/7981977.html\" target=\"_blank\" rel=\"noopener\">参考文献管理工具zotero的使用经验分享</a><br>[4] <a href=\"http://blog.sina.com.cn/s/blog_565e747c01014toj.html\" target=\"_blank\" rel=\"noopener\">Zotero文献管理、科研笔记不完全教程</a><br>[5] <a href=\"http://blog.sina.com.cn/s/blog_6daf1c5b0100z8nn.html\" target=\"_blank\" rel=\"noopener\">科研文献资料的高效管理</a><br>[6] <a href=\"http://www.douban.com/group/topic/48495741/\" target=\"_blank\" rel=\"noopener\">Zotero同步不足的解决方案</a><br>[7] <a href=\"http://www.cnblogs.com/huashiyiqike/p/3265177.html\" target=\"_blank\" rel=\"noopener\">文献管理软件Zotero的一点使用感受</a></p>"},{"title":"DAG Blockchain之Byteball原理解析（一）","date":"2017-12-14T13:15:55.000Z","_content":"\n \n\n## DAG数学基础\n\n**定义：**在有向图$G=(V, E)$中，对于任意一个顶点$v \\in V$，都不存在一条路径$p=(e_1,e_2,\\dots), e_i\\in E$，使得从$v$开始出发到$v$终止，则$G$称为有向无环图（DAG, Directed Acyclic Graph）\n\n<img src=\"http://oc7urqs4c.bkt.clouddn.com/2017-12-08-dag.png\" width=\"300px\" />\n\n在图论中，相比于一般图，DAG的很多问题可以在多项式级甚至线性复杂度条件下得到求解。DAG具有以下几条数学性质：\n\n- DAG具有拓扑顺序，即DAG的所有节点可以转换为节点序列（线性化），使得每条边的起始节点位于终止节点之前，且该过程可以在线性复杂度条件下完成；\n- DAG中相互连通的节点可以进行排序，如果从节点$u$出发可到达节点$v$，则可称为$u\\le v$；\n- DAG具有唯一的传递闭包；\n- DAG具有唯一的传递规约，传递规约的边数最大不超过$V-1$条，$V$是DAG的节点数；\n- DAG中给定两个节点，其最短路径和最长路径可以在线性时间内求解。\n\nDAG常用来做任务的调度规划，比如Spark在做并行处理时使用DAG来任务规划，Git采用DAG来做版本管理。DAG在区块链上的应用可以参考 [《DAG也许是真正的区块链3.0》](http://mp.weixin.qq.com/s/nSTNI9LXWh7QTPX7NTuupw)，下面将对使用DAG作为区块链的Byteball原理进行详细的解析。\n\n\n\n## Byteball的区块链结构\n\n\n\n![Byteball区块链结构](http://oc7urqs4c.bkt.clouddn.com/2017-12-12-%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-12%2020.07.48.png)\n\nByteball区块链如上图所示，其基本组成为单元(unit)，所有单元共同构成DAG。其中，单元G为创世交易，它与所有单元连通，且是从所有单元出发到达的终点。\n\n> **父单元与子单元：**从单元A出发可直接到达单元B，即单元A到单元B的路径长度为1，则单元B称为单元A的父单元，单元A称为单元B的子单元。\n>\n> **直接包含：**如果单元A为单位B的子单元，则单元A直接包含或者验证了单元B。\n>\n> **间接包含：**如果从单元A出发到达单元B的路径长度大于1，则单元A间接包含或者验证了单元B。\n>\n> **顶端单元：**不具有任何子单元的单元，也可称为无子单元或未经验证的单元。\n>\n> **创世单元：**由创世交易构成的单元，不具有任何父单元。\n\n相比于Bitcoin中一对一的链式区块结构，Byteball中单元在发出时，可以同时包含多个父单元，因此可以容纳更多的交易并获得更快的确认。由于进入DAG的单元将被所有与其连通的单元直接或间接地验证，如果要修改该单元的内容，则需要相应地修改验证了它的所有单元。直观上来讲，将要修改的单元数量（归属于不同的用户）像滚雪球一样急速增加，从而使得修改无法实现，这也是DAG可以作为区块链的重要基础。\n\n单元的结构如下所示，其主要由三部分组成：\n\n1. 单元数据：数据以`message`的形式构成；\n2. 地址签名：输入所需的相应地址签名；\n3. 父单元：当前单元的父单元列表。\n\n从中可以看出Byteball采用的交易模型是UTXO，即当前交易输出作为后续交易的输入。所有bytes是在创世交易中发出，因此Byteball本质上就是一种完全预挖的币。bytes可用于支付手续费，或在地址之间相互传输。\n\n```json\n{\n  version: '1.0',\n  alt: '1',\n  messages: [ {\n    app: 'payment',\n    payload_location: 'inline',\n    payload_hash: 'AegecfpDzh8xvdyIABdynrcP6CTd4Pt42gvRiv0Ftjg=', \n    payload: {\n      inputs: [{\n        unit: '7yctnKyuAk5P+mFgFQDdDLza88nkceXYjsTs4e3doQA=', \n        message_index: 0,\n        output_index: 1\n      } ],\n      outputs: [\n        { address: 'DJ6LV5GPCLMGRW7ZB55IVGJRPDJPOQU6', amount: 208 },\n        { address: 'Z36JFFX2AH7X5JQ2V2C6AQUUOWFESKZ2', amount: 3505 }\n      ] }\n  } ],\n  authors: [ {\n    address: 'DJ6LV5GPCLMGRW7ZB55IVGJRPDJPOQU6', \n    authentifiers: {\n      r: '3eQPIFiPVLRwBwEzxUR5thqn+zlFfLXUrzAmgemAqOk35UvDpa4h79Fd6TbPbGfb8VMiJzqdNGHCKyAjl786mw=='\n    } \n  } ],\n  parent_units: [ \n    'B63mnJ4yNNAE+6J+L6AhQ3EY7EO1Lj7QmAM9PS8X0pg=',\n    'D6O1/D9L8vCMhv+8f70JecF93UoLKDp3e2+b92Yh2mI=',\n    'ZxqzWP6q6hDNF50Wax8HUK212lH/KSIRdW5a6T9h3DM='\n  ],\n  last_ball: '8S2ya9lULt5abF1Z4lIJ4x5zYY9MtEALCl+jPDLsnsw=', \n  last_ball_unit: 'bhdxFqVUut6V3N2D6Tyt+/YD6X0W+QnC95dMcJJWdtw=', \n  witness_list_unit: 'f252ZI2MN3xu8wFJ+LktVDGsay2Udzi/AUauE9ZaifY='\n}\n```\n\n当某个单元达到稳定之后，就可以生成球(ball)，此时它的状态（是否有效）将确定性的固定下来，球的结构如下所示：\n\n```json\n{\n  unit: \"hash of unit\",\n  parent_balls: [array of hashes of balls based on parent units], \n  is_nonserial: true, // this field included only if the unit is nonserial\n  skiplist_balls: [array of earlier balls used to build skiplist]\n}\n```\n\n单元的结构中还包括见证人列表单元，这是为了节省存储空间，表示当前单元的见证人列表与其相同。关于球、见证人我们再后续解析共识算法时会详细讨论到。\n\n\n\n","source":"_posts/2017-12-14-byteball1.md","raw":"---\ntitle: DAG Blockchain之Byteball原理解析（一）\ndate: 2017-12-14 21:15:55\ncategories: 谈点区块链\ntags:\n  - dag\n  - blockchain\n  - byteball\n  - bitcoin\n---\n\n \n\n## DAG数学基础\n\n**定义：**在有向图$G=(V, E)$中，对于任意一个顶点$v \\in V$，都不存在一条路径$p=(e_1,e_2,\\dots), e_i\\in E$，使得从$v$开始出发到$v$终止，则$G$称为有向无环图（DAG, Directed Acyclic Graph）\n\n<img src=\"http://oc7urqs4c.bkt.clouddn.com/2017-12-08-dag.png\" width=\"300px\" />\n\n在图论中，相比于一般图，DAG的很多问题可以在多项式级甚至线性复杂度条件下得到求解。DAG具有以下几条数学性质：\n\n- DAG具有拓扑顺序，即DAG的所有节点可以转换为节点序列（线性化），使得每条边的起始节点位于终止节点之前，且该过程可以在线性复杂度条件下完成；\n- DAG中相互连通的节点可以进行排序，如果从节点$u$出发可到达节点$v$，则可称为$u\\le v$；\n- DAG具有唯一的传递闭包；\n- DAG具有唯一的传递规约，传递规约的边数最大不超过$V-1$条，$V$是DAG的节点数；\n- DAG中给定两个节点，其最短路径和最长路径可以在线性时间内求解。\n\nDAG常用来做任务的调度规划，比如Spark在做并行处理时使用DAG来任务规划，Git采用DAG来做版本管理。DAG在区块链上的应用可以参考 [《DAG也许是真正的区块链3.0》](http://mp.weixin.qq.com/s/nSTNI9LXWh7QTPX7NTuupw)，下面将对使用DAG作为区块链的Byteball原理进行详细的解析。\n\n\n\n## Byteball的区块链结构\n\n\n\n![Byteball区块链结构](http://oc7urqs4c.bkt.clouddn.com/2017-12-12-%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-12%2020.07.48.png)\n\nByteball区块链如上图所示，其基本组成为单元(unit)，所有单元共同构成DAG。其中，单元G为创世交易，它与所有单元连通，且是从所有单元出发到达的终点。\n\n> **父单元与子单元：**从单元A出发可直接到达单元B，即单元A到单元B的路径长度为1，则单元B称为单元A的父单元，单元A称为单元B的子单元。\n>\n> **直接包含：**如果单元A为单位B的子单元，则单元A直接包含或者验证了单元B。\n>\n> **间接包含：**如果从单元A出发到达单元B的路径长度大于1，则单元A间接包含或者验证了单元B。\n>\n> **顶端单元：**不具有任何子单元的单元，也可称为无子单元或未经验证的单元。\n>\n> **创世单元：**由创世交易构成的单元，不具有任何父单元。\n\n相比于Bitcoin中一对一的链式区块结构，Byteball中单元在发出时，可以同时包含多个父单元，因此可以容纳更多的交易并获得更快的确认。由于进入DAG的单元将被所有与其连通的单元直接或间接地验证，如果要修改该单元的内容，则需要相应地修改验证了它的所有单元。直观上来讲，将要修改的单元数量（归属于不同的用户）像滚雪球一样急速增加，从而使得修改无法实现，这也是DAG可以作为区块链的重要基础。\n\n单元的结构如下所示，其主要由三部分组成：\n\n1. 单元数据：数据以`message`的形式构成；\n2. 地址签名：输入所需的相应地址签名；\n3. 父单元：当前单元的父单元列表。\n\n从中可以看出Byteball采用的交易模型是UTXO，即当前交易输出作为后续交易的输入。所有bytes是在创世交易中发出，因此Byteball本质上就是一种完全预挖的币。bytes可用于支付手续费，或在地址之间相互传输。\n\n```json\n{\n  version: '1.0',\n  alt: '1',\n  messages: [ {\n    app: 'payment',\n    payload_location: 'inline',\n    payload_hash: 'AegecfpDzh8xvdyIABdynrcP6CTd4Pt42gvRiv0Ftjg=', \n    payload: {\n      inputs: [{\n        unit: '7yctnKyuAk5P+mFgFQDdDLza88nkceXYjsTs4e3doQA=', \n        message_index: 0,\n        output_index: 1\n      } ],\n      outputs: [\n        { address: 'DJ6LV5GPCLMGRW7ZB55IVGJRPDJPOQU6', amount: 208 },\n        { address: 'Z36JFFX2AH7X5JQ2V2C6AQUUOWFESKZ2', amount: 3505 }\n      ] }\n  } ],\n  authors: [ {\n    address: 'DJ6LV5GPCLMGRW7ZB55IVGJRPDJPOQU6', \n    authentifiers: {\n      r: '3eQPIFiPVLRwBwEzxUR5thqn+zlFfLXUrzAmgemAqOk35UvDpa4h79Fd6TbPbGfb8VMiJzqdNGHCKyAjl786mw=='\n    } \n  } ],\n  parent_units: [ \n    'B63mnJ4yNNAE+6J+L6AhQ3EY7EO1Lj7QmAM9PS8X0pg=',\n    'D6O1/D9L8vCMhv+8f70JecF93UoLKDp3e2+b92Yh2mI=',\n    'ZxqzWP6q6hDNF50Wax8HUK212lH/KSIRdW5a6T9h3DM='\n  ],\n  last_ball: '8S2ya9lULt5abF1Z4lIJ4x5zYY9MtEALCl+jPDLsnsw=', \n  last_ball_unit: 'bhdxFqVUut6V3N2D6Tyt+/YD6X0W+QnC95dMcJJWdtw=', \n  witness_list_unit: 'f252ZI2MN3xu8wFJ+LktVDGsay2Udzi/AUauE9ZaifY='\n}\n```\n\n当某个单元达到稳定之后，就可以生成球(ball)，此时它的状态（是否有效）将确定性的固定下来，球的结构如下所示：\n\n```json\n{\n  unit: \"hash of unit\",\n  parent_balls: [array of hashes of balls based on parent units], \n  is_nonserial: true, // this field included only if the unit is nonserial\n  skiplist_balls: [array of earlier balls used to build skiplist]\n}\n```\n\n单元的结构中还包括见证人列表单元，这是为了节省存储空间，表示当前单元的见证人列表与其相同。关于球、见证人我们再后续解析共识算法时会详细讨论到。\n\n\n\n","slug":"byteball1","published":1,"updated":"2017-12-17T03:27:38.980Z","_id":"cjb6k4kwg001culepl2d0v6o8","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"DAG数学基础\"><a href=\"#DAG数学基础\" class=\"headerlink\" title=\"DAG数学基础\"></a>DAG数学基础</h2><p><strong>定义：</strong>在有向图$G=(V, E)$中，对于任意一个顶点$v \\in V$，都不存在一条路径$p=(e_1,e_2,\\dots), e_i\\in E$，使得从$v$开始出发到$v$终止，则$G$称为有向无环图（DAG, Directed Acyclic Graph）</p>\n<p><img src=\"http://oc7urqs4c.bkt.clouddn.com/2017-12-08-dag.png\" width=\"300px\"></p>\n<p>在图论中，相比于一般图，DAG的很多问题可以在多项式级甚至线性复杂度条件下得到求解。DAG具有以下几条数学性质：</p>\n<ul>\n<li>DAG具有拓扑顺序，即DAG的所有节点可以转换为节点序列（线性化），使得每条边的起始节点位于终止节点之前，且该过程可以在线性复杂度条件下完成；</li>\n<li>DAG中相互连通的节点可以进行排序，如果从节点$u$出发可到达节点$v$，则可称为$u\\le v$；</li>\n<li>DAG具有唯一的传递闭包；</li>\n<li>DAG具有唯一的传递规约，传递规约的边数最大不超过$V-1$条，$V$是DAG的节点数；</li>\n<li>DAG中给定两个节点，其最短路径和最长路径可以在线性时间内求解。</li>\n</ul>\n<p>DAG常用来做任务的调度规划，比如Spark在做并行处理时使用DAG来任务规划，Git采用DAG来做版本管理。DAG在区块链上的应用可以参考 <a href=\"http://mp.weixin.qq.com/s/nSTNI9LXWh7QTPX7NTuupw\" target=\"_blank\" rel=\"noopener\">《DAG也许是真正的区块链3.0》</a>，下面将对使用DAG作为区块链的Byteball原理进行详细的解析。</p>\n<h2 id=\"Byteball的区块链结构\"><a href=\"#Byteball的区块链结构\" class=\"headerlink\" title=\"Byteball的区块链结构\"></a>Byteball的区块链结构</h2><p><img src=\"http://oc7urqs4c.bkt.clouddn.com/2017-12-12-%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-12%2020.07.48.png\" alt=\"Byteball区块链结构\"></p>\n<p>Byteball区块链如上图所示，其基本组成为单元(unit)，所有单元共同构成DAG。其中，单元G为创世交易，它与所有单元连通，且是从所有单元出发到达的终点。</p>\n<blockquote>\n<p><strong>父单元与子单元：</strong>从单元A出发可直接到达单元B，即单元A到单元B的路径长度为1，则单元B称为单元A的父单元，单元A称为单元B的子单元。</p>\n<p><strong>直接包含：</strong>如果单元A为单位B的子单元，则单元A直接包含或者验证了单元B。</p>\n<p><strong>间接包含：</strong>如果从单元A出发到达单元B的路径长度大于1，则单元A间接包含或者验证了单元B。</p>\n<p><strong>顶端单元：</strong>不具有任何子单元的单元，也可称为无子单元或未经验证的单元。</p>\n<p><strong>创世单元：</strong>由创世交易构成的单元，不具有任何父单元。</p>\n</blockquote>\n<p>相比于Bitcoin中一对一的链式区块结构，Byteball中单元在发出时，可以同时包含多个父单元，因此可以容纳更多的交易并获得更快的确认。由于进入DAG的单元将被所有与其连通的单元直接或间接地验证，如果要修改该单元的内容，则需要相应地修改验证了它的所有单元。直观上来讲，将要修改的单元数量（归属于不同的用户）像滚雪球一样急速增加，从而使得修改无法实现，这也是DAG可以作为区块链的重要基础。</p>\n<p>单元的结构如下所示，其主要由三部分组成：</p>\n<ol>\n<li>单元数据：数据以<code>message</code>的形式构成；</li>\n<li>地址签名：输入所需的相应地址签名；</li>\n<li>父单元：当前单元的父单元列表。</li>\n</ol>\n<p>从中可以看出Byteball采用的交易模型是UTXO，即当前交易输出作为后续交易的输入。所有bytes是在创世交易中发出，因此Byteball本质上就是一种完全预挖的币。bytes可用于支付手续费，或在地址之间相互传输。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  version: '1.0',</span><br><span class=\"line\">  alt: '1',</span><br><span class=\"line\">  messages: [ &#123;</span><br><span class=\"line\">    app: 'payment',</span><br><span class=\"line\">    payload_location: 'inline',</span><br><span class=\"line\">    payload_hash: 'AegecfpDzh8xvdyIABdynrcP6CTd4Pt42gvRiv0Ftjg=', </span><br><span class=\"line\">    payload: &#123;</span><br><span class=\"line\">      inputs: [&#123;</span><br><span class=\"line\">        unit: '7yctnKyuAk5P+mFgFQDdDLza88nkceXYjsTs4e3doQA=', </span><br><span class=\"line\">        message_index: 0,</span><br><span class=\"line\">        output_index: 1</span><br><span class=\"line\">      &#125; ],</span><br><span class=\"line\">      outputs: [</span><br><span class=\"line\">        &#123; address: 'DJ6LV5GPCLMGRW7ZB55IVGJRPDJPOQU6', amount: 208 &#125;,</span><br><span class=\"line\">        &#123; address: 'Z36JFFX2AH7X5JQ2V2C6AQUUOWFESKZ2', amount: 3505 &#125;</span><br><span class=\"line\">      ] &#125;</span><br><span class=\"line\">  &#125; ],</span><br><span class=\"line\">  authors: [ &#123;</span><br><span class=\"line\">    address: 'DJ6LV5GPCLMGRW7ZB55IVGJRPDJPOQU6', </span><br><span class=\"line\">    authentifiers: &#123;</span><br><span class=\"line\">      r: '3eQPIFiPVLRwBwEzxUR5thqn+zlFfLXUrzAmgemAqOk35UvDpa4h79Fd6TbPbGfb8VMiJzqdNGHCKyAjl786mw=='</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125; ],</span><br><span class=\"line\">  parent_units: [ </span><br><span class=\"line\">    'B63mnJ4yNNAE+6J+L6AhQ3EY7EO1Lj7QmAM9PS8X0pg=',</span><br><span class=\"line\">    'D6O1/D9L8vCMhv+8f70JecF93UoLKDp3e2+b92Yh2mI=',</span><br><span class=\"line\">    'ZxqzWP6q6hDNF50Wax8HUK212lH/KSIRdW5a6T9h3DM='</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  last_ball: '8S2ya9lULt5abF1Z4lIJ4x5zYY9MtEALCl+jPDLsnsw=', </span><br><span class=\"line\">  last_ball_unit: 'bhdxFqVUut6V3N2D6Tyt+/YD6X0W+QnC95dMcJJWdtw=', </span><br><span class=\"line\">  witness_list_unit: 'f252ZI2MN3xu8wFJ+LktVDGsay2Udzi/AUauE9ZaifY='</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当某个单元达到稳定之后，就可以生成球(ball)，此时它的状态（是否有效）将确定性的固定下来，球的结构如下所示：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  unit: \"hash of unit\",</span><br><span class=\"line\">  parent_balls: [array of hashes of balls based on parent units], </span><br><span class=\"line\">  is_nonserial: true, // this field included only if the unit is nonserial</span><br><span class=\"line\">  skiplist_balls: [array of earlier balls used to build skiplist]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>单元的结构中还包括见证人列表单元，这是为了节省存储空间，表示当前单元的见证人列表与其相同。关于球、见证人我们再后续解析共识算法时会详细讨论到。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"DAG数学基础\"><a href=\"#DAG数学基础\" class=\"headerlink\" title=\"DAG数学基础\"></a>DAG数学基础</h2><p><strong>定义：</strong>在有向图$G=(V, E)$中，对于任意一个顶点$v \\in V$，都不存在一条路径$p=(e_1,e_2,\\dots), e_i\\in E$，使得从$v$开始出发到$v$终止，则$G$称为有向无环图（DAG, Directed Acyclic Graph）</p>\n<p><img src=\"http://oc7urqs4c.bkt.clouddn.com/2017-12-08-dag.png\" width=\"300px\"></p>\n<p>在图论中，相比于一般图，DAG的很多问题可以在多项式级甚至线性复杂度条件下得到求解。DAG具有以下几条数学性质：</p>\n<ul>\n<li>DAG具有拓扑顺序，即DAG的所有节点可以转换为节点序列（线性化），使得每条边的起始节点位于终止节点之前，且该过程可以在线性复杂度条件下完成；</li>\n<li>DAG中相互连通的节点可以进行排序，如果从节点$u$出发可到达节点$v$，则可称为$u\\le v$；</li>\n<li>DAG具有唯一的传递闭包；</li>\n<li>DAG具有唯一的传递规约，传递规约的边数最大不超过$V-1$条，$V$是DAG的节点数；</li>\n<li>DAG中给定两个节点，其最短路径和最长路径可以在线性时间内求解。</li>\n</ul>\n<p>DAG常用来做任务的调度规划，比如Spark在做并行处理时使用DAG来任务规划，Git采用DAG来做版本管理。DAG在区块链上的应用可以参考 <a href=\"http://mp.weixin.qq.com/s/nSTNI9LXWh7QTPX7NTuupw\" target=\"_blank\" rel=\"noopener\">《DAG也许是真正的区块链3.0》</a>，下面将对使用DAG作为区块链的Byteball原理进行详细的解析。</p>\n<h2 id=\"Byteball的区块链结构\"><a href=\"#Byteball的区块链结构\" class=\"headerlink\" title=\"Byteball的区块链结构\"></a>Byteball的区块链结构</h2><p><img src=\"http://oc7urqs4c.bkt.clouddn.com/2017-12-12-%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-12%2020.07.48.png\" alt=\"Byteball区块链结构\"></p>\n<p>Byteball区块链如上图所示，其基本组成为单元(unit)，所有单元共同构成DAG。其中，单元G为创世交易，它与所有单元连通，且是从所有单元出发到达的终点。</p>\n<blockquote>\n<p><strong>父单元与子单元：</strong>从单元A出发可直接到达单元B，即单元A到单元B的路径长度为1，则单元B称为单元A的父单元，单元A称为单元B的子单元。</p>\n<p><strong>直接包含：</strong>如果单元A为单位B的子单元，则单元A直接包含或者验证了单元B。</p>\n<p><strong>间接包含：</strong>如果从单元A出发到达单元B的路径长度大于1，则单元A间接包含或者验证了单元B。</p>\n<p><strong>顶端单元：</strong>不具有任何子单元的单元，也可称为无子单元或未经验证的单元。</p>\n<p><strong>创世单元：</strong>由创世交易构成的单元，不具有任何父单元。</p>\n</blockquote>\n<p>相比于Bitcoin中一对一的链式区块结构，Byteball中单元在发出时，可以同时包含多个父单元，因此可以容纳更多的交易并获得更快的确认。由于进入DAG的单元将被所有与其连通的单元直接或间接地验证，如果要修改该单元的内容，则需要相应地修改验证了它的所有单元。直观上来讲，将要修改的单元数量（归属于不同的用户）像滚雪球一样急速增加，从而使得修改无法实现，这也是DAG可以作为区块链的重要基础。</p>\n<p>单元的结构如下所示，其主要由三部分组成：</p>\n<ol>\n<li>单元数据：数据以<code>message</code>的形式构成；</li>\n<li>地址签名：输入所需的相应地址签名；</li>\n<li>父单元：当前单元的父单元列表。</li>\n</ol>\n<p>从中可以看出Byteball采用的交易模型是UTXO，即当前交易输出作为后续交易的输入。所有bytes是在创世交易中发出，因此Byteball本质上就是一种完全预挖的币。bytes可用于支付手续费，或在地址之间相互传输。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  version: '1.0',</span><br><span class=\"line\">  alt: '1',</span><br><span class=\"line\">  messages: [ &#123;</span><br><span class=\"line\">    app: 'payment',</span><br><span class=\"line\">    payload_location: 'inline',</span><br><span class=\"line\">    payload_hash: 'AegecfpDzh8xvdyIABdynrcP6CTd4Pt42gvRiv0Ftjg=', </span><br><span class=\"line\">    payload: &#123;</span><br><span class=\"line\">      inputs: [&#123;</span><br><span class=\"line\">        unit: '7yctnKyuAk5P+mFgFQDdDLza88nkceXYjsTs4e3doQA=', </span><br><span class=\"line\">        message_index: 0,</span><br><span class=\"line\">        output_index: 1</span><br><span class=\"line\">      &#125; ],</span><br><span class=\"line\">      outputs: [</span><br><span class=\"line\">        &#123; address: 'DJ6LV5GPCLMGRW7ZB55IVGJRPDJPOQU6', amount: 208 &#125;,</span><br><span class=\"line\">        &#123; address: 'Z36JFFX2AH7X5JQ2V2C6AQUUOWFESKZ2', amount: 3505 &#125;</span><br><span class=\"line\">      ] &#125;</span><br><span class=\"line\">  &#125; ],</span><br><span class=\"line\">  authors: [ &#123;</span><br><span class=\"line\">    address: 'DJ6LV5GPCLMGRW7ZB55IVGJRPDJPOQU6', </span><br><span class=\"line\">    authentifiers: &#123;</span><br><span class=\"line\">      r: '3eQPIFiPVLRwBwEzxUR5thqn+zlFfLXUrzAmgemAqOk35UvDpa4h79Fd6TbPbGfb8VMiJzqdNGHCKyAjl786mw=='</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125; ],</span><br><span class=\"line\">  parent_units: [ </span><br><span class=\"line\">    'B63mnJ4yNNAE+6J+L6AhQ3EY7EO1Lj7QmAM9PS8X0pg=',</span><br><span class=\"line\">    'D6O1/D9L8vCMhv+8f70JecF93UoLKDp3e2+b92Yh2mI=',</span><br><span class=\"line\">    'ZxqzWP6q6hDNF50Wax8HUK212lH/KSIRdW5a6T9h3DM='</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  last_ball: '8S2ya9lULt5abF1Z4lIJ4x5zYY9MtEALCl+jPDLsnsw=', </span><br><span class=\"line\">  last_ball_unit: 'bhdxFqVUut6V3N2D6Tyt+/YD6X0W+QnC95dMcJJWdtw=', </span><br><span class=\"line\">  witness_list_unit: 'f252ZI2MN3xu8wFJ+LktVDGsay2Udzi/AUauE9ZaifY='</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当某个单元达到稳定之后，就可以生成球(ball)，此时它的状态（是否有效）将确定性的固定下来，球的结构如下所示：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  unit: \"hash of unit\",</span><br><span class=\"line\">  parent_balls: [array of hashes of balls based on parent units], </span><br><span class=\"line\">  is_nonserial: true, // this field included only if the unit is nonserial</span><br><span class=\"line\">  skiplist_balls: [array of earlier balls used to build skiplist]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>单元的结构中还包括见证人列表单元，这是为了节省存储空间，表示当前单元的见证人列表与其相同。关于球、见证人我们再后续解析共识算法时会详细讨论到。</p>\n"},{"title":"waf编译工具使用方法","date":"2016-09-06T12:13:40.000Z","_content":"\nArduPilot现在采用了新的编译工具waf，为方便使用，可以设置\n```bash\nalias waf=\"$PWD/modules/waf/waf-light\"\n```\nwaf可以完成主要的操作如下：\n<!---more--->\n\n## 设置开发板类型 ##\n在使用waf之前需要首先进行设置开发板类型。ArduPilot目前支持的开发板类型包括：\napm1 apm2 apm2beta apm1-1280 px4 px4-v1 px4-v2 px4-v4 sitl flymaple linux vrbrain vrbrain-v40 vrbrain-v45 vrbrainv-50 vrbrain-v51 vrbrain-v52 vrubrain-v51 vrubrain-v52 vrhero-v10 erle pxf navio navio2 raspilot bbbmini minlure erlebrain2 bhat qflight pxfmini\n默认为sitl。\n用于设置的命令为：\n```bash\n# 设置开发板为linux\nwaf configure --board=linux\n```\n如果需要添加新的开发板类型，可以在`$PWD/Tools/ardupilotwaf/boards.py`中进行添加。\n\n## 设置程序组类型 ##\n程序组用于指定要生成哪些程序，主要的程序组包括：\n- bin：可执行程序，ArduPilot的主体程序，包括\n    + antennatracker\n    + copter\n    + plane\n    + rover\n- tools\n- examples：库文件的使用示例\n- benchmarks：需要设置`--enable-benchmarks`\n- tests：单元测试用于保证代码修改不破坏系统逻辑\n    用于设置的命令为\n```bash\n# 设置程序组bin，编译Antenna Tracker、copter、plane、rover\nwaf --program-group bin\n# 设置程序组benchmarks和tests\nwaf --program-group benchmarks --program-group tests\n# 第一条命令可以简写为\nwaf bin\n# 编译copter的简写命令\nwaf copter\n```\n\n## 设置无人机类型 ##\n目前只有copter可以设置不同的无人机类型，它们包括：\nquad tri hexa y6 octa octa-quad heli single coax obc nologging\n用于设置的命令为：\n```bash\n# 仅编译quad类型\nwaf configure --targets bin/arducopter-quad\n# 查看targets类型\nwaf list\n```\n\n## 其他有用的命令\n- 设置调试开关：\n```bash\nwaf configure --debug\n```\n- 清除编译文件\n```bash\n# 保留configure信息\nwaf clean\n# 清除所有文件，包括configure信息\nwaf distclean\n```\n- 上传可执行文件\n  编译时使用`--upload`选项就可以上传可执行文件，不是所有的开发板都支持。\n```bash\nwaf --targes bin/arducopter-quad --upload\n```\n","source":"_posts/2016-09-06-waf-tool.md","raw":"---\ntitle: waf编译工具使用方法\ndate: 2016-09-06 20:13:40\ncategories: 弄点工具\ntags: \n  - waf\n  - ArduPilot\n---\n\nArduPilot现在采用了新的编译工具waf，为方便使用，可以设置\n```bash\nalias waf=\"$PWD/modules/waf/waf-light\"\n```\nwaf可以完成主要的操作如下：\n<!---more--->\n\n## 设置开发板类型 ##\n在使用waf之前需要首先进行设置开发板类型。ArduPilot目前支持的开发板类型包括：\napm1 apm2 apm2beta apm1-1280 px4 px4-v1 px4-v2 px4-v4 sitl flymaple linux vrbrain vrbrain-v40 vrbrain-v45 vrbrainv-50 vrbrain-v51 vrbrain-v52 vrubrain-v51 vrubrain-v52 vrhero-v10 erle pxf navio navio2 raspilot bbbmini minlure erlebrain2 bhat qflight pxfmini\n默认为sitl。\n用于设置的命令为：\n```bash\n# 设置开发板为linux\nwaf configure --board=linux\n```\n如果需要添加新的开发板类型，可以在`$PWD/Tools/ardupilotwaf/boards.py`中进行添加。\n\n## 设置程序组类型 ##\n程序组用于指定要生成哪些程序，主要的程序组包括：\n- bin：可执行程序，ArduPilot的主体程序，包括\n    + antennatracker\n    + copter\n    + plane\n    + rover\n- tools\n- examples：库文件的使用示例\n- benchmarks：需要设置`--enable-benchmarks`\n- tests：单元测试用于保证代码修改不破坏系统逻辑\n    用于设置的命令为\n```bash\n# 设置程序组bin，编译Antenna Tracker、copter、plane、rover\nwaf --program-group bin\n# 设置程序组benchmarks和tests\nwaf --program-group benchmarks --program-group tests\n# 第一条命令可以简写为\nwaf bin\n# 编译copter的简写命令\nwaf copter\n```\n\n## 设置无人机类型 ##\n目前只有copter可以设置不同的无人机类型，它们包括：\nquad tri hexa y6 octa octa-quad heli single coax obc nologging\n用于设置的命令为：\n```bash\n# 仅编译quad类型\nwaf configure --targets bin/arducopter-quad\n# 查看targets类型\nwaf list\n```\n\n## 其他有用的命令\n- 设置调试开关：\n```bash\nwaf configure --debug\n```\n- 清除编译文件\n```bash\n# 保留configure信息\nwaf clean\n# 清除所有文件，包括configure信息\nwaf distclean\n```\n- 上传可执行文件\n  编译时使用`--upload`选项就可以上传可执行文件，不是所有的开发板都支持。\n```bash\nwaf --targes bin/arducopter-quad --upload\n```\n","slug":"waf-tool","published":1,"updated":"2016-09-06T12:54:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb6k4kwj001fulepui4xeyxf","content":"<p>ArduPilot现在采用了新的编译工具waf，为方便使用，可以设置<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">alias</span> waf=<span class=\"string\">\"<span class=\"variable\">$PWD</span>/modules/waf/waf-light\"</span></span><br></pre></td></tr></table></figure></p>\n<p>waf可以完成主要的操作如下：<br><a id=\"more\"></a></p>\n<h2 id=\"设置开发板类型\"><a href=\"#设置开发板类型\" class=\"headerlink\" title=\"设置开发板类型\"></a>设置开发板类型</h2><p>在使用waf之前需要首先进行设置开发板类型。ArduPilot目前支持的开发板类型包括：<br>apm1 apm2 apm2beta apm1-1280 px4 px4-v1 px4-v2 px4-v4 sitl flymaple linux vrbrain vrbrain-v40 vrbrain-v45 vrbrainv-50 vrbrain-v51 vrbrain-v52 vrubrain-v51 vrubrain-v52 vrhero-v10 erle pxf navio navio2 raspilot bbbmini minlure erlebrain2 bhat qflight pxfmini<br>默认为sitl。<br>用于设置的命令为：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置开发板为linux</span></span><br><span class=\"line\">waf configure --board=linux</span><br></pre></td></tr></table></figure></p>\n<p>如果需要添加新的开发板类型，可以在<code>$PWD/Tools/ardupilotwaf/boards.py</code>中进行添加。</p>\n<h2 id=\"设置程序组类型\"><a href=\"#设置程序组类型\" class=\"headerlink\" title=\"设置程序组类型\"></a>设置程序组类型</h2><p>程序组用于指定要生成哪些程序，主要的程序组包括：</p>\n<ul>\n<li>bin：可执行程序，ArduPilot的主体程序，包括<ul>\n<li>antennatracker</li>\n<li>copter</li>\n<li>plane</li>\n<li>rover</li>\n</ul>\n</li>\n<li>tools</li>\n<li>examples：库文件的使用示例</li>\n<li>benchmarks：需要设置<code>--enable-benchmarks</code></li>\n<li>tests：单元测试用于保证代码修改不破坏系统逻辑<br>  用于设置的命令为<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置程序组bin，编译Antenna Tracker、copter、plane、rover</span></span><br><span class=\"line\">waf --program-group bin</span><br><span class=\"line\"><span class=\"comment\"># 设置程序组benchmarks和tests</span></span><br><span class=\"line\">waf --program-group benchmarks --program-group tests</span><br><span class=\"line\"><span class=\"comment\"># 第一条命令可以简写为</span></span><br><span class=\"line\">waf bin</span><br><span class=\"line\"><span class=\"comment\"># 编译copter的简写命令</span></span><br><span class=\"line\">waf copter</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"设置无人机类型\"><a href=\"#设置无人机类型\" class=\"headerlink\" title=\"设置无人机类型\"></a>设置无人机类型</h2><p>目前只有copter可以设置不同的无人机类型，它们包括：<br>quad tri hexa y6 octa octa-quad heli single coax obc nologging<br>用于设置的命令为：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 仅编译quad类型</span></span><br><span class=\"line\">waf configure --targets bin/arducopter-quad</span><br><span class=\"line\"><span class=\"comment\"># 查看targets类型</span></span><br><span class=\"line\">waf list</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"其他有用的命令\"><a href=\"#其他有用的命令\" class=\"headerlink\" title=\"其他有用的命令\"></a>其他有用的命令</h2><ul>\n<li><p>设置调试开关：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">waf configure --debug</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>清除编译文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 保留configure信息</span></span><br><span class=\"line\">waf clean</span><br><span class=\"line\"><span class=\"comment\"># 清除所有文件，包括configure信息</span></span><br><span class=\"line\">waf distclean</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>上传可执行文件<br>编译时使用<code>--upload</code>选项就可以上传可执行文件，不是所有的开发板都支持。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">waf --targes bin/arducopter-quad --upload</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>ArduPilot现在采用了新的编译工具waf，为方便使用，可以设置<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">alias</span> waf=<span class=\"string\">\"<span class=\"variable\">$PWD</span>/modules/waf/waf-light\"</span></span><br></pre></td></tr></table></figure></p>\n<p>waf可以完成主要的操作如下：<br>","more":"</p>\n<h2 id=\"设置开发板类型\"><a href=\"#设置开发板类型\" class=\"headerlink\" title=\"设置开发板类型\"></a>设置开发板类型</h2><p>在使用waf之前需要首先进行设置开发板类型。ArduPilot目前支持的开发板类型包括：<br>apm1 apm2 apm2beta apm1-1280 px4 px4-v1 px4-v2 px4-v4 sitl flymaple linux vrbrain vrbrain-v40 vrbrain-v45 vrbrainv-50 vrbrain-v51 vrbrain-v52 vrubrain-v51 vrubrain-v52 vrhero-v10 erle pxf navio navio2 raspilot bbbmini minlure erlebrain2 bhat qflight pxfmini<br>默认为sitl。<br>用于设置的命令为：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置开发板为linux</span></span><br><span class=\"line\">waf configure --board=linux</span><br></pre></td></tr></table></figure></p>\n<p>如果需要添加新的开发板类型，可以在<code>$PWD/Tools/ardupilotwaf/boards.py</code>中进行添加。</p>\n<h2 id=\"设置程序组类型\"><a href=\"#设置程序组类型\" class=\"headerlink\" title=\"设置程序组类型\"></a>设置程序组类型</h2><p>程序组用于指定要生成哪些程序，主要的程序组包括：</p>\n<ul>\n<li>bin：可执行程序，ArduPilot的主体程序，包括<ul>\n<li>antennatracker</li>\n<li>copter</li>\n<li>plane</li>\n<li>rover</li>\n</ul>\n</li>\n<li>tools</li>\n<li>examples：库文件的使用示例</li>\n<li>benchmarks：需要设置<code>--enable-benchmarks</code></li>\n<li>tests：单元测试用于保证代码修改不破坏系统逻辑<br>  用于设置的命令为<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置程序组bin，编译Antenna Tracker、copter、plane、rover</span></span><br><span class=\"line\">waf --program-group bin</span><br><span class=\"line\"><span class=\"comment\"># 设置程序组benchmarks和tests</span></span><br><span class=\"line\">waf --program-group benchmarks --program-group tests</span><br><span class=\"line\"><span class=\"comment\"># 第一条命令可以简写为</span></span><br><span class=\"line\">waf bin</span><br><span class=\"line\"><span class=\"comment\"># 编译copter的简写命令</span></span><br><span class=\"line\">waf copter</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"设置无人机类型\"><a href=\"#设置无人机类型\" class=\"headerlink\" title=\"设置无人机类型\"></a>设置无人机类型</h2><p>目前只有copter可以设置不同的无人机类型，它们包括：<br>quad tri hexa y6 octa octa-quad heli single coax obc nologging<br>用于设置的命令为：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 仅编译quad类型</span></span><br><span class=\"line\">waf configure --targets bin/arducopter-quad</span><br><span class=\"line\"><span class=\"comment\"># 查看targets类型</span></span><br><span class=\"line\">waf list</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"其他有用的命令\"><a href=\"#其他有用的命令\" class=\"headerlink\" title=\"其他有用的命令\"></a>其他有用的命令</h2><ul>\n<li><p>设置调试开关：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">waf configure --debug</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>清除编译文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 保留configure信息</span></span><br><span class=\"line\">waf clean</span><br><span class=\"line\"><span class=\"comment\"># 清除所有文件，包括configure信息</span></span><br><span class=\"line\">waf distclean</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>上传可执行文件<br>编译时使用<code>--upload</code>选项就可以上传可执行文件，不是所有的开发板都支持。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">waf --targes bin/arducopter-quad --upload</span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2016-08-17T23:30:04.000Z","updated":"2016-08-17T23:30:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjb6k4kwl001julepehtl2rh9","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"vscode常用快捷键","date":"2017-04-30T03:20:45.000Z","_content":"\n\n\n| 命令         | 键绑定                        |\n| ---------- | -------------------------- |\n| 光标向下       | Ctrl-N                     |\n| 光标向上       | Ctrl-P                     |\n| 光标向左       | Ctrl-B                     |\n| 光标向右       | Ctrl-F                     |\n| 光标行首       | Ctrl-A                     |\n| 光标行尾       | Ctrl-E                     |\n| 光标指定行      | Ctrl-G                     |\n| 向下插入行      | Cmd-Enter(一般改成Shift-Enter) |\n| 向上插入行      | Cmd-Shift-Enter            |\n| 向下复制行      | Shift-Option-下             |\n| 向上复制行      | Shift-Option-上             |\n| 复制所选内容或当前行 | Cmd-C                      |\n| 粘贴         | Cmd-V                      |\n| 合并行        | Ctrl-J                     |\n| 删除行        | Shift-Cmd-K                |\n\n","source":"_posts/2017-04-30-vscode-keys.md","raw":"---\ntitle: vscode常用快捷键\ndate: 2017-04-30 11:20:45\ncategories: 弄点工具\ntags:\n  - vscode\n---\n\n\n\n| 命令         | 键绑定                        |\n| ---------- | -------------------------- |\n| 光标向下       | Ctrl-N                     |\n| 光标向上       | Ctrl-P                     |\n| 光标向左       | Ctrl-B                     |\n| 光标向右       | Ctrl-F                     |\n| 光标行首       | Ctrl-A                     |\n| 光标行尾       | Ctrl-E                     |\n| 光标指定行      | Ctrl-G                     |\n| 向下插入行      | Cmd-Enter(一般改成Shift-Enter) |\n| 向上插入行      | Cmd-Shift-Enter            |\n| 向下复制行      | Shift-Option-下             |\n| 向上复制行      | Shift-Option-上             |\n| 复制所选内容或当前行 | Cmd-C                      |\n| 粘贴         | Cmd-V                      |\n| 合并行        | Ctrl-J                     |\n| 删除行        | Shift-Cmd-K                |\n\n","slug":"vscode-keys","published":1,"updated":"2017-12-17T03:29:45.293Z","_id":"cjb6k4kwn001lulepadiyk88u","comments":1,"layout":"post","photos":[],"link":"","content":"<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>键绑定</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>光标向下</td>\n<td>Ctrl-N</td>\n</tr>\n<tr>\n<td>光标向上</td>\n<td>Ctrl-P</td>\n</tr>\n<tr>\n<td>光标向左</td>\n<td>Ctrl-B</td>\n</tr>\n<tr>\n<td>光标向右</td>\n<td>Ctrl-F</td>\n</tr>\n<tr>\n<td>光标行首</td>\n<td>Ctrl-A</td>\n</tr>\n<tr>\n<td>光标行尾</td>\n<td>Ctrl-E</td>\n</tr>\n<tr>\n<td>光标指定行</td>\n<td>Ctrl-G</td>\n</tr>\n<tr>\n<td>向下插入行</td>\n<td>Cmd-Enter(一般改成Shift-Enter)</td>\n</tr>\n<tr>\n<td>向上插入行</td>\n<td>Cmd-Shift-Enter</td>\n</tr>\n<tr>\n<td>向下复制行</td>\n<td>Shift-Option-下</td>\n</tr>\n<tr>\n<td>向上复制行</td>\n<td>Shift-Option-上</td>\n</tr>\n<tr>\n<td>复制所选内容或当前行</td>\n<td>Cmd-C</td>\n</tr>\n<tr>\n<td>粘贴</td>\n<td>Cmd-V</td>\n</tr>\n<tr>\n<td>合并行</td>\n<td>Ctrl-J</td>\n</tr>\n<tr>\n<td>删除行</td>\n<td>Shift-Cmd-K</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>键绑定</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>光标向下</td>\n<td>Ctrl-N</td>\n</tr>\n<tr>\n<td>光标向上</td>\n<td>Ctrl-P</td>\n</tr>\n<tr>\n<td>光标向左</td>\n<td>Ctrl-B</td>\n</tr>\n<tr>\n<td>光标向右</td>\n<td>Ctrl-F</td>\n</tr>\n<tr>\n<td>光标行首</td>\n<td>Ctrl-A</td>\n</tr>\n<tr>\n<td>光标行尾</td>\n<td>Ctrl-E</td>\n</tr>\n<tr>\n<td>光标指定行</td>\n<td>Ctrl-G</td>\n</tr>\n<tr>\n<td>向下插入行</td>\n<td>Cmd-Enter(一般改成Shift-Enter)</td>\n</tr>\n<tr>\n<td>向上插入行</td>\n<td>Cmd-Shift-Enter</td>\n</tr>\n<tr>\n<td>向下复制行</td>\n<td>Shift-Option-下</td>\n</tr>\n<tr>\n<td>向上复制行</td>\n<td>Shift-Option-上</td>\n</tr>\n<tr>\n<td>复制所选内容或当前行</td>\n<td>Cmd-C</td>\n</tr>\n<tr>\n<td>粘贴</td>\n<td>Cmd-V</td>\n</tr>\n<tr>\n<td>合并行</td>\n<td>Ctrl-J</td>\n</tr>\n<tr>\n<td>删除行</td>\n<td>Shift-Cmd-K</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"我从linux上学习到了什么","date":"2017-08-10T04:15:55.000Z","_content":"\n\n> 如果把Linux、Windows、MacOS比作三种类型的姑娘的话：MacOS就是女神，漂亮昂贵；Windows就是普通姑娘，朴实耐用；Linux则是女汉子，结实能干。\n> 谨以此文纪念过往十年纠缠在Linux上的那些时间。\n\n## 我是怎么上路的\n作为一个上大学以前从未接触过电脑，上C语言程序设计课程时用VC6.0写个几十行程序都哆哆嗦嗦的土包子，我想我本没有机会碰到这个东西的。直到有一天去实验室参加项目，老师和师兄们说你得先学习Linux。于是乎，我便揣着安装盘、捧着入门书开始学习Linux。彼时，请高手帮忙才能装上Red Hat。只记得初见到那黑乎乎的界面和一串串的字符命令，顿时有种秒变黑客的感觉。\n\n接着，我修了一门《Linux程序设计》课程，系统性的学习了Linux的发展历史和程序设计的相关知识。这时，我才知道Unix、GNU、Linux的那些故事，知道除了Windows还有其他系统可以让计算机工作起来，知道操作系统史上那些鼎鼎大名的人物。与此同时，我还接触到了Knuth和TeX，知道除了Office以外还有这样一个东西可以让文章排版得这么漂亮，而且还免费，历史还那么悠长，当然TeX又是另外的故事了。\n\n然后，在网上看到了王垠写的《完全用GNU/Linux工作》，文中鲜明尖锐甚至有些极端的观点煽动性十足，简直像是能量满满的鸡血。他主页上晒出的各种狂拽酷炫叼炸天的奇淫巧计简直像是毒品一样，让人欲罢不能地一一尝试。当时的自己觉得仿佛找到了一条通往牛B闪闪的道路，好像可以成为一只特立独行的猪。\n\n再然后，我就开始一遍遍的被虐：不断地重装系统、配置中文、配置界面；不断地处理各种莫名其妙出现的错误；不断地解决各种依赖关系、编译调试；不断地奔走各个论坛和博客中求救。\n\n虽然我并没有因此变得牛逼或富有，但在这一路上，我发现我还是有所收获的。\n\n## 从GUI到CLI\nCLI是与计算机交互的更本质的方式；而GUI则更像是将面向用户的再次包装。\n\n从GUI到CLI：\n- 可以提升效率，大部分情况下，相比于只利用了两个手指头的鼠标，十个手指头的敲击效率要高很多。\n- 可以有更大的操作空间，大部分情况下，相比于只能按照固定流程执行的GUI，CLI能够更加灵活地进行操作。\n\n## 从代码到程序\n通过一遍遍的折腾，代码是怎么通过编译、链接进而生成可执行程序的过程是烂熟于心，这其中可能碰到的各种稀奇古怪的问题也几乎都见过。虽然没有什么高深的技术，但也让我在工作中碰到类似的情况时可以很轻松的面对。\n\n## Unix哲学\nLinux与Unix一脉相承，其哲学也得到了很好地继承。因此，虽然入门门槛高，但跨过以后，很多事情就变得一致起来。\n\n三条主要的哲学思想：\n1. 程序应该只关注一个目标，并尽可能把它做好。\n2. 让程序能够互相协同工作。\n3. 应该让程序处理文本数据流，因为这是一个通用的接口。\n\n核心就是KISS原则：Keep It Simple, Stupid! 基础就是只有做好一件事情，你才能做更多地事情。\n\n不仅是系统设计，生活亦是如此。\n\n## 自由是有代价的\n自由是需要付出代价的，至少需要时间成本。当你需要某种工具时，Linux可能给你提供一堆自由软件，但你需要时间去折腾它，甚至去改造它。\n\n当系统将程序切分得很细时，虽然组合起来自由度很高，但同时也会带来依赖性的问题。程序A依赖于程序B，程序B又依赖于程序C，程序C又依赖于程序D，只要其中一环出了问题，程序就无法正常工作。\n\n需要思考的是，如何处理好其中的平衡。\n\n## 创造与分享\n工具就是工具，不管你用得再好，创造出有用的东西才是最重要的。那些载入史册的人物，是因为创造了优秀的东西才名流千古的，比如Dennis Ritchie、Ken Thompson、Richard Stallman、Linus Torvalds、Donald Knuth等等。\n\n当有一样东西你需要而又没有，或者有但不好用的时候，你就需要创造。虽然从学习到创造并不是那么容易，需要一定天赋和训练，但我们要朝着这个方向努力。\n\n创造出的东西只有分享才能发挥更大的作用，不管是在集市上还是教堂里，分享给其他人才能使其变得更好。开放自己与他人沟通的渠道，并尝试主动发出信号，而不仅仅是被动接收。分享的范围越大，可能带来的增益也会越大。\n\n","source":"_posts/2017-08-10-learn-from-linux.md","raw":"---\ntitle: 我从linux上学习到了什么\ndate: 2017-08-10 12:15:55\ncategories: 聊点感想\ntags:\n  - linux\n---\n\n\n> 如果把Linux、Windows、MacOS比作三种类型的姑娘的话：MacOS就是女神，漂亮昂贵；Windows就是普通姑娘，朴实耐用；Linux则是女汉子，结实能干。\n> 谨以此文纪念过往十年纠缠在Linux上的那些时间。\n\n## 我是怎么上路的\n作为一个上大学以前从未接触过电脑，上C语言程序设计课程时用VC6.0写个几十行程序都哆哆嗦嗦的土包子，我想我本没有机会碰到这个东西的。直到有一天去实验室参加项目，老师和师兄们说你得先学习Linux。于是乎，我便揣着安装盘、捧着入门书开始学习Linux。彼时，请高手帮忙才能装上Red Hat。只记得初见到那黑乎乎的界面和一串串的字符命令，顿时有种秒变黑客的感觉。\n\n接着，我修了一门《Linux程序设计》课程，系统性的学习了Linux的发展历史和程序设计的相关知识。这时，我才知道Unix、GNU、Linux的那些故事，知道除了Windows还有其他系统可以让计算机工作起来，知道操作系统史上那些鼎鼎大名的人物。与此同时，我还接触到了Knuth和TeX，知道除了Office以外还有这样一个东西可以让文章排版得这么漂亮，而且还免费，历史还那么悠长，当然TeX又是另外的故事了。\n\n然后，在网上看到了王垠写的《完全用GNU/Linux工作》，文中鲜明尖锐甚至有些极端的观点煽动性十足，简直像是能量满满的鸡血。他主页上晒出的各种狂拽酷炫叼炸天的奇淫巧计简直像是毒品一样，让人欲罢不能地一一尝试。当时的自己觉得仿佛找到了一条通往牛B闪闪的道路，好像可以成为一只特立独行的猪。\n\n再然后，我就开始一遍遍的被虐：不断地重装系统、配置中文、配置界面；不断地处理各种莫名其妙出现的错误；不断地解决各种依赖关系、编译调试；不断地奔走各个论坛和博客中求救。\n\n虽然我并没有因此变得牛逼或富有，但在这一路上，我发现我还是有所收获的。\n\n## 从GUI到CLI\nCLI是与计算机交互的更本质的方式；而GUI则更像是将面向用户的再次包装。\n\n从GUI到CLI：\n- 可以提升效率，大部分情况下，相比于只利用了两个手指头的鼠标，十个手指头的敲击效率要高很多。\n- 可以有更大的操作空间，大部分情况下，相比于只能按照固定流程执行的GUI，CLI能够更加灵活地进行操作。\n\n## 从代码到程序\n通过一遍遍的折腾，代码是怎么通过编译、链接进而生成可执行程序的过程是烂熟于心，这其中可能碰到的各种稀奇古怪的问题也几乎都见过。虽然没有什么高深的技术，但也让我在工作中碰到类似的情况时可以很轻松的面对。\n\n## Unix哲学\nLinux与Unix一脉相承，其哲学也得到了很好地继承。因此，虽然入门门槛高，但跨过以后，很多事情就变得一致起来。\n\n三条主要的哲学思想：\n1. 程序应该只关注一个目标，并尽可能把它做好。\n2. 让程序能够互相协同工作。\n3. 应该让程序处理文本数据流，因为这是一个通用的接口。\n\n核心就是KISS原则：Keep It Simple, Stupid! 基础就是只有做好一件事情，你才能做更多地事情。\n\n不仅是系统设计，生活亦是如此。\n\n## 自由是有代价的\n自由是需要付出代价的，至少需要时间成本。当你需要某种工具时，Linux可能给你提供一堆自由软件，但你需要时间去折腾它，甚至去改造它。\n\n当系统将程序切分得很细时，虽然组合起来自由度很高，但同时也会带来依赖性的问题。程序A依赖于程序B，程序B又依赖于程序C，程序C又依赖于程序D，只要其中一环出了问题，程序就无法正常工作。\n\n需要思考的是，如何处理好其中的平衡。\n\n## 创造与分享\n工具就是工具，不管你用得再好，创造出有用的东西才是最重要的。那些载入史册的人物，是因为创造了优秀的东西才名流千古的，比如Dennis Ritchie、Ken Thompson、Richard Stallman、Linus Torvalds、Donald Knuth等等。\n\n当有一样东西你需要而又没有，或者有但不好用的时候，你就需要创造。虽然从学习到创造并不是那么容易，需要一定天赋和训练，但我们要朝着这个方向努力。\n\n创造出的东西只有分享才能发挥更大的作用，不管是在集市上还是教堂里，分享给其他人才能使其变得更好。开放自己与他人沟通的渠道，并尝试主动发出信号，而不仅仅是被动接收。分享的范围越大，可能带来的增益也会越大。\n\n","slug":"learn-from-linux","published":1,"updated":"2017-12-17T03:29:41.903Z","_id":"cjb6k4kwp001oulepayia50ht","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>如果把Linux、Windows、MacOS比作三种类型的姑娘的话：MacOS就是女神，漂亮昂贵；Windows就是普通姑娘，朴实耐用；Linux则是女汉子，结实能干。<br>谨以此文纪念过往十年纠缠在Linux上的那些时间。</p>\n</blockquote>\n<h2 id=\"我是怎么上路的\"><a href=\"#我是怎么上路的\" class=\"headerlink\" title=\"我是怎么上路的\"></a>我是怎么上路的</h2><p>作为一个上大学以前从未接触过电脑，上C语言程序设计课程时用VC6.0写个几十行程序都哆哆嗦嗦的土包子，我想我本没有机会碰到这个东西的。直到有一天去实验室参加项目，老师和师兄们说你得先学习Linux。于是乎，我便揣着安装盘、捧着入门书开始学习Linux。彼时，请高手帮忙才能装上Red Hat。只记得初见到那黑乎乎的界面和一串串的字符命令，顿时有种秒变黑客的感觉。</p>\n<p>接着，我修了一门《Linux程序设计》课程，系统性的学习了Linux的发展历史和程序设计的相关知识。这时，我才知道Unix、GNU、Linux的那些故事，知道除了Windows还有其他系统可以让计算机工作起来，知道操作系统史上那些鼎鼎大名的人物。与此同时，我还接触到了Knuth和TeX，知道除了Office以外还有这样一个东西可以让文章排版得这么漂亮，而且还免费，历史还那么悠长，当然TeX又是另外的故事了。</p>\n<p>然后，在网上看到了王垠写的《完全用GNU/Linux工作》，文中鲜明尖锐甚至有些极端的观点煽动性十足，简直像是能量满满的鸡血。他主页上晒出的各种狂拽酷炫叼炸天的奇淫巧计简直像是毒品一样，让人欲罢不能地一一尝试。当时的自己觉得仿佛找到了一条通往牛B闪闪的道路，好像可以成为一只特立独行的猪。</p>\n<p>再然后，我就开始一遍遍的被虐：不断地重装系统、配置中文、配置界面；不断地处理各种莫名其妙出现的错误；不断地解决各种依赖关系、编译调试；不断地奔走各个论坛和博客中求救。</p>\n<p>虽然我并没有因此变得牛逼或富有，但在这一路上，我发现我还是有所收获的。</p>\n<h2 id=\"从GUI到CLI\"><a href=\"#从GUI到CLI\" class=\"headerlink\" title=\"从GUI到CLI\"></a>从GUI到CLI</h2><p>CLI是与计算机交互的更本质的方式；而GUI则更像是将面向用户的再次包装。</p>\n<p>从GUI到CLI：</p>\n<ul>\n<li>可以提升效率，大部分情况下，相比于只利用了两个手指头的鼠标，十个手指头的敲击效率要高很多。</li>\n<li>可以有更大的操作空间，大部分情况下，相比于只能按照固定流程执行的GUI，CLI能够更加灵活地进行操作。</li>\n</ul>\n<h2 id=\"从代码到程序\"><a href=\"#从代码到程序\" class=\"headerlink\" title=\"从代码到程序\"></a>从代码到程序</h2><p>通过一遍遍的折腾，代码是怎么通过编译、链接进而生成可执行程序的过程是烂熟于心，这其中可能碰到的各种稀奇古怪的问题也几乎都见过。虽然没有什么高深的技术，但也让我在工作中碰到类似的情况时可以很轻松的面对。</p>\n<h2 id=\"Unix哲学\"><a href=\"#Unix哲学\" class=\"headerlink\" title=\"Unix哲学\"></a>Unix哲学</h2><p>Linux与Unix一脉相承，其哲学也得到了很好地继承。因此，虽然入门门槛高，但跨过以后，很多事情就变得一致起来。</p>\n<p>三条主要的哲学思想：</p>\n<ol>\n<li>程序应该只关注一个目标，并尽可能把它做好。</li>\n<li>让程序能够互相协同工作。</li>\n<li>应该让程序处理文本数据流，因为这是一个通用的接口。</li>\n</ol>\n<p>核心就是KISS原则：Keep It Simple, Stupid! 基础就是只有做好一件事情，你才能做更多地事情。</p>\n<p>不仅是系统设计，生活亦是如此。</p>\n<h2 id=\"自由是有代价的\"><a href=\"#自由是有代价的\" class=\"headerlink\" title=\"自由是有代价的\"></a>自由是有代价的</h2><p>自由是需要付出代价的，至少需要时间成本。当你需要某种工具时，Linux可能给你提供一堆自由软件，但你需要时间去折腾它，甚至去改造它。</p>\n<p>当系统将程序切分得很细时，虽然组合起来自由度很高，但同时也会带来依赖性的问题。程序A依赖于程序B，程序B又依赖于程序C，程序C又依赖于程序D，只要其中一环出了问题，程序就无法正常工作。</p>\n<p>需要思考的是，如何处理好其中的平衡。</p>\n<h2 id=\"创造与分享\"><a href=\"#创造与分享\" class=\"headerlink\" title=\"创造与分享\"></a>创造与分享</h2><p>工具就是工具，不管你用得再好，创造出有用的东西才是最重要的。那些载入史册的人物，是因为创造了优秀的东西才名流千古的，比如Dennis Ritchie、Ken Thompson、Richard Stallman、Linus Torvalds、Donald Knuth等等。</p>\n<p>当有一样东西你需要而又没有，或者有但不好用的时候，你就需要创造。虽然从学习到创造并不是那么容易，需要一定天赋和训练，但我们要朝着这个方向努力。</p>\n<p>创造出的东西只有分享才能发挥更大的作用，不管是在集市上还是教堂里，分享给其他人才能使其变得更好。开放自己与他人沟通的渠道，并尝试主动发出信号，而不仅仅是被动接收。分享的范围越大，可能带来的增益也会越大。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>如果把Linux、Windows、MacOS比作三种类型的姑娘的话：MacOS就是女神，漂亮昂贵；Windows就是普通姑娘，朴实耐用；Linux则是女汉子，结实能干。<br>谨以此文纪念过往十年纠缠在Linux上的那些时间。</p>\n</blockquote>\n<h2 id=\"我是怎么上路的\"><a href=\"#我是怎么上路的\" class=\"headerlink\" title=\"我是怎么上路的\"></a>我是怎么上路的</h2><p>作为一个上大学以前从未接触过电脑，上C语言程序设计课程时用VC6.0写个几十行程序都哆哆嗦嗦的土包子，我想我本没有机会碰到这个东西的。直到有一天去实验室参加项目，老师和师兄们说你得先学习Linux。于是乎，我便揣着安装盘、捧着入门书开始学习Linux。彼时，请高手帮忙才能装上Red Hat。只记得初见到那黑乎乎的界面和一串串的字符命令，顿时有种秒变黑客的感觉。</p>\n<p>接着，我修了一门《Linux程序设计》课程，系统性的学习了Linux的发展历史和程序设计的相关知识。这时，我才知道Unix、GNU、Linux的那些故事，知道除了Windows还有其他系统可以让计算机工作起来，知道操作系统史上那些鼎鼎大名的人物。与此同时，我还接触到了Knuth和TeX，知道除了Office以外还有这样一个东西可以让文章排版得这么漂亮，而且还免费，历史还那么悠长，当然TeX又是另外的故事了。</p>\n<p>然后，在网上看到了王垠写的《完全用GNU/Linux工作》，文中鲜明尖锐甚至有些极端的观点煽动性十足，简直像是能量满满的鸡血。他主页上晒出的各种狂拽酷炫叼炸天的奇淫巧计简直像是毒品一样，让人欲罢不能地一一尝试。当时的自己觉得仿佛找到了一条通往牛B闪闪的道路，好像可以成为一只特立独行的猪。</p>\n<p>再然后，我就开始一遍遍的被虐：不断地重装系统、配置中文、配置界面；不断地处理各种莫名其妙出现的错误；不断地解决各种依赖关系、编译调试；不断地奔走各个论坛和博客中求救。</p>\n<p>虽然我并没有因此变得牛逼或富有，但在这一路上，我发现我还是有所收获的。</p>\n<h2 id=\"从GUI到CLI\"><a href=\"#从GUI到CLI\" class=\"headerlink\" title=\"从GUI到CLI\"></a>从GUI到CLI</h2><p>CLI是与计算机交互的更本质的方式；而GUI则更像是将面向用户的再次包装。</p>\n<p>从GUI到CLI：</p>\n<ul>\n<li>可以提升效率，大部分情况下，相比于只利用了两个手指头的鼠标，十个手指头的敲击效率要高很多。</li>\n<li>可以有更大的操作空间，大部分情况下，相比于只能按照固定流程执行的GUI，CLI能够更加灵活地进行操作。</li>\n</ul>\n<h2 id=\"从代码到程序\"><a href=\"#从代码到程序\" class=\"headerlink\" title=\"从代码到程序\"></a>从代码到程序</h2><p>通过一遍遍的折腾，代码是怎么通过编译、链接进而生成可执行程序的过程是烂熟于心，这其中可能碰到的各种稀奇古怪的问题也几乎都见过。虽然没有什么高深的技术，但也让我在工作中碰到类似的情况时可以很轻松的面对。</p>\n<h2 id=\"Unix哲学\"><a href=\"#Unix哲学\" class=\"headerlink\" title=\"Unix哲学\"></a>Unix哲学</h2><p>Linux与Unix一脉相承，其哲学也得到了很好地继承。因此，虽然入门门槛高，但跨过以后，很多事情就变得一致起来。</p>\n<p>三条主要的哲学思想：</p>\n<ol>\n<li>程序应该只关注一个目标，并尽可能把它做好。</li>\n<li>让程序能够互相协同工作。</li>\n<li>应该让程序处理文本数据流，因为这是一个通用的接口。</li>\n</ol>\n<p>核心就是KISS原则：Keep It Simple, Stupid! 基础就是只有做好一件事情，你才能做更多地事情。</p>\n<p>不仅是系统设计，生活亦是如此。</p>\n<h2 id=\"自由是有代价的\"><a href=\"#自由是有代价的\" class=\"headerlink\" title=\"自由是有代价的\"></a>自由是有代价的</h2><p>自由是需要付出代价的，至少需要时间成本。当你需要某种工具时，Linux可能给你提供一堆自由软件，但你需要时间去折腾它，甚至去改造它。</p>\n<p>当系统将程序切分得很细时，虽然组合起来自由度很高，但同时也会带来依赖性的问题。程序A依赖于程序B，程序B又依赖于程序C，程序C又依赖于程序D，只要其中一环出了问题，程序就无法正常工作。</p>\n<p>需要思考的是，如何处理好其中的平衡。</p>\n<h2 id=\"创造与分享\"><a href=\"#创造与分享\" class=\"headerlink\" title=\"创造与分享\"></a>创造与分享</h2><p>工具就是工具，不管你用得再好，创造出有用的东西才是最重要的。那些载入史册的人物，是因为创造了优秀的东西才名流千古的，比如Dennis Ritchie、Ken Thompson、Richard Stallman、Linus Torvalds、Donald Knuth等等。</p>\n<p>当有一样东西你需要而又没有，或者有但不好用的时候，你就需要创造。虽然从学习到创造并不是那么容易，需要一定天赋和训练，但我们要朝着这个方向努力。</p>\n<p>创造出的东西只有分享才能发挥更大的作用，不管是在集市上还是教堂里，分享给其他人才能使其变得更好。开放自己与他人沟通的渠道，并尝试主动发出信号，而不仅仅是被动接收。分享的范围越大，可能带来的增益也会越大。</p>\n"},{"title":"DAG Blockchain之Byteball原理解析（二）","date":"2017-12-18T16:09:55.000Z","_content":"\n\n## Byteball的共识算法\n\n### 主链\n\n在Byteball中，从任何一个顶端单元出发到达创世单元的最优路径称为**候选主链（Candidate Mainchain）**。最优路径通过选择最优父单元产生，选择策略用于保证整个网络的安全性。不同的候选主链会在某个单元位置交叉（最差的情况是在创世单元交叉），该交叉点称为**稳定点（Stable Point）**。对于所有候选主链，从稳定点到创世单元的路径完全相同，该路径称为**稳定主链（Stable Mainchain）**。稳定主链是一条确定的路径，从候选路径变为稳定主链是一个从不确定逐渐变成确定的过程。后续讨论中，如果没有明确区分，主链一般指的是候选主链。\n\n![主链](http://oc7urqs4c.bkt.clouddn.com/2017-12-17-byteball-mainchain.png)\n\nDAG中的每个单元要么直接位于主链上，要么经过较短的路径就能到达主链，主链可以形象地看作是一条连接着许多侧面道路的高速公路。一个单元一旦进入DAG中，它所在的主链也相应确定，因为后续单元只能作为其子单元，而无法更改其父单元。\n\n给定一条主链，与之相关的所有单元均可以在此基础上进行排序，其序号称为**主链序号（MCI, Main Chain Index）**。创世单元的MCI为0，依次加1直到链尾。对于不在主链上的单元，其MCI等于主链上最先包含（直接或者间接）该单元的那个单元的MCI。MCI代表了从主链视角来看单元在DAG中的总序，对于发生冲突的双花交易，MCI较小的单元为有效单元。\n\n\n\n### 最优父单元的选择策略\n\n> **单元级别：**由当前单元出发至创世单元的最长路径长度定义为单元级别（unit level）\n>\n> **见证级别：**从当前单元开始沿主链回溯，并对路径中不同见证人进行计数（相同见证人只计数1次），当遇到的见证人数足够多时（超过大多数的已知见证人）停止回溯；然后计算停止位置的单元级别，将其称作当前单元的见证级别（witnessed level）。\n\n最优父单元的选择策略由以下三部分组成：\n\n1. 在选择最优父单元时，见证级别最高的父单元为最优父单元；\n2. 如果见证级别相同，则单元级别最低的作为最优父单元；\n3. 如果两者都相同，则选择单元哈希值（base64编码）更小的作为最优父单元。​\n\n那么，从顶端单元出发，只需要递归地在其父单元中选取最优父单元即可形成主链。在上述选择策略中，见证人成为了某个单元看待历史的视角，每个单元可以维护自己的见证人列表，也可以通过`witness_list_unit`引用其它单元的见证人列表。\n\n> **单元兼容：**如果两个单元的见证人列表差别最多一项，则称这两个单元兼容\n\n在选择最优父单元时，仅可以从与当前单元兼容的父单元中进行选择，以保证看待历史视角的连续性。不兼容的父单元仍然被承认，但是他们不能成为最优父单元。特别地，在发出新单元时，如果与所有顶端单元都不兼容，则应从上一级别的父单元中进行选择。\n\n\n\n### 双花问题\n\n在用户地址发出新单元时，要求相同地址发布的所有单元应当直接或间接包含该地址之前所有的单元，即相同地址的所有单元连通（有序或连续）。\n\n> **双花交易：**相同地址发出的任何无序的交易都视为双花交易，即使它们没有使用相同的输出，也可称为冲突交易或者矛盾交易。\n\n因此，在相同地址的所有单元都连通的情况下，在路径上出现较早的交易为有效交易。如果有攻击者特意制造出双花交易，那么可以通过主链序号来解决，主链序号较小的交易为有效交易。\n\n![双花交易](http://oc7urqs4c.bkt.clouddn.com/2017-12-17-byteball-double-spend-1.png)\n\n上图给出了一种攻击场景，攻击者制造出一条影子链，并在上面发布双花交易。当影子链接入到真实的DAG中时，根据最优父单元选择策略，影子链上的见证人个数少，因此它不会成为主链的一部分，从而解决了这种场景下的双花问题。**值得注意的是，如果大多数见证人与攻击者合谋，并在其影子链上发布单元，则攻击者有可能攻击成功。**\n\n\n\n### 单元成为稳定点的条件\n\n根据上面的分析可知，所有候选主链在稳定点之后到达创世单元的路径完全相同，即稳定主链成为最终状态。这也意味着，从稳定主链上单元直接或间接包含的那些单元也将无法再被篡改。因此，只要随着新单元的不断加入，稳定点可以不断地向后扩展，且不同的用户节点的稳定点扩展方式保持一致，则全网的所有用户节点可以**实现共识**。\n\n对于所有单元，如果只保留其与其最优父单元的连接，则DAG将退化为一棵树$T$，所有的候选主链只可能从这棵树中产生。下面根据稳定点是否具有多个子单元分两种情况对稳定点的扩展方式进行讨论。\n\n> **当前主链：**在DAG中，从不同顶端单元出发具有不同的候选主链，从见证级别最高的顶端节点出发的候选主链称为当前主链（Current Mainchain）。\n\n![稳定点不分叉](http://oc7urqs4c.bkt.clouddn.com/2017-12-18-byteball-tree1.png)\n\n假设当前稳定点的见证人列表为$W$，单元级别为$l$，它只有一个子单元，如上图所示。以$W$作为见证人列表，从当前主链的顶端节点进行回溯，直到遇见$W$中的大部分见证人，记录这些见证人发出的单元中的最小见证级别，记作$min\\_wl$。如果$min\\_wl>l$，则扩展当前稳定点至其子单元，否则不进行扩展。由于大部分见证人已经在当前主链上了，后续这些见证人发布的单元将继续支持当前路径，从而使得稳定点可以向前扩展。\n\n![稳定点分叉](http://oc7urqs4c.bkt.clouddn.com/2017-12-18-byteball-tree2.png)\n\n假设当前稳定点具有多个子单元，如上图所示。在当前稳定点的所有子单元中（除了位于当前主链的子单元），找出见证级别大于当前稳定点的子单元，并将其中最大的单元级别记为$max\\_l$。也就是说，除了当前主链外，当前稳定点其它分支上的单元见证级别将不超过$max\\_l$。如果$min\\_wl>max\\_l$，那么稳定点可以沿当前主链向前扩展。\n\n随着稳定点的不断前进，稳定主链及其相关单元的状态被最终确定下来。只要DAG中的单元相同，其形成的主链和稳定点也是相同的。因此，不同的用户节点，只要最终收到相同的单元，它们最终将达到一致的状态。\n\n\n\n","source":"_posts/2017-12-19-byteball2.md","raw":"---\ntitle: DAG Blockchain之Byteball原理解析（二）\ndate: 2017-12-19 00:09:55\ncategories: 谈点区块链\ntags:\n  - dag\n  - blockchain\n  - byteball\n  - bitcoin\n---\n\n\n## Byteball的共识算法\n\n### 主链\n\n在Byteball中，从任何一个顶端单元出发到达创世单元的最优路径称为**候选主链（Candidate Mainchain）**。最优路径通过选择最优父单元产生，选择策略用于保证整个网络的安全性。不同的候选主链会在某个单元位置交叉（最差的情况是在创世单元交叉），该交叉点称为**稳定点（Stable Point）**。对于所有候选主链，从稳定点到创世单元的路径完全相同，该路径称为**稳定主链（Stable Mainchain）**。稳定主链是一条确定的路径，从候选路径变为稳定主链是一个从不确定逐渐变成确定的过程。后续讨论中，如果没有明确区分，主链一般指的是候选主链。\n\n![主链](http://oc7urqs4c.bkt.clouddn.com/2017-12-17-byteball-mainchain.png)\n\nDAG中的每个单元要么直接位于主链上，要么经过较短的路径就能到达主链，主链可以形象地看作是一条连接着许多侧面道路的高速公路。一个单元一旦进入DAG中，它所在的主链也相应确定，因为后续单元只能作为其子单元，而无法更改其父单元。\n\n给定一条主链，与之相关的所有单元均可以在此基础上进行排序，其序号称为**主链序号（MCI, Main Chain Index）**。创世单元的MCI为0，依次加1直到链尾。对于不在主链上的单元，其MCI等于主链上最先包含（直接或者间接）该单元的那个单元的MCI。MCI代表了从主链视角来看单元在DAG中的总序，对于发生冲突的双花交易，MCI较小的单元为有效单元。\n\n\n\n### 最优父单元的选择策略\n\n> **单元级别：**由当前单元出发至创世单元的最长路径长度定义为单元级别（unit level）\n>\n> **见证级别：**从当前单元开始沿主链回溯，并对路径中不同见证人进行计数（相同见证人只计数1次），当遇到的见证人数足够多时（超过大多数的已知见证人）停止回溯；然后计算停止位置的单元级别，将其称作当前单元的见证级别（witnessed level）。\n\n最优父单元的选择策略由以下三部分组成：\n\n1. 在选择最优父单元时，见证级别最高的父单元为最优父单元；\n2. 如果见证级别相同，则单元级别最低的作为最优父单元；\n3. 如果两者都相同，则选择单元哈希值（base64编码）更小的作为最优父单元。​\n\n那么，从顶端单元出发，只需要递归地在其父单元中选取最优父单元即可形成主链。在上述选择策略中，见证人成为了某个单元看待历史的视角，每个单元可以维护自己的见证人列表，也可以通过`witness_list_unit`引用其它单元的见证人列表。\n\n> **单元兼容：**如果两个单元的见证人列表差别最多一项，则称这两个单元兼容\n\n在选择最优父单元时，仅可以从与当前单元兼容的父单元中进行选择，以保证看待历史视角的连续性。不兼容的父单元仍然被承认，但是他们不能成为最优父单元。特别地，在发出新单元时，如果与所有顶端单元都不兼容，则应从上一级别的父单元中进行选择。\n\n\n\n### 双花问题\n\n在用户地址发出新单元时，要求相同地址发布的所有单元应当直接或间接包含该地址之前所有的单元，即相同地址的所有单元连通（有序或连续）。\n\n> **双花交易：**相同地址发出的任何无序的交易都视为双花交易，即使它们没有使用相同的输出，也可称为冲突交易或者矛盾交易。\n\n因此，在相同地址的所有单元都连通的情况下，在路径上出现较早的交易为有效交易。如果有攻击者特意制造出双花交易，那么可以通过主链序号来解决，主链序号较小的交易为有效交易。\n\n![双花交易](http://oc7urqs4c.bkt.clouddn.com/2017-12-17-byteball-double-spend-1.png)\n\n上图给出了一种攻击场景，攻击者制造出一条影子链，并在上面发布双花交易。当影子链接入到真实的DAG中时，根据最优父单元选择策略，影子链上的见证人个数少，因此它不会成为主链的一部分，从而解决了这种场景下的双花问题。**值得注意的是，如果大多数见证人与攻击者合谋，并在其影子链上发布单元，则攻击者有可能攻击成功。**\n\n\n\n### 单元成为稳定点的条件\n\n根据上面的分析可知，所有候选主链在稳定点之后到达创世单元的路径完全相同，即稳定主链成为最终状态。这也意味着，从稳定主链上单元直接或间接包含的那些单元也将无法再被篡改。因此，只要随着新单元的不断加入，稳定点可以不断地向后扩展，且不同的用户节点的稳定点扩展方式保持一致，则全网的所有用户节点可以**实现共识**。\n\n对于所有单元，如果只保留其与其最优父单元的连接，则DAG将退化为一棵树$T$，所有的候选主链只可能从这棵树中产生。下面根据稳定点是否具有多个子单元分两种情况对稳定点的扩展方式进行讨论。\n\n> **当前主链：**在DAG中，从不同顶端单元出发具有不同的候选主链，从见证级别最高的顶端节点出发的候选主链称为当前主链（Current Mainchain）。\n\n![稳定点不分叉](http://oc7urqs4c.bkt.clouddn.com/2017-12-18-byteball-tree1.png)\n\n假设当前稳定点的见证人列表为$W$，单元级别为$l$，它只有一个子单元，如上图所示。以$W$作为见证人列表，从当前主链的顶端节点进行回溯，直到遇见$W$中的大部分见证人，记录这些见证人发出的单元中的最小见证级别，记作$min\\_wl$。如果$min\\_wl>l$，则扩展当前稳定点至其子单元，否则不进行扩展。由于大部分见证人已经在当前主链上了，后续这些见证人发布的单元将继续支持当前路径，从而使得稳定点可以向前扩展。\n\n![稳定点分叉](http://oc7urqs4c.bkt.clouddn.com/2017-12-18-byteball-tree2.png)\n\n假设当前稳定点具有多个子单元，如上图所示。在当前稳定点的所有子单元中（除了位于当前主链的子单元），找出见证级别大于当前稳定点的子单元，并将其中最大的单元级别记为$max\\_l$。也就是说，除了当前主链外，当前稳定点其它分支上的单元见证级别将不超过$max\\_l$。如果$min\\_wl>max\\_l$，那么稳定点可以沿当前主链向前扩展。\n\n随着稳定点的不断前进，稳定主链及其相关单元的状态被最终确定下来。只要DAG中的单元相同，其形成的主链和稳定点也是相同的。因此，不同的用户节点，只要最终收到相同的单元，它们最终将达到一致的状态。\n\n\n\n","slug":"byteball2","published":1,"updated":"2017-12-18T16:15:32.964Z","_id":"cjbcecfvz00006lep5mfeid9n","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Byteball的共识算法\"><a href=\"#Byteball的共识算法\" class=\"headerlink\" title=\"Byteball的共识算法\"></a>Byteball的共识算法</h2><h3 id=\"主链\"><a href=\"#主链\" class=\"headerlink\" title=\"主链\"></a>主链</h3><p>在Byteball中，从任何一个顶端单元出发到达创世单元的最优路径称为<strong>候选主链（Candidate Mainchain）</strong>。最优路径通过选择最优父单元产生，选择策略用于保证整个网络的安全性。不同的候选主链会在某个单元位置交叉（最差的情况是在创世单元交叉），该交叉点称为<strong>稳定点（Stable Point）</strong>。对于所有候选主链，从稳定点到创世单元的路径完全相同，该路径称为<strong>稳定主链（Stable Mainchain）</strong>。稳定主链是一条确定的路径，从候选路径变为稳定主链是一个从不确定逐渐变成确定的过程。后续讨论中，如果没有明确区分，主链一般指的是候选主链。</p>\n<p><img src=\"http://oc7urqs4c.bkt.clouddn.com/2017-12-17-byteball-mainchain.png\" alt=\"主链\"></p>\n<p>DAG中的每个单元要么直接位于主链上，要么经过较短的路径就能到达主链，主链可以形象地看作是一条连接着许多侧面道路的高速公路。一个单元一旦进入DAG中，它所在的主链也相应确定，因为后续单元只能作为其子单元，而无法更改其父单元。</p>\n<p>给定一条主链，与之相关的所有单元均可以在此基础上进行排序，其序号称为<strong>主链序号（MCI, Main Chain Index）</strong>。创世单元的MCI为0，依次加1直到链尾。对于不在主链上的单元，其MCI等于主链上最先包含（直接或者间接）该单元的那个单元的MCI。MCI代表了从主链视角来看单元在DAG中的总序，对于发生冲突的双花交易，MCI较小的单元为有效单元。</p>\n<h3 id=\"最优父单元的选择策略\"><a href=\"#最优父单元的选择策略\" class=\"headerlink\" title=\"最优父单元的选择策略\"></a>最优父单元的选择策略</h3><blockquote>\n<p><strong>单元级别：</strong>由当前单元出发至创世单元的最长路径长度定义为单元级别（unit level）</p>\n<p><strong>见证级别：</strong>从当前单元开始沿主链回溯，并对路径中不同见证人进行计数（相同见证人只计数1次），当遇到的见证人数足够多时（超过大多数的已知见证人）停止回溯；然后计算停止位置的单元级别，将其称作当前单元的见证级别（witnessed level）。</p>\n</blockquote>\n<p>最优父单元的选择策略由以下三部分组成：</p>\n<ol>\n<li>在选择最优父单元时，见证级别最高的父单元为最优父单元；</li>\n<li>如果见证级别相同，则单元级别最低的作为最优父单元；</li>\n<li>如果两者都相同，则选择单元哈希值（base64编码）更小的作为最优父单元。​</li>\n</ol>\n<p>那么，从顶端单元出发，只需要递归地在其父单元中选取最优父单元即可形成主链。在上述选择策略中，见证人成为了某个单元看待历史的视角，每个单元可以维护自己的见证人列表，也可以通过<code>witness_list_unit</code>引用其它单元的见证人列表。</p>\n<blockquote>\n<p><strong>单元兼容：</strong>如果两个单元的见证人列表差别最多一项，则称这两个单元兼容</p>\n</blockquote>\n<p>在选择最优父单元时，仅可以从与当前单元兼容的父单元中进行选择，以保证看待历史视角的连续性。不兼容的父单元仍然被承认，但是他们不能成为最优父单元。特别地，在发出新单元时，如果与所有顶端单元都不兼容，则应从上一级别的父单元中进行选择。</p>\n<h3 id=\"双花问题\"><a href=\"#双花问题\" class=\"headerlink\" title=\"双花问题\"></a>双花问题</h3><p>在用户地址发出新单元时，要求相同地址发布的所有单元应当直接或间接包含该地址之前所有的单元，即相同地址的所有单元连通（有序或连续）。</p>\n<blockquote>\n<p><strong>双花交易：</strong>相同地址发出的任何无序的交易都视为双花交易，即使它们没有使用相同的输出，也可称为冲突交易或者矛盾交易。</p>\n</blockquote>\n<p>因此，在相同地址的所有单元都连通的情况下，在路径上出现较早的交易为有效交易。如果有攻击者特意制造出双花交易，那么可以通过主链序号来解决，主链序号较小的交易为有效交易。</p>\n<p><img src=\"http://oc7urqs4c.bkt.clouddn.com/2017-12-17-byteball-double-spend-1.png\" alt=\"双花交易\"></p>\n<p>上图给出了一种攻击场景，攻击者制造出一条影子链，并在上面发布双花交易。当影子链接入到真实的DAG中时，根据最优父单元选择策略，影子链上的见证人个数少，因此它不会成为主链的一部分，从而解决了这种场景下的双花问题。<strong>值得注意的是，如果大多数见证人与攻击者合谋，并在其影子链上发布单元，则攻击者有可能攻击成功。</strong></p>\n<h3 id=\"单元成为稳定点的条件\"><a href=\"#单元成为稳定点的条件\" class=\"headerlink\" title=\"单元成为稳定点的条件\"></a>单元成为稳定点的条件</h3><p>根据上面的分析可知，所有候选主链在稳定点之后到达创世单元的路径完全相同，即稳定主链成为最终状态。这也意味着，从稳定主链上单元直接或间接包含的那些单元也将无法再被篡改。因此，只要随着新单元的不断加入，稳定点可以不断地向后扩展，且不同的用户节点的稳定点扩展方式保持一致，则全网的所有用户节点可以<strong>实现共识</strong>。</p>\n<p>对于所有单元，如果只保留其与其最优父单元的连接，则DAG将退化为一棵树$T$，所有的候选主链只可能从这棵树中产生。下面根据稳定点是否具有多个子单元分两种情况对稳定点的扩展方式进行讨论。</p>\n<blockquote>\n<p><strong>当前主链：</strong>在DAG中，从不同顶端单元出发具有不同的候选主链，从见证级别最高的顶端节点出发的候选主链称为当前主链（Current Mainchain）。</p>\n</blockquote>\n<p><img src=\"http://oc7urqs4c.bkt.clouddn.com/2017-12-18-byteball-tree1.png\" alt=\"稳定点不分叉\"></p>\n<p>假设当前稳定点的见证人列表为$W$，单元级别为$l$，它只有一个子单元，如上图所示。以$W$作为见证人列表，从当前主链的顶端节点进行回溯，直到遇见$W$中的大部分见证人，记录这些见证人发出的单元中的最小见证级别，记作$min_wl$。如果$min_wl&gt;l$，则扩展当前稳定点至其子单元，否则不进行扩展。由于大部分见证人已经在当前主链上了，后续这些见证人发布的单元将继续支持当前路径，从而使得稳定点可以向前扩展。</p>\n<p><img src=\"http://oc7urqs4c.bkt.clouddn.com/2017-12-18-byteball-tree2.png\" alt=\"稳定点分叉\"></p>\n<p>假设当前稳定点具有多个子单元，如上图所示。在当前稳定点的所有子单元中（除了位于当前主链的子单元），找出见证级别大于当前稳定点的子单元，并将其中最大的单元级别记为$max_l$。也就是说，除了当前主链外，当前稳定点其它分支上的单元见证级别将不超过$max_l$。如果$min_wl&gt;max_l$，那么稳定点可以沿当前主链向前扩展。</p>\n<p>随着稳定点的不断前进，稳定主链及其相关单元的状态被最终确定下来。只要DAG中的单元相同，其形成的主链和稳定点也是相同的。因此，不同的用户节点，只要最终收到相同的单元，它们最终将达到一致的状态。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Byteball的共识算法\"><a href=\"#Byteball的共识算法\" class=\"headerlink\" title=\"Byteball的共识算法\"></a>Byteball的共识算法</h2><h3 id=\"主链\"><a href=\"#主链\" class=\"headerlink\" title=\"主链\"></a>主链</h3><p>在Byteball中，从任何一个顶端单元出发到达创世单元的最优路径称为<strong>候选主链（Candidate Mainchain）</strong>。最优路径通过选择最优父单元产生，选择策略用于保证整个网络的安全性。不同的候选主链会在某个单元位置交叉（最差的情况是在创世单元交叉），该交叉点称为<strong>稳定点（Stable Point）</strong>。对于所有候选主链，从稳定点到创世单元的路径完全相同，该路径称为<strong>稳定主链（Stable Mainchain）</strong>。稳定主链是一条确定的路径，从候选路径变为稳定主链是一个从不确定逐渐变成确定的过程。后续讨论中，如果没有明确区分，主链一般指的是候选主链。</p>\n<p><img src=\"http://oc7urqs4c.bkt.clouddn.com/2017-12-17-byteball-mainchain.png\" alt=\"主链\"></p>\n<p>DAG中的每个单元要么直接位于主链上，要么经过较短的路径就能到达主链，主链可以形象地看作是一条连接着许多侧面道路的高速公路。一个单元一旦进入DAG中，它所在的主链也相应确定，因为后续单元只能作为其子单元，而无法更改其父单元。</p>\n<p>给定一条主链，与之相关的所有单元均可以在此基础上进行排序，其序号称为<strong>主链序号（MCI, Main Chain Index）</strong>。创世单元的MCI为0，依次加1直到链尾。对于不在主链上的单元，其MCI等于主链上最先包含（直接或者间接）该单元的那个单元的MCI。MCI代表了从主链视角来看单元在DAG中的总序，对于发生冲突的双花交易，MCI较小的单元为有效单元。</p>\n<h3 id=\"最优父单元的选择策略\"><a href=\"#最优父单元的选择策略\" class=\"headerlink\" title=\"最优父单元的选择策略\"></a>最优父单元的选择策略</h3><blockquote>\n<p><strong>单元级别：</strong>由当前单元出发至创世单元的最长路径长度定义为单元级别（unit level）</p>\n<p><strong>见证级别：</strong>从当前单元开始沿主链回溯，并对路径中不同见证人进行计数（相同见证人只计数1次），当遇到的见证人数足够多时（超过大多数的已知见证人）停止回溯；然后计算停止位置的单元级别，将其称作当前单元的见证级别（witnessed level）。</p>\n</blockquote>\n<p>最优父单元的选择策略由以下三部分组成：</p>\n<ol>\n<li>在选择最优父单元时，见证级别最高的父单元为最优父单元；</li>\n<li>如果见证级别相同，则单元级别最低的作为最优父单元；</li>\n<li>如果两者都相同，则选择单元哈希值（base64编码）更小的作为最优父单元。​</li>\n</ol>\n<p>那么，从顶端单元出发，只需要递归地在其父单元中选取最优父单元即可形成主链。在上述选择策略中，见证人成为了某个单元看待历史的视角，每个单元可以维护自己的见证人列表，也可以通过<code>witness_list_unit</code>引用其它单元的见证人列表。</p>\n<blockquote>\n<p><strong>单元兼容：</strong>如果两个单元的见证人列表差别最多一项，则称这两个单元兼容</p>\n</blockquote>\n<p>在选择最优父单元时，仅可以从与当前单元兼容的父单元中进行选择，以保证看待历史视角的连续性。不兼容的父单元仍然被承认，但是他们不能成为最优父单元。特别地，在发出新单元时，如果与所有顶端单元都不兼容，则应从上一级别的父单元中进行选择。</p>\n<h3 id=\"双花问题\"><a href=\"#双花问题\" class=\"headerlink\" title=\"双花问题\"></a>双花问题</h3><p>在用户地址发出新单元时，要求相同地址发布的所有单元应当直接或间接包含该地址之前所有的单元，即相同地址的所有单元连通（有序或连续）。</p>\n<blockquote>\n<p><strong>双花交易：</strong>相同地址发出的任何无序的交易都视为双花交易，即使它们没有使用相同的输出，也可称为冲突交易或者矛盾交易。</p>\n</blockquote>\n<p>因此，在相同地址的所有单元都连通的情况下，在路径上出现较早的交易为有效交易。如果有攻击者特意制造出双花交易，那么可以通过主链序号来解决，主链序号较小的交易为有效交易。</p>\n<p><img src=\"http://oc7urqs4c.bkt.clouddn.com/2017-12-17-byteball-double-spend-1.png\" alt=\"双花交易\"></p>\n<p>上图给出了一种攻击场景，攻击者制造出一条影子链，并在上面发布双花交易。当影子链接入到真实的DAG中时，根据最优父单元选择策略，影子链上的见证人个数少，因此它不会成为主链的一部分，从而解决了这种场景下的双花问题。<strong>值得注意的是，如果大多数见证人与攻击者合谋，并在其影子链上发布单元，则攻击者有可能攻击成功。</strong></p>\n<h3 id=\"单元成为稳定点的条件\"><a href=\"#单元成为稳定点的条件\" class=\"headerlink\" title=\"单元成为稳定点的条件\"></a>单元成为稳定点的条件</h3><p>根据上面的分析可知，所有候选主链在稳定点之后到达创世单元的路径完全相同，即稳定主链成为最终状态。这也意味着，从稳定主链上单元直接或间接包含的那些单元也将无法再被篡改。因此，只要随着新单元的不断加入，稳定点可以不断地向后扩展，且不同的用户节点的稳定点扩展方式保持一致，则全网的所有用户节点可以<strong>实现共识</strong>。</p>\n<p>对于所有单元，如果只保留其与其最优父单元的连接，则DAG将退化为一棵树$T$，所有的候选主链只可能从这棵树中产生。下面根据稳定点是否具有多个子单元分两种情况对稳定点的扩展方式进行讨论。</p>\n<blockquote>\n<p><strong>当前主链：</strong>在DAG中，从不同顶端单元出发具有不同的候选主链，从见证级别最高的顶端节点出发的候选主链称为当前主链（Current Mainchain）。</p>\n</blockquote>\n<p><img src=\"http://oc7urqs4c.bkt.clouddn.com/2017-12-18-byteball-tree1.png\" alt=\"稳定点不分叉\"></p>\n<p>假设当前稳定点的见证人列表为$W$，单元级别为$l$，它只有一个子单元，如上图所示。以$W$作为见证人列表，从当前主链的顶端节点进行回溯，直到遇见$W$中的大部分见证人，记录这些见证人发出的单元中的最小见证级别，记作$min_wl$。如果$min_wl&gt;l$，则扩展当前稳定点至其子单元，否则不进行扩展。由于大部分见证人已经在当前主链上了，后续这些见证人发布的单元将继续支持当前路径，从而使得稳定点可以向前扩展。</p>\n<p><img src=\"http://oc7urqs4c.bkt.clouddn.com/2017-12-18-byteball-tree2.png\" alt=\"稳定点分叉\"></p>\n<p>假设当前稳定点具有多个子单元，如上图所示。在当前稳定点的所有子单元中（除了位于当前主链的子单元），找出见证级别大于当前稳定点的子单元，并将其中最大的单元级别记为$max_l$。也就是说，除了当前主链外，当前稳定点其它分支上的单元见证级别将不超过$max_l$。如果$min_wl&gt;max_l$，那么稳定点可以沿当前主链向前扩展。</p>\n<p>随着稳定点的不断前进，稳定主链及其相关单元的状态被最终确定下来。只要DAG中的单元相同，其形成的主链和稳定点也是相同的。因此，不同的用户节点，只要最终收到相同的单元，它们最终将达到一致的状态。</p>\n"},{"title":"DAG Blockchain之Byteball原理解析（三）","date":"2018-01-19T14:09:55.000Z","_content":"\n\n## Byteball的地址、脚本及合约\n\n### 地址的定义\n\nByteball中用户使用地址进行收发交易。地址本质上对应的是一段具有特定含义的脚本，该脚本称为地址的定义。任何能够使地址定义脚本输出为真（也称作解锁该脚本）的人具有使用该地址资产的权限。与Bitcoin类似，最常用的地址定义脚本是公钥（采用BASE64编码），即具有相应私钥的人可以使用该地址的资产，比如\n\n```json\n[\"sig\",{\"pubkey\":\"Ald9tkgiUZQQ1djpZgv2ez7xf1ZvYAsTLhudhvn0931w\"}]\n```\n\n对于地址定义脚本进行哈希，再加上校验位就得到了地址，Byteball的地址采用BASE32编码。Byteball地址的校验位并不是全部放在尾部，而是穿插着放在哈希值中间，防止有攻击者在地址中间进行恶意修改。\n\n![](http://oc7urqs4c.bkt.clouddn.com/2018-01-19-byteball-address.png)\n\n按照此流程，上面公钥脚本对应的地址为：\n\n```json\nA2WWHN7755YZVMXCBLMFWRSLKSZJN3FU\n```\n\n如果地址仅用于接收交易，其定义脚本可以不对外公布。但是当用户首次使用该地址进行发送交易时，他需要在发送的单元中声明该地址的定义脚本，比如\n\n```json\nunit: { \n  ...\n  authors: [ {\n    address: 'DJ6LV5GPCLMGRW7ZB55IVGJRPDJPOQU6', \n    definition: [\n      \"sig\", {\"pubkey\":\"AsnvZ3w7N1lZGJ+P+bDZU0DgOwJcGJ51bjsWpEqfqBg6\"}\n    ], \n    authentifiers: {\n      r: '3eQPIFiPVLRwBwEzxUR5thqn+zlFfLXUrzAmgemAqOk35UvDpa4h79Fd6TbPbGfb8VMiJzqdNGHCKyAjl786mw=='\n    } \n  } ],\n  ... \n}\n```\n\n其中，`authentifiers`是用户采用私钥对除`authentifiers`之外的数据进行的签名。在用户使用该地址首次发送单元之后，它不允许再发送地址的定义。当然，只有在该地址的第一个单元到达稳定后，用户才可以发送后续单元。\n\n用户可以在保持地址不变的条件下修改地址的定义脚本，用户需要发送消息\n\n```json\nunit: { \n  ...\n  messages: [ \n    ...\n    {\n      app: \"address_definition_change\",\n      definition_chash: \"I4Z7KFNIYTPHPJ5CA5OFC273JQFSZPOX\"\n    },\n    ... \n  ],\n  ... \n}\n```\n\n`definition_chash`为新的地址定义脚本生成的地址。那么，下一个从原地址发出的单元有以下两条要求：\n\n1. 必须把`address_definition_change`这个单元作为其`last_ball`；\n2. 在修改地址定义脚本后发出第一个单元时，需要把新的定义脚本作为第一条`message`。\n\n显然，新的地址定义脚本生成的地址跟原地址是不相同的。当用户迁移到新的设备上，同时想保持地址不变时，可以使用这种方式来修改地址定义脚本。\n\n地址定义脚本中必须显式地（使用`sig`）或隐式地（使用`address`）包含至少一个`sig`。为了防止消耗过量的资源，脚本的操作总数限制在100以内，包括授权地址及脚本模板中的所有操作。\n\n相比于Ethereum，Byteball的脚本语言的解释能力有限，它定义的几乎都是逻辑判断语句。但是，Byteball本身是为了提供给那些并不太懂编程的人群使用的，其语言必须便于理解且不容易出错。\n\n### 逻辑运算脚本\n\n**与运算：**当多个条件同时满足时，脚本输出为真。比如，同时需要两个私钥签名的脚本\n\n```json\n[\"and\", [\n  [\"sig\", {pubkey: \"one pubkey in base64\"}], \n  [\"sig\", {pubkey: \"another pubkey in base64\"}]\n]]\n```\n\n**或运算：**多个条件中有一个满足时，脚本输出为真。比如，仅需要`laptop`、`smartphone`或者`talet`中某一个私钥就可以解锁的脚本\n\n```json\n[\"or\", [\n  [\"sig\", {pubkey: \"laptop pubkey\"}], \n  [\"sig\", {pubkey: \"smartphone pubkey\"}], \n  [\"sig\", {pubkey: \"tablet pubkey\"}]\n]]\n```\n\n**非运算**：脚本中不含`sig`、`hash`、`address`、`cosigned by`或者`in merkle`的条件可以进行非运算，比如\n\n```json\n[\"not\", [\n  \"in data feed\", \n  [[\"NOAA ADDRESS\"], \"wind_speed\", \">\", \"200\"]\n]]\n```\n\n**逻辑嵌套：**逻辑运算可以嵌套使用。比如，必须同时拥有`smartphone`私钥以及`laptop`或者`tablet`中某一个私钥就可以解锁的脚本\n\n```json\n[\"and\", [\n  [\"or\", [\n    [\"sig\", {pubkey: \"laptop pubkey\"}],\n    [\"sig\", {pubkey: \"tablet pubkey\"}] \n  ]],\n  [\"sig\", {pubkey: \"smartphone pubkey\"}] \n]]\n```\n\n**最小数量运算：**当满足条件的个数超过门限时，脚本输出为真。比如，具有2个以上私钥就可以解锁的脚本\n\n```json\n[\"r of set\", { \n  required: 2,\n  set: [\n    [\"sig\", {pubkey: \"laptop pubkey\"}], \n    [\"sig\", {pubkey: \"smartphone pubkey\"}], \n    [\"sig\", {pubkey: \"tablet pubkey\"}]\n  ]\n}]\n```\n\n**最低权重运算：**当满足条件的权重值超过门限时，脚本输出为真。比如，当几个私钥签名的权重之和大于50时可以解锁的脚本\n\n```json\n[\"weighted and\", { \n  required: 50,\n  set: [\n    {weight: 40, value: [\"sig\", {pubkey: \"CEO pubkey\"}] }, \n    {weight: 20, value: [\"sig\", {pubkey: \"COO pubkey\"}] }, \n    {weight: 20, value: [\"sig\", {pubkey: \"CFO pubkey\"}] }, \n    {weight: 20, value: [\"sig\", {pubkey: \"CTO pubkey\"}] }\n  ] \n}]\n```\n\n### 地址授权脚本\n\n授权使用其它地址来解锁脚本，其定义的语法为\n\n```json\n[\"and\", [\n  [\"address\", \"ADDRESS 1 IN BASE32\"], \n  [\"address\", \"ADDRESS 2 IN BASE32\"]\n]]\n```\n\n这可以很方便地用来构造共享控制的地址。比如，上面给出的地址定义脚本生成的地址将由`ADDRESS1`和`ADDRESS2`共同控制。\n\n### 共同签名脚本\n\n要求与另一个地址共同签名才可以解锁脚本\n\n```json\n[\"cosigned by\", \"ANOTHER ADDRESS IN BASE32\"]\n```\n\n### 地址已用脚本\n\n要求由某个地址发出的单元至少有一个成为`last_ball_unit`\n\n```json\n[\"seen address\", \"ANOTHER ADDRESS IN BASE32\"]\n```\n\n### 数据订阅脚本\n\n通过订阅的数据是否符合条件来解锁脚本，其语法格式为\n\n```json\n[\"in data feed\", [\n  [\"ADDRESS1\", \"ADDRESS2\", ...], \n   \"data feed name\",\n   \"=\",\n   \"expected value\"\n]]\n```\n\n上述脚本表示：当数据源地址`ADDRESS1`、`ADDRESS2`等中某个地址发出的消息中订阅数据`data feed name`等于`expected value`时，脚本输出为真。\n\n地址发出的数据订阅消息格式为\n\n```json\nunit: {\n  ...\n  messages: [\n  \t...\n    {\n      app: \"data_feed\", \n  \t  payload_location: \"inline\", \n      payload_hash: \"hash of payload\", \n      payload: {\n        \"data feed name\": \"value\",\n        \"another data feed name\": \"value2\",\n        ...\n      }\n    },\n    ...\n  ],\n  ...\n}\n```\n\n#### 对赌合约\n\n当某个地址可以作为可靠的数据订阅源时，用户可以使用其作为外部数据条件来构造**合约**。比如，\n\n```json\n[\"or\", [\n  [\"and\", [\n    [\"address\", \"ADDRESS 1\"],\n    [\"in data feed\", [[\"EXCHANGE ADDRESS\"], \"EURUSD\", \">\", \"1.1500\"]]\n  ]], \n  [\"and\", [\n    [\"address\", \"ADDRESS 2\"],\n    [\"in data feed\", [[\"TIMESTAMPER ADDRESS\"], \"datetime\", \">\", \"2016-10-01 00:00:00\"]]\n  ]] \n]]\n```\n\n上述脚本给出了`ADDRESS 1`和`ADDRESS 2`之间的一个简单合约，假设其对应的地址为`ADDRESS X`。当`EXCHANGE ADDRESS`发布的汇率数据`EURUSD`大于`1.1500`时，仅使用`ADDRESS 1`的私钥就可以取走`ADDRESS X`中的资产。而当`TIMESTAMPER ADDRESS`发布的时间数据`datetime`大于`2016-10-01 00:00:00`时，仅使用`ADDRESS 2`的私钥就可以取走`ADDRESS X`中的资产。也就是说，上述脚本定义的是对赌合约：如果`2016-10-01 00:00:00`之前`EURUSD`汇率超过`1.1500`，地址`ADDRESS 1`获胜，否则地址`ADDRESS 2`获胜。\n\n#### 商品合约\n\n当顾客购买商品时，也可以使用上述方式来制定合约，比如\n\n```json\n[\"or\", [\n  [\"and\", [\n    [\"address\", \"MERCHANT ADDRESS\"],\n    [\"in data feed\", [[\"FEDEX ADDRESS\"], \"tracking\", \"=\", \"123456\"]]\n  ]], \n  [\"and\", [\n    [\"address\", \"BUYER ADDRESS\"],\n    [\"in data feed\", [[\"TIMESTAMPER ADDRESS\"], \"datetime\", \">\", \"2016-10-01 00:00:00\"]]\n  ]] \n]]\n```\n\n上述脚本给出了顾客`BUYER ADDRESS`和商户`MERCHANT ADDRESS`之间的合约，假设其对应的地址为`ADDRESS Y`。顾客在购买商品时，将款项打入地址`ADDRESS Y`。如果快递公司`FEDEX ADDRESS`发布数据表明相应的快递已签收，则商户`MERCHANT ADDRESS`可以从`ADDRESS Y`中取走货款；如果`TIMERSTAMPER ADDRESS`发布的时间数据`datetime`大于`2016-10-01 00:00:00`时，则顾客`BUYER ADDRESS`可以从`ADDRESS Y`中取回货款。\n\n上述场景中，快递公司需要对每一个快递都发布其签收状态数据，这将需要发布大量的数据。Merkle数据订阅可以降低需要发布的数据量。只需要核实关心的`hash`值出现在数据源地址发布的Merkle树中时，即可证明该事件已发生。其定义语法如下：\n\n```json\n[\"in merkle\", [\n  [\"ADDRESS1\", \"ADDRESS2\", ...], \n   \"data feed name\",\n   \"hash of expected value\"\n]]\n```\n\n此时，快递公司只需要定期将一大批快递状态构造Merkle树，并发布Merkle根即可。商户可以通过相应快递的Merkle路径来解锁Merkle数据订阅的脚本。\n\n### 单元约束脚本\n\n脚本可以对相应地址发出的单元数据进行约束，其定义格式为：\n\n```json\n['has', {\n  what: 'input'|'output',\n  asset: 'assetID in base64 or \"base\" for bytes', \n  type: 'transfer'|'issue',\n  own_funds: true,\n  amount_at_least: 123,\n  amount_at_most: 123,\n  amount: 123,\n  address: 'INPUT OR OUTPUT ADDRESS IN BASE32'\n}]\n```\n\n上述脚本要求单元至少有一个输入/输出满足后续定义所有的条件。特别地，可以使用`has one`来强制要求有且仅有一个输入/输出满足后续所有条件。\n\n其它类似的约束还有求和约束，要求输入/输出之和满足特定条件，其格式为\n\n```json\n['sum', {\n  filter: {\n    what: 'input'|'output',\n    asset: 'asset or base', \n    type: 'transfer'|'issue', \n    own_funds: true,\n    address: 'ADDRESS IN BASE32' \n  },\n  at_least: 120, \n  at_most: 130, \n  equals: 123\n}]\n```\n\n\n\n#### 交易合约\n\n单元约束脚本可以用来实现去中心化交易。假设用户`USER ADDRESS`希望使用不高于`1000bytes`的价格购买`1200units`的其它资产。用户可以发送`1000bytes`至如下脚本定义的地址上：\n\n```json\n[\"or\", [\n  [\"address\", \"USER ADDRESS\"], \n  [\"and\", [\n    [\"address\", \"EXCHANGE ADDRESS\"], \n    [\"has\", {\n      what: \"output\",\n      asset: \"ID of alternative asset\", \n      amount_at_least: 1200,\n      address: \"USER ADDRESS\"\n    }] \n  ]]\n]]\n```\n\n或逻辑`or`的第一个条件表明，在未成交之前，用户可以随时取回他的`1000bytes`。或逻辑`or`的第二个条件表明，其他用户可以使用`EXCHANGE ADDRESS`地址私钥来取走着`1000bytes`，只要他同时在同一单元中将`1200units`其它资产输出到`USER ADDRESS`。通过这种方式，用户之间可以实现不同资产之间的交易。\n\n#### 借贷合约\n\n单元约束脚本还可以用来实现抵押借贷。假设借款人抵押某种资产借贷`10000bytes`，那么借款人和借贷人可以共同签名一笔交易，其中借贷人将`bytes`发送给借款人，同时借款人将抵押资产转入以下脚本定义的地址上：\n\n```json\n[\"or\", [\n  [\"and\", [\n    [\"address\", \"LENDER ADDRESS\"],\n    [\"in data feed\", [[\"TIMESTAMPER ADDRESS\"], \"datetime\", \">\", \"2017-06-01 00:00:00\"]]\n  ]], \n  [\"and\", [\n    [\"address\", \"BORROWER ADDRESS\"], \n    [\"has\", {\n      what: \"output\",\n      asset: \"base\",\n      amount: 10000,\n      address: \"LENDER ADDRESS\"\n    }] \n  ]],\n  [\"and\", [\n    [\"address\", \"LENDER ADDRESS\"], \n    [\"address\", \"BORROWER ADDRESS\"]\n  ]] \n]]\n```\n\n上述脚本包括了三层含义：\n\n1. 当时间超过`2017-06-01 00:00:00`时，借贷人可以取走抵押资产；\n2. 当借款人归还`10000bytes`至借贷人地址`LENDER ADDRESS`时，借款人可以取回抵押资产；\n3. 借贷人和借款人可以协商解除合约。\n\n### 脚本模板\n\n通过预先设定的脚本模板可以很方便地定义脚本，只需要对模板中的参数进行修改即可\n\n```json\n[\"definition template\", [\n  \"hash of unit where the template was defined\", \n  {param1: \"value1\", param2: \"value2\"}\n]]\n```\n\n脚本模板需要在单元中发送`app=’definition_template’`的消息，并且需要单元到达稳定状态后，脚本模板才可以使用。消息内容与普通的地址定义脚本相同，参数使用`@param1`及`@param2`表示。\n\n","source":"_posts/2018-01-20-byteball3.md","raw":"---\ntitle: DAG Blockchain之Byteball原理解析（三）\ndate: 2018-01-19 22:09:55\ncategories: 谈点区块链\ntags:\n  - dag\n  - blockchain\n  - byteball\n  - bitcoin\n---\n\n\n## Byteball的地址、脚本及合约\n\n### 地址的定义\n\nByteball中用户使用地址进行收发交易。地址本质上对应的是一段具有特定含义的脚本，该脚本称为地址的定义。任何能够使地址定义脚本输出为真（也称作解锁该脚本）的人具有使用该地址资产的权限。与Bitcoin类似，最常用的地址定义脚本是公钥（采用BASE64编码），即具有相应私钥的人可以使用该地址的资产，比如\n\n```json\n[\"sig\",{\"pubkey\":\"Ald9tkgiUZQQ1djpZgv2ez7xf1ZvYAsTLhudhvn0931w\"}]\n```\n\n对于地址定义脚本进行哈希，再加上校验位就得到了地址，Byteball的地址采用BASE32编码。Byteball地址的校验位并不是全部放在尾部，而是穿插着放在哈希值中间，防止有攻击者在地址中间进行恶意修改。\n\n![](http://oc7urqs4c.bkt.clouddn.com/2018-01-19-byteball-address.png)\n\n按照此流程，上面公钥脚本对应的地址为：\n\n```json\nA2WWHN7755YZVMXCBLMFWRSLKSZJN3FU\n```\n\n如果地址仅用于接收交易，其定义脚本可以不对外公布。但是当用户首次使用该地址进行发送交易时，他需要在发送的单元中声明该地址的定义脚本，比如\n\n```json\nunit: { \n  ...\n  authors: [ {\n    address: 'DJ6LV5GPCLMGRW7ZB55IVGJRPDJPOQU6', \n    definition: [\n      \"sig\", {\"pubkey\":\"AsnvZ3w7N1lZGJ+P+bDZU0DgOwJcGJ51bjsWpEqfqBg6\"}\n    ], \n    authentifiers: {\n      r: '3eQPIFiPVLRwBwEzxUR5thqn+zlFfLXUrzAmgemAqOk35UvDpa4h79Fd6TbPbGfb8VMiJzqdNGHCKyAjl786mw=='\n    } \n  } ],\n  ... \n}\n```\n\n其中，`authentifiers`是用户采用私钥对除`authentifiers`之外的数据进行的签名。在用户使用该地址首次发送单元之后，它不允许再发送地址的定义。当然，只有在该地址的第一个单元到达稳定后，用户才可以发送后续单元。\n\n用户可以在保持地址不变的条件下修改地址的定义脚本，用户需要发送消息\n\n```json\nunit: { \n  ...\n  messages: [ \n    ...\n    {\n      app: \"address_definition_change\",\n      definition_chash: \"I4Z7KFNIYTPHPJ5CA5OFC273JQFSZPOX\"\n    },\n    ... \n  ],\n  ... \n}\n```\n\n`definition_chash`为新的地址定义脚本生成的地址。那么，下一个从原地址发出的单元有以下两条要求：\n\n1. 必须把`address_definition_change`这个单元作为其`last_ball`；\n2. 在修改地址定义脚本后发出第一个单元时，需要把新的定义脚本作为第一条`message`。\n\n显然，新的地址定义脚本生成的地址跟原地址是不相同的。当用户迁移到新的设备上，同时想保持地址不变时，可以使用这种方式来修改地址定义脚本。\n\n地址定义脚本中必须显式地（使用`sig`）或隐式地（使用`address`）包含至少一个`sig`。为了防止消耗过量的资源，脚本的操作总数限制在100以内，包括授权地址及脚本模板中的所有操作。\n\n相比于Ethereum，Byteball的脚本语言的解释能力有限，它定义的几乎都是逻辑判断语句。但是，Byteball本身是为了提供给那些并不太懂编程的人群使用的，其语言必须便于理解且不容易出错。\n\n### 逻辑运算脚本\n\n**与运算：**当多个条件同时满足时，脚本输出为真。比如，同时需要两个私钥签名的脚本\n\n```json\n[\"and\", [\n  [\"sig\", {pubkey: \"one pubkey in base64\"}], \n  [\"sig\", {pubkey: \"another pubkey in base64\"}]\n]]\n```\n\n**或运算：**多个条件中有一个满足时，脚本输出为真。比如，仅需要`laptop`、`smartphone`或者`talet`中某一个私钥就可以解锁的脚本\n\n```json\n[\"or\", [\n  [\"sig\", {pubkey: \"laptop pubkey\"}], \n  [\"sig\", {pubkey: \"smartphone pubkey\"}], \n  [\"sig\", {pubkey: \"tablet pubkey\"}]\n]]\n```\n\n**非运算**：脚本中不含`sig`、`hash`、`address`、`cosigned by`或者`in merkle`的条件可以进行非运算，比如\n\n```json\n[\"not\", [\n  \"in data feed\", \n  [[\"NOAA ADDRESS\"], \"wind_speed\", \">\", \"200\"]\n]]\n```\n\n**逻辑嵌套：**逻辑运算可以嵌套使用。比如，必须同时拥有`smartphone`私钥以及`laptop`或者`tablet`中某一个私钥就可以解锁的脚本\n\n```json\n[\"and\", [\n  [\"or\", [\n    [\"sig\", {pubkey: \"laptop pubkey\"}],\n    [\"sig\", {pubkey: \"tablet pubkey\"}] \n  ]],\n  [\"sig\", {pubkey: \"smartphone pubkey\"}] \n]]\n```\n\n**最小数量运算：**当满足条件的个数超过门限时，脚本输出为真。比如，具有2个以上私钥就可以解锁的脚本\n\n```json\n[\"r of set\", { \n  required: 2,\n  set: [\n    [\"sig\", {pubkey: \"laptop pubkey\"}], \n    [\"sig\", {pubkey: \"smartphone pubkey\"}], \n    [\"sig\", {pubkey: \"tablet pubkey\"}]\n  ]\n}]\n```\n\n**最低权重运算：**当满足条件的权重值超过门限时，脚本输出为真。比如，当几个私钥签名的权重之和大于50时可以解锁的脚本\n\n```json\n[\"weighted and\", { \n  required: 50,\n  set: [\n    {weight: 40, value: [\"sig\", {pubkey: \"CEO pubkey\"}] }, \n    {weight: 20, value: [\"sig\", {pubkey: \"COO pubkey\"}] }, \n    {weight: 20, value: [\"sig\", {pubkey: \"CFO pubkey\"}] }, \n    {weight: 20, value: [\"sig\", {pubkey: \"CTO pubkey\"}] }\n  ] \n}]\n```\n\n### 地址授权脚本\n\n授权使用其它地址来解锁脚本，其定义的语法为\n\n```json\n[\"and\", [\n  [\"address\", \"ADDRESS 1 IN BASE32\"], \n  [\"address\", \"ADDRESS 2 IN BASE32\"]\n]]\n```\n\n这可以很方便地用来构造共享控制的地址。比如，上面给出的地址定义脚本生成的地址将由`ADDRESS1`和`ADDRESS2`共同控制。\n\n### 共同签名脚本\n\n要求与另一个地址共同签名才可以解锁脚本\n\n```json\n[\"cosigned by\", \"ANOTHER ADDRESS IN BASE32\"]\n```\n\n### 地址已用脚本\n\n要求由某个地址发出的单元至少有一个成为`last_ball_unit`\n\n```json\n[\"seen address\", \"ANOTHER ADDRESS IN BASE32\"]\n```\n\n### 数据订阅脚本\n\n通过订阅的数据是否符合条件来解锁脚本，其语法格式为\n\n```json\n[\"in data feed\", [\n  [\"ADDRESS1\", \"ADDRESS2\", ...], \n   \"data feed name\",\n   \"=\",\n   \"expected value\"\n]]\n```\n\n上述脚本表示：当数据源地址`ADDRESS1`、`ADDRESS2`等中某个地址发出的消息中订阅数据`data feed name`等于`expected value`时，脚本输出为真。\n\n地址发出的数据订阅消息格式为\n\n```json\nunit: {\n  ...\n  messages: [\n  \t...\n    {\n      app: \"data_feed\", \n  \t  payload_location: \"inline\", \n      payload_hash: \"hash of payload\", \n      payload: {\n        \"data feed name\": \"value\",\n        \"another data feed name\": \"value2\",\n        ...\n      }\n    },\n    ...\n  ],\n  ...\n}\n```\n\n#### 对赌合约\n\n当某个地址可以作为可靠的数据订阅源时，用户可以使用其作为外部数据条件来构造**合约**。比如，\n\n```json\n[\"or\", [\n  [\"and\", [\n    [\"address\", \"ADDRESS 1\"],\n    [\"in data feed\", [[\"EXCHANGE ADDRESS\"], \"EURUSD\", \">\", \"1.1500\"]]\n  ]], \n  [\"and\", [\n    [\"address\", \"ADDRESS 2\"],\n    [\"in data feed\", [[\"TIMESTAMPER ADDRESS\"], \"datetime\", \">\", \"2016-10-01 00:00:00\"]]\n  ]] \n]]\n```\n\n上述脚本给出了`ADDRESS 1`和`ADDRESS 2`之间的一个简单合约，假设其对应的地址为`ADDRESS X`。当`EXCHANGE ADDRESS`发布的汇率数据`EURUSD`大于`1.1500`时，仅使用`ADDRESS 1`的私钥就可以取走`ADDRESS X`中的资产。而当`TIMESTAMPER ADDRESS`发布的时间数据`datetime`大于`2016-10-01 00:00:00`时，仅使用`ADDRESS 2`的私钥就可以取走`ADDRESS X`中的资产。也就是说，上述脚本定义的是对赌合约：如果`2016-10-01 00:00:00`之前`EURUSD`汇率超过`1.1500`，地址`ADDRESS 1`获胜，否则地址`ADDRESS 2`获胜。\n\n#### 商品合约\n\n当顾客购买商品时，也可以使用上述方式来制定合约，比如\n\n```json\n[\"or\", [\n  [\"and\", [\n    [\"address\", \"MERCHANT ADDRESS\"],\n    [\"in data feed\", [[\"FEDEX ADDRESS\"], \"tracking\", \"=\", \"123456\"]]\n  ]], \n  [\"and\", [\n    [\"address\", \"BUYER ADDRESS\"],\n    [\"in data feed\", [[\"TIMESTAMPER ADDRESS\"], \"datetime\", \">\", \"2016-10-01 00:00:00\"]]\n  ]] \n]]\n```\n\n上述脚本给出了顾客`BUYER ADDRESS`和商户`MERCHANT ADDRESS`之间的合约，假设其对应的地址为`ADDRESS Y`。顾客在购买商品时，将款项打入地址`ADDRESS Y`。如果快递公司`FEDEX ADDRESS`发布数据表明相应的快递已签收，则商户`MERCHANT ADDRESS`可以从`ADDRESS Y`中取走货款；如果`TIMERSTAMPER ADDRESS`发布的时间数据`datetime`大于`2016-10-01 00:00:00`时，则顾客`BUYER ADDRESS`可以从`ADDRESS Y`中取回货款。\n\n上述场景中，快递公司需要对每一个快递都发布其签收状态数据，这将需要发布大量的数据。Merkle数据订阅可以降低需要发布的数据量。只需要核实关心的`hash`值出现在数据源地址发布的Merkle树中时，即可证明该事件已发生。其定义语法如下：\n\n```json\n[\"in merkle\", [\n  [\"ADDRESS1\", \"ADDRESS2\", ...], \n   \"data feed name\",\n   \"hash of expected value\"\n]]\n```\n\n此时，快递公司只需要定期将一大批快递状态构造Merkle树，并发布Merkle根即可。商户可以通过相应快递的Merkle路径来解锁Merkle数据订阅的脚本。\n\n### 单元约束脚本\n\n脚本可以对相应地址发出的单元数据进行约束，其定义格式为：\n\n```json\n['has', {\n  what: 'input'|'output',\n  asset: 'assetID in base64 or \"base\" for bytes', \n  type: 'transfer'|'issue',\n  own_funds: true,\n  amount_at_least: 123,\n  amount_at_most: 123,\n  amount: 123,\n  address: 'INPUT OR OUTPUT ADDRESS IN BASE32'\n}]\n```\n\n上述脚本要求单元至少有一个输入/输出满足后续定义所有的条件。特别地，可以使用`has one`来强制要求有且仅有一个输入/输出满足后续所有条件。\n\n其它类似的约束还有求和约束，要求输入/输出之和满足特定条件，其格式为\n\n```json\n['sum', {\n  filter: {\n    what: 'input'|'output',\n    asset: 'asset or base', \n    type: 'transfer'|'issue', \n    own_funds: true,\n    address: 'ADDRESS IN BASE32' \n  },\n  at_least: 120, \n  at_most: 130, \n  equals: 123\n}]\n```\n\n\n\n#### 交易合约\n\n单元约束脚本可以用来实现去中心化交易。假设用户`USER ADDRESS`希望使用不高于`1000bytes`的价格购买`1200units`的其它资产。用户可以发送`1000bytes`至如下脚本定义的地址上：\n\n```json\n[\"or\", [\n  [\"address\", \"USER ADDRESS\"], \n  [\"and\", [\n    [\"address\", \"EXCHANGE ADDRESS\"], \n    [\"has\", {\n      what: \"output\",\n      asset: \"ID of alternative asset\", \n      amount_at_least: 1200,\n      address: \"USER ADDRESS\"\n    }] \n  ]]\n]]\n```\n\n或逻辑`or`的第一个条件表明，在未成交之前，用户可以随时取回他的`1000bytes`。或逻辑`or`的第二个条件表明，其他用户可以使用`EXCHANGE ADDRESS`地址私钥来取走着`1000bytes`，只要他同时在同一单元中将`1200units`其它资产输出到`USER ADDRESS`。通过这种方式，用户之间可以实现不同资产之间的交易。\n\n#### 借贷合约\n\n单元约束脚本还可以用来实现抵押借贷。假设借款人抵押某种资产借贷`10000bytes`，那么借款人和借贷人可以共同签名一笔交易，其中借贷人将`bytes`发送给借款人，同时借款人将抵押资产转入以下脚本定义的地址上：\n\n```json\n[\"or\", [\n  [\"and\", [\n    [\"address\", \"LENDER ADDRESS\"],\n    [\"in data feed\", [[\"TIMESTAMPER ADDRESS\"], \"datetime\", \">\", \"2017-06-01 00:00:00\"]]\n  ]], \n  [\"and\", [\n    [\"address\", \"BORROWER ADDRESS\"], \n    [\"has\", {\n      what: \"output\",\n      asset: \"base\",\n      amount: 10000,\n      address: \"LENDER ADDRESS\"\n    }] \n  ]],\n  [\"and\", [\n    [\"address\", \"LENDER ADDRESS\"], \n    [\"address\", \"BORROWER ADDRESS\"]\n  ]] \n]]\n```\n\n上述脚本包括了三层含义：\n\n1. 当时间超过`2017-06-01 00:00:00`时，借贷人可以取走抵押资产；\n2. 当借款人归还`10000bytes`至借贷人地址`LENDER ADDRESS`时，借款人可以取回抵押资产；\n3. 借贷人和借款人可以协商解除合约。\n\n### 脚本模板\n\n通过预先设定的脚本模板可以很方便地定义脚本，只需要对模板中的参数进行修改即可\n\n```json\n[\"definition template\", [\n  \"hash of unit where the template was defined\", \n  {param1: \"value1\", param2: \"value2\"}\n]]\n```\n\n脚本模板需要在单元中发送`app=’definition_template’`的消息，并且需要单元到达稳定状态后，脚本模板才可以使用。消息内容与普通的地址定义脚本相同，参数使用`@param1`及`@param2`表示。\n\n","slug":"byteball3","published":1,"updated":"2018-01-20T16:08:29.427Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcnju82h0000g1epfwsrq5ja","content":"<h2 id=\"Byteball的地址、脚本及合约\"><a href=\"#Byteball的地址、脚本及合约\" class=\"headerlink\" title=\"Byteball的地址、脚本及合约\"></a>Byteball的地址、脚本及合约</h2><h3 id=\"地址的定义\"><a href=\"#地址的定义\" class=\"headerlink\" title=\"地址的定义\"></a>地址的定义</h3><p>Byteball中用户使用地址进行收发交易。地址本质上对应的是一段具有特定含义的脚本，该脚本称为地址的定义。任何能够使地址定义脚本输出为真（也称作解锁该脚本）的人具有使用该地址资产的权限。与Bitcoin类似，最常用的地址定义脚本是公钥（采用BASE64编码），即具有相应私钥的人可以使用该地址的资产，比如</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"sig\"</span>,&#123;<span class=\"attr\">\"pubkey\"</span>:<span class=\"string\">\"Ald9tkgiUZQQ1djpZgv2ez7xf1ZvYAsTLhudhvn0931w\"</span>&#125;]</span><br></pre></td></tr></table></figure>\n<p>对于地址定义脚本进行哈希，再加上校验位就得到了地址，Byteball的地址采用BASE32编码。Byteball地址的校验位并不是全部放在尾部，而是穿插着放在哈希值中间，防止有攻击者在地址中间进行恶意修改。</p>\n<p><img src=\"http://oc7urqs4c.bkt.clouddn.com/2018-01-19-byteball-address.png\" alt=\"\"></p>\n<p>按照此流程，上面公钥脚本对应的地址为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A2WWHN7755YZVMXCBLMFWRSLKSZJN3FU</span><br></pre></td></tr></table></figure>\n<p>如果地址仅用于接收交易，其定义脚本可以不对外公布。但是当用户首次使用该地址进行发送交易时，他需要在发送的单元中声明该地址的定义脚本，比如</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unit: &#123; </span><br><span class=\"line\">  ...</span><br><span class=\"line\">  authors: [ &#123;</span><br><span class=\"line\">    address: 'DJ6LV5GPCLMGRW7ZB55IVGJRPDJPOQU6', </span><br><span class=\"line\">    definition: [</span><br><span class=\"line\">      \"sig\", &#123;\"pubkey\":\"AsnvZ3w7N1lZGJ+P+bDZU0DgOwJcGJ51bjsWpEqfqBg6\"&#125;</span><br><span class=\"line\">    ], </span><br><span class=\"line\">    authentifiers: &#123;</span><br><span class=\"line\">      r: '3eQPIFiPVLRwBwEzxUR5thqn+zlFfLXUrzAmgemAqOk35UvDpa4h79Fd6TbPbGfb8VMiJzqdNGHCKyAjl786mw=='</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125; ],</span><br><span class=\"line\">  ... </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中，<code>authentifiers</code>是用户采用私钥对除<code>authentifiers</code>之外的数据进行的签名。在用户使用该地址首次发送单元之后，它不允许再发送地址的定义。当然，只有在该地址的第一个单元到达稳定后，用户才可以发送后续单元。</p>\n<p>用户可以在保持地址不变的条件下修改地址的定义脚本，用户需要发送消息</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unit: &#123; </span><br><span class=\"line\">  ...</span><br><span class=\"line\">  messages: [ </span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      app: \"address_definition_change\",</span><br><span class=\"line\">      definition_chash: \"I4Z7KFNIYTPHPJ5CA5OFC273JQFSZPOX\"</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ... </span><br><span class=\"line\">  ],</span><br><span class=\"line\">  ... </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>definition_chash</code>为新的地址定义脚本生成的地址。那么，下一个从原地址发出的单元有以下两条要求：</p>\n<ol>\n<li>必须把<code>address_definition_change</code>这个单元作为其<code>last_ball</code>；</li>\n<li>在修改地址定义脚本后发出第一个单元时，需要把新的定义脚本作为第一条<code>message</code>。</li>\n</ol>\n<p>显然，新的地址定义脚本生成的地址跟原地址是不相同的。当用户迁移到新的设备上，同时想保持地址不变时，可以使用这种方式来修改地址定义脚本。</p>\n<p>地址定义脚本中必须显式地（使用<code>sig</code>）或隐式地（使用<code>address</code>）包含至少一个<code>sig</code>。为了防止消耗过量的资源，脚本的操作总数限制在100以内，包括授权地址及脚本模板中的所有操作。</p>\n<p>相比于Ethereum，Byteball的脚本语言的解释能力有限，它定义的几乎都是逻辑判断语句。但是，Byteball本身是为了提供给那些并不太懂编程的人群使用的，其语言必须便于理解且不容易出错。</p>\n<h3 id=\"逻辑运算脚本\"><a href=\"#逻辑运算脚本\" class=\"headerlink\" title=\"逻辑运算脚本\"></a>逻辑运算脚本</h3><p><strong>与运算：</strong>当多个条件同时满足时，脚本输出为真。比如，同时需要两个私钥签名的脚本</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"and\"</span>, [</span><br><span class=\"line\">  [\"sig\", &#123;pubkey: \"one pubkey in base64\"&#125;], </span><br><span class=\"line\">  [\"sig\", &#123;pubkey: \"another pubkey in base64\"&#125;]</span><br><span class=\"line\">]]</span><br></pre></td></tr></table></figure>\n<p><strong>或运算：</strong>多个条件中有一个满足时，脚本输出为真。比如，仅需要<code>laptop</code>、<code>smartphone</code>或者<code>talet</code>中某一个私钥就可以解锁的脚本</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"or\"</span>, [</span><br><span class=\"line\">  [\"sig\", &#123;pubkey: \"laptop pubkey\"&#125;], </span><br><span class=\"line\">  [\"sig\", &#123;pubkey: \"smartphone pubkey\"&#125;], </span><br><span class=\"line\">  [\"sig\", &#123;pubkey: \"tablet pubkey\"&#125;]</span><br><span class=\"line\">]]</span><br></pre></td></tr></table></figure>\n<p><strong>非运算</strong>：脚本中不含<code>sig</code>、<code>hash</code>、<code>address</code>、<code>cosigned by</code>或者<code>in merkle</code>的条件可以进行非运算，比如</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"not\"</span>, [</span><br><span class=\"line\">  <span class=\"string\">\"in data feed\"</span>, </span><br><span class=\"line\">  [[<span class=\"string\">\"NOAA ADDRESS\"</span>], <span class=\"string\">\"wind_speed\"</span>, <span class=\"string\">\"&gt;\"</span>, <span class=\"string\">\"200\"</span>]</span><br><span class=\"line\">]]</span><br></pre></td></tr></table></figure>\n<p><strong>逻辑嵌套：</strong>逻辑运算可以嵌套使用。比如，必须同时拥有<code>smartphone</code>私钥以及<code>laptop</code>或者<code>tablet</code>中某一个私钥就可以解锁的脚本</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"and\"</span>, [</span><br><span class=\"line\">  [<span class=\"string\">\"or\"</span>, [</span><br><span class=\"line\">    [\"sig\", &#123;pubkey: \"laptop pubkey\"&#125;],</span><br><span class=\"line\">    [\"sig\", &#123;pubkey: \"tablet pubkey\"&#125;] </span><br><span class=\"line\">  ]],</span><br><span class=\"line\">  [\"sig\", &#123;pubkey: \"smartphone pubkey\"&#125;] </span><br><span class=\"line\">]]</span><br></pre></td></tr></table></figure>\n<p><strong>最小数量运算：</strong>当满足条件的个数超过门限时，脚本输出为真。比如，具有2个以上私钥就可以解锁的脚本</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"r of set\"</span>, &#123; </span><br><span class=\"line\">  required: 2,</span><br><span class=\"line\">  set: [</span><br><span class=\"line\">    [\"sig\", &#123;pubkey: \"laptop pubkey\"&#125;], </span><br><span class=\"line\">    [\"sig\", &#123;pubkey: \"smartphone pubkey\"&#125;], </span><br><span class=\"line\">    [\"sig\", &#123;pubkey: \"tablet pubkey\"&#125;]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n<p><strong>最低权重运算：</strong>当满足条件的权重值超过门限时，脚本输出为真。比如，当几个私钥签名的权重之和大于50时可以解锁的脚本</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"weighted and\"</span>, &#123; </span><br><span class=\"line\">  required: 50,</span><br><span class=\"line\">  set: [</span><br><span class=\"line\">    &#123;weight: 40, value: [\"sig\", &#123;pubkey: \"CEO pubkey\"&#125;] &#125;, </span><br><span class=\"line\">    &#123;weight: 20, value: [\"sig\", &#123;pubkey: \"COO pubkey\"&#125;] &#125;, </span><br><span class=\"line\">    &#123;weight: 20, value: [\"sig\", &#123;pubkey: \"CFO pubkey\"&#125;] &#125;, </span><br><span class=\"line\">    &#123;weight: 20, value: [\"sig\", &#123;pubkey: \"CTO pubkey\"&#125;] &#125;</span><br><span class=\"line\">  ] </span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n<h3 id=\"地址授权脚本\"><a href=\"#地址授权脚本\" class=\"headerlink\" title=\"地址授权脚本\"></a>地址授权脚本</h3><p>授权使用其它地址来解锁脚本，其定义的语法为</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"and\"</span>, [</span><br><span class=\"line\">  [<span class=\"string\">\"address\"</span>, <span class=\"string\">\"ADDRESS 1 IN BASE32\"</span>], </span><br><span class=\"line\">  [<span class=\"string\">\"address\"</span>, <span class=\"string\">\"ADDRESS 2 IN BASE32\"</span>]</span><br><span class=\"line\">]]</span><br></pre></td></tr></table></figure>\n<p>这可以很方便地用来构造共享控制的地址。比如，上面给出的地址定义脚本生成的地址将由<code>ADDRESS1</code>和<code>ADDRESS2</code>共同控制。</p>\n<h3 id=\"共同签名脚本\"><a href=\"#共同签名脚本\" class=\"headerlink\" title=\"共同签名脚本\"></a>共同签名脚本</h3><p>要求与另一个地址共同签名才可以解锁脚本</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"cosigned by\"</span>, <span class=\"string\">\"ANOTHER ADDRESS IN BASE32\"</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"地址已用脚本\"><a href=\"#地址已用脚本\" class=\"headerlink\" title=\"地址已用脚本\"></a>地址已用脚本</h3><p>要求由某个地址发出的单元至少有一个成为<code>last_ball_unit</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"seen address\"</span>, <span class=\"string\">\"ANOTHER ADDRESS IN BASE32\"</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"数据订阅脚本\"><a href=\"#数据订阅脚本\" class=\"headerlink\" title=\"数据订阅脚本\"></a>数据订阅脚本</h3><p>通过订阅的数据是否符合条件来解锁脚本，其语法格式为</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"in data feed\"</span>, [</span><br><span class=\"line\">  [<span class=\"string\">\"ADDRESS1\"</span>, <span class=\"string\">\"ADDRESS2\"</span>, ...], </span><br><span class=\"line\">   <span class=\"string\">\"data feed name\"</span>,</span><br><span class=\"line\">   <span class=\"string\">\"=\"</span>,</span><br><span class=\"line\">   <span class=\"string\">\"expected value\"</span></span><br><span class=\"line\">]]</span><br></pre></td></tr></table></figure>\n<p>上述脚本表示：当数据源地址<code>ADDRESS1</code>、<code>ADDRESS2</code>等中某个地址发出的消息中订阅数据<code>data feed name</code>等于<code>expected value</code>时，脚本输出为真。</p>\n<p>地址发出的数据订阅消息格式为</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unit: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  messages: [</span><br><span class=\"line\">  \t...</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      app: \"data_feed\", </span><br><span class=\"line\">  \t  payload_location: \"inline\", </span><br><span class=\"line\">      payload_hash: \"hash of payload\", </span><br><span class=\"line\">      payload: &#123;</span><br><span class=\"line\">        \"data feed name\": \"value\",</span><br><span class=\"line\">        \"another data feed name\": \"value2\",</span><br><span class=\"line\">        ...</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"对赌合约\"><a href=\"#对赌合约\" class=\"headerlink\" title=\"对赌合约\"></a>对赌合约</h4><p>当某个地址可以作为可靠的数据订阅源时，用户可以使用其作为外部数据条件来构造<strong>合约</strong>。比如，</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"or\"</span>, [</span><br><span class=\"line\">  [<span class=\"string\">\"and\"</span>, [</span><br><span class=\"line\">    [<span class=\"string\">\"address\"</span>, <span class=\"string\">\"ADDRESS 1\"</span>],</span><br><span class=\"line\">    [<span class=\"string\">\"in data feed\"</span>, [[<span class=\"string\">\"EXCHANGE ADDRESS\"</span>], <span class=\"string\">\"EURUSD\"</span>, <span class=\"string\">\"&gt;\"</span>, <span class=\"string\">\"1.1500\"</span>]]</span><br><span class=\"line\">  ]], </span><br><span class=\"line\">  [<span class=\"string\">\"and\"</span>, [</span><br><span class=\"line\">    [<span class=\"string\">\"address\"</span>, <span class=\"string\">\"ADDRESS 2\"</span>],</span><br><span class=\"line\">    [<span class=\"string\">\"in data feed\"</span>, [[<span class=\"string\">\"TIMESTAMPER ADDRESS\"</span>], <span class=\"string\">\"datetime\"</span>, <span class=\"string\">\"&gt;\"</span>, <span class=\"string\">\"2016-10-01 00:00:00\"</span>]]</span><br><span class=\"line\">  ]] </span><br><span class=\"line\">]]</span><br></pre></td></tr></table></figure>\n<p>上述脚本给出了<code>ADDRESS 1</code>和<code>ADDRESS 2</code>之间的一个简单合约，假设其对应的地址为<code>ADDRESS X</code>。当<code>EXCHANGE ADDRESS</code>发布的汇率数据<code>EURUSD</code>大于<code>1.1500</code>时，仅使用<code>ADDRESS 1</code>的私钥就可以取走<code>ADDRESS X</code>中的资产。而当<code>TIMESTAMPER ADDRESS</code>发布的时间数据<code>datetime</code>大于<code>2016-10-01 00:00:00</code>时，仅使用<code>ADDRESS 2</code>的私钥就可以取走<code>ADDRESS X</code>中的资产。也就是说，上述脚本定义的是对赌合约：如果<code>2016-10-01 00:00:00</code>之前<code>EURUSD</code>汇率超过<code>1.1500</code>，地址<code>ADDRESS 1</code>获胜，否则地址<code>ADDRESS 2</code>获胜。</p>\n<h4 id=\"商品合约\"><a href=\"#商品合约\" class=\"headerlink\" title=\"商品合约\"></a>商品合约</h4><p>当顾客购买商品时，也可以使用上述方式来制定合约，比如</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"or\"</span>, [</span><br><span class=\"line\">  [<span class=\"string\">\"and\"</span>, [</span><br><span class=\"line\">    [<span class=\"string\">\"address\"</span>, <span class=\"string\">\"MERCHANT ADDRESS\"</span>],</span><br><span class=\"line\">    [<span class=\"string\">\"in data feed\"</span>, [[<span class=\"string\">\"FEDEX ADDRESS\"</span>], <span class=\"string\">\"tracking\"</span>, <span class=\"string\">\"=\"</span>, <span class=\"string\">\"123456\"</span>]]</span><br><span class=\"line\">  ]], </span><br><span class=\"line\">  [<span class=\"string\">\"and\"</span>, [</span><br><span class=\"line\">    [<span class=\"string\">\"address\"</span>, <span class=\"string\">\"BUYER ADDRESS\"</span>],</span><br><span class=\"line\">    [<span class=\"string\">\"in data feed\"</span>, [[<span class=\"string\">\"TIMESTAMPER ADDRESS\"</span>], <span class=\"string\">\"datetime\"</span>, <span class=\"string\">\"&gt;\"</span>, <span class=\"string\">\"2016-10-01 00:00:00\"</span>]]</span><br><span class=\"line\">  ]] </span><br><span class=\"line\">]]</span><br></pre></td></tr></table></figure>\n<p>上述脚本给出了顾客<code>BUYER ADDRESS</code>和商户<code>MERCHANT ADDRESS</code>之间的合约，假设其对应的地址为<code>ADDRESS Y</code>。顾客在购买商品时，将款项打入地址<code>ADDRESS Y</code>。如果快递公司<code>FEDEX ADDRESS</code>发布数据表明相应的快递已签收，则商户<code>MERCHANT ADDRESS</code>可以从<code>ADDRESS Y</code>中取走货款；如果<code>TIMERSTAMPER ADDRESS</code>发布的时间数据<code>datetime</code>大于<code>2016-10-01 00:00:00</code>时，则顾客<code>BUYER ADDRESS</code>可以从<code>ADDRESS Y</code>中取回货款。</p>\n<p>上述场景中，快递公司需要对每一个快递都发布其签收状态数据，这将需要发布大量的数据。Merkle数据订阅可以降低需要发布的数据量。只需要核实关心的<code>hash</code>值出现在数据源地址发布的Merkle树中时，即可证明该事件已发生。其定义语法如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"in merkle\"</span>, [</span><br><span class=\"line\">  [<span class=\"string\">\"ADDRESS1\"</span>, <span class=\"string\">\"ADDRESS2\"</span>, ...], </span><br><span class=\"line\">   <span class=\"string\">\"data feed name\"</span>,</span><br><span class=\"line\">   <span class=\"string\">\"hash of expected value\"</span></span><br><span class=\"line\">]]</span><br></pre></td></tr></table></figure>\n<p>此时，快递公司只需要定期将一大批快递状态构造Merkle树，并发布Merkle根即可。商户可以通过相应快递的Merkle路径来解锁Merkle数据订阅的脚本。</p>\n<h3 id=\"单元约束脚本\"><a href=\"#单元约束脚本\" class=\"headerlink\" title=\"单元约束脚本\"></a>单元约束脚本</h3><p>脚本可以对相应地址发出的单元数据进行约束，其定义格式为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">['has', &#123;</span><br><span class=\"line\">  what: 'input'|'output',</span><br><span class=\"line\">  asset: 'assetID in base64 or \"base\" for bytes', </span><br><span class=\"line\">  type: 'transfer'|'issue',</span><br><span class=\"line\">  own_funds: true,</span><br><span class=\"line\">  amount_at_least: 123,</span><br><span class=\"line\">  amount_at_most: 123,</span><br><span class=\"line\">  amount: 123,</span><br><span class=\"line\">  address: 'INPUT OR OUTPUT ADDRESS IN BASE32'</span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n<p>上述脚本要求单元至少有一个输入/输出满足后续定义所有的条件。特别地，可以使用<code>has one</code>来强制要求有且仅有一个输入/输出满足后续所有条件。</p>\n<p>其它类似的约束还有求和约束，要求输入/输出之和满足特定条件，其格式为</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">['sum', &#123;</span><br><span class=\"line\">  filter: &#123;</span><br><span class=\"line\">    what: 'input'|'output',</span><br><span class=\"line\">    asset: 'asset or base', </span><br><span class=\"line\">    type: 'transfer'|'issue', </span><br><span class=\"line\">    own_funds: true,</span><br><span class=\"line\">    address: 'ADDRESS IN BASE32' </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  at_least: 120, </span><br><span class=\"line\">  at_most: 130, </span><br><span class=\"line\">  equals: 123</span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n<h4 id=\"交易合约\"><a href=\"#交易合约\" class=\"headerlink\" title=\"交易合约\"></a>交易合约</h4><p>单元约束脚本可以用来实现去中心化交易。假设用户<code>USER ADDRESS</code>希望使用不高于<code>1000bytes</code>的价格购买<code>1200units</code>的其它资产。用户可以发送<code>1000bytes</code>至如下脚本定义的地址上：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"or\"</span>, [</span><br><span class=\"line\">  [<span class=\"string\">\"address\"</span>, <span class=\"string\">\"USER ADDRESS\"</span>], </span><br><span class=\"line\">  [<span class=\"string\">\"and\"</span>, [</span><br><span class=\"line\">    [<span class=\"string\">\"address\"</span>, <span class=\"string\">\"EXCHANGE ADDRESS\"</span>], </span><br><span class=\"line\">    [<span class=\"string\">\"has\"</span>, &#123;</span><br><span class=\"line\">      what: \"output\",</span><br><span class=\"line\">      asset: \"ID of alternative asset\", </span><br><span class=\"line\">      amount_at_least: 1200,</span><br><span class=\"line\">      address: \"USER ADDRESS\"</span><br><span class=\"line\">    &#125;] </span><br><span class=\"line\">  ]]</span><br><span class=\"line\">]]</span><br></pre></td></tr></table></figure>\n<p>或逻辑<code>or</code>的第一个条件表明，在未成交之前，用户可以随时取回他的<code>1000bytes</code>。或逻辑<code>or</code>的第二个条件表明，其他用户可以使用<code>EXCHANGE ADDRESS</code>地址私钥来取走着<code>1000bytes</code>，只要他同时在同一单元中将<code>1200units</code>其它资产输出到<code>USER ADDRESS</code>。通过这种方式，用户之间可以实现不同资产之间的交易。</p>\n<h4 id=\"借贷合约\"><a href=\"#借贷合约\" class=\"headerlink\" title=\"借贷合约\"></a>借贷合约</h4><p>单元约束脚本还可以用来实现抵押借贷。假设借款人抵押某种资产借贷<code>10000bytes</code>，那么借款人和借贷人可以共同签名一笔交易，其中借贷人将<code>bytes</code>发送给借款人，同时借款人将抵押资产转入以下脚本定义的地址上：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"or\"</span>, [</span><br><span class=\"line\">  [<span class=\"string\">\"and\"</span>, [</span><br><span class=\"line\">    [<span class=\"string\">\"address\"</span>, <span class=\"string\">\"LENDER ADDRESS\"</span>],</span><br><span class=\"line\">    [<span class=\"string\">\"in data feed\"</span>, [[<span class=\"string\">\"TIMESTAMPER ADDRESS\"</span>], <span class=\"string\">\"datetime\"</span>, <span class=\"string\">\"&gt;\"</span>, <span class=\"string\">\"2017-06-01 00:00:00\"</span>]]</span><br><span class=\"line\">  ]], </span><br><span class=\"line\">  [<span class=\"string\">\"and\"</span>, [</span><br><span class=\"line\">    [<span class=\"string\">\"address\"</span>, <span class=\"string\">\"BORROWER ADDRESS\"</span>], </span><br><span class=\"line\">    [<span class=\"string\">\"has\"</span>, &#123;</span><br><span class=\"line\">      what: \"output\",</span><br><span class=\"line\">      asset: \"base\",</span><br><span class=\"line\">      amount: 10000,</span><br><span class=\"line\">      address: \"LENDER ADDRESS\"</span><br><span class=\"line\">    &#125;] </span><br><span class=\"line\">  ]],</span><br><span class=\"line\">  [<span class=\"string\">\"and\"</span>, [</span><br><span class=\"line\">    [<span class=\"string\">\"address\"</span>, <span class=\"string\">\"LENDER ADDRESS\"</span>], </span><br><span class=\"line\">    [<span class=\"string\">\"address\"</span>, <span class=\"string\">\"BORROWER ADDRESS\"</span>]</span><br><span class=\"line\">  ]] </span><br><span class=\"line\">]]</span><br></pre></td></tr></table></figure>\n<p>上述脚本包括了三层含义：</p>\n<ol>\n<li>当时间超过<code>2017-06-01 00:00:00</code>时，借贷人可以取走抵押资产；</li>\n<li>当借款人归还<code>10000bytes</code>至借贷人地址<code>LENDER ADDRESS</code>时，借款人可以取回抵押资产；</li>\n<li>借贷人和借款人可以协商解除合约。</li>\n</ol>\n<h3 id=\"脚本模板\"><a href=\"#脚本模板\" class=\"headerlink\" title=\"脚本模板\"></a>脚本模板</h3><p>通过预先设定的脚本模板可以很方便地定义脚本，只需要对模板中的参数进行修改即可</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"definition template\"</span>, [</span><br><span class=\"line\">  <span class=\"string\">\"hash of unit where the template was defined\"</span>, </span><br><span class=\"line\">  &#123;param1: \"value1\", param2: \"value2\"&#125;</span><br><span class=\"line\">]]</span><br></pre></td></tr></table></figure>\n<p>脚本模板需要在单元中发送<code>app=’definition_template’</code>的消息，并且需要单元到达稳定状态后，脚本模板才可以使用。消息内容与普通的地址定义脚本相同，参数使用<code>@param1</code>及<code>@param2</code>表示。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Byteball的地址、脚本及合约\"><a href=\"#Byteball的地址、脚本及合约\" class=\"headerlink\" title=\"Byteball的地址、脚本及合约\"></a>Byteball的地址、脚本及合约</h2><h3 id=\"地址的定义\"><a href=\"#地址的定义\" class=\"headerlink\" title=\"地址的定义\"></a>地址的定义</h3><p>Byteball中用户使用地址进行收发交易。地址本质上对应的是一段具有特定含义的脚本，该脚本称为地址的定义。任何能够使地址定义脚本输出为真（也称作解锁该脚本）的人具有使用该地址资产的权限。与Bitcoin类似，最常用的地址定义脚本是公钥（采用BASE64编码），即具有相应私钥的人可以使用该地址的资产，比如</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"sig\"</span>,&#123;<span class=\"attr\">\"pubkey\"</span>:<span class=\"string\">\"Ald9tkgiUZQQ1djpZgv2ez7xf1ZvYAsTLhudhvn0931w\"</span>&#125;]</span><br></pre></td></tr></table></figure>\n<p>对于地址定义脚本进行哈希，再加上校验位就得到了地址，Byteball的地址采用BASE32编码。Byteball地址的校验位并不是全部放在尾部，而是穿插着放在哈希值中间，防止有攻击者在地址中间进行恶意修改。</p>\n<p><img src=\"http://oc7urqs4c.bkt.clouddn.com/2018-01-19-byteball-address.png\" alt=\"\"></p>\n<p>按照此流程，上面公钥脚本对应的地址为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A2WWHN7755YZVMXCBLMFWRSLKSZJN3FU</span><br></pre></td></tr></table></figure>\n<p>如果地址仅用于接收交易，其定义脚本可以不对外公布。但是当用户首次使用该地址进行发送交易时，他需要在发送的单元中声明该地址的定义脚本，比如</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unit: &#123; </span><br><span class=\"line\">  ...</span><br><span class=\"line\">  authors: [ &#123;</span><br><span class=\"line\">    address: 'DJ6LV5GPCLMGRW7ZB55IVGJRPDJPOQU6', </span><br><span class=\"line\">    definition: [</span><br><span class=\"line\">      \"sig\", &#123;\"pubkey\":\"AsnvZ3w7N1lZGJ+P+bDZU0DgOwJcGJ51bjsWpEqfqBg6\"&#125;</span><br><span class=\"line\">    ], </span><br><span class=\"line\">    authentifiers: &#123;</span><br><span class=\"line\">      r: '3eQPIFiPVLRwBwEzxUR5thqn+zlFfLXUrzAmgemAqOk35UvDpa4h79Fd6TbPbGfb8VMiJzqdNGHCKyAjl786mw=='</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125; ],</span><br><span class=\"line\">  ... </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中，<code>authentifiers</code>是用户采用私钥对除<code>authentifiers</code>之外的数据进行的签名。在用户使用该地址首次发送单元之后，它不允许再发送地址的定义。当然，只有在该地址的第一个单元到达稳定后，用户才可以发送后续单元。</p>\n<p>用户可以在保持地址不变的条件下修改地址的定义脚本，用户需要发送消息</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unit: &#123; </span><br><span class=\"line\">  ...</span><br><span class=\"line\">  messages: [ </span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      app: \"address_definition_change\",</span><br><span class=\"line\">      definition_chash: \"I4Z7KFNIYTPHPJ5CA5OFC273JQFSZPOX\"</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ... </span><br><span class=\"line\">  ],</span><br><span class=\"line\">  ... </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>definition_chash</code>为新的地址定义脚本生成的地址。那么，下一个从原地址发出的单元有以下两条要求：</p>\n<ol>\n<li>必须把<code>address_definition_change</code>这个单元作为其<code>last_ball</code>；</li>\n<li>在修改地址定义脚本后发出第一个单元时，需要把新的定义脚本作为第一条<code>message</code>。</li>\n</ol>\n<p>显然，新的地址定义脚本生成的地址跟原地址是不相同的。当用户迁移到新的设备上，同时想保持地址不变时，可以使用这种方式来修改地址定义脚本。</p>\n<p>地址定义脚本中必须显式地（使用<code>sig</code>）或隐式地（使用<code>address</code>）包含至少一个<code>sig</code>。为了防止消耗过量的资源，脚本的操作总数限制在100以内，包括授权地址及脚本模板中的所有操作。</p>\n<p>相比于Ethereum，Byteball的脚本语言的解释能力有限，它定义的几乎都是逻辑判断语句。但是，Byteball本身是为了提供给那些并不太懂编程的人群使用的，其语言必须便于理解且不容易出错。</p>\n<h3 id=\"逻辑运算脚本\"><a href=\"#逻辑运算脚本\" class=\"headerlink\" title=\"逻辑运算脚本\"></a>逻辑运算脚本</h3><p><strong>与运算：</strong>当多个条件同时满足时，脚本输出为真。比如，同时需要两个私钥签名的脚本</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"and\"</span>, [</span><br><span class=\"line\">  [\"sig\", &#123;pubkey: \"one pubkey in base64\"&#125;], </span><br><span class=\"line\">  [\"sig\", &#123;pubkey: \"another pubkey in base64\"&#125;]</span><br><span class=\"line\">]]</span><br></pre></td></tr></table></figure>\n<p><strong>或运算：</strong>多个条件中有一个满足时，脚本输出为真。比如，仅需要<code>laptop</code>、<code>smartphone</code>或者<code>talet</code>中某一个私钥就可以解锁的脚本</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"or\"</span>, [</span><br><span class=\"line\">  [\"sig\", &#123;pubkey: \"laptop pubkey\"&#125;], </span><br><span class=\"line\">  [\"sig\", &#123;pubkey: \"smartphone pubkey\"&#125;], </span><br><span class=\"line\">  [\"sig\", &#123;pubkey: \"tablet pubkey\"&#125;]</span><br><span class=\"line\">]]</span><br></pre></td></tr></table></figure>\n<p><strong>非运算</strong>：脚本中不含<code>sig</code>、<code>hash</code>、<code>address</code>、<code>cosigned by</code>或者<code>in merkle</code>的条件可以进行非运算，比如</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"not\"</span>, [</span><br><span class=\"line\">  <span class=\"string\">\"in data feed\"</span>, </span><br><span class=\"line\">  [[<span class=\"string\">\"NOAA ADDRESS\"</span>], <span class=\"string\">\"wind_speed\"</span>, <span class=\"string\">\"&gt;\"</span>, <span class=\"string\">\"200\"</span>]</span><br><span class=\"line\">]]</span><br></pre></td></tr></table></figure>\n<p><strong>逻辑嵌套：</strong>逻辑运算可以嵌套使用。比如，必须同时拥有<code>smartphone</code>私钥以及<code>laptop</code>或者<code>tablet</code>中某一个私钥就可以解锁的脚本</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"and\"</span>, [</span><br><span class=\"line\">  [<span class=\"string\">\"or\"</span>, [</span><br><span class=\"line\">    [\"sig\", &#123;pubkey: \"laptop pubkey\"&#125;],</span><br><span class=\"line\">    [\"sig\", &#123;pubkey: \"tablet pubkey\"&#125;] </span><br><span class=\"line\">  ]],</span><br><span class=\"line\">  [\"sig\", &#123;pubkey: \"smartphone pubkey\"&#125;] </span><br><span class=\"line\">]]</span><br></pre></td></tr></table></figure>\n<p><strong>最小数量运算：</strong>当满足条件的个数超过门限时，脚本输出为真。比如，具有2个以上私钥就可以解锁的脚本</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"r of set\"</span>, &#123; </span><br><span class=\"line\">  required: 2,</span><br><span class=\"line\">  set: [</span><br><span class=\"line\">    [\"sig\", &#123;pubkey: \"laptop pubkey\"&#125;], </span><br><span class=\"line\">    [\"sig\", &#123;pubkey: \"smartphone pubkey\"&#125;], </span><br><span class=\"line\">    [\"sig\", &#123;pubkey: \"tablet pubkey\"&#125;]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n<p><strong>最低权重运算：</strong>当满足条件的权重值超过门限时，脚本输出为真。比如，当几个私钥签名的权重之和大于50时可以解锁的脚本</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"weighted and\"</span>, &#123; </span><br><span class=\"line\">  required: 50,</span><br><span class=\"line\">  set: [</span><br><span class=\"line\">    &#123;weight: 40, value: [\"sig\", &#123;pubkey: \"CEO pubkey\"&#125;] &#125;, </span><br><span class=\"line\">    &#123;weight: 20, value: [\"sig\", &#123;pubkey: \"COO pubkey\"&#125;] &#125;, </span><br><span class=\"line\">    &#123;weight: 20, value: [\"sig\", &#123;pubkey: \"CFO pubkey\"&#125;] &#125;, </span><br><span class=\"line\">    &#123;weight: 20, value: [\"sig\", &#123;pubkey: \"CTO pubkey\"&#125;] &#125;</span><br><span class=\"line\">  ] </span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n<h3 id=\"地址授权脚本\"><a href=\"#地址授权脚本\" class=\"headerlink\" title=\"地址授权脚本\"></a>地址授权脚本</h3><p>授权使用其它地址来解锁脚本，其定义的语法为</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"and\"</span>, [</span><br><span class=\"line\">  [<span class=\"string\">\"address\"</span>, <span class=\"string\">\"ADDRESS 1 IN BASE32\"</span>], </span><br><span class=\"line\">  [<span class=\"string\">\"address\"</span>, <span class=\"string\">\"ADDRESS 2 IN BASE32\"</span>]</span><br><span class=\"line\">]]</span><br></pre></td></tr></table></figure>\n<p>这可以很方便地用来构造共享控制的地址。比如，上面给出的地址定义脚本生成的地址将由<code>ADDRESS1</code>和<code>ADDRESS2</code>共同控制。</p>\n<h3 id=\"共同签名脚本\"><a href=\"#共同签名脚本\" class=\"headerlink\" title=\"共同签名脚本\"></a>共同签名脚本</h3><p>要求与另一个地址共同签名才可以解锁脚本</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"cosigned by\"</span>, <span class=\"string\">\"ANOTHER ADDRESS IN BASE32\"</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"地址已用脚本\"><a href=\"#地址已用脚本\" class=\"headerlink\" title=\"地址已用脚本\"></a>地址已用脚本</h3><p>要求由某个地址发出的单元至少有一个成为<code>last_ball_unit</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"seen address\"</span>, <span class=\"string\">\"ANOTHER ADDRESS IN BASE32\"</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"数据订阅脚本\"><a href=\"#数据订阅脚本\" class=\"headerlink\" title=\"数据订阅脚本\"></a>数据订阅脚本</h3><p>通过订阅的数据是否符合条件来解锁脚本，其语法格式为</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"in data feed\"</span>, [</span><br><span class=\"line\">  [<span class=\"string\">\"ADDRESS1\"</span>, <span class=\"string\">\"ADDRESS2\"</span>, ...], </span><br><span class=\"line\">   <span class=\"string\">\"data feed name\"</span>,</span><br><span class=\"line\">   <span class=\"string\">\"=\"</span>,</span><br><span class=\"line\">   <span class=\"string\">\"expected value\"</span></span><br><span class=\"line\">]]</span><br></pre></td></tr></table></figure>\n<p>上述脚本表示：当数据源地址<code>ADDRESS1</code>、<code>ADDRESS2</code>等中某个地址发出的消息中订阅数据<code>data feed name</code>等于<code>expected value</code>时，脚本输出为真。</p>\n<p>地址发出的数据订阅消息格式为</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unit: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  messages: [</span><br><span class=\"line\">  \t...</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      app: \"data_feed\", </span><br><span class=\"line\">  \t  payload_location: \"inline\", </span><br><span class=\"line\">      payload_hash: \"hash of payload\", </span><br><span class=\"line\">      payload: &#123;</span><br><span class=\"line\">        \"data feed name\": \"value\",</span><br><span class=\"line\">        \"another data feed name\": \"value2\",</span><br><span class=\"line\">        ...</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"对赌合约\"><a href=\"#对赌合约\" class=\"headerlink\" title=\"对赌合约\"></a>对赌合约</h4><p>当某个地址可以作为可靠的数据订阅源时，用户可以使用其作为外部数据条件来构造<strong>合约</strong>。比如，</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"or\"</span>, [</span><br><span class=\"line\">  [<span class=\"string\">\"and\"</span>, [</span><br><span class=\"line\">    [<span class=\"string\">\"address\"</span>, <span class=\"string\">\"ADDRESS 1\"</span>],</span><br><span class=\"line\">    [<span class=\"string\">\"in data feed\"</span>, [[<span class=\"string\">\"EXCHANGE ADDRESS\"</span>], <span class=\"string\">\"EURUSD\"</span>, <span class=\"string\">\"&gt;\"</span>, <span class=\"string\">\"1.1500\"</span>]]</span><br><span class=\"line\">  ]], </span><br><span class=\"line\">  [<span class=\"string\">\"and\"</span>, [</span><br><span class=\"line\">    [<span class=\"string\">\"address\"</span>, <span class=\"string\">\"ADDRESS 2\"</span>],</span><br><span class=\"line\">    [<span class=\"string\">\"in data feed\"</span>, [[<span class=\"string\">\"TIMESTAMPER ADDRESS\"</span>], <span class=\"string\">\"datetime\"</span>, <span class=\"string\">\"&gt;\"</span>, <span class=\"string\">\"2016-10-01 00:00:00\"</span>]]</span><br><span class=\"line\">  ]] </span><br><span class=\"line\">]]</span><br></pre></td></tr></table></figure>\n<p>上述脚本给出了<code>ADDRESS 1</code>和<code>ADDRESS 2</code>之间的一个简单合约，假设其对应的地址为<code>ADDRESS X</code>。当<code>EXCHANGE ADDRESS</code>发布的汇率数据<code>EURUSD</code>大于<code>1.1500</code>时，仅使用<code>ADDRESS 1</code>的私钥就可以取走<code>ADDRESS X</code>中的资产。而当<code>TIMESTAMPER ADDRESS</code>发布的时间数据<code>datetime</code>大于<code>2016-10-01 00:00:00</code>时，仅使用<code>ADDRESS 2</code>的私钥就可以取走<code>ADDRESS X</code>中的资产。也就是说，上述脚本定义的是对赌合约：如果<code>2016-10-01 00:00:00</code>之前<code>EURUSD</code>汇率超过<code>1.1500</code>，地址<code>ADDRESS 1</code>获胜，否则地址<code>ADDRESS 2</code>获胜。</p>\n<h4 id=\"商品合约\"><a href=\"#商品合约\" class=\"headerlink\" title=\"商品合约\"></a>商品合约</h4><p>当顾客购买商品时，也可以使用上述方式来制定合约，比如</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"or\"</span>, [</span><br><span class=\"line\">  [<span class=\"string\">\"and\"</span>, [</span><br><span class=\"line\">    [<span class=\"string\">\"address\"</span>, <span class=\"string\">\"MERCHANT ADDRESS\"</span>],</span><br><span class=\"line\">    [<span class=\"string\">\"in data feed\"</span>, [[<span class=\"string\">\"FEDEX ADDRESS\"</span>], <span class=\"string\">\"tracking\"</span>, <span class=\"string\">\"=\"</span>, <span class=\"string\">\"123456\"</span>]]</span><br><span class=\"line\">  ]], </span><br><span class=\"line\">  [<span class=\"string\">\"and\"</span>, [</span><br><span class=\"line\">    [<span class=\"string\">\"address\"</span>, <span class=\"string\">\"BUYER ADDRESS\"</span>],</span><br><span class=\"line\">    [<span class=\"string\">\"in data feed\"</span>, [[<span class=\"string\">\"TIMESTAMPER ADDRESS\"</span>], <span class=\"string\">\"datetime\"</span>, <span class=\"string\">\"&gt;\"</span>, <span class=\"string\">\"2016-10-01 00:00:00\"</span>]]</span><br><span class=\"line\">  ]] </span><br><span class=\"line\">]]</span><br></pre></td></tr></table></figure>\n<p>上述脚本给出了顾客<code>BUYER ADDRESS</code>和商户<code>MERCHANT ADDRESS</code>之间的合约，假设其对应的地址为<code>ADDRESS Y</code>。顾客在购买商品时，将款项打入地址<code>ADDRESS Y</code>。如果快递公司<code>FEDEX ADDRESS</code>发布数据表明相应的快递已签收，则商户<code>MERCHANT ADDRESS</code>可以从<code>ADDRESS Y</code>中取走货款；如果<code>TIMERSTAMPER ADDRESS</code>发布的时间数据<code>datetime</code>大于<code>2016-10-01 00:00:00</code>时，则顾客<code>BUYER ADDRESS</code>可以从<code>ADDRESS Y</code>中取回货款。</p>\n<p>上述场景中，快递公司需要对每一个快递都发布其签收状态数据，这将需要发布大量的数据。Merkle数据订阅可以降低需要发布的数据量。只需要核实关心的<code>hash</code>值出现在数据源地址发布的Merkle树中时，即可证明该事件已发生。其定义语法如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"in merkle\"</span>, [</span><br><span class=\"line\">  [<span class=\"string\">\"ADDRESS1\"</span>, <span class=\"string\">\"ADDRESS2\"</span>, ...], </span><br><span class=\"line\">   <span class=\"string\">\"data feed name\"</span>,</span><br><span class=\"line\">   <span class=\"string\">\"hash of expected value\"</span></span><br><span class=\"line\">]]</span><br></pre></td></tr></table></figure>\n<p>此时，快递公司只需要定期将一大批快递状态构造Merkle树，并发布Merkle根即可。商户可以通过相应快递的Merkle路径来解锁Merkle数据订阅的脚本。</p>\n<h3 id=\"单元约束脚本\"><a href=\"#单元约束脚本\" class=\"headerlink\" title=\"单元约束脚本\"></a>单元约束脚本</h3><p>脚本可以对相应地址发出的单元数据进行约束，其定义格式为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">['has', &#123;</span><br><span class=\"line\">  what: 'input'|'output',</span><br><span class=\"line\">  asset: 'assetID in base64 or \"base\" for bytes', </span><br><span class=\"line\">  type: 'transfer'|'issue',</span><br><span class=\"line\">  own_funds: true,</span><br><span class=\"line\">  amount_at_least: 123,</span><br><span class=\"line\">  amount_at_most: 123,</span><br><span class=\"line\">  amount: 123,</span><br><span class=\"line\">  address: 'INPUT OR OUTPUT ADDRESS IN BASE32'</span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n<p>上述脚本要求单元至少有一个输入/输出满足后续定义所有的条件。特别地，可以使用<code>has one</code>来强制要求有且仅有一个输入/输出满足后续所有条件。</p>\n<p>其它类似的约束还有求和约束，要求输入/输出之和满足特定条件，其格式为</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">['sum', &#123;</span><br><span class=\"line\">  filter: &#123;</span><br><span class=\"line\">    what: 'input'|'output',</span><br><span class=\"line\">    asset: 'asset or base', </span><br><span class=\"line\">    type: 'transfer'|'issue', </span><br><span class=\"line\">    own_funds: true,</span><br><span class=\"line\">    address: 'ADDRESS IN BASE32' </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  at_least: 120, </span><br><span class=\"line\">  at_most: 130, </span><br><span class=\"line\">  equals: 123</span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n<h4 id=\"交易合约\"><a href=\"#交易合约\" class=\"headerlink\" title=\"交易合约\"></a>交易合约</h4><p>单元约束脚本可以用来实现去中心化交易。假设用户<code>USER ADDRESS</code>希望使用不高于<code>1000bytes</code>的价格购买<code>1200units</code>的其它资产。用户可以发送<code>1000bytes</code>至如下脚本定义的地址上：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"or\"</span>, [</span><br><span class=\"line\">  [<span class=\"string\">\"address\"</span>, <span class=\"string\">\"USER ADDRESS\"</span>], </span><br><span class=\"line\">  [<span class=\"string\">\"and\"</span>, [</span><br><span class=\"line\">    [<span class=\"string\">\"address\"</span>, <span class=\"string\">\"EXCHANGE ADDRESS\"</span>], </span><br><span class=\"line\">    [<span class=\"string\">\"has\"</span>, &#123;</span><br><span class=\"line\">      what: \"output\",</span><br><span class=\"line\">      asset: \"ID of alternative asset\", </span><br><span class=\"line\">      amount_at_least: 1200,</span><br><span class=\"line\">      address: \"USER ADDRESS\"</span><br><span class=\"line\">    &#125;] </span><br><span class=\"line\">  ]]</span><br><span class=\"line\">]]</span><br></pre></td></tr></table></figure>\n<p>或逻辑<code>or</code>的第一个条件表明，在未成交之前，用户可以随时取回他的<code>1000bytes</code>。或逻辑<code>or</code>的第二个条件表明，其他用户可以使用<code>EXCHANGE ADDRESS</code>地址私钥来取走着<code>1000bytes</code>，只要他同时在同一单元中将<code>1200units</code>其它资产输出到<code>USER ADDRESS</code>。通过这种方式，用户之间可以实现不同资产之间的交易。</p>\n<h4 id=\"借贷合约\"><a href=\"#借贷合约\" class=\"headerlink\" title=\"借贷合约\"></a>借贷合约</h4><p>单元约束脚本还可以用来实现抵押借贷。假设借款人抵押某种资产借贷<code>10000bytes</code>，那么借款人和借贷人可以共同签名一笔交易，其中借贷人将<code>bytes</code>发送给借款人，同时借款人将抵押资产转入以下脚本定义的地址上：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"or\"</span>, [</span><br><span class=\"line\">  [<span class=\"string\">\"and\"</span>, [</span><br><span class=\"line\">    [<span class=\"string\">\"address\"</span>, <span class=\"string\">\"LENDER ADDRESS\"</span>],</span><br><span class=\"line\">    [<span class=\"string\">\"in data feed\"</span>, [[<span class=\"string\">\"TIMESTAMPER ADDRESS\"</span>], <span class=\"string\">\"datetime\"</span>, <span class=\"string\">\"&gt;\"</span>, <span class=\"string\">\"2017-06-01 00:00:00\"</span>]]</span><br><span class=\"line\">  ]], </span><br><span class=\"line\">  [<span class=\"string\">\"and\"</span>, [</span><br><span class=\"line\">    [<span class=\"string\">\"address\"</span>, <span class=\"string\">\"BORROWER ADDRESS\"</span>], </span><br><span class=\"line\">    [<span class=\"string\">\"has\"</span>, &#123;</span><br><span class=\"line\">      what: \"output\",</span><br><span class=\"line\">      asset: \"base\",</span><br><span class=\"line\">      amount: 10000,</span><br><span class=\"line\">      address: \"LENDER ADDRESS\"</span><br><span class=\"line\">    &#125;] </span><br><span class=\"line\">  ]],</span><br><span class=\"line\">  [<span class=\"string\">\"and\"</span>, [</span><br><span class=\"line\">    [<span class=\"string\">\"address\"</span>, <span class=\"string\">\"LENDER ADDRESS\"</span>], </span><br><span class=\"line\">    [<span class=\"string\">\"address\"</span>, <span class=\"string\">\"BORROWER ADDRESS\"</span>]</span><br><span class=\"line\">  ]] </span><br><span class=\"line\">]]</span><br></pre></td></tr></table></figure>\n<p>上述脚本包括了三层含义：</p>\n<ol>\n<li>当时间超过<code>2017-06-01 00:00:00</code>时，借贷人可以取走抵押资产；</li>\n<li>当借款人归还<code>10000bytes</code>至借贷人地址<code>LENDER ADDRESS</code>时，借款人可以取回抵押资产；</li>\n<li>借贷人和借款人可以协商解除合约。</li>\n</ol>\n<h3 id=\"脚本模板\"><a href=\"#脚本模板\" class=\"headerlink\" title=\"脚本模板\"></a>脚本模板</h3><p>通过预先设定的脚本模板可以很方便地定义脚本，只需要对模板中的参数进行修改即可</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"definition template\"</span>, [</span><br><span class=\"line\">  <span class=\"string\">\"hash of unit where the template was defined\"</span>, </span><br><span class=\"line\">  &#123;param1: \"value1\", param2: \"value2\"&#125;</span><br><span class=\"line\">]]</span><br></pre></td></tr></table></figure>\n<p>脚本模板需要在单元中发送<code>app=’definition_template’</code>的消息，并且需要单元到达稳定状态后，脚本模板才可以使用。消息内容与普通的地址定义脚本相同，参数使用<code>@param1</code>及<code>@param2</code>表示。</p>\n"},{"title":"DAG Blockchain之Byteball原理解析（四）","date":"2018-01-26T15:09:55.000Z","_content":"\n\n## Byteball的网络结构\n\n从节点功能角度来讲，Byteball网络节点可以分为中继节点（Relay）、中枢节点（Hub）、播报节点（Oracle）、见证人节点（Witness）、钱包节点（Wallet）：\n\n- 中继节点（Relay）：负责向与其连接的节点转发单元，存储整个Byteball区块链数据库，但它本身不保存任何私钥，也不发送任何单元；\n- 中枢节点（Hub）：负责为连接到它的设备提供端到端的加密消息传输通道，用于比如收发私密资产、多签名交易、聊天信息等，其它功能与中继节点相同，默认的Hub地址为`wss://byteball.org/bb`；\n- 播报节点（Oracle）：负责不间断地向Byteball网络播报数据，数据可以是时间、价格、甚至是Bitcoin交易；\n- 见证人节点（Witness）：负责不间断地以固定地址发送单元，任何满足该条件的节点都有可能成为见证人；\n- 钱包节点（Wallet）：负责与用户交互，收发交易、消息等。\n\n下图给出了Byteball网络结构的示意图：\n\n![Byteball网络结构](http://oc7urqs4c.bkt.clouddn.com/2018-01-25-byteball_network-1.png)\n\n### 轻节点及其验证过程\n\n从是否存储了完整的区块链数据角度来讲，节点也可以分为全节点和轻节点，全节点保存了完整的区块链数据，而轻节点没有。用户在安装钱包时可以选择是使用全节点还是轻节点。轻节点仅存储与其地址相关的那些单元，它需要从全节点上下载所需要的数据，请求条件包括它信任的见证人列表以及它关注的地址。\n\n> **跳跃列表：**假设直接位于主链上的球的MCI为$i$，如果$i\\bmod10=0$，则该球具有跳跃列表（`skiplist_balls`），跳跃列表中的值指向之前的球；对于$i$尾数具有的每一个$0$，跳跃列表中都有一个MCI值与之对应；跳跃列表中的MCI值等于在保持尾数$0$个数相同的情况下最接近$i$的MCI，比如$i=3000$时，对应的跳跃列表为$[2990, 2900, 2000]$。\n>\n> **跳跃距离：**对于跳跃列表中的MCI值，它与当前球的MCI值的差值称为跳跃距离。\n>\n> **最近的球：**当前节点已知的距离当前时刻最近的球（`last_ball`），每个单元在发送时必须包含其已知的最近的球。\n\n全节点接收到轻节点发送的见证人列表和关注地址，在其存储单元的数据库中搜索与轻节点关注地址相关的单元。同时，对于每一个相关的单元，全节点构造一条证据链，构造方法如下：\n\n1. 沿着主链回溯，当已收集到轻节点给定见证人列表中的绝大部分见证人时停止（**这是寻找见证人的过程**），记录这些主链上的单元，记作单元集合$C$；\n2. 选择单元集合$C$中时间最早的单元（也是MCI最小的单元），获取其`last_ball`；\n3. 从`last_ball`这个单元开始沿着主链回溯，直至遇见包含`skiplist_balls`的球停止，记录这些主链上的球，记作球集合$B$；\n4. 使用`skiplist_balls`继续沿主链回溯，跳转到`skiplist_balls`中跳跃距离最大的球（**这是不断加速跳跃的过程**）；\n5. 重复步骤4，当下一次跳跃超过目标单元时，减小跳跃距离（**这是降速跳跃的过程，极限情况下，不使用`skiplist_balls`回溯，只利用父单元进行回溯**），直到目标单元停止。\n\n对于轻节点而言，全节点给出的证据链是可信的，主要有以下两个原因：\n\n1. 证据链开始的那些单元包含了轻节点信任的见证人发出的单元；\n2. 证据链中的连接使用的是`parent_units`（寻找见证人过程）、`last_ball`、`skiplist_balls`、`parent_balls`。\n\n因此，通过证据链的方式，轻节点可以判断某个单元是否有效。\n\n### 端到端加密通道\n\n中枢节点Hub用于为不同的用户设备之间提供可靠的端到端加密数据通道，有点类似邮件服务器。Hub为用户设备提供存储转发服务，用户设备可以选择连接到不同的Hub。用户设备使用websocket连接到到Hub，并采用TLS加密。Hub一旦收到发往某个设备地址的消息，它就会立即转发，转发成功后删除消息。\n\n设备地址是用于标识用户设备的，从而接收其它设备发送的消息，类似于邮件地址。设备地址与钱包地址不同，可以在不同的设备上使用相同的钱包地址。每个设备保存一把永久性的私钥，其对应的公钥做Hash后进行BASE32编码得到设备地址。为了和钱包地址区分开来，设备地址在其开始位置添加0作为标识（0本身并不是BASE32字符）。完整的设备地址还要包括Hub名称，比如`DEVICEADDRESS@hubname.com`。当切换到不同的Hub是，`@`之间的地址是保持不变的。\n\n假设发送消息的设备记作`sender`，接收消息的设备记作`receiver`，`receiver`所连接的Hub为`hub`。那么，当`sender`想要与`receiver`进行通信时，它需要进行以下操作：\n\n1. `sender`修改其Hub地址为`hub`，默认情况下所有设备连接的都是`wss://byteball.org/bb`；\n2. `sender`与`receiver`进行配对，可以使用扫描二维码、配对字符串、或者使用`byteball://`起始的链接。\n\n所有设备之间的通信均采用了端到端加密（ECDH+AES）和数字签名（ECDSA）。作为通信的唯一中间人，Hub也无法查看或者修改消息内容，为了提高转发的安全性，设备会生成一个临时私钥，并将对应的公钥上传至它连接的Hub上。同时，设备可以定时地更换临时私钥和公钥。\n\n因此，`sender`在向`receiver`发送消息时，它需要完成以下步骤：\n\n1. 与`hub`连接；\n2. 从`hub`获取`receiver`的临时公钥；\n3. 生成一次性的密钥对；\n4. 根据一次性私钥和`receiver`的临时公钥生成ECDH密钥；\n5. 使用ECDH密钥对消息进行AES加密；\n6. 添加一次性公钥；\n7. 使用设备私钥对整个消息进行签名；\n8. 将消息发送给`hub`\n\n对于`receiver`，它首先需要验证消息的签名，然后使用`sender`的一次性公钥和本地的临时私钥解密消息，从而获得消息的内容。\n\n基于Hub的设备端到端加密消息通道可以用于设备之间通信，设备之间相互发送的消息不存入Byteball数据库中。用户可以利用该通道来发送加密文本消息、多签名交易、隐私资产（比如blackbytes）等。\n\n","source":"_posts/2018-01-26-byteball4.md","raw":"---\ntitle: DAG Blockchain之Byteball原理解析（四）\ndate: 2018-01-26 23:09:55\ncategories: 谈点区块链\ntags:\n  - dag\n  - blockchain\n  - byteball\n  - bitcoin\n---\n\n\n## Byteball的网络结构\n\n从节点功能角度来讲，Byteball网络节点可以分为中继节点（Relay）、中枢节点（Hub）、播报节点（Oracle）、见证人节点（Witness）、钱包节点（Wallet）：\n\n- 中继节点（Relay）：负责向与其连接的节点转发单元，存储整个Byteball区块链数据库，但它本身不保存任何私钥，也不发送任何单元；\n- 中枢节点（Hub）：负责为连接到它的设备提供端到端的加密消息传输通道，用于比如收发私密资产、多签名交易、聊天信息等，其它功能与中继节点相同，默认的Hub地址为`wss://byteball.org/bb`；\n- 播报节点（Oracle）：负责不间断地向Byteball网络播报数据，数据可以是时间、价格、甚至是Bitcoin交易；\n- 见证人节点（Witness）：负责不间断地以固定地址发送单元，任何满足该条件的节点都有可能成为见证人；\n- 钱包节点（Wallet）：负责与用户交互，收发交易、消息等。\n\n下图给出了Byteball网络结构的示意图：\n\n![Byteball网络结构](http://oc7urqs4c.bkt.clouddn.com/2018-01-25-byteball_network-1.png)\n\n### 轻节点及其验证过程\n\n从是否存储了完整的区块链数据角度来讲，节点也可以分为全节点和轻节点，全节点保存了完整的区块链数据，而轻节点没有。用户在安装钱包时可以选择是使用全节点还是轻节点。轻节点仅存储与其地址相关的那些单元，它需要从全节点上下载所需要的数据，请求条件包括它信任的见证人列表以及它关注的地址。\n\n> **跳跃列表：**假设直接位于主链上的球的MCI为$i$，如果$i\\bmod10=0$，则该球具有跳跃列表（`skiplist_balls`），跳跃列表中的值指向之前的球；对于$i$尾数具有的每一个$0$，跳跃列表中都有一个MCI值与之对应；跳跃列表中的MCI值等于在保持尾数$0$个数相同的情况下最接近$i$的MCI，比如$i=3000$时，对应的跳跃列表为$[2990, 2900, 2000]$。\n>\n> **跳跃距离：**对于跳跃列表中的MCI值，它与当前球的MCI值的差值称为跳跃距离。\n>\n> **最近的球：**当前节点已知的距离当前时刻最近的球（`last_ball`），每个单元在发送时必须包含其已知的最近的球。\n\n全节点接收到轻节点发送的见证人列表和关注地址，在其存储单元的数据库中搜索与轻节点关注地址相关的单元。同时，对于每一个相关的单元，全节点构造一条证据链，构造方法如下：\n\n1. 沿着主链回溯，当已收集到轻节点给定见证人列表中的绝大部分见证人时停止（**这是寻找见证人的过程**），记录这些主链上的单元，记作单元集合$C$；\n2. 选择单元集合$C$中时间最早的单元（也是MCI最小的单元），获取其`last_ball`；\n3. 从`last_ball`这个单元开始沿着主链回溯，直至遇见包含`skiplist_balls`的球停止，记录这些主链上的球，记作球集合$B$；\n4. 使用`skiplist_balls`继续沿主链回溯，跳转到`skiplist_balls`中跳跃距离最大的球（**这是不断加速跳跃的过程**）；\n5. 重复步骤4，当下一次跳跃超过目标单元时，减小跳跃距离（**这是降速跳跃的过程，极限情况下，不使用`skiplist_balls`回溯，只利用父单元进行回溯**），直到目标单元停止。\n\n对于轻节点而言，全节点给出的证据链是可信的，主要有以下两个原因：\n\n1. 证据链开始的那些单元包含了轻节点信任的见证人发出的单元；\n2. 证据链中的连接使用的是`parent_units`（寻找见证人过程）、`last_ball`、`skiplist_balls`、`parent_balls`。\n\n因此，通过证据链的方式，轻节点可以判断某个单元是否有效。\n\n### 端到端加密通道\n\n中枢节点Hub用于为不同的用户设备之间提供可靠的端到端加密数据通道，有点类似邮件服务器。Hub为用户设备提供存储转发服务，用户设备可以选择连接到不同的Hub。用户设备使用websocket连接到到Hub，并采用TLS加密。Hub一旦收到发往某个设备地址的消息，它就会立即转发，转发成功后删除消息。\n\n设备地址是用于标识用户设备的，从而接收其它设备发送的消息，类似于邮件地址。设备地址与钱包地址不同，可以在不同的设备上使用相同的钱包地址。每个设备保存一把永久性的私钥，其对应的公钥做Hash后进行BASE32编码得到设备地址。为了和钱包地址区分开来，设备地址在其开始位置添加0作为标识（0本身并不是BASE32字符）。完整的设备地址还要包括Hub名称，比如`DEVICEADDRESS@hubname.com`。当切换到不同的Hub是，`@`之间的地址是保持不变的。\n\n假设发送消息的设备记作`sender`，接收消息的设备记作`receiver`，`receiver`所连接的Hub为`hub`。那么，当`sender`想要与`receiver`进行通信时，它需要进行以下操作：\n\n1. `sender`修改其Hub地址为`hub`，默认情况下所有设备连接的都是`wss://byteball.org/bb`；\n2. `sender`与`receiver`进行配对，可以使用扫描二维码、配对字符串、或者使用`byteball://`起始的链接。\n\n所有设备之间的通信均采用了端到端加密（ECDH+AES）和数字签名（ECDSA）。作为通信的唯一中间人，Hub也无法查看或者修改消息内容，为了提高转发的安全性，设备会生成一个临时私钥，并将对应的公钥上传至它连接的Hub上。同时，设备可以定时地更换临时私钥和公钥。\n\n因此，`sender`在向`receiver`发送消息时，它需要完成以下步骤：\n\n1. 与`hub`连接；\n2. 从`hub`获取`receiver`的临时公钥；\n3. 生成一次性的密钥对；\n4. 根据一次性私钥和`receiver`的临时公钥生成ECDH密钥；\n5. 使用ECDH密钥对消息进行AES加密；\n6. 添加一次性公钥；\n7. 使用设备私钥对整个消息进行签名；\n8. 将消息发送给`hub`\n\n对于`receiver`，它首先需要验证消息的签名，然后使用`sender`的一次性公钥和本地的临时私钥解密消息，从而获得消息的内容。\n\n基于Hub的设备端到端加密消息通道可以用于设备之间通信，设备之间相互发送的消息不存入Byteball数据库中。用户可以利用该通道来发送加密文本消息、多签名交易、隐私资产（比如blackbytes）等。\n\n","slug":"byteball4","published":1,"updated":"2018-01-26T15:38:31.612Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcw3ep27000041epxs9ywqu9","content":"<h2 id=\"Byteball的网络结构\"><a href=\"#Byteball的网络结构\" class=\"headerlink\" title=\"Byteball的网络结构\"></a>Byteball的网络结构</h2><p>从节点功能角度来讲，Byteball网络节点可以分为中继节点（Relay）、中枢节点（Hub）、播报节点（Oracle）、见证人节点（Witness）、钱包节点（Wallet）：</p>\n<ul>\n<li>中继节点（Relay）：负责向与其连接的节点转发单元，存储整个Byteball区块链数据库，但它本身不保存任何私钥，也不发送任何单元；</li>\n<li>中枢节点（Hub）：负责为连接到它的设备提供端到端的加密消息传输通道，用于比如收发私密资产、多签名交易、聊天信息等，其它功能与中继节点相同，默认的Hub地址为<code>wss://byteball.org/bb</code>；</li>\n<li>播报节点（Oracle）：负责不间断地向Byteball网络播报数据，数据可以是时间、价格、甚至是Bitcoin交易；</li>\n<li>见证人节点（Witness）：负责不间断地以固定地址发送单元，任何满足该条件的节点都有可能成为见证人；</li>\n<li>钱包节点（Wallet）：负责与用户交互，收发交易、消息等。</li>\n</ul>\n<p>下图给出了Byteball网络结构的示意图：</p>\n<p><img src=\"http://oc7urqs4c.bkt.clouddn.com/2018-01-25-byteball_network-1.png\" alt=\"Byteball网络结构\"></p>\n<h3 id=\"轻节点及其验证过程\"><a href=\"#轻节点及其验证过程\" class=\"headerlink\" title=\"轻节点及其验证过程\"></a>轻节点及其验证过程</h3><p>从是否存储了完整的区块链数据角度来讲，节点也可以分为全节点和轻节点，全节点保存了完整的区块链数据，而轻节点没有。用户在安装钱包时可以选择是使用全节点还是轻节点。轻节点仅存储与其地址相关的那些单元，它需要从全节点上下载所需要的数据，请求条件包括它信任的见证人列表以及它关注的地址。</p>\n<blockquote>\n<p><strong>跳跃列表：</strong>假设直接位于主链上的球的MCI为$i$，如果$i\\bmod10=0$，则该球具有跳跃列表（<code>skiplist_balls</code>），跳跃列表中的值指向之前的球；对于$i$尾数具有的每一个$0$，跳跃列表中都有一个MCI值与之对应；跳跃列表中的MCI值等于在保持尾数$0$个数相同的情况下最接近$i$的MCI，比如$i=3000$时，对应的跳跃列表为$[2990, 2900, 2000]$。</p>\n<p><strong>跳跃距离：</strong>对于跳跃列表中的MCI值，它与当前球的MCI值的差值称为跳跃距离。</p>\n<p><strong>最近的球：</strong>当前节点已知的距离当前时刻最近的球（<code>last_ball</code>），每个单元在发送时必须包含其已知的最近的球。</p>\n</blockquote>\n<p>全节点接收到轻节点发送的见证人列表和关注地址，在其存储单元的数据库中搜索与轻节点关注地址相关的单元。同时，对于每一个相关的单元，全节点构造一条证据链，构造方法如下：</p>\n<ol>\n<li>沿着主链回溯，当已收集到轻节点给定见证人列表中的绝大部分见证人时停止（<strong>这是寻找见证人的过程</strong>），记录这些主链上的单元，记作单元集合$C$；</li>\n<li>选择单元集合$C$中时间最早的单元（也是MCI最小的单元），获取其<code>last_ball</code>；</li>\n<li>从<code>last_ball</code>这个单元开始沿着主链回溯，直至遇见包含<code>skiplist_balls</code>的球停止，记录这些主链上的球，记作球集合$B$；</li>\n<li>使用<code>skiplist_balls</code>继续沿主链回溯，跳转到<code>skiplist_balls</code>中跳跃距离最大的球（<strong>这是不断加速跳跃的过程</strong>）；</li>\n<li>重复步骤4，当下一次跳跃超过目标单元时，减小跳跃距离（<strong>这是降速跳跃的过程，极限情况下，不使用<code>skiplist_balls</code>回溯，只利用父单元进行回溯</strong>），直到目标单元停止。</li>\n</ol>\n<p>对于轻节点而言，全节点给出的证据链是可信的，主要有以下两个原因：</p>\n<ol>\n<li>证据链开始的那些单元包含了轻节点信任的见证人发出的单元；</li>\n<li>证据链中的连接使用的是<code>parent_units</code>（寻找见证人过程）、<code>last_ball</code>、<code>skiplist_balls</code>、<code>parent_balls</code>。</li>\n</ol>\n<p>因此，通过证据链的方式，轻节点可以判断某个单元是否有效。</p>\n<h3 id=\"端到端加密通道\"><a href=\"#端到端加密通道\" class=\"headerlink\" title=\"端到端加密通道\"></a>端到端加密通道</h3><p>中枢节点Hub用于为不同的用户设备之间提供可靠的端到端加密数据通道，有点类似邮件服务器。Hub为用户设备提供存储转发服务，用户设备可以选择连接到不同的Hub。用户设备使用websocket连接到到Hub，并采用TLS加密。Hub一旦收到发往某个设备地址的消息，它就会立即转发，转发成功后删除消息。</p>\n<p>设备地址是用于标识用户设备的，从而接收其它设备发送的消息，类似于邮件地址。设备地址与钱包地址不同，可以在不同的设备上使用相同的钱包地址。每个设备保存一把永久性的私钥，其对应的公钥做Hash后进行BASE32编码得到设备地址。为了和钱包地址区分开来，设备地址在其开始位置添加0作为标识（0本身并不是BASE32字符）。完整的设备地址还要包括Hub名称，比如<code>DEVICEADDRESS@hubname.com</code>。当切换到不同的Hub是，<code>@</code>之间的地址是保持不变的。</p>\n<p>假设发送消息的设备记作<code>sender</code>，接收消息的设备记作<code>receiver</code>，<code>receiver</code>所连接的Hub为<code>hub</code>。那么，当<code>sender</code>想要与<code>receiver</code>进行通信时，它需要进行以下操作：</p>\n<ol>\n<li><code>sender</code>修改其Hub地址为<code>hub</code>，默认情况下所有设备连接的都是<code>wss://byteball.org/bb</code>；</li>\n<li><code>sender</code>与<code>receiver</code>进行配对，可以使用扫描二维码、配对字符串、或者使用<code>byteball://</code>起始的链接。</li>\n</ol>\n<p>所有设备之间的通信均采用了端到端加密（ECDH+AES）和数字签名（ECDSA）。作为通信的唯一中间人，Hub也无法查看或者修改消息内容，为了提高转发的安全性，设备会生成一个临时私钥，并将对应的公钥上传至它连接的Hub上。同时，设备可以定时地更换临时私钥和公钥。</p>\n<p>因此，<code>sender</code>在向<code>receiver</code>发送消息时，它需要完成以下步骤：</p>\n<ol>\n<li>与<code>hub</code>连接；</li>\n<li>从<code>hub</code>获取<code>receiver</code>的临时公钥；</li>\n<li>生成一次性的密钥对；</li>\n<li>根据一次性私钥和<code>receiver</code>的临时公钥生成ECDH密钥；</li>\n<li>使用ECDH密钥对消息进行AES加密；</li>\n<li>添加一次性公钥；</li>\n<li>使用设备私钥对整个消息进行签名；</li>\n<li>将消息发送给<code>hub</code></li>\n</ol>\n<p>对于<code>receiver</code>，它首先需要验证消息的签名，然后使用<code>sender</code>的一次性公钥和本地的临时私钥解密消息，从而获得消息的内容。</p>\n<p>基于Hub的设备端到端加密消息通道可以用于设备之间通信，设备之间相互发送的消息不存入Byteball数据库中。用户可以利用该通道来发送加密文本消息、多签名交易、隐私资产（比如blackbytes）等。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Byteball的网络结构\"><a href=\"#Byteball的网络结构\" class=\"headerlink\" title=\"Byteball的网络结构\"></a>Byteball的网络结构</h2><p>从节点功能角度来讲，Byteball网络节点可以分为中继节点（Relay）、中枢节点（Hub）、播报节点（Oracle）、见证人节点（Witness）、钱包节点（Wallet）：</p>\n<ul>\n<li>中继节点（Relay）：负责向与其连接的节点转发单元，存储整个Byteball区块链数据库，但它本身不保存任何私钥，也不发送任何单元；</li>\n<li>中枢节点（Hub）：负责为连接到它的设备提供端到端的加密消息传输通道，用于比如收发私密资产、多签名交易、聊天信息等，其它功能与中继节点相同，默认的Hub地址为<code>wss://byteball.org/bb</code>；</li>\n<li>播报节点（Oracle）：负责不间断地向Byteball网络播报数据，数据可以是时间、价格、甚至是Bitcoin交易；</li>\n<li>见证人节点（Witness）：负责不间断地以固定地址发送单元，任何满足该条件的节点都有可能成为见证人；</li>\n<li>钱包节点（Wallet）：负责与用户交互，收发交易、消息等。</li>\n</ul>\n<p>下图给出了Byteball网络结构的示意图：</p>\n<p><img src=\"http://oc7urqs4c.bkt.clouddn.com/2018-01-25-byteball_network-1.png\" alt=\"Byteball网络结构\"></p>\n<h3 id=\"轻节点及其验证过程\"><a href=\"#轻节点及其验证过程\" class=\"headerlink\" title=\"轻节点及其验证过程\"></a>轻节点及其验证过程</h3><p>从是否存储了完整的区块链数据角度来讲，节点也可以分为全节点和轻节点，全节点保存了完整的区块链数据，而轻节点没有。用户在安装钱包时可以选择是使用全节点还是轻节点。轻节点仅存储与其地址相关的那些单元，它需要从全节点上下载所需要的数据，请求条件包括它信任的见证人列表以及它关注的地址。</p>\n<blockquote>\n<p><strong>跳跃列表：</strong>假设直接位于主链上的球的MCI为$i$，如果$i\\bmod10=0$，则该球具有跳跃列表（<code>skiplist_balls</code>），跳跃列表中的值指向之前的球；对于$i$尾数具有的每一个$0$，跳跃列表中都有一个MCI值与之对应；跳跃列表中的MCI值等于在保持尾数$0$个数相同的情况下最接近$i$的MCI，比如$i=3000$时，对应的跳跃列表为$[2990, 2900, 2000]$。</p>\n<p><strong>跳跃距离：</strong>对于跳跃列表中的MCI值，它与当前球的MCI值的差值称为跳跃距离。</p>\n<p><strong>最近的球：</strong>当前节点已知的距离当前时刻最近的球（<code>last_ball</code>），每个单元在发送时必须包含其已知的最近的球。</p>\n</blockquote>\n<p>全节点接收到轻节点发送的见证人列表和关注地址，在其存储单元的数据库中搜索与轻节点关注地址相关的单元。同时，对于每一个相关的单元，全节点构造一条证据链，构造方法如下：</p>\n<ol>\n<li>沿着主链回溯，当已收集到轻节点给定见证人列表中的绝大部分见证人时停止（<strong>这是寻找见证人的过程</strong>），记录这些主链上的单元，记作单元集合$C$；</li>\n<li>选择单元集合$C$中时间最早的单元（也是MCI最小的单元），获取其<code>last_ball</code>；</li>\n<li>从<code>last_ball</code>这个单元开始沿着主链回溯，直至遇见包含<code>skiplist_balls</code>的球停止，记录这些主链上的球，记作球集合$B$；</li>\n<li>使用<code>skiplist_balls</code>继续沿主链回溯，跳转到<code>skiplist_balls</code>中跳跃距离最大的球（<strong>这是不断加速跳跃的过程</strong>）；</li>\n<li>重复步骤4，当下一次跳跃超过目标单元时，减小跳跃距离（<strong>这是降速跳跃的过程，极限情况下，不使用<code>skiplist_balls</code>回溯，只利用父单元进行回溯</strong>），直到目标单元停止。</li>\n</ol>\n<p>对于轻节点而言，全节点给出的证据链是可信的，主要有以下两个原因：</p>\n<ol>\n<li>证据链开始的那些单元包含了轻节点信任的见证人发出的单元；</li>\n<li>证据链中的连接使用的是<code>parent_units</code>（寻找见证人过程）、<code>last_ball</code>、<code>skiplist_balls</code>、<code>parent_balls</code>。</li>\n</ol>\n<p>因此，通过证据链的方式，轻节点可以判断某个单元是否有效。</p>\n<h3 id=\"端到端加密通道\"><a href=\"#端到端加密通道\" class=\"headerlink\" title=\"端到端加密通道\"></a>端到端加密通道</h3><p>中枢节点Hub用于为不同的用户设备之间提供可靠的端到端加密数据通道，有点类似邮件服务器。Hub为用户设备提供存储转发服务，用户设备可以选择连接到不同的Hub。用户设备使用websocket连接到到Hub，并采用TLS加密。Hub一旦收到发往某个设备地址的消息，它就会立即转发，转发成功后删除消息。</p>\n<p>设备地址是用于标识用户设备的，从而接收其它设备发送的消息，类似于邮件地址。设备地址与钱包地址不同，可以在不同的设备上使用相同的钱包地址。每个设备保存一把永久性的私钥，其对应的公钥做Hash后进行BASE32编码得到设备地址。为了和钱包地址区分开来，设备地址在其开始位置添加0作为标识（0本身并不是BASE32字符）。完整的设备地址还要包括Hub名称，比如<code>DEVICEADDRESS@hubname.com</code>。当切换到不同的Hub是，<code>@</code>之间的地址是保持不变的。</p>\n<p>假设发送消息的设备记作<code>sender</code>，接收消息的设备记作<code>receiver</code>，<code>receiver</code>所连接的Hub为<code>hub</code>。那么，当<code>sender</code>想要与<code>receiver</code>进行通信时，它需要进行以下操作：</p>\n<ol>\n<li><code>sender</code>修改其Hub地址为<code>hub</code>，默认情况下所有设备连接的都是<code>wss://byteball.org/bb</code>；</li>\n<li><code>sender</code>与<code>receiver</code>进行配对，可以使用扫描二维码、配对字符串、或者使用<code>byteball://</code>起始的链接。</li>\n</ol>\n<p>所有设备之间的通信均采用了端到端加密（ECDH+AES）和数字签名（ECDSA）。作为通信的唯一中间人，Hub也无法查看或者修改消息内容，为了提高转发的安全性，设备会生成一个临时私钥，并将对应的公钥上传至它连接的Hub上。同时，设备可以定时地更换临时私钥和公钥。</p>\n<p>因此，<code>sender</code>在向<code>receiver</code>发送消息时，它需要完成以下步骤：</p>\n<ol>\n<li>与<code>hub</code>连接；</li>\n<li>从<code>hub</code>获取<code>receiver</code>的临时公钥；</li>\n<li>生成一次性的密钥对；</li>\n<li>根据一次性私钥和<code>receiver</code>的临时公钥生成ECDH密钥；</li>\n<li>使用ECDH密钥对消息进行AES加密；</li>\n<li>添加一次性公钥；</li>\n<li>使用设备私钥对整个消息进行签名；</li>\n<li>将消息发送给<code>hub</code></li>\n</ol>\n<p>对于<code>receiver</code>，它首先需要验证消息的签名，然后使用<code>sender</code>的一次性公钥和本地的临时私钥解密消息，从而获得消息的内容。</p>\n<p>基于Hub的设备端到端加密消息通道可以用于设备之间通信，设备之间相互发送的消息不存入Byteball数据库中。用户可以利用该通道来发送加密文本消息、多签名交易、隐私资产（比如blackbytes）等。</p>\n"},{"title":"DAG Blockchain之Byteball原理解析（五）-完结","date":"2018-01-30T10:10:55.000Z","_content":"\n## Byteball的应用\n\n### 数字资产\n\nByteball本质上是基于DAG的分布式数据库，数据状态一旦确定则不可逆转。在各种类型的数据中，具有社会普遍意义的数据是比较有价值的，比如个人资产数据。在Byteball中，资产可以发布、转移以及交换，类似于Byteball的基本货币`bytes`。资产可以代表任何有价值的东西，比如债务、股票、会员积分、通话时间、商品、其它加密货币等。\n\n定义新资产的消息格式为：\n\n```json\nunit: {\n  ...\n  messages: [\n    ...\n    {\n      app: \"asset\",\n      payload_location: \"inline\",\n      payload_hash: \"hash of payload\",\n      payload: {\n        cap: 1000000,\n        is_private: false,\n        is_transferrable: true,\n        auto_destroy: false,\n        fixed_denominations: false,\n        issued_by_definer_only: true,\n        cosigned_by_definer: false,\n        spender_name_attested: true,\n        attestors: [\n          \"2QLYLKHMUG237QG36Z6AWLVH4KQ4MEY6\",\n          \"X5ZHWBYBF4TUYS35HU3ROVDQJC772ZMG\"\n        ]\n      }\n    },\n    ...\n  ],\n  ...\n}\n```\n\n在定义新资产时，可以设置以下属性：\n\n- `cap`：资产总量，比如`bytes`的总量为$10^{15}$\n- `is_private`：资产转移是否公开，比如`bytes`为公开\n- `is_transferrable`：资产是否可以在无发行方允许的条件下进行流通，如果不可流通，则资产的收发方中必须有发行方，比如`bytes`为可流通\n- `auto_destroy`：资产在发送回发行方时是否自动销毁，比如`bytes`为不自动销毁\n- `fixed_denominations`：资产是否以固定面额进行流通（类似纸币），比如`bytes`可以以任意金额流通\n- `issued_by_definer_only`：资产是否仅由发行方发布，比如`bytes`均在创世单元中发布\n- `cosigned_by_definer`：资产在每次转移时是否必须由发行方共同签名，比如`bytes`是不需要的\n- `spender_attested`：资产在使用时用户是否需要通过认证，比如`bytes`是不需要的\n- `attestors`：受资产发行方认可的认证地址，可以在后续过程中修改\n- `denominations`：如果资产具有固定面额，定义面额种类以及各类别总量\n- `transfer_condition`：资产转移需要的额外条件，语法与地址定义脚本相同（除了不使用`sig`之外）\n- `issue_condition`：资产发布需要的额外条件\n\n在定义资产时，每个单元中最多只能有一条`asset`消息。当资产定义单元发布后，后续都通过引用该单元的hash来引用该资产。资产只能定义一次，除了`attestors`之外均不能进行修改。资产定义的解释权在发行方，其具体含义由其进行解释。资产定义中的不同属性的组合可以适用不同的场景。\n\n发布资产的消息格式为：\n\n```json\nunit: {\n  ...\n  messages: [\n    ...\n    {\n      app: \"payment\",\n      payload_location: \"inline\",\n      payload_hash: \"hash of payload\",\n      payload: {\n        asset: \"hash of unit where the asset was defined\",\n        inputs: [\n          {\n            type: \"issue\",\n            amount: 1000000,\n            serial_number: 1,\n            address: \"ISSUER ADDRESS\" // only when multi-authored\n          },\n          ...\n        ],\n        outputs: [\n          {\n            address: \"BENEFICIARY ADDRESS\",\n            amount: 12345\n          },\n          ...\n        ]\n      }\n    },\n    ...\n  ],\n  ...\n}\n```\n\n总量有限的资产必须在一个交易中全部发布，比如，所有的`bytes`都是在创世单元中发布的。如果资产总量有限，发布时`serial_number`必须为1；如果资产总量不受限，每次发布时`serial_number`必须保证不同。\n\n转移资产与`bytes`类似，只是需要加上资产的ID，其消息格式为：\n\n```json\nunit: {\n  ...\n  messages: [\n    ...\n    {\n      app: \"payment\",\n      payload_location: \"inline\",\n      payload_hash: \"hash of payload\",\n      payload: {\n        asset: \"hash of unit where the asset was defined\",\n        inputs: [\n          {\n            unit: \"hash of source unit\",\n            message_index: 0,\n            output_index: 1\n          },\n          ...\n        ],\n        outputs: [\n          {\n            address: \"BENEFICIARY ADDRESS\",\n            amount: 12345\n          },\n          ...\n        ]\n      }\n    },\n    ...\n  ],\n  ...\n}\n```\n\n\n\n### 隐私资产\n\n公开资产在转移过程中，其内容在交易中是完全公开的。而对于隐私财产，在转移时，仅发送特定时间点资产转移的证据；同时，发送者通过私有通道把资产发送给接收者；接收者可以通过区块链上的资产转移证据来验证是否得到该笔资产。\n\n为了解决双花问题，需要在单元增加新的字段`spend_proof`，要求：\n\n- 它仅依赖于其所花费的输出，相同的输出将产生相同的`spend_proof`\n- 无法通过它逆向推断出所花费输出的任何信息\n\n例如采用如下方式生成`spend_proof`： \n\n```json\nspend_proof = hash({\n  asset: payload.asset,\n  unit: input.unit,\n  message_index: input.message_index,\n  output_index: input.output_index,\n  address: src_output.address,\n  amount: src_output.amount,\n  blinding: src_output.blinding\n})\n```\n\n其中，`payload.asset`表示需要转移的资产，`input`则表示花费输出`src_output`的输入。隐私资产的输出必须包含扰乱因子`blinding`，它使得无法通过`spend_proof`来逆向推到出其使用了哪个输出。\n\n对于隐私资产的发行来讲，其`spend_proof`为：\n\n```json\nspend_proof = hash({\n  asset: payload.asset,\n  address: \"ISSUER ADDRESS\",\n  serial_number: input.serial_number, // always 1 for capped assets\n  amount: input.amount, // issue amount\n  denomination: 1 // always 1 for arbitrary-amounts payments\n})\n```\n\n在发行隐私资产时，由于需要公开表明已发行该资产，因此不需要添加扰乱因子。在资产传递过程中，发送者已知扰乱因子，虽然他可以知道接收者是否花费了这笔资产，但是他无法知道这笔资产的下一个接收者是谁，也就无法继续跟踪该笔资产的进一步流向了。\n\n`spend_proof`需要添加到区块链单元中，其格式为：\n\n```json\nunit: {\n  ...\n  spend_proofs: [\n    {\n      spend_proof: \"the above hash in base64\",\n      address: \"SPENDING ADDRESS\" // only if multi-authored\n    },\n    ...\n  ],\n  ...\n}\n```\n\n在发送隐私资产时，发送者需要完成以下几件事情：\n\n- 对每个输出添加扰乱因子\n- 将隐私资产通过私有通道发送给接收者，以及该资产传递所在的区块链单元\n- 对于单元中每个输入，计算相应的`spend_proof`并加入单元中\n\n接收者需要检查两件事情：\n\n- 检查收到的隐私资产的`hash`值是否与区块链单元中的`payload_hash`相同\n- 检查通过收到的隐私资产计算得到的`spend_proof`是否与区块链单元中的匹配\n\n接收者可以验证整个资产转移的过程，并能够回溯到该资产的发布单元。\n\nByteball中提供了一种隐私数字资产`blackbytes`，其定义如下所示：\n\n```json\n{\n  cap: 2,111,100,000,000,000,\n  is_private: true,\n  is_transferrable: true,\n  auto_destroy: false,\n  fixed_denominations: true,\n  issued_by_definer_only: true,\n  cosigned_by_definer: false,\n  spender_name_attested: false,\n  denominations: [\n    {denomination: 1, count_coins: 10,000,000,000},\n    {denomination: 2, count_coins: 20,000,000,000},\n    {denomination: 5, count_coins: 10,000,000,000},\n    {denomination: 10, count_coins: 10,000,000,000},\n    {denomination: 20, count_coins: 20,000,000,000},\n    {denomination: 50, count_coins: 10,000,000,000},\n    {denomination: 100, count_coins: 10,000,000,000},\n    {denomination: 200, count_coins: 20,000,000,000},\n    {denomination: 500, count_coins: 10,000,000,000},\n    {denomination: 1000, count_coins: 10,000,000,000},\n    {denomination: 2000, count_coins: 20,000,000,000},\n    {denomination: 5000, count_coins: 10,000,000,000},\n    {denomination: 10000, count_coins: 10,000,000,000},\n    {denomination: 20000, count_coins: 20,000,000,000},\n    {denomination: 50000, count_coins: 10,000,000,000},\n    {denomination: 100000, count_coins: 10,000,000,000}\n  ]\n}\n```\n\n\n\n### 数据\n\n#### 非结构化数据（文本）\n\n用户可以在Byteball中存储文本信息，消息格式为：\n\n```json\nunit: {\n  ...\n  messages: [\n    ...\n    {\n      app: \"text\",\n      payload_location: \"inline\",\n      payload_hash: \"hash of payload\",\n      payload: \"any text\"\n    },\n    ...\n  ],\n  ...\n}\n```\n\n文本可以是任意内容：用户可以利用这个发布不能被篡改的公告、微博等等；也可以存储一些非明文的内容，比如合约的hash值之类的。\n\n#### 结构化数据\n\n用户也可以使用Byteball存储任意的结构化数据，消息格式为：\n\n```json\nunit: {\n  ...\n  messages: [\n    ...\n    {\n      app: \"data\",\n      payload_location: \"inline\",\n      payload_hash: \"hash of payload\",\n      payload: {\n        key: \"value\",\n        another_key: {\n          subkey: \"other value\",\n          another_subkey: 232\n        }\n       }\n     },\n     ...\n  ],\n...\n}\n```\n\n\n\n### 投票\n\n用户可以使用Byteball发起投票，消息格式为：\n\n```json\nunit: {\n  ...\n  messages: [\n    ...\n    {\n      app: \"poll\",\n      payload_location: \"inline\",\n      payload_hash: \"hash of payload\",\n      payload: {\n        question: \"Should the United Kingdom remain a member of the European Union or leave the European Union?\",\n        choices: [\"Leave\", \"Remain\"]\n      }\n    },\n    ...\n  ],\n  ...\n}\n```\n\n同时，用户可以响应投票，其消息格式为：\n\n```json\nunit: {\n  ...\n  messages: [\n    ...\n    {\n      app: \"vote\",\n      payload_location: \"inline\",\n      payload_hash: \"hash of payload\",\n      payload: {\n        unit: \"hash of the unit where the poll was defined\",\n        choice: \"Leave\"\n      }\n    },\n    ...\n  ],\n  ...\n}\n```\n\n投票的有效性需要由发起投票方来决定，Byteball仅仅检查投票选项是否在给定集合内。比如，如果发起投票方要求只允许经过认证的或在白名单上的用户进行投票，那些无效的投票也会被Byteball记录，需要由发起方自行判别。\n\n\n\n### 认证\n\n用户可以通过Byteball发布和存储个人信息，消息格式为\n\n```json\nunit: {\n  ...\n  messages: [\n  ...\n    {\n      app: \"profile\",\n      payload_location: \"inline\",\n      payload_hash: \"hash of payload\",\n      payload: {\n        name: \"Joe Average\",\n        emails: [\"joe@example.com\", \"joe@domain.com\"],\n        twitter: \"joe\"\n      }\n    },\n    ...\n  ],\n  ...\n}\n```\n\n用户可以发布任意的个人信息，但是其真实性是无法保证的，只有通过认证的信息才是可信的。\n\n认证消息用于确定用户发布的个人信息的真实性，其消息格式为\n\n```json\nunit: {\n  ...\n  messages: [\n    ...\n    {\n      app: \"attestation\",\n      payload_location: \"inline\",\n      payload_hash: \"hash of payload\",\n      payload: {\n        address: \"ADDRESS OF THE SUBJECT\"\n        profile: {\n          name: \"Joe Average\",\n          emails: [\"joe@example.com\"]\n        }\n      }\n    },\n    ...\n  ],\n  ...\n}\n```\n\n认证消息中的个人信息不一定与用户自己发布的信息一致，事实上，用户甚至没有自己发布过个人信息。\n\nByteball中的认证者类似于现实世界中的实名认证，认证某个地址是归属于某个个人或组织。认证方可以向被认证方收取少量费用。一般来讲，见证人节点是需要通过认证的，这样可以提高手信任度。被认证方可以选择不公布认证信息，而只在Byteball中保存认证证据，并在合适的时机公布。\n\n\n\n## 总结\n\nByteball是一种基于DAG结构的不可逆分布式数据库，它可以存储任何有价值的数据。Byteball中每一个新的数据单元都间接地确认了之前所有数据单元的存在性。对已达到稳定状态的数据单元的修改将变得不可实现。\n\n相比于BTC和ETH，Byteball使用了DAG结构作为底层，并使用见证人作为共识机制，从而具有以下特点：\n\n- 没有区块，只有交易单元，确认速度快\n- 极少的手续费\n- 交易单元具有最终状态\n\nByteball中发行了一种用于支付存储的货币`bytes`，支付费用与所需要存储的数据大小相关。自由开发者可以在Byteball平台上自由开发各种应用，根据不同的应用场景发布相应的数字资产。在Byteball上面可以轻松地实现去中心化交易所、互助保险、赌球、彩票、投票、认证等等功能。Byteball还提供了类似telegram的加密端到端通道，可以实现用户之间的隐私通信。Byteball最与众不同的是，它提供了一种隐私数字资产`blackbytes`，可以完整地保护使用者的隐私信息。\n\n总的来说，不管从使用技术的先进性，还是其提供功能的多样性，Byteball都是区块链领域中的佼佼者。\n\n\n","source":"_posts/2018-01-30-byteball5.md","raw":"---\ntitle: DAG Blockchain之Byteball原理解析（五）-完结\ndate: 2018-01-30 18:10:55\ncategories: 谈点区块链\ntags:\n  - dag\n  - blockchain\n  - byteball\n  - bitcoin\n---\n\n## Byteball的应用\n\n### 数字资产\n\nByteball本质上是基于DAG的分布式数据库，数据状态一旦确定则不可逆转。在各种类型的数据中，具有社会普遍意义的数据是比较有价值的，比如个人资产数据。在Byteball中，资产可以发布、转移以及交换，类似于Byteball的基本货币`bytes`。资产可以代表任何有价值的东西，比如债务、股票、会员积分、通话时间、商品、其它加密货币等。\n\n定义新资产的消息格式为：\n\n```json\nunit: {\n  ...\n  messages: [\n    ...\n    {\n      app: \"asset\",\n      payload_location: \"inline\",\n      payload_hash: \"hash of payload\",\n      payload: {\n        cap: 1000000,\n        is_private: false,\n        is_transferrable: true,\n        auto_destroy: false,\n        fixed_denominations: false,\n        issued_by_definer_only: true,\n        cosigned_by_definer: false,\n        spender_name_attested: true,\n        attestors: [\n          \"2QLYLKHMUG237QG36Z6AWLVH4KQ4MEY6\",\n          \"X5ZHWBYBF4TUYS35HU3ROVDQJC772ZMG\"\n        ]\n      }\n    },\n    ...\n  ],\n  ...\n}\n```\n\n在定义新资产时，可以设置以下属性：\n\n- `cap`：资产总量，比如`bytes`的总量为$10^{15}$\n- `is_private`：资产转移是否公开，比如`bytes`为公开\n- `is_transferrable`：资产是否可以在无发行方允许的条件下进行流通，如果不可流通，则资产的收发方中必须有发行方，比如`bytes`为可流通\n- `auto_destroy`：资产在发送回发行方时是否自动销毁，比如`bytes`为不自动销毁\n- `fixed_denominations`：资产是否以固定面额进行流通（类似纸币），比如`bytes`可以以任意金额流通\n- `issued_by_definer_only`：资产是否仅由发行方发布，比如`bytes`均在创世单元中发布\n- `cosigned_by_definer`：资产在每次转移时是否必须由发行方共同签名，比如`bytes`是不需要的\n- `spender_attested`：资产在使用时用户是否需要通过认证，比如`bytes`是不需要的\n- `attestors`：受资产发行方认可的认证地址，可以在后续过程中修改\n- `denominations`：如果资产具有固定面额，定义面额种类以及各类别总量\n- `transfer_condition`：资产转移需要的额外条件，语法与地址定义脚本相同（除了不使用`sig`之外）\n- `issue_condition`：资产发布需要的额外条件\n\n在定义资产时，每个单元中最多只能有一条`asset`消息。当资产定义单元发布后，后续都通过引用该单元的hash来引用该资产。资产只能定义一次，除了`attestors`之外均不能进行修改。资产定义的解释权在发行方，其具体含义由其进行解释。资产定义中的不同属性的组合可以适用不同的场景。\n\n发布资产的消息格式为：\n\n```json\nunit: {\n  ...\n  messages: [\n    ...\n    {\n      app: \"payment\",\n      payload_location: \"inline\",\n      payload_hash: \"hash of payload\",\n      payload: {\n        asset: \"hash of unit where the asset was defined\",\n        inputs: [\n          {\n            type: \"issue\",\n            amount: 1000000,\n            serial_number: 1,\n            address: \"ISSUER ADDRESS\" // only when multi-authored\n          },\n          ...\n        ],\n        outputs: [\n          {\n            address: \"BENEFICIARY ADDRESS\",\n            amount: 12345\n          },\n          ...\n        ]\n      }\n    },\n    ...\n  ],\n  ...\n}\n```\n\n总量有限的资产必须在一个交易中全部发布，比如，所有的`bytes`都是在创世单元中发布的。如果资产总量有限，发布时`serial_number`必须为1；如果资产总量不受限，每次发布时`serial_number`必须保证不同。\n\n转移资产与`bytes`类似，只是需要加上资产的ID，其消息格式为：\n\n```json\nunit: {\n  ...\n  messages: [\n    ...\n    {\n      app: \"payment\",\n      payload_location: \"inline\",\n      payload_hash: \"hash of payload\",\n      payload: {\n        asset: \"hash of unit where the asset was defined\",\n        inputs: [\n          {\n            unit: \"hash of source unit\",\n            message_index: 0,\n            output_index: 1\n          },\n          ...\n        ],\n        outputs: [\n          {\n            address: \"BENEFICIARY ADDRESS\",\n            amount: 12345\n          },\n          ...\n        ]\n      }\n    },\n    ...\n  ],\n  ...\n}\n```\n\n\n\n### 隐私资产\n\n公开资产在转移过程中，其内容在交易中是完全公开的。而对于隐私财产，在转移时，仅发送特定时间点资产转移的证据；同时，发送者通过私有通道把资产发送给接收者；接收者可以通过区块链上的资产转移证据来验证是否得到该笔资产。\n\n为了解决双花问题，需要在单元增加新的字段`spend_proof`，要求：\n\n- 它仅依赖于其所花费的输出，相同的输出将产生相同的`spend_proof`\n- 无法通过它逆向推断出所花费输出的任何信息\n\n例如采用如下方式生成`spend_proof`： \n\n```json\nspend_proof = hash({\n  asset: payload.asset,\n  unit: input.unit,\n  message_index: input.message_index,\n  output_index: input.output_index,\n  address: src_output.address,\n  amount: src_output.amount,\n  blinding: src_output.blinding\n})\n```\n\n其中，`payload.asset`表示需要转移的资产，`input`则表示花费输出`src_output`的输入。隐私资产的输出必须包含扰乱因子`blinding`，它使得无法通过`spend_proof`来逆向推到出其使用了哪个输出。\n\n对于隐私资产的发行来讲，其`spend_proof`为：\n\n```json\nspend_proof = hash({\n  asset: payload.asset,\n  address: \"ISSUER ADDRESS\",\n  serial_number: input.serial_number, // always 1 for capped assets\n  amount: input.amount, // issue amount\n  denomination: 1 // always 1 for arbitrary-amounts payments\n})\n```\n\n在发行隐私资产时，由于需要公开表明已发行该资产，因此不需要添加扰乱因子。在资产传递过程中，发送者已知扰乱因子，虽然他可以知道接收者是否花费了这笔资产，但是他无法知道这笔资产的下一个接收者是谁，也就无法继续跟踪该笔资产的进一步流向了。\n\n`spend_proof`需要添加到区块链单元中，其格式为：\n\n```json\nunit: {\n  ...\n  spend_proofs: [\n    {\n      spend_proof: \"the above hash in base64\",\n      address: \"SPENDING ADDRESS\" // only if multi-authored\n    },\n    ...\n  ],\n  ...\n}\n```\n\n在发送隐私资产时，发送者需要完成以下几件事情：\n\n- 对每个输出添加扰乱因子\n- 将隐私资产通过私有通道发送给接收者，以及该资产传递所在的区块链单元\n- 对于单元中每个输入，计算相应的`spend_proof`并加入单元中\n\n接收者需要检查两件事情：\n\n- 检查收到的隐私资产的`hash`值是否与区块链单元中的`payload_hash`相同\n- 检查通过收到的隐私资产计算得到的`spend_proof`是否与区块链单元中的匹配\n\n接收者可以验证整个资产转移的过程，并能够回溯到该资产的发布单元。\n\nByteball中提供了一种隐私数字资产`blackbytes`，其定义如下所示：\n\n```json\n{\n  cap: 2,111,100,000,000,000,\n  is_private: true,\n  is_transferrable: true,\n  auto_destroy: false,\n  fixed_denominations: true,\n  issued_by_definer_only: true,\n  cosigned_by_definer: false,\n  spender_name_attested: false,\n  denominations: [\n    {denomination: 1, count_coins: 10,000,000,000},\n    {denomination: 2, count_coins: 20,000,000,000},\n    {denomination: 5, count_coins: 10,000,000,000},\n    {denomination: 10, count_coins: 10,000,000,000},\n    {denomination: 20, count_coins: 20,000,000,000},\n    {denomination: 50, count_coins: 10,000,000,000},\n    {denomination: 100, count_coins: 10,000,000,000},\n    {denomination: 200, count_coins: 20,000,000,000},\n    {denomination: 500, count_coins: 10,000,000,000},\n    {denomination: 1000, count_coins: 10,000,000,000},\n    {denomination: 2000, count_coins: 20,000,000,000},\n    {denomination: 5000, count_coins: 10,000,000,000},\n    {denomination: 10000, count_coins: 10,000,000,000},\n    {denomination: 20000, count_coins: 20,000,000,000},\n    {denomination: 50000, count_coins: 10,000,000,000},\n    {denomination: 100000, count_coins: 10,000,000,000}\n  ]\n}\n```\n\n\n\n### 数据\n\n#### 非结构化数据（文本）\n\n用户可以在Byteball中存储文本信息，消息格式为：\n\n```json\nunit: {\n  ...\n  messages: [\n    ...\n    {\n      app: \"text\",\n      payload_location: \"inline\",\n      payload_hash: \"hash of payload\",\n      payload: \"any text\"\n    },\n    ...\n  ],\n  ...\n}\n```\n\n文本可以是任意内容：用户可以利用这个发布不能被篡改的公告、微博等等；也可以存储一些非明文的内容，比如合约的hash值之类的。\n\n#### 结构化数据\n\n用户也可以使用Byteball存储任意的结构化数据，消息格式为：\n\n```json\nunit: {\n  ...\n  messages: [\n    ...\n    {\n      app: \"data\",\n      payload_location: \"inline\",\n      payload_hash: \"hash of payload\",\n      payload: {\n        key: \"value\",\n        another_key: {\n          subkey: \"other value\",\n          another_subkey: 232\n        }\n       }\n     },\n     ...\n  ],\n...\n}\n```\n\n\n\n### 投票\n\n用户可以使用Byteball发起投票，消息格式为：\n\n```json\nunit: {\n  ...\n  messages: [\n    ...\n    {\n      app: \"poll\",\n      payload_location: \"inline\",\n      payload_hash: \"hash of payload\",\n      payload: {\n        question: \"Should the United Kingdom remain a member of the European Union or leave the European Union?\",\n        choices: [\"Leave\", \"Remain\"]\n      }\n    },\n    ...\n  ],\n  ...\n}\n```\n\n同时，用户可以响应投票，其消息格式为：\n\n```json\nunit: {\n  ...\n  messages: [\n    ...\n    {\n      app: \"vote\",\n      payload_location: \"inline\",\n      payload_hash: \"hash of payload\",\n      payload: {\n        unit: \"hash of the unit where the poll was defined\",\n        choice: \"Leave\"\n      }\n    },\n    ...\n  ],\n  ...\n}\n```\n\n投票的有效性需要由发起投票方来决定，Byteball仅仅检查投票选项是否在给定集合内。比如，如果发起投票方要求只允许经过认证的或在白名单上的用户进行投票，那些无效的投票也会被Byteball记录，需要由发起方自行判别。\n\n\n\n### 认证\n\n用户可以通过Byteball发布和存储个人信息，消息格式为\n\n```json\nunit: {\n  ...\n  messages: [\n  ...\n    {\n      app: \"profile\",\n      payload_location: \"inline\",\n      payload_hash: \"hash of payload\",\n      payload: {\n        name: \"Joe Average\",\n        emails: [\"joe@example.com\", \"joe@domain.com\"],\n        twitter: \"joe\"\n      }\n    },\n    ...\n  ],\n  ...\n}\n```\n\n用户可以发布任意的个人信息，但是其真实性是无法保证的，只有通过认证的信息才是可信的。\n\n认证消息用于确定用户发布的个人信息的真实性，其消息格式为\n\n```json\nunit: {\n  ...\n  messages: [\n    ...\n    {\n      app: \"attestation\",\n      payload_location: \"inline\",\n      payload_hash: \"hash of payload\",\n      payload: {\n        address: \"ADDRESS OF THE SUBJECT\"\n        profile: {\n          name: \"Joe Average\",\n          emails: [\"joe@example.com\"]\n        }\n      }\n    },\n    ...\n  ],\n  ...\n}\n```\n\n认证消息中的个人信息不一定与用户自己发布的信息一致，事实上，用户甚至没有自己发布过个人信息。\n\nByteball中的认证者类似于现实世界中的实名认证，认证某个地址是归属于某个个人或组织。认证方可以向被认证方收取少量费用。一般来讲，见证人节点是需要通过认证的，这样可以提高手信任度。被认证方可以选择不公布认证信息，而只在Byteball中保存认证证据，并在合适的时机公布。\n\n\n\n## 总结\n\nByteball是一种基于DAG结构的不可逆分布式数据库，它可以存储任何有价值的数据。Byteball中每一个新的数据单元都间接地确认了之前所有数据单元的存在性。对已达到稳定状态的数据单元的修改将变得不可实现。\n\n相比于BTC和ETH，Byteball使用了DAG结构作为底层，并使用见证人作为共识机制，从而具有以下特点：\n\n- 没有区块，只有交易单元，确认速度快\n- 极少的手续费\n- 交易单元具有最终状态\n\nByteball中发行了一种用于支付存储的货币`bytes`，支付费用与所需要存储的数据大小相关。自由开发者可以在Byteball平台上自由开发各种应用，根据不同的应用场景发布相应的数字资产。在Byteball上面可以轻松地实现去中心化交易所、互助保险、赌球、彩票、投票、认证等等功能。Byteball还提供了类似telegram的加密端到端通道，可以实现用户之间的隐私通信。Byteball最与众不同的是，它提供了一种隐私数字资产`blackbytes`，可以完整地保护使用者的隐私信息。\n\n总的来说，不管从使用技术的先进性，还是其提供功能的多样性，Byteball都是区块链领域中的佼佼者。\n\n\n","slug":"byteball5","published":1,"updated":"2018-01-30T10:15:59.313Z","_id":"cjd1hh9p900008ieplfpkomtb","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Byteball的应用\"><a href=\"#Byteball的应用\" class=\"headerlink\" title=\"Byteball的应用\"></a>Byteball的应用</h2><h3 id=\"数字资产\"><a href=\"#数字资产\" class=\"headerlink\" title=\"数字资产\"></a>数字资产</h3><p>Byteball本质上是基于DAG的分布式数据库，数据状态一旦确定则不可逆转。在各种类型的数据中，具有社会普遍意义的数据是比较有价值的，比如个人资产数据。在Byteball中，资产可以发布、转移以及交换，类似于Byteball的基本货币<code>bytes</code>。资产可以代表任何有价值的东西，比如债务、股票、会员积分、通话时间、商品、其它加密货币等。</p>\n<p>定义新资产的消息格式为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unit: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  messages: [</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      app: \"asset\",</span><br><span class=\"line\">      payload_location: \"inline\",</span><br><span class=\"line\">      payload_hash: \"hash of payload\",</span><br><span class=\"line\">      payload: &#123;</span><br><span class=\"line\">        cap: 1000000,</span><br><span class=\"line\">        is_private: false,</span><br><span class=\"line\">        is_transferrable: true,</span><br><span class=\"line\">        auto_destroy: false,</span><br><span class=\"line\">        fixed_denominations: false,</span><br><span class=\"line\">        issued_by_definer_only: true,</span><br><span class=\"line\">        cosigned_by_definer: false,</span><br><span class=\"line\">        spender_name_attested: true,</span><br><span class=\"line\">        attestors: [</span><br><span class=\"line\">          \"2QLYLKHMUG237QG36Z6AWLVH4KQ4MEY6\",</span><br><span class=\"line\">          <span class=\"string\">\"X5ZHWBYBF4TUYS35HU3ROVDQJC772ZMG\"</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在定义新资产时，可以设置以下属性：</p>\n<ul>\n<li><code>cap</code>：资产总量，比如<code>bytes</code>的总量为$10^{15}$</li>\n<li><code>is_private</code>：资产转移是否公开，比如<code>bytes</code>为公开</li>\n<li><code>is_transferrable</code>：资产是否可以在无发行方允许的条件下进行流通，如果不可流通，则资产的收发方中必须有发行方，比如<code>bytes</code>为可流通</li>\n<li><code>auto_destroy</code>：资产在发送回发行方时是否自动销毁，比如<code>bytes</code>为不自动销毁</li>\n<li><code>fixed_denominations</code>：资产是否以固定面额进行流通（类似纸币），比如<code>bytes</code>可以以任意金额流通</li>\n<li><code>issued_by_definer_only</code>：资产是否仅由发行方发布，比如<code>bytes</code>均在创世单元中发布</li>\n<li><code>cosigned_by_definer</code>：资产在每次转移时是否必须由发行方共同签名，比如<code>bytes</code>是不需要的</li>\n<li><code>spender_attested</code>：资产在使用时用户是否需要通过认证，比如<code>bytes</code>是不需要的</li>\n<li><code>attestors</code>：受资产发行方认可的认证地址，可以在后续过程中修改</li>\n<li><code>denominations</code>：如果资产具有固定面额，定义面额种类以及各类别总量</li>\n<li><code>transfer_condition</code>：资产转移需要的额外条件，语法与地址定义脚本相同（除了不使用<code>sig</code>之外）</li>\n<li><code>issue_condition</code>：资产发布需要的额外条件</li>\n</ul>\n<p>在定义资产时，每个单元中最多只能有一条<code>asset</code>消息。当资产定义单元发布后，后续都通过引用该单元的hash来引用该资产。资产只能定义一次，除了<code>attestors</code>之外均不能进行修改。资产定义的解释权在发行方，其具体含义由其进行解释。资产定义中的不同属性的组合可以适用不同的场景。</p>\n<p>发布资产的消息格式为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unit: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  messages: [</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      app: \"payment\",</span><br><span class=\"line\">      payload_location: \"inline\",</span><br><span class=\"line\">      payload_hash: \"hash of payload\",</span><br><span class=\"line\">      payload: &#123;</span><br><span class=\"line\">        asset: \"hash of unit where the asset was defined\",</span><br><span class=\"line\">        inputs: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            type: \"issue\",</span><br><span class=\"line\">            amount: 1000000,</span><br><span class=\"line\">            serial_number: 1,</span><br><span class=\"line\">            address: \"ISSUER ADDRESS\" // only when multi-authored</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          ...</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        outputs: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            address: \"BENEFICIARY ADDRESS\",</span><br><span class=\"line\">            amount: 12345</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          ...</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>总量有限的资产必须在一个交易中全部发布，比如，所有的<code>bytes</code>都是在创世单元中发布的。如果资产总量有限，发布时<code>serial_number</code>必须为1；如果资产总量不受限，每次发布时<code>serial_number</code>必须保证不同。</p>\n<p>转移资产与<code>bytes</code>类似，只是需要加上资产的ID，其消息格式为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unit: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  messages: [</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      app: \"payment\",</span><br><span class=\"line\">      payload_location: \"inline\",</span><br><span class=\"line\">      payload_hash: \"hash of payload\",</span><br><span class=\"line\">      payload: &#123;</span><br><span class=\"line\">        asset: \"hash of unit where the asset was defined\",</span><br><span class=\"line\">        inputs: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            unit: \"hash of source unit\",</span><br><span class=\"line\">            message_index: 0,</span><br><span class=\"line\">            output_index: 1</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          ...</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        outputs: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            address: \"BENEFICIARY ADDRESS\",</span><br><span class=\"line\">            amount: 12345</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          ...</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"隐私资产\"><a href=\"#隐私资产\" class=\"headerlink\" title=\"隐私资产\"></a>隐私资产</h3><p>公开资产在转移过程中，其内容在交易中是完全公开的。而对于隐私财产，在转移时，仅发送特定时间点资产转移的证据；同时，发送者通过私有通道把资产发送给接收者；接收者可以通过区块链上的资产转移证据来验证是否得到该笔资产。</p>\n<p>为了解决双花问题，需要在单元增加新的字段<code>spend_proof</code>，要求：</p>\n<ul>\n<li>它仅依赖于其所花费的输出，相同的输出将产生相同的<code>spend_proof</code></li>\n<li>无法通过它逆向推断出所花费输出的任何信息</li>\n</ul>\n<p>例如采用如下方式生成<code>spend_proof</code>： </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spend_proof = hash(&#123;</span><br><span class=\"line\">  asset: payload.asset,</span><br><span class=\"line\">  unit: input.unit,</span><br><span class=\"line\">  message_index: input.message_index,</span><br><span class=\"line\">  output_index: input.output_index,</span><br><span class=\"line\">  address: src_output.address,</span><br><span class=\"line\">  amount: src_output.amount,</span><br><span class=\"line\">  blinding: src_output.blinding</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>其中，<code>payload.asset</code>表示需要转移的资产，<code>input</code>则表示花费输出<code>src_output</code>的输入。隐私资产的输出必须包含扰乱因子<code>blinding</code>，它使得无法通过<code>spend_proof</code>来逆向推到出其使用了哪个输出。</p>\n<p>对于隐私资产的发行来讲，其<code>spend_proof</code>为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spend_proof = hash(&#123;</span><br><span class=\"line\">  asset: payload.asset,</span><br><span class=\"line\">  address: \"ISSUER ADDRESS\",</span><br><span class=\"line\">  serial_number: input.serial_number, // always 1 for capped assets</span><br><span class=\"line\">  amount: input.amount, // issue amount</span><br><span class=\"line\">  denomination: 1 // always 1 for arbitrary-amounts payments</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>在发行隐私资产时，由于需要公开表明已发行该资产，因此不需要添加扰乱因子。在资产传递过程中，发送者已知扰乱因子，虽然他可以知道接收者是否花费了这笔资产，但是他无法知道这笔资产的下一个接收者是谁，也就无法继续跟踪该笔资产的进一步流向了。</p>\n<p><code>spend_proof</code>需要添加到区块链单元中，其格式为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unit: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  spend_proofs: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      spend_proof: \"the above hash in base64\",</span><br><span class=\"line\">      address: \"SPENDING ADDRESS\" // only if multi-authored</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在发送隐私资产时，发送者需要完成以下几件事情：</p>\n<ul>\n<li>对每个输出添加扰乱因子</li>\n<li>将隐私资产通过私有通道发送给接收者，以及该资产传递所在的区块链单元</li>\n<li>对于单元中每个输入，计算相应的<code>spend_proof</code>并加入单元中</li>\n</ul>\n<p>接收者需要检查两件事情：</p>\n<ul>\n<li>检查收到的隐私资产的<code>hash</code>值是否与区块链单元中的<code>payload_hash</code>相同</li>\n<li>检查通过收到的隐私资产计算得到的<code>spend_proof</code>是否与区块链单元中的匹配</li>\n</ul>\n<p>接收者可以验证整个资产转移的过程，并能够回溯到该资产的发布单元。</p>\n<p>Byteball中提供了一种隐私数字资产<code>blackbytes</code>，其定义如下所示：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  cap: 2,111,100,000,000,000,</span><br><span class=\"line\">  is_private: true,</span><br><span class=\"line\">  is_transferrable: true,</span><br><span class=\"line\">  auto_destroy: false,</span><br><span class=\"line\">  fixed_denominations: true,</span><br><span class=\"line\">  issued_by_definer_only: true,</span><br><span class=\"line\">  cosigned_by_definer: false,</span><br><span class=\"line\">  spender_name_attested: false,</span><br><span class=\"line\">  denominations: [</span><br><span class=\"line\">    &#123;denomination: 1, count_coins: 10,000,000,000&#125;,</span><br><span class=\"line\">    &#123;denomination: 2, count_coins: 20,000,000,000&#125;,</span><br><span class=\"line\">    &#123;denomination: 5, count_coins: 10,000,000,000&#125;,</span><br><span class=\"line\">    &#123;denomination: 10, count_coins: 10,000,000,000&#125;,</span><br><span class=\"line\">    &#123;denomination: 20, count_coins: 20,000,000,000&#125;,</span><br><span class=\"line\">    &#123;denomination: 50, count_coins: 10,000,000,000&#125;,</span><br><span class=\"line\">    &#123;denomination: 100, count_coins: 10,000,000,000&#125;,</span><br><span class=\"line\">    &#123;denomination: 200, count_coins: 20,000,000,000&#125;,</span><br><span class=\"line\">    &#123;denomination: 500, count_coins: 10,000,000,000&#125;,</span><br><span class=\"line\">    &#123;denomination: 1000, count_coins: 10,000,000,000&#125;,</span><br><span class=\"line\">    &#123;denomination: 2000, count_coins: 20,000,000,000&#125;,</span><br><span class=\"line\">    &#123;denomination: 5000, count_coins: 10,000,000,000&#125;,</span><br><span class=\"line\">    &#123;denomination: 10000, count_coins: 10,000,000,000&#125;,</span><br><span class=\"line\">    &#123;denomination: 20000, count_coins: 20,000,000,000&#125;,</span><br><span class=\"line\">    &#123;denomination: 50000, count_coins: 10,000,000,000&#125;,</span><br><span class=\"line\">    &#123;denomination: 100000, count_coins: 10,000,000,000&#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"数据\"><a href=\"#数据\" class=\"headerlink\" title=\"数据\"></a>数据</h3><h4 id=\"非结构化数据（文本）\"><a href=\"#非结构化数据（文本）\" class=\"headerlink\" title=\"非结构化数据（文本）\"></a>非结构化数据（文本）</h4><p>用户可以在Byteball中存储文本信息，消息格式为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unit: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  messages: [</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      app: \"text\",</span><br><span class=\"line\">      payload_location: \"inline\",</span><br><span class=\"line\">      payload_hash: \"hash of payload\",</span><br><span class=\"line\">      payload: \"any text\"</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>文本可以是任意内容：用户可以利用这个发布不能被篡改的公告、微博等等；也可以存储一些非明文的内容，比如合约的hash值之类的。</p>\n<h4 id=\"结构化数据\"><a href=\"#结构化数据\" class=\"headerlink\" title=\"结构化数据\"></a>结构化数据</h4><p>用户也可以使用Byteball存储任意的结构化数据，消息格式为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unit: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  messages: [</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      app: \"data\",</span><br><span class=\"line\">      payload_location: \"inline\",</span><br><span class=\"line\">      payload_hash: \"hash of payload\",</span><br><span class=\"line\">      payload: &#123;</span><br><span class=\"line\">        key: \"value\",</span><br><span class=\"line\">        another_key: &#123;</span><br><span class=\"line\">          subkey: \"other value\",</span><br><span class=\"line\">          another_subkey: 232</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     ...</span><br><span class=\"line\">  ],</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"投票\"><a href=\"#投票\" class=\"headerlink\" title=\"投票\"></a>投票</h3><p>用户可以使用Byteball发起投票，消息格式为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unit: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  messages: [</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      app: \"poll\",</span><br><span class=\"line\">      payload_location: \"inline\",</span><br><span class=\"line\">      payload_hash: \"hash of payload\",</span><br><span class=\"line\">      payload: &#123;</span><br><span class=\"line\">        question: \"Should the United Kingdom remain a member of the European Union or leave the European Union?\",</span><br><span class=\"line\">        choices: [\"Leave\", \"Remain\"]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同时，用户可以响应投票，其消息格式为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unit: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  messages: [</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      app: \"vote\",</span><br><span class=\"line\">      payload_location: \"inline\",</span><br><span class=\"line\">      payload_hash: \"hash of payload\",</span><br><span class=\"line\">      payload: &#123;</span><br><span class=\"line\">        unit: \"hash of the unit where the poll was defined\",</span><br><span class=\"line\">        choice: \"Leave\"</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>投票的有效性需要由发起投票方来决定，Byteball仅仅检查投票选项是否在给定集合内。比如，如果发起投票方要求只允许经过认证的或在白名单上的用户进行投票，那些无效的投票也会被Byteball记录，需要由发起方自行判别。</p>\n<h3 id=\"认证\"><a href=\"#认证\" class=\"headerlink\" title=\"认证\"></a>认证</h3><p>用户可以通过Byteball发布和存储个人信息，消息格式为</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unit: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  messages: [</span><br><span class=\"line\">  ...</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      app: \"profile\",</span><br><span class=\"line\">      payload_location: \"inline\",</span><br><span class=\"line\">      payload_hash: \"hash of payload\",</span><br><span class=\"line\">      payload: &#123;</span><br><span class=\"line\">        name: \"Joe Average\",</span><br><span class=\"line\">        emails: [\"joe@example.com\", \"joe@domain.com\"],</span><br><span class=\"line\">        twitter: \"joe\"</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用户可以发布任意的个人信息，但是其真实性是无法保证的，只有通过认证的信息才是可信的。</p>\n<p>认证消息用于确定用户发布的个人信息的真实性，其消息格式为</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unit: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  messages: [</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      app: \"attestation\",</span><br><span class=\"line\">      payload_location: \"inline\",</span><br><span class=\"line\">      payload_hash: \"hash of payload\",</span><br><span class=\"line\">      payload: &#123;</span><br><span class=\"line\">        address: \"ADDRESS OF THE SUBJECT\"</span><br><span class=\"line\">        profile: &#123;</span><br><span class=\"line\">          name: \"Joe Average\",</span><br><span class=\"line\">          emails: [\"joe@example.com\"]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>认证消息中的个人信息不一定与用户自己发布的信息一致，事实上，用户甚至没有自己发布过个人信息。</p>\n<p>Byteball中的认证者类似于现实世界中的实名认证，认证某个地址是归属于某个个人或组织。认证方可以向被认证方收取少量费用。一般来讲，见证人节点是需要通过认证的，这样可以提高手信任度。被认证方可以选择不公布认证信息，而只在Byteball中保存认证证据，并在合适的时机公布。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>Byteball是一种基于DAG结构的不可逆分布式数据库，它可以存储任何有价值的数据。Byteball中每一个新的数据单元都间接地确认了之前所有数据单元的存在性。对已达到稳定状态的数据单元的修改将变得不可实现。</p>\n<p>相比于BTC和ETH，Byteball使用了DAG结构作为底层，并使用见证人作为共识机制，从而具有以下特点：</p>\n<ul>\n<li>没有区块，只有交易单元，确认速度快</li>\n<li>极少的手续费</li>\n<li>交易单元具有最终状态</li>\n</ul>\n<p>Byteball中发行了一种用于支付存储的货币<code>bytes</code>，支付费用与所需要存储的数据大小相关。自由开发者可以在Byteball平台上自由开发各种应用，根据不同的应用场景发布相应的数字资产。在Byteball上面可以轻松地实现去中心化交易所、互助保险、赌球、彩票、投票、认证等等功能。Byteball还提供了类似telegram的加密端到端通道，可以实现用户之间的隐私通信。Byteball最与众不同的是，它提供了一种隐私数字资产<code>blackbytes</code>，可以完整地保护使用者的隐私信息。</p>\n<p>总的来说，不管从使用技术的先进性，还是其提供功能的多样性，Byteball都是区块链领域中的佼佼者。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Byteball的应用\"><a href=\"#Byteball的应用\" class=\"headerlink\" title=\"Byteball的应用\"></a>Byteball的应用</h2><h3 id=\"数字资产\"><a href=\"#数字资产\" class=\"headerlink\" title=\"数字资产\"></a>数字资产</h3><p>Byteball本质上是基于DAG的分布式数据库，数据状态一旦确定则不可逆转。在各种类型的数据中，具有社会普遍意义的数据是比较有价值的，比如个人资产数据。在Byteball中，资产可以发布、转移以及交换，类似于Byteball的基本货币<code>bytes</code>。资产可以代表任何有价值的东西，比如债务、股票、会员积分、通话时间、商品、其它加密货币等。</p>\n<p>定义新资产的消息格式为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unit: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  messages: [</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      app: \"asset\",</span><br><span class=\"line\">      payload_location: \"inline\",</span><br><span class=\"line\">      payload_hash: \"hash of payload\",</span><br><span class=\"line\">      payload: &#123;</span><br><span class=\"line\">        cap: 1000000,</span><br><span class=\"line\">        is_private: false,</span><br><span class=\"line\">        is_transferrable: true,</span><br><span class=\"line\">        auto_destroy: false,</span><br><span class=\"line\">        fixed_denominations: false,</span><br><span class=\"line\">        issued_by_definer_only: true,</span><br><span class=\"line\">        cosigned_by_definer: false,</span><br><span class=\"line\">        spender_name_attested: true,</span><br><span class=\"line\">        attestors: [</span><br><span class=\"line\">          \"2QLYLKHMUG237QG36Z6AWLVH4KQ4MEY6\",</span><br><span class=\"line\">          <span class=\"string\">\"X5ZHWBYBF4TUYS35HU3ROVDQJC772ZMG\"</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在定义新资产时，可以设置以下属性：</p>\n<ul>\n<li><code>cap</code>：资产总量，比如<code>bytes</code>的总量为$10^{15}$</li>\n<li><code>is_private</code>：资产转移是否公开，比如<code>bytes</code>为公开</li>\n<li><code>is_transferrable</code>：资产是否可以在无发行方允许的条件下进行流通，如果不可流通，则资产的收发方中必须有发行方，比如<code>bytes</code>为可流通</li>\n<li><code>auto_destroy</code>：资产在发送回发行方时是否自动销毁，比如<code>bytes</code>为不自动销毁</li>\n<li><code>fixed_denominations</code>：资产是否以固定面额进行流通（类似纸币），比如<code>bytes</code>可以以任意金额流通</li>\n<li><code>issued_by_definer_only</code>：资产是否仅由发行方发布，比如<code>bytes</code>均在创世单元中发布</li>\n<li><code>cosigned_by_definer</code>：资产在每次转移时是否必须由发行方共同签名，比如<code>bytes</code>是不需要的</li>\n<li><code>spender_attested</code>：资产在使用时用户是否需要通过认证，比如<code>bytes</code>是不需要的</li>\n<li><code>attestors</code>：受资产发行方认可的认证地址，可以在后续过程中修改</li>\n<li><code>denominations</code>：如果资产具有固定面额，定义面额种类以及各类别总量</li>\n<li><code>transfer_condition</code>：资产转移需要的额外条件，语法与地址定义脚本相同（除了不使用<code>sig</code>之外）</li>\n<li><code>issue_condition</code>：资产发布需要的额外条件</li>\n</ul>\n<p>在定义资产时，每个单元中最多只能有一条<code>asset</code>消息。当资产定义单元发布后，后续都通过引用该单元的hash来引用该资产。资产只能定义一次，除了<code>attestors</code>之外均不能进行修改。资产定义的解释权在发行方，其具体含义由其进行解释。资产定义中的不同属性的组合可以适用不同的场景。</p>\n<p>发布资产的消息格式为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unit: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  messages: [</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      app: \"payment\",</span><br><span class=\"line\">      payload_location: \"inline\",</span><br><span class=\"line\">      payload_hash: \"hash of payload\",</span><br><span class=\"line\">      payload: &#123;</span><br><span class=\"line\">        asset: \"hash of unit where the asset was defined\",</span><br><span class=\"line\">        inputs: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            type: \"issue\",</span><br><span class=\"line\">            amount: 1000000,</span><br><span class=\"line\">            serial_number: 1,</span><br><span class=\"line\">            address: \"ISSUER ADDRESS\" // only when multi-authored</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          ...</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        outputs: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            address: \"BENEFICIARY ADDRESS\",</span><br><span class=\"line\">            amount: 12345</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          ...</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>总量有限的资产必须在一个交易中全部发布，比如，所有的<code>bytes</code>都是在创世单元中发布的。如果资产总量有限，发布时<code>serial_number</code>必须为1；如果资产总量不受限，每次发布时<code>serial_number</code>必须保证不同。</p>\n<p>转移资产与<code>bytes</code>类似，只是需要加上资产的ID，其消息格式为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unit: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  messages: [</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      app: \"payment\",</span><br><span class=\"line\">      payload_location: \"inline\",</span><br><span class=\"line\">      payload_hash: \"hash of payload\",</span><br><span class=\"line\">      payload: &#123;</span><br><span class=\"line\">        asset: \"hash of unit where the asset was defined\",</span><br><span class=\"line\">        inputs: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            unit: \"hash of source unit\",</span><br><span class=\"line\">            message_index: 0,</span><br><span class=\"line\">            output_index: 1</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          ...</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        outputs: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            address: \"BENEFICIARY ADDRESS\",</span><br><span class=\"line\">            amount: 12345</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          ...</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"隐私资产\"><a href=\"#隐私资产\" class=\"headerlink\" title=\"隐私资产\"></a>隐私资产</h3><p>公开资产在转移过程中，其内容在交易中是完全公开的。而对于隐私财产，在转移时，仅发送特定时间点资产转移的证据；同时，发送者通过私有通道把资产发送给接收者；接收者可以通过区块链上的资产转移证据来验证是否得到该笔资产。</p>\n<p>为了解决双花问题，需要在单元增加新的字段<code>spend_proof</code>，要求：</p>\n<ul>\n<li>它仅依赖于其所花费的输出，相同的输出将产生相同的<code>spend_proof</code></li>\n<li>无法通过它逆向推断出所花费输出的任何信息</li>\n</ul>\n<p>例如采用如下方式生成<code>spend_proof</code>： </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spend_proof = hash(&#123;</span><br><span class=\"line\">  asset: payload.asset,</span><br><span class=\"line\">  unit: input.unit,</span><br><span class=\"line\">  message_index: input.message_index,</span><br><span class=\"line\">  output_index: input.output_index,</span><br><span class=\"line\">  address: src_output.address,</span><br><span class=\"line\">  amount: src_output.amount,</span><br><span class=\"line\">  blinding: src_output.blinding</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>其中，<code>payload.asset</code>表示需要转移的资产，<code>input</code>则表示花费输出<code>src_output</code>的输入。隐私资产的输出必须包含扰乱因子<code>blinding</code>，它使得无法通过<code>spend_proof</code>来逆向推到出其使用了哪个输出。</p>\n<p>对于隐私资产的发行来讲，其<code>spend_proof</code>为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spend_proof = hash(&#123;</span><br><span class=\"line\">  asset: payload.asset,</span><br><span class=\"line\">  address: \"ISSUER ADDRESS\",</span><br><span class=\"line\">  serial_number: input.serial_number, // always 1 for capped assets</span><br><span class=\"line\">  amount: input.amount, // issue amount</span><br><span class=\"line\">  denomination: 1 // always 1 for arbitrary-amounts payments</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>在发行隐私资产时，由于需要公开表明已发行该资产，因此不需要添加扰乱因子。在资产传递过程中，发送者已知扰乱因子，虽然他可以知道接收者是否花费了这笔资产，但是他无法知道这笔资产的下一个接收者是谁，也就无法继续跟踪该笔资产的进一步流向了。</p>\n<p><code>spend_proof</code>需要添加到区块链单元中，其格式为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unit: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  spend_proofs: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      spend_proof: \"the above hash in base64\",</span><br><span class=\"line\">      address: \"SPENDING ADDRESS\" // only if multi-authored</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在发送隐私资产时，发送者需要完成以下几件事情：</p>\n<ul>\n<li>对每个输出添加扰乱因子</li>\n<li>将隐私资产通过私有通道发送给接收者，以及该资产传递所在的区块链单元</li>\n<li>对于单元中每个输入，计算相应的<code>spend_proof</code>并加入单元中</li>\n</ul>\n<p>接收者需要检查两件事情：</p>\n<ul>\n<li>检查收到的隐私资产的<code>hash</code>值是否与区块链单元中的<code>payload_hash</code>相同</li>\n<li>检查通过收到的隐私资产计算得到的<code>spend_proof</code>是否与区块链单元中的匹配</li>\n</ul>\n<p>接收者可以验证整个资产转移的过程，并能够回溯到该资产的发布单元。</p>\n<p>Byteball中提供了一种隐私数字资产<code>blackbytes</code>，其定义如下所示：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  cap: 2,111,100,000,000,000,</span><br><span class=\"line\">  is_private: true,</span><br><span class=\"line\">  is_transferrable: true,</span><br><span class=\"line\">  auto_destroy: false,</span><br><span class=\"line\">  fixed_denominations: true,</span><br><span class=\"line\">  issued_by_definer_only: true,</span><br><span class=\"line\">  cosigned_by_definer: false,</span><br><span class=\"line\">  spender_name_attested: false,</span><br><span class=\"line\">  denominations: [</span><br><span class=\"line\">    &#123;denomination: 1, count_coins: 10,000,000,000&#125;,</span><br><span class=\"line\">    &#123;denomination: 2, count_coins: 20,000,000,000&#125;,</span><br><span class=\"line\">    &#123;denomination: 5, count_coins: 10,000,000,000&#125;,</span><br><span class=\"line\">    &#123;denomination: 10, count_coins: 10,000,000,000&#125;,</span><br><span class=\"line\">    &#123;denomination: 20, count_coins: 20,000,000,000&#125;,</span><br><span class=\"line\">    &#123;denomination: 50, count_coins: 10,000,000,000&#125;,</span><br><span class=\"line\">    &#123;denomination: 100, count_coins: 10,000,000,000&#125;,</span><br><span class=\"line\">    &#123;denomination: 200, count_coins: 20,000,000,000&#125;,</span><br><span class=\"line\">    &#123;denomination: 500, count_coins: 10,000,000,000&#125;,</span><br><span class=\"line\">    &#123;denomination: 1000, count_coins: 10,000,000,000&#125;,</span><br><span class=\"line\">    &#123;denomination: 2000, count_coins: 20,000,000,000&#125;,</span><br><span class=\"line\">    &#123;denomination: 5000, count_coins: 10,000,000,000&#125;,</span><br><span class=\"line\">    &#123;denomination: 10000, count_coins: 10,000,000,000&#125;,</span><br><span class=\"line\">    &#123;denomination: 20000, count_coins: 20,000,000,000&#125;,</span><br><span class=\"line\">    &#123;denomination: 50000, count_coins: 10,000,000,000&#125;,</span><br><span class=\"line\">    &#123;denomination: 100000, count_coins: 10,000,000,000&#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"数据\"><a href=\"#数据\" class=\"headerlink\" title=\"数据\"></a>数据</h3><h4 id=\"非结构化数据（文本）\"><a href=\"#非结构化数据（文本）\" class=\"headerlink\" title=\"非结构化数据（文本）\"></a>非结构化数据（文本）</h4><p>用户可以在Byteball中存储文本信息，消息格式为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unit: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  messages: [</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      app: \"text\",</span><br><span class=\"line\">      payload_location: \"inline\",</span><br><span class=\"line\">      payload_hash: \"hash of payload\",</span><br><span class=\"line\">      payload: \"any text\"</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>文本可以是任意内容：用户可以利用这个发布不能被篡改的公告、微博等等；也可以存储一些非明文的内容，比如合约的hash值之类的。</p>\n<h4 id=\"结构化数据\"><a href=\"#结构化数据\" class=\"headerlink\" title=\"结构化数据\"></a>结构化数据</h4><p>用户也可以使用Byteball存储任意的结构化数据，消息格式为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unit: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  messages: [</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      app: \"data\",</span><br><span class=\"line\">      payload_location: \"inline\",</span><br><span class=\"line\">      payload_hash: \"hash of payload\",</span><br><span class=\"line\">      payload: &#123;</span><br><span class=\"line\">        key: \"value\",</span><br><span class=\"line\">        another_key: &#123;</span><br><span class=\"line\">          subkey: \"other value\",</span><br><span class=\"line\">          another_subkey: 232</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     ...</span><br><span class=\"line\">  ],</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"投票\"><a href=\"#投票\" class=\"headerlink\" title=\"投票\"></a>投票</h3><p>用户可以使用Byteball发起投票，消息格式为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unit: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  messages: [</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      app: \"poll\",</span><br><span class=\"line\">      payload_location: \"inline\",</span><br><span class=\"line\">      payload_hash: \"hash of payload\",</span><br><span class=\"line\">      payload: &#123;</span><br><span class=\"line\">        question: \"Should the United Kingdom remain a member of the European Union or leave the European Union?\",</span><br><span class=\"line\">        choices: [\"Leave\", \"Remain\"]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同时，用户可以响应投票，其消息格式为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unit: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  messages: [</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      app: \"vote\",</span><br><span class=\"line\">      payload_location: \"inline\",</span><br><span class=\"line\">      payload_hash: \"hash of payload\",</span><br><span class=\"line\">      payload: &#123;</span><br><span class=\"line\">        unit: \"hash of the unit where the poll was defined\",</span><br><span class=\"line\">        choice: \"Leave\"</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>投票的有效性需要由发起投票方来决定，Byteball仅仅检查投票选项是否在给定集合内。比如，如果发起投票方要求只允许经过认证的或在白名单上的用户进行投票，那些无效的投票也会被Byteball记录，需要由发起方自行判别。</p>\n<h3 id=\"认证\"><a href=\"#认证\" class=\"headerlink\" title=\"认证\"></a>认证</h3><p>用户可以通过Byteball发布和存储个人信息，消息格式为</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unit: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  messages: [</span><br><span class=\"line\">  ...</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      app: \"profile\",</span><br><span class=\"line\">      payload_location: \"inline\",</span><br><span class=\"line\">      payload_hash: \"hash of payload\",</span><br><span class=\"line\">      payload: &#123;</span><br><span class=\"line\">        name: \"Joe Average\",</span><br><span class=\"line\">        emails: [\"joe@example.com\", \"joe@domain.com\"],</span><br><span class=\"line\">        twitter: \"joe\"</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用户可以发布任意的个人信息，但是其真实性是无法保证的，只有通过认证的信息才是可信的。</p>\n<p>认证消息用于确定用户发布的个人信息的真实性，其消息格式为</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unit: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  messages: [</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      app: \"attestation\",</span><br><span class=\"line\">      payload_location: \"inline\",</span><br><span class=\"line\">      payload_hash: \"hash of payload\",</span><br><span class=\"line\">      payload: &#123;</span><br><span class=\"line\">        address: \"ADDRESS OF THE SUBJECT\"</span><br><span class=\"line\">        profile: &#123;</span><br><span class=\"line\">          name: \"Joe Average\",</span><br><span class=\"line\">          emails: [\"joe@example.com\"]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>认证消息中的个人信息不一定与用户自己发布的信息一致，事实上，用户甚至没有自己发布过个人信息。</p>\n<p>Byteball中的认证者类似于现实世界中的实名认证，认证某个地址是归属于某个个人或组织。认证方可以向被认证方收取少量费用。一般来讲，见证人节点是需要通过认证的，这样可以提高手信任度。被认证方可以选择不公布认证信息，而只在Byteball中保存认证证据，并在合适的时机公布。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>Byteball是一种基于DAG结构的不可逆分布式数据库，它可以存储任何有价值的数据。Byteball中每一个新的数据单元都间接地确认了之前所有数据单元的存在性。对已达到稳定状态的数据单元的修改将变得不可实现。</p>\n<p>相比于BTC和ETH，Byteball使用了DAG结构作为底层，并使用见证人作为共识机制，从而具有以下特点：</p>\n<ul>\n<li>没有区块，只有交易单元，确认速度快</li>\n<li>极少的手续费</li>\n<li>交易单元具有最终状态</li>\n</ul>\n<p>Byteball中发行了一种用于支付存储的货币<code>bytes</code>，支付费用与所需要存储的数据大小相关。自由开发者可以在Byteball平台上自由开发各种应用，根据不同的应用场景发布相应的数字资产。在Byteball上面可以轻松地实现去中心化交易所、互助保险、赌球、彩票、投票、认证等等功能。Byteball还提供了类似telegram的加密端到端通道，可以实现用户之间的隐私通信。Byteball最与众不同的是，它提供了一种隐私数字资产<code>blackbytes</code>，可以完整地保护使用者的隐私信息。</p>\n<p>总的来说，不管从使用技术的先进性，还是其提供功能的多样性，Byteball都是区块链领域中的佼佼者。</p>\n"},{"title":"区块链系统观","date":"2018-04-15T07:09:55.000Z","_content":"\n从计算机原理角度来看区块链：\n1. 全网无中心分布的计算机是底层硬件，它们构成分布式计算机，负责运算与存储；\n2. 区块链是分布式计算机的操作系统，它采用一定机制使得底层硬件协调工作起来，并达成共识，即得到一致的运算结果，比如第一代的Bitcoin、第二代的Ethereum等；\n3. 在冯诺依曼计算机结构里，程序与数据是都放在存储器中，区块链中的“文件系统”可以用来存储程序与数据，但是十分昂贵；\n4. IPFS作为去中心化世界的http协议，可以用来大量存储文件与内容，从而区块链获得额外的廉价存储空间。\n\n\n","source":"_posts/2018-04-15-blockchain-system-view.md","raw":"---\ntitle: 区块链系统观\ndate: 2018-04-15 15:09:55\ncategories: 谈点区块链\ntags:\n  - dag\n  - blockchain\n  - byteball\n  - bitcoin\n---\n\n从计算机原理角度来看区块链：\n1. 全网无中心分布的计算机是底层硬件，它们构成分布式计算机，负责运算与存储；\n2. 区块链是分布式计算机的操作系统，它采用一定机制使得底层硬件协调工作起来，并达成共识，即得到一致的运算结果，比如第一代的Bitcoin、第二代的Ethereum等；\n3. 在冯诺依曼计算机结构里，程序与数据是都放在存储器中，区块链中的“文件系统”可以用来存储程序与数据，但是十分昂贵；\n4. IPFS作为去中心化世界的http协议，可以用来大量存储文件与内容，从而区块链获得额外的廉价存储空间。\n\n\n","slug":"blockchain-system-view","published":1,"updated":"2018-04-15T07:55:44.930Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg0ioa400000zmep7q00jkhn","content":"<p>从计算机原理角度来看区块链：</p>\n<ol>\n<li>全网无中心分布的计算机是底层硬件，它们构成分布式计算机，负责运算与存储；</li>\n<li>区块链是分布式计算机的操作系统，它采用一定机制使得底层硬件协调工作起来，并达成共识，即得到一致的运算结果，比如第一代的Bitcoin、第二代的Ethereum等；</li>\n<li>在冯诺依曼计算机结构里，程序与数据是都放在存储器中，区块链中的“文件系统”可以用来存储程序与数据，但是十分昂贵；</li>\n<li>IPFS作为去中心化世界的http协议，可以用来大量存储文件与内容，从而区块链获得额外的廉价存储空间。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>从计算机原理角度来看区块链：</p>\n<ol>\n<li>全网无中心分布的计算机是底层硬件，它们构成分布式计算机，负责运算与存储；</li>\n<li>区块链是分布式计算机的操作系统，它采用一定机制使得底层硬件协调工作起来，并达成共识，即得到一致的运算结果，比如第一代的Bitcoin、第二代的Ethereum等；</li>\n<li>在冯诺依曼计算机结构里，程序与数据是都放在存储器中，区块链中的“文件系统”可以用来存储程序与数据，但是十分昂贵；</li>\n<li>IPFS作为去中心化世界的http协议，可以用来大量存储文件与内容，从而区块链获得额外的廉价存储空间。</li>\n</ol>\n"},{"title":"Byteball目前存在的一些问题及改进方向","date":"2018-05-13T14:09:55.000Z","_content":"\nByteball是一种基于DAG技术的新型数字资产平台，它不仅支持P2P支付，还支持智能合约、预言机、隐私资产、ICO等功能。Byteball的钱包设计得十分强大，并且人性化。但通过对Byteball的仔细研究会发现，其在设计和实现上还是存在一定的缺陷。如果能很好地解决这些问题，Byteball必将跻身主流的数字资产平台。\n\n## 网络性能问题\n\n一份对byteball主网的最新测试给出了三点结论：\n\n1. 交易处理速度仅能达到15TPS左右；\n2. 网络容易遭受DOS攻击，大量突发式的恶意交易会阻塞网络，降低网络的交易处理速度；\n3. 随着交易数量增加，交易确认时间可以保持平稳。\n\n作为DAG基础链，这个压力测试挺让人失望的，这显然没有充分发挥DAG技术的优势。不同于传统区块链交易处理速度受限于区块大小，Byteball网络的交易处理速度与代码执行速度、网络传输时延、硬件处理能力等都可能有关系。创始人Tony在Slack频道中承认byteball代码实现中大量的SQL操作增加了处理时延，这可能是影响byteball处理性能的重要原因。\n\n> **那么，是否可以优化byteball的数据库设计及SQL操作？**\n\nDAG作为Byteball底层数据结构，其相应的数据很自然地应该使用图数据库进行存储。这需要重新设计Byteball的数据库，并重写大量Byteball底层的代码。同时，还需要一个高性能的serverless embedded graph database，比如基于leveldb的[levelgraph](https://github.com/levelgraph/levelgraph)。采用图数据库的一个最大好处是可以减少大量的SQL多表联合查询，并简化确认交易时的多级回溯操作，从而提高其处理性能。\n\n## Hub节点问题\n\n在Byteball网络中，Hub节点是网络中的骨干节点，它们之间构成P2P网络，其它节点需要通过它们进行相互通信。全网中可以存在多个Hub，用户可以自由选择其想要接入的Hub。这里需要说明的是，Relay节点具有与Hub节点类似的功能，只是不提供端到端的信息加密服务。在下面的讨论中，不特殊说明的话，将Hub/Relay节点统一称为Hub节点。\n\n![byteball网络结构](http://oc7urqs4c.bkt.clouddn.com/2018-05-12-byteball-network.png)\n\n从技术角度来讲，Hub节点是在全节点钱包的基础上，提供一些额外的数据转发功能。从数据存储的角度来看：轻钱包是不保存完整的账本数据的；全节点钱包和见证人保存完整的账本数据，但仅供它们自己使用；只有Hub节点保存完整的账本数据，并与其它的节点进行共享。\n\n试想如果Hub节点作恶，它可以拒绝为与其连接的钱包等其它节点提供Byteball网络接入服务，拒绝为它们广播、共享交易数据。还有一种极端情况，如果所有见证人节点都连接在同一个Hub节点上，那么它将成为整个网络中的霸主。其它Hub节点如果不能得到该Hub节点的服务，则其它Hub节点广播的所有交易都无法得到网络的确认。这也就是说，那些Hub节点都无法正常工作了。\n\n![Hub节点中心化](http://oc7urqs4c.bkt.clouddn.com/2018-05-13-byteball-hub-flaw.png)\n\nHub节点在账本数据的有效性、可靠性及安全性方面起着十分重要的作用。然而，在Byteball目前的实现下，Hub节点是完全没有收益激励的，同时还要承担相应的服务器开支。实际上，目前全网主要使用的还是官方提供的Hub节点（wss://byteball.org/bb/)。\n\n> **那么，对于扮演如此重要角色的Hub节点，是否应该给予经济激励，并限制其部分权力？**\n\n设计经济激励的目的是为了让更多的人愿意运行Hub节点，为整个网络更公平有效的服务。同时，为了相对性地限制Hub节点的权力，建议提升见证人节点、全节点钱包在网络结构中的地位，即它们之间可以组成P2P网络。\n\n\n## 见证人的问题\n\nWitnesses是Byteball用来实现全网共识的，见证人通过不断地发送交易来确认其他用户的交易。Byteball对见证人提出的要求是：现实世界中的知名用户或机构，以保证其具有良好的信誉。一旦见证人发生作恶行为，那么他将名誉扫地。要求如此严格，但见证人只能获取少量的手续费。试问谁愿意将自己的名誉压在Byteball这样一个数字资产平台上呢？目前的实际情况是，大部分的见证人节点掌握在创始人Tony手中。\n\nByteball的共识机制的一个基本思想是选取一条主链，所有单元都可以依据这条主链来定序，从而解决双花问题。形象的来说，这条主链类似一条高速公路，连接在主链上的其它分支为省道，通过这种方式可以大大地提高网络处理效率。Byteball是通过见证人的方式选择主链的，主链上的交易受到大多数见证人的认可。当然，选择主链也可以有其它方式，比如使用POW方式，最近热门的[xdag](https://xdag.io/)采用的就是这样的思想。\n\n> **那么，Byteball的共识机制是否可以演进为基于POS的见证机制？**\n\n这意味着，见证人列表不是固定不变的，也不是由用户手工进行选择的。见证人列表通过POS的方式产生，以一定的时间间隔生成见证人列表，并基于此进行共识。在POS中，拥有资产越多的用户更倾向于维护网络的正常运转。\n\n## 手续费问题\n\nByteball中的交易手续费分为两部分，一部分给见证人，另一部分给其子单元。\n\n分给见证人的交易手续费称为payload commission，它与交易存储内容所占字节数成正比。然而，实际上交易存储内容的大小对于见证人是没有区别，见证人需要做的只是持续产生交易单元就可以。\n\n分给子单元的交易手续费称为header commission，它基本上是个固定值。它设计的目的是为了让用户尽量选择新产生的交易单元，从而保持DAG的宽度不至于太大。其实，普通用户收到少量的手续费让人很疑惑。虽然，用户行为在确认交易单元上做出了贡献，但通常这属于偶发行为。而像Hub这类承担着网络运行重任的节点却得不到任何激励。至于限制DAG的宽度，完全可以在选择父节点时，给新产生节点赋予更高的权重。\n\n> **那么，是否可以重新设计手续费结构，将其分配给那些维护网络正常运行的节点？**\n\n上面我们讨论到了对于Hub节点的激励，手续费中应该加入给Hub节点的部分；同时，去除分给子单元的部分，而代以更好的父节点选择算法。\n\n\n\n\n\n","source":"_posts/2018-05-13-byteball-flaws.md","raw":"---\ntitle: Byteball目前存在的一些问题及改进方向\ndate: 2018-05-13 22:09:55\ncategories: 谈点区块链\ntags:\n  - dag\n  - blockchain\n  - byteball\n  - bitcoin\n---\n\nByteball是一种基于DAG技术的新型数字资产平台，它不仅支持P2P支付，还支持智能合约、预言机、隐私资产、ICO等功能。Byteball的钱包设计得十分强大，并且人性化。但通过对Byteball的仔细研究会发现，其在设计和实现上还是存在一定的缺陷。如果能很好地解决这些问题，Byteball必将跻身主流的数字资产平台。\n\n## 网络性能问题\n\n一份对byteball主网的最新测试给出了三点结论：\n\n1. 交易处理速度仅能达到15TPS左右；\n2. 网络容易遭受DOS攻击，大量突发式的恶意交易会阻塞网络，降低网络的交易处理速度；\n3. 随着交易数量增加，交易确认时间可以保持平稳。\n\n作为DAG基础链，这个压力测试挺让人失望的，这显然没有充分发挥DAG技术的优势。不同于传统区块链交易处理速度受限于区块大小，Byteball网络的交易处理速度与代码执行速度、网络传输时延、硬件处理能力等都可能有关系。创始人Tony在Slack频道中承认byteball代码实现中大量的SQL操作增加了处理时延，这可能是影响byteball处理性能的重要原因。\n\n> **那么，是否可以优化byteball的数据库设计及SQL操作？**\n\nDAG作为Byteball底层数据结构，其相应的数据很自然地应该使用图数据库进行存储。这需要重新设计Byteball的数据库，并重写大量Byteball底层的代码。同时，还需要一个高性能的serverless embedded graph database，比如基于leveldb的[levelgraph](https://github.com/levelgraph/levelgraph)。采用图数据库的一个最大好处是可以减少大量的SQL多表联合查询，并简化确认交易时的多级回溯操作，从而提高其处理性能。\n\n## Hub节点问题\n\n在Byteball网络中，Hub节点是网络中的骨干节点，它们之间构成P2P网络，其它节点需要通过它们进行相互通信。全网中可以存在多个Hub，用户可以自由选择其想要接入的Hub。这里需要说明的是，Relay节点具有与Hub节点类似的功能，只是不提供端到端的信息加密服务。在下面的讨论中，不特殊说明的话，将Hub/Relay节点统一称为Hub节点。\n\n![byteball网络结构](http://oc7urqs4c.bkt.clouddn.com/2018-05-12-byteball-network.png)\n\n从技术角度来讲，Hub节点是在全节点钱包的基础上，提供一些额外的数据转发功能。从数据存储的角度来看：轻钱包是不保存完整的账本数据的；全节点钱包和见证人保存完整的账本数据，但仅供它们自己使用；只有Hub节点保存完整的账本数据，并与其它的节点进行共享。\n\n试想如果Hub节点作恶，它可以拒绝为与其连接的钱包等其它节点提供Byteball网络接入服务，拒绝为它们广播、共享交易数据。还有一种极端情况，如果所有见证人节点都连接在同一个Hub节点上，那么它将成为整个网络中的霸主。其它Hub节点如果不能得到该Hub节点的服务，则其它Hub节点广播的所有交易都无法得到网络的确认。这也就是说，那些Hub节点都无法正常工作了。\n\n![Hub节点中心化](http://oc7urqs4c.bkt.clouddn.com/2018-05-13-byteball-hub-flaw.png)\n\nHub节点在账本数据的有效性、可靠性及安全性方面起着十分重要的作用。然而，在Byteball目前的实现下，Hub节点是完全没有收益激励的，同时还要承担相应的服务器开支。实际上，目前全网主要使用的还是官方提供的Hub节点（wss://byteball.org/bb/)。\n\n> **那么，对于扮演如此重要角色的Hub节点，是否应该给予经济激励，并限制其部分权力？**\n\n设计经济激励的目的是为了让更多的人愿意运行Hub节点，为整个网络更公平有效的服务。同时，为了相对性地限制Hub节点的权力，建议提升见证人节点、全节点钱包在网络结构中的地位，即它们之间可以组成P2P网络。\n\n\n## 见证人的问题\n\nWitnesses是Byteball用来实现全网共识的，见证人通过不断地发送交易来确认其他用户的交易。Byteball对见证人提出的要求是：现实世界中的知名用户或机构，以保证其具有良好的信誉。一旦见证人发生作恶行为，那么他将名誉扫地。要求如此严格，但见证人只能获取少量的手续费。试问谁愿意将自己的名誉压在Byteball这样一个数字资产平台上呢？目前的实际情况是，大部分的见证人节点掌握在创始人Tony手中。\n\nByteball的共识机制的一个基本思想是选取一条主链，所有单元都可以依据这条主链来定序，从而解决双花问题。形象的来说，这条主链类似一条高速公路，连接在主链上的其它分支为省道，通过这种方式可以大大地提高网络处理效率。Byteball是通过见证人的方式选择主链的，主链上的交易受到大多数见证人的认可。当然，选择主链也可以有其它方式，比如使用POW方式，最近热门的[xdag](https://xdag.io/)采用的就是这样的思想。\n\n> **那么，Byteball的共识机制是否可以演进为基于POS的见证机制？**\n\n这意味着，见证人列表不是固定不变的，也不是由用户手工进行选择的。见证人列表通过POS的方式产生，以一定的时间间隔生成见证人列表，并基于此进行共识。在POS中，拥有资产越多的用户更倾向于维护网络的正常运转。\n\n## 手续费问题\n\nByteball中的交易手续费分为两部分，一部分给见证人，另一部分给其子单元。\n\n分给见证人的交易手续费称为payload commission，它与交易存储内容所占字节数成正比。然而，实际上交易存储内容的大小对于见证人是没有区别，见证人需要做的只是持续产生交易单元就可以。\n\n分给子单元的交易手续费称为header commission，它基本上是个固定值。它设计的目的是为了让用户尽量选择新产生的交易单元，从而保持DAG的宽度不至于太大。其实，普通用户收到少量的手续费让人很疑惑。虽然，用户行为在确认交易单元上做出了贡献，但通常这属于偶发行为。而像Hub这类承担着网络运行重任的节点却得不到任何激励。至于限制DAG的宽度，完全可以在选择父节点时，给新产生节点赋予更高的权重。\n\n> **那么，是否可以重新设计手续费结构，将其分配给那些维护网络正常运行的节点？**\n\n上面我们讨论到了对于Hub节点的激励，手续费中应该加入给Hub节点的部分；同时，去除分给子单元的部分，而代以更好的父节点选择算法。\n\n\n\n\n\n","slug":"byteball-flaws","published":1,"updated":"2018-05-13T14:38:23.185Z","_id":"cjh4xb1dx0000pkepjxz981v2","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Byteball是一种基于DAG技术的新型数字资产平台，它不仅支持P2P支付，还支持智能合约、预言机、隐私资产、ICO等功能。Byteball的钱包设计得十分强大，并且人性化。但通过对Byteball的仔细研究会发现，其在设计和实现上还是存在一定的缺陷。如果能很好地解决这些问题，Byteball必将跻身主流的数字资产平台。</p>\n<h2 id=\"网络性能问题\"><a href=\"#网络性能问题\" class=\"headerlink\" title=\"网络性能问题\"></a>网络性能问题</h2><p>一份对byteball主网的最新测试给出了三点结论：</p>\n<ol>\n<li>交易处理速度仅能达到15TPS左右；</li>\n<li>网络容易遭受DOS攻击，大量突发式的恶意交易会阻塞网络，降低网络的交易处理速度；</li>\n<li>随着交易数量增加，交易确认时间可以保持平稳。</li>\n</ol>\n<p>作为DAG基础链，这个压力测试挺让人失望的，这显然没有充分发挥DAG技术的优势。不同于传统区块链交易处理速度受限于区块大小，Byteball网络的交易处理速度与代码执行速度、网络传输时延、硬件处理能力等都可能有关系。创始人Tony在Slack频道中承认byteball代码实现中大量的SQL操作增加了处理时延，这可能是影响byteball处理性能的重要原因。</p>\n<blockquote>\n<p><strong>那么，是否可以优化byteball的数据库设计及SQL操作？</strong></p>\n</blockquote>\n<p>DAG作为Byteball底层数据结构，其相应的数据很自然地应该使用图数据库进行存储。这需要重新设计Byteball的数据库，并重写大量Byteball底层的代码。同时，还需要一个高性能的serverless embedded graph database，比如基于leveldb的<a href=\"https://github.com/levelgraph/levelgraph\" target=\"_blank\" rel=\"noopener\">levelgraph</a>。采用图数据库的一个最大好处是可以减少大量的SQL多表联合查询，并简化确认交易时的多级回溯操作，从而提高其处理性能。</p>\n<h2 id=\"Hub节点问题\"><a href=\"#Hub节点问题\" class=\"headerlink\" title=\"Hub节点问题\"></a>Hub节点问题</h2><p>在Byteball网络中，Hub节点是网络中的骨干节点，它们之间构成P2P网络，其它节点需要通过它们进行相互通信。全网中可以存在多个Hub，用户可以自由选择其想要接入的Hub。这里需要说明的是，Relay节点具有与Hub节点类似的功能，只是不提供端到端的信息加密服务。在下面的讨论中，不特殊说明的话，将Hub/Relay节点统一称为Hub节点。</p>\n<p><img src=\"http://oc7urqs4c.bkt.clouddn.com/2018-05-12-byteball-network.png\" alt=\"byteball网络结构\"></p>\n<p>从技术角度来讲，Hub节点是在全节点钱包的基础上，提供一些额外的数据转发功能。从数据存储的角度来看：轻钱包是不保存完整的账本数据的；全节点钱包和见证人保存完整的账本数据，但仅供它们自己使用；只有Hub节点保存完整的账本数据，并与其它的节点进行共享。</p>\n<p>试想如果Hub节点作恶，它可以拒绝为与其连接的钱包等其它节点提供Byteball网络接入服务，拒绝为它们广播、共享交易数据。还有一种极端情况，如果所有见证人节点都连接在同一个Hub节点上，那么它将成为整个网络中的霸主。其它Hub节点如果不能得到该Hub节点的服务，则其它Hub节点广播的所有交易都无法得到网络的确认。这也就是说，那些Hub节点都无法正常工作了。</p>\n<p><img src=\"http://oc7urqs4c.bkt.clouddn.com/2018-05-13-byteball-hub-flaw.png\" alt=\"Hub节点中心化\"></p>\n<p>Hub节点在账本数据的有效性、可靠性及安全性方面起着十分重要的作用。然而，在Byteball目前的实现下，Hub节点是完全没有收益激励的，同时还要承担相应的服务器开支。实际上，目前全网主要使用的还是官方提供的Hub节点（wss://byteball.org/bb/)。</p>\n<blockquote>\n<p><strong>那么，对于扮演如此重要角色的Hub节点，是否应该给予经济激励，并限制其部分权力？</strong></p>\n</blockquote>\n<p>设计经济激励的目的是为了让更多的人愿意运行Hub节点，为整个网络更公平有效的服务。同时，为了相对性地限制Hub节点的权力，建议提升见证人节点、全节点钱包在网络结构中的地位，即它们之间可以组成P2P网络。</p>\n<h2 id=\"见证人的问题\"><a href=\"#见证人的问题\" class=\"headerlink\" title=\"见证人的问题\"></a>见证人的问题</h2><p>Witnesses是Byteball用来实现全网共识的，见证人通过不断地发送交易来确认其他用户的交易。Byteball对见证人提出的要求是：现实世界中的知名用户或机构，以保证其具有良好的信誉。一旦见证人发生作恶行为，那么他将名誉扫地。要求如此严格，但见证人只能获取少量的手续费。试问谁愿意将自己的名誉压在Byteball这样一个数字资产平台上呢？目前的实际情况是，大部分的见证人节点掌握在创始人Tony手中。</p>\n<p>Byteball的共识机制的一个基本思想是选取一条主链，所有单元都可以依据这条主链来定序，从而解决双花问题。形象的来说，这条主链类似一条高速公路，连接在主链上的其它分支为省道，通过这种方式可以大大地提高网络处理效率。Byteball是通过见证人的方式选择主链的，主链上的交易受到大多数见证人的认可。当然，选择主链也可以有其它方式，比如使用POW方式，最近热门的<a href=\"https://xdag.io/\" target=\"_blank\" rel=\"noopener\">xdag</a>采用的就是这样的思想。</p>\n<blockquote>\n<p><strong>那么，Byteball的共识机制是否可以演进为基于POS的见证机制？</strong></p>\n</blockquote>\n<p>这意味着，见证人列表不是固定不变的，也不是由用户手工进行选择的。见证人列表通过POS的方式产生，以一定的时间间隔生成见证人列表，并基于此进行共识。在POS中，拥有资产越多的用户更倾向于维护网络的正常运转。</p>\n<h2 id=\"手续费问题\"><a href=\"#手续费问题\" class=\"headerlink\" title=\"手续费问题\"></a>手续费问题</h2><p>Byteball中的交易手续费分为两部分，一部分给见证人，另一部分给其子单元。</p>\n<p>分给见证人的交易手续费称为payload commission，它与交易存储内容所占字节数成正比。然而，实际上交易存储内容的大小对于见证人是没有区别，见证人需要做的只是持续产生交易单元就可以。</p>\n<p>分给子单元的交易手续费称为header commission，它基本上是个固定值。它设计的目的是为了让用户尽量选择新产生的交易单元，从而保持DAG的宽度不至于太大。其实，普通用户收到少量的手续费让人很疑惑。虽然，用户行为在确认交易单元上做出了贡献，但通常这属于偶发行为。而像Hub这类承担着网络运行重任的节点却得不到任何激励。至于限制DAG的宽度，完全可以在选择父节点时，给新产生节点赋予更高的权重。</p>\n<blockquote>\n<p><strong>那么，是否可以重新设计手续费结构，将其分配给那些维护网络正常运行的节点？</strong></p>\n</blockquote>\n<p>上面我们讨论到了对于Hub节点的激励，手续费中应该加入给Hub节点的部分；同时，去除分给子单元的部分，而代以更好的父节点选择算法。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Byteball是一种基于DAG技术的新型数字资产平台，它不仅支持P2P支付，还支持智能合约、预言机、隐私资产、ICO等功能。Byteball的钱包设计得十分强大，并且人性化。但通过对Byteball的仔细研究会发现，其在设计和实现上还是存在一定的缺陷。如果能很好地解决这些问题，Byteball必将跻身主流的数字资产平台。</p>\n<h2 id=\"网络性能问题\"><a href=\"#网络性能问题\" class=\"headerlink\" title=\"网络性能问题\"></a>网络性能问题</h2><p>一份对byteball主网的最新测试给出了三点结论：</p>\n<ol>\n<li>交易处理速度仅能达到15TPS左右；</li>\n<li>网络容易遭受DOS攻击，大量突发式的恶意交易会阻塞网络，降低网络的交易处理速度；</li>\n<li>随着交易数量增加，交易确认时间可以保持平稳。</li>\n</ol>\n<p>作为DAG基础链，这个压力测试挺让人失望的，这显然没有充分发挥DAG技术的优势。不同于传统区块链交易处理速度受限于区块大小，Byteball网络的交易处理速度与代码执行速度、网络传输时延、硬件处理能力等都可能有关系。创始人Tony在Slack频道中承认byteball代码实现中大量的SQL操作增加了处理时延，这可能是影响byteball处理性能的重要原因。</p>\n<blockquote>\n<p><strong>那么，是否可以优化byteball的数据库设计及SQL操作？</strong></p>\n</blockquote>\n<p>DAG作为Byteball底层数据结构，其相应的数据很自然地应该使用图数据库进行存储。这需要重新设计Byteball的数据库，并重写大量Byteball底层的代码。同时，还需要一个高性能的serverless embedded graph database，比如基于leveldb的<a href=\"https://github.com/levelgraph/levelgraph\" target=\"_blank\" rel=\"noopener\">levelgraph</a>。采用图数据库的一个最大好处是可以减少大量的SQL多表联合查询，并简化确认交易时的多级回溯操作，从而提高其处理性能。</p>\n<h2 id=\"Hub节点问题\"><a href=\"#Hub节点问题\" class=\"headerlink\" title=\"Hub节点问题\"></a>Hub节点问题</h2><p>在Byteball网络中，Hub节点是网络中的骨干节点，它们之间构成P2P网络，其它节点需要通过它们进行相互通信。全网中可以存在多个Hub，用户可以自由选择其想要接入的Hub。这里需要说明的是，Relay节点具有与Hub节点类似的功能，只是不提供端到端的信息加密服务。在下面的讨论中，不特殊说明的话，将Hub/Relay节点统一称为Hub节点。</p>\n<p><img src=\"http://oc7urqs4c.bkt.clouddn.com/2018-05-12-byteball-network.png\" alt=\"byteball网络结构\"></p>\n<p>从技术角度来讲，Hub节点是在全节点钱包的基础上，提供一些额外的数据转发功能。从数据存储的角度来看：轻钱包是不保存完整的账本数据的；全节点钱包和见证人保存完整的账本数据，但仅供它们自己使用；只有Hub节点保存完整的账本数据，并与其它的节点进行共享。</p>\n<p>试想如果Hub节点作恶，它可以拒绝为与其连接的钱包等其它节点提供Byteball网络接入服务，拒绝为它们广播、共享交易数据。还有一种极端情况，如果所有见证人节点都连接在同一个Hub节点上，那么它将成为整个网络中的霸主。其它Hub节点如果不能得到该Hub节点的服务，则其它Hub节点广播的所有交易都无法得到网络的确认。这也就是说，那些Hub节点都无法正常工作了。</p>\n<p><img src=\"http://oc7urqs4c.bkt.clouddn.com/2018-05-13-byteball-hub-flaw.png\" alt=\"Hub节点中心化\"></p>\n<p>Hub节点在账本数据的有效性、可靠性及安全性方面起着十分重要的作用。然而，在Byteball目前的实现下，Hub节点是完全没有收益激励的，同时还要承担相应的服务器开支。实际上，目前全网主要使用的还是官方提供的Hub节点（wss://byteball.org/bb/)。</p>\n<blockquote>\n<p><strong>那么，对于扮演如此重要角色的Hub节点，是否应该给予经济激励，并限制其部分权力？</strong></p>\n</blockquote>\n<p>设计经济激励的目的是为了让更多的人愿意运行Hub节点，为整个网络更公平有效的服务。同时，为了相对性地限制Hub节点的权力，建议提升见证人节点、全节点钱包在网络结构中的地位，即它们之间可以组成P2P网络。</p>\n<h2 id=\"见证人的问题\"><a href=\"#见证人的问题\" class=\"headerlink\" title=\"见证人的问题\"></a>见证人的问题</h2><p>Witnesses是Byteball用来实现全网共识的，见证人通过不断地发送交易来确认其他用户的交易。Byteball对见证人提出的要求是：现实世界中的知名用户或机构，以保证其具有良好的信誉。一旦见证人发生作恶行为，那么他将名誉扫地。要求如此严格，但见证人只能获取少量的手续费。试问谁愿意将自己的名誉压在Byteball这样一个数字资产平台上呢？目前的实际情况是，大部分的见证人节点掌握在创始人Tony手中。</p>\n<p>Byteball的共识机制的一个基本思想是选取一条主链，所有单元都可以依据这条主链来定序，从而解决双花问题。形象的来说，这条主链类似一条高速公路，连接在主链上的其它分支为省道，通过这种方式可以大大地提高网络处理效率。Byteball是通过见证人的方式选择主链的，主链上的交易受到大多数见证人的认可。当然，选择主链也可以有其它方式，比如使用POW方式，最近热门的<a href=\"https://xdag.io/\" target=\"_blank\" rel=\"noopener\">xdag</a>采用的就是这样的思想。</p>\n<blockquote>\n<p><strong>那么，Byteball的共识机制是否可以演进为基于POS的见证机制？</strong></p>\n</blockquote>\n<p>这意味着，见证人列表不是固定不变的，也不是由用户手工进行选择的。见证人列表通过POS的方式产生，以一定的时间间隔生成见证人列表，并基于此进行共识。在POS中，拥有资产越多的用户更倾向于维护网络的正常运转。</p>\n<h2 id=\"手续费问题\"><a href=\"#手续费问题\" class=\"headerlink\" title=\"手续费问题\"></a>手续费问题</h2><p>Byteball中的交易手续费分为两部分，一部分给见证人，另一部分给其子单元。</p>\n<p>分给见证人的交易手续费称为payload commission，它与交易存储内容所占字节数成正比。然而，实际上交易存储内容的大小对于见证人是没有区别，见证人需要做的只是持续产生交易单元就可以。</p>\n<p>分给子单元的交易手续费称为header commission，它基本上是个固定值。它设计的目的是为了让用户尽量选择新产生的交易单元，从而保持DAG的宽度不至于太大。其实，普通用户收到少量的手续费让人很疑惑。虽然，用户行为在确认交易单元上做出了贡献，但通常这属于偶发行为。而像Hub这类承担着网络运行重任的节点却得不到任何激励。至于限制DAG的宽度，完全可以在选择父节点时，给新产生节点赋予更高的权重。</p>\n<blockquote>\n<p><strong>那么，是否可以重新设计手续费结构，将其分配给那些维护网络正常运行的节点？</strong></p>\n</blockquote>\n<p>上面我们讨论到了对于Hub节点的激励，手续费中应该加入给Hub节点的部分；同时，去除分给子单元的部分，而代以更好的父节点选择算法。</p>\n"},{"title":"ByteBall网络节点通信协议详解","date":"2018-06-14T14:39:55.000Z","_content":"\n## ByteBall网络节点通信协议详解\n\nP2P网络是区块链网络的基础，网络中各个节点通过相互交换消息实现各种功能，包括收发交易、数据同步等操作。本文将对ByteBall网络节点的通信接口进行详细分析。\n\nByteBall网络节点之间采用websocket连接，采用json格式消息进行通信，消息可表示为`{type: type, content: content}`。ByteBall中的消息类型主要包括三类，即消息的type包括三种`request`、`response`以及`justsaying`，当然也可以自定义其它类型的消息。下面对消息的具体格式和处理流程进行解析。\n\n### request：请求消息\n\n请求消息的格式为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: command,\n        params: params\n    }\n}\n```\n\n其中，`tag`为request消息的BASE64哈希值。\n\n发送请求消息的函数原型为：\n\n```javascript\nfunction sendRequest(ws, command, params, bReroutable, responseHandler)\n// ws: 发送请求的websocket连接\n// command: 请求命令\n// params: 请求参数\n// bReroutable: 是否重新路由\n// responseHandler: 请求响应处理回调函数\n```\n\n通过`sendRequest()`发出的每个请求会生成一个`tag`作为该请求的标识，并在内存中保留该请求的相关处理信息：\n\n```javascript\nws.assocPendingRequests[tag] = {\n    request: request,\n    responseHandlers: [responseHandler],\n    reroute: reroute,\n    reroute_timer: reroute_timer,\n    cancel_timer: cancel_timer\n}\n```\n\n当请求发出后，若对方没有回应时有两种选择，一种是采用`reroute`，另一种是`cancel`。`reroute`的`timeout`为5s，`cancel`的`timeout`时间为300秒。\n\n当接收到响应后（位于函数`handleResponse()`），在调用相应回调函数`responseHandlers`后，请求信息`ws.assocPendingRequests[tag]`被删除。\n\n如果相关的连接被关闭，则清理该连接上的所有请求信息（位于函数`cancelRequestOnClosedConnection()`）。\n\n### response：响应消息\n\n响应消息的格式为：\n\n```json\n{\n    type: 'response',\n    content: {\n        tag: tag,\n        response: response\n    }\n}\n```\n\n其中，`tag`对应于请求消息中的`tag`。\n\n发送响应消息的函数原型为：\n\n```javascript\nfunction sendResponse(ws, tag, response)\n// ws: 发送响应的websocket连接\n// tag: 发送响应对应的tag\n// response: 响应消息内容\n```\n\n当收到对端节点请求后，设置`ws.assocInPreparingResponse[tag]=true`，并在回复响应后删除。\n\n### justsaying：其它消息\n\n其它消息包括的内容比较多，比如版本、心跳、hub登录等，其格式为：\n\n```json\n{\n    type: 'justsaying',\n    content: {\n        subject: subject,\n        body: body\n    }\n}\n```\n\n发送其它消息的函数原型为：\n\n```javascript\nfunction sendJustsaying(ws, subject, body)\n// ws: 发送消息的websocket连接\n// subject: 消息主题\n// body: 消息内容\n```\n\n### 常见通信接口\n\n#### 获取见证人列表（get_witnesses）\n\n请求消息为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: 'get_witnesses'\n    }\n}\n```\n\n收到请求后，从数据库中读取当前的见证人列表并返回\n\n```javascript\nmyWitnesses.readMyWitnesses(function(arrWitnesses){\n    sendResponse(ws, tag, arrWitnesses);\n}, 'wait');\n```\n\n比如：\n\n```javascript\n[ 'BVVJ2K7ENPZZ3VYZFWQWK7ISPCATFIW3',\n  'DJMMI5JYA5BWQYSXDPRZJVLW3UGL3GJS',\n  'FOPUBEUPBC6YLIQDLKL6EW775BMV7YOH',\n  'GFK3RDAPQLLNCMQEVGGD2KCPZTLSG3HN',\n  'H5EZTQE7ABFH27AUDTQFMZIALANK6RBG',\n  'I2ADHGP4HL6J37NQAD73J7E5SKFIXJOT',\n  'JEDZYC2HMGDBIDQKG3XSTXUSHMCBK725',\n  'JPQKPRI5FMTQRJF4ZZMYZYDQVRD55OTC',\n  'OYW2XTDKSNKGSEZ27LMGNOPJSYIXHBHC',\n  'S7N5FE42F6ONPNDQLCF64E2MGFYKQR2I',\n  'TKT4UESIKTTRALRRLWS4SENSTJX6ODCW',\n  'UENJPVZ7HVHM6QGVGT6MWOJGGRTUTJXQ' ]\n```\n\n`network.js`中在函数`initWitenessesIfNecessary()`中使用。\n\n#### 获取节点列表（get_peers）\n\n请求消息为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: 'get_peers'\n    }\n}\n```\n\n返回对端节点已连接的节点列表\n\n```javascript\nsendResponse(ws, tag, arrPeerUrls)\n```\n\n比如:\n\n```javascript\n[ 'wss://byteball.fr/bb',\n  'wss://byteball-hub.com/bb',\n  'wss://hub.byteball.ee' ]\n```\n\n`network.js`中可以使用`requestPeers()`函数发出请求。\n\n#### 获取交易数据（get_joint）\n\n请求消息为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: 'get_joint',\n        params: unit\n    }\n}\n```\n\n若找到，则返回响应交易数据；否则，返回交易未找到。\n\n```javascript\nstorage.readJoint(db, unit, {\n    ifFound: function(objJoint){\n        sendJoint(ws, objJoint, tag);\n    },\n    ifNotFound: function(){\n        sendResponse(ws, tag, {joint_not_found: unit});\n    }\n});\n```\n\n比如:\n\n```javascript\n{ joint:\n   { unit:\n      { unit: 'OcrOftkwCwTYAaGq0zV8FecAK/CKED++Ddewh2c2M60=',\n        version: '1.0',\n        alt: '1',\n        witness_list_unit: 'oj8yEksX9Ubq7lLc+p6F2uyHUuynugeVq4+ikT67X6E=',\n        last_ball_unit: 'p7obFdGHM5pTWPytNeRIjmamBe7485aDTzuddWI9yWY=',\n        last_ball: 'wmiP2BvT7FFFtwy5qB+UsA4j8I5KbmBVA6mFCgwQUas=',\n        headers_commission: 344,\n        payload_commission: 157,\n        main_chain_index: 2791799,\n        timestamp: 1528796161,\n        parent_units: [Array],\n        authors: [Array],\n        messages: [Array] } } }\n```\n\n`network.js`中可以使用`requestJoints()`函数发出请求。\n\n#### 发送交易数据（post_joint）\n\n请求消息为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: 'post_joint',\n        params: joint\n    }\n}\n```\n\n接收到请求后，对`joint`数据进行检查，若通过，则返回`accepted`；否则，返回相应错误。\n\n```javascript\nhandlePostedJoint(ws, objJoint, function(error){\n    error ? sendErrorResponse(ws, tag, error) : sendResponse(ws, tag, 'accepted');\n});\n```\n\n使用方法可参考`network.js`中的`postJointToLightVendor()`函数。\n\n#### 发送心跳数据（heartbeat）\n\n请求消息为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: 'heartbeat'\n    }\n}\n```\n\n使用方法可参考`network.js`中的`heartbeat()`函数。\n\nByteBall网络中节点之间依靠心跳请求维持连接，当超过`HEARTBEAT_RESPONSE_TIMEOUT=60s`没有收到对端节点的消息时，将会关闭与该节点的连接。ByteBall中默认3-4s向对端节点发送心跳请求。\n\n#### 订阅交易数据（subscribe）\n\n请求消息为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: 'subscribe',\n        params: {\n            subscription_id: subscription_id, // 订阅编号\n            last_mci: last_mci                // 订阅起始mci\n        }\n    }\n}\n```\n\n接收到请求后，若`last_mci>0`，则返回从该mci起始的joints；否则，返回当前网络中的叶子交易。\n\n```javascript\nif (ValidationUtils.isNonnegativeInteger(params.last_mci))\n    sendJointsSinceMci(ws, params.last_mci);\nelse\n    sendFreeJoints(ws);\n```\n\n订阅后，当收到新交易时，会向已订阅的节点进行转发（`forwardJoint(ws, objJoint)`）。使用方法可参考`network.js`中的`subscribe()`函数。\n\n#### 同步交易数据（catchup）\n\n请求消息为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: 'catchup',\n        params: {\n            witnesses: witnesses,                 // 见证人列表\n            last_stable_mci: last_stable_mci,     // 稳定mci\n            last_known_mci: last_known_mci        // 已知mci\n        }\n    }\n}\n```\n\n必须在订阅状态下使用，接收到请求后，返回主链序号从`last_known_mci`至`last_stable_mci`之间的交易数据及其相关信息`objCatchupChain`。\n\n```javascript\ncatchup.prepareCatchupChain(catchupRequest, {\n    ifError: function(error){\n        sendErrorResponse(ws, tag, error);\n        unlock();\n    },\n    ifOk: function(objCatchupChain){\n        sendResponse(ws, tag, objCatchupChain);\n        unlock();\n    }\n});\n```\n\n`objCatchupChain`包括以下几部分信息：\n\n```javascript\nvar objCatchupChain = {\n    unstable_mc_joints: [], // 候选主链上未稳定的单元列表\n    stable_last_ball_joints: [], // 已稳定的单元列表\n    witness_change_and_definition_joints: [] // 见证人或地址定义发生变化的单元列表\n};\n```\n\n使用方法可参考`network.js`中的`requestCatchup()`函数。\n\n#### 获取哈希树（get_hash_tree）\n\n请求消息为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: 'get_hash_tree',\n        params: {\n            from_ball: from_ball,\n            to_ball: to_bal\n        }\n    }\n}\n```\n\n必须在订阅状态下使用，接收到请求后，返回从`from_ball`至`to_ball`主链序号之间的所有ball交易数据。使用方法可参考`network.js`中的`requestNextHashTree()`函数。\n\n#### 获取主链序号（get_last_mci）\n\n请求消息为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: 'get_last_mci'\n    }\n}\n```\n\n返回目前最大的主链序号。\n\n#### 通过Hub向设备发送消息（hub/deliver）\n\n请求消息为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: 'hub/deliver',\n        params: {\n            to: device_address,\n            pubkey: pubkey,\n            signature: signature,\n            encrypted_package: encrypted_message\n        }\n    }\n}\n```\n\n通过Hub向其它设备发送加密消息，使用方法可以参考`device.js`中的`sendPreparedMessageToConnectedHub()`函数。\n\n#### 从Hub获取配对设备临时公钥（hub/get_temp_pubkey）\n\n请求消息为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: 'hub/get_temp_pubkey',\n        params: permanent_pubkey\n    }\n}\n```\n\n通过永久公钥`permanent_pubkey`从Hub处获取对端设备的临时公钥。\n\n#### 设备向Hub更新临时公钥（hub/temp_pubkey）\n\n请求消息为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: 'hub/temp_pubkey',\n        params: {\n            temp_pubkey: temp_pubkey,\n            pubkey: permanent_pubkey,\n            signature: signature\n        }\n    }\n}\n```\n\n向Hub更新本设备的临时公钥，设备必须登陆到Hub上。接收到请求后，对参数及签名进行验证，如果成功则返回响应消息`updated`。\n\n#### 开启通知（hub/enable_notification）\n\n请求消息为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: 'hub/enable_notification',\n        params: registrationId\n    }\n}\n```\n\n设备开启推送通知，目前还未使用。\n\n#### 关闭通知（hub/disable_notification）\n\n请求消息为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: 'hub/disable_notification',\n        params: registrationId\n    }\n}\n```\n\n设备关闭推送通知，目前还未使用。\n\n#### 获取机器人列表（hub/get_bots）\n\n请求消息为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: 'hub/get_bots'\n    }\n}\n```\n\n返回Hub节点上的机器人列表，比如：\n\n```json\n[...\n { id: 27,\n    name: 'Worldopoly ICO',\n    pairing_code: 'AwyoKVsyxajATgLXa9Jhh8NBRTnUaZNHdi85c43g+GoJ@byteball.org/bb#0000',\n    description: 'Worldopoly is the world’s first mobile game combining AR, AI, Geolocationing, Blockchain, and DAG. The ICO is active until 17 May 2018, and you can buy WPT tokens with Bytes, BTC, or Ether.  WPT token is issued both on Byteball and Ethereum platforms but investors on Byteball platform receive increased bonus (even if they pay in ETH or BTC) for investments up to 30 ETH.\\n\\nWebsite: https://worldopoly.io' },\n  { id: 28,\n    name: 'WhiteLittle Airdrop 小白币糖果机器人',\n    pairing_code: 'Ahe4jkq5GvgLQ2h5ftqRMjWBBumUEN96tWoSfEQ9TGHF@byteball.org/bb#0000',\n    description: '小白链机器人送出小白币糖果。小白链是专门为想进入区块链行业的小白们量身打造的帮助平台，其目的是建立一个基于字节雪球技术为小白们提供有效帮助的信息发现生态平台。小白链的设计初衷是构建一套合理的激励机制，能够及时得到帮助，又让提供帮助的区块链从业者得到合理的回报。\\n\\n开发者：123cb.net' },\n  { id: 32,\n    name: 'Exchange bot for dual-chain tokens',\n    pairing_code: 'A+dAU2j/Tm9lnlmc2SryltsfVzOq9GLPxccAq+dClCxr@byteball.org/bb#f7b42a61a3ba6a34cbeeb18d37979927ad1103fc',\n    description: 'For tokens issued both on Byteball and Ethereum platforms, the bot enables seamless exchange between Byteball and Ethereum tokens.\\n\\nDeveloper: HDRProtocol, https://github.com/HDRProtocol/exchanger' },\n ...]\n```\n\n#### 获取资产元数据（hub/get_asset_metadata）\n\n请求消息为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: 'hub/get_asset_metadata',\n        params: asset\n    }\n}\n```\n\n从Hub节点上获取已发布资产的信息，比如：\n\n```json\n{ metadata_unit: 'Rg3DNkDJJ2DWfIzTj3Ypz8CBGi617wl07QkJq7Z5soc=',\n  registry_address: 'AM6GTUKENBYA54FYDAKX2VLENFZIMXWG',\n  suffix: null }\n```\n\n具体使用方法可以参考`wallet.js`中的`fetchAssetMetadata()`函数。\n\n#### 从Hub获取交易历史（light/get_history）\n\n请求消息为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: 'hub/get_asset_metadata',\n        params: {\n            witnesses: witnesses,\n            requested_joints: joints,\n            addresses: addresses\n        }\n    }\n}\n```\n\n请求特定交易或地址的历史数据，仅适用于轻节点，具体使用方法可以参考`network.js`中的`requestHistoryFor()`函数。轻钱包可以根据获取的历史数据构建证据链，从而验证交易的可靠性。\n\n对于轻钱包而言，它本身不保存所有的交易数据，而需要采用`requestFromLightVendor()`从`Vendor`处获取数据，目前`Vendor`为`Hub`节点。\n\n#### 获取连接证明（light/get_link_proofs）\n\n请求消息为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: 'hub/get_link_proofs',\n        params: units\n    }\n}\n```\n\n获取特定交易的连接证明，仅适用于轻节点，具体使用方法可以参考`network.js`中的`checkThatEachChainElementIncludesThePrevious()`。\n\n#### 获取父单元及见证单元（light/get_parents_and_last_ball_and_witness_list_unit）\n\n请求消息为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: 'hub/get_parents_and_last_ball_and_witness_list_unit',\n        params: {\n            witnesses: witnesses\n        }\n    }\n}\n```\n\n轻节点获取这些信息后，可用于构造自己的交易数据。返回的响应数据，比如：\n\n```json\n{ parent_units: [ 'ovIwMvA9MMKgxiHrslJQhQGzUAIXlRs47grVdG/er3s=' ],\n  last_stable_mc_ball: 'osJhTYZv+HS5hGhH01A/3PKpyaxPRbtcxQEaUj/a/h4=',\n  last_stable_mc_ball_unit: '+9fxcmxM90mhIxvtJ3yo++tAoYofyoDmPqBQEwbEHDA=',\n  last_stable_mc_ball_mci: 2805208,\n  witness_list_unit: 'oj8yEksX9Ubq7lLc+p6F2uyHUuynugeVq4+ikT67X6E=' }\n```\n\n具体使用方法可以参考`composer.js`中的`composeJoint()`函数。\n\n#### 查询用户认证信息（light/get_attestation）\n\n请求消息为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: 'hub/get_attestation',\n        params: {\n        \tattestor_address: attestor_address,\n        \tfield: field,\n        \tvalue: value\n    \t}\n    }\n}\n```\n\n接收到请求后，如果Hub查询到相应的认证信息，返回认证信息所在的交易单元。\n\n#### 发送版本信息（version）\n\n消息格式为：\n\n```javascript\n{\n    type: 'justsaying',\n    content: {\n        subject: 'version',\n        body: {\n            protocol_version: protocol_version,\n            alt: alt,\n            library: name,\n            library_version: version,\n            program: program,\n            program_version: program_version\n        }\n    }\n}\n```\n\n具体用法可以参考`network.js`中的`sendVersion()`函数。\n\n#### 已发送完所有交易（free_joints_end）\n\n消息格式为：\n\n```javascript\n{\n    type: 'justsaying',\n    content: {\n        subject: 'free_joints_end',\n        body: null\n    }\n}\n```\n\n用于通知对方所有的叶子交易已发送完毕，具体用法可参考`network.js`中的`sendFreeJoints()`及`sendJointsSinceMci()`\n\n#### 发送隐私交易（private_payment）\n\n消息格式为：\n\n```javascript\n{\n    type: 'justsaying',\n    content: {\n        subject: 'private_payment',\n        body: privateElement\n    }\n}\n```\n\n用来向对方发送隐私交易的证据链，但该条`justsaying`消息并没有使用。实际上隐私资产是在两个设备之间通过加密消息进行点对点发送的，相关代码位于`wallet_general.js`的`sendPrivatePayments()`中，发送加密消息采用的是`device.js`中的`sendMessageToDevice()`（底层使用的是`hub/deliver`接口）。\n\n#### 登录Hub（hub/login）\n\n消息格式为：\n\n```javascript\n{\n    type: 'justsaying',\n    content: {\n        subject: 'hub/login',\n        body: {\n            challenge: challenge,\n            pubkey: pubkey,\n\t\t\tsignature: signature\n        }\n    }\n}\n```\n\n该消息用于设备登录Hub。\n\n#### 获取设备新消息（hub/refresh）\n\n消息格式为：\n\n```javascript\n{\n    type: 'justsaying',\n    content: {\n        subject: 'hub/refresh',\n        body: null\n    }\n}\n```\n\n用于从Hub上获取该设备还未接收的消息。\n\n#### 发送配对消息（hub/challenge）\n\n消息格式为：\n\n```javascript\n{\n    type: 'justsaying',\n    content: {\n        subject: 'hub/challenge',\n        body: challenge\n    }\n}\n```\n\n由Hub发送给设备，用于设备登录。\n\n#### 发送设备消息（hub/message）\n\n消息格式为：\n\n```javascript\n{\n    type: 'justsaying',\n    content: {\n        subject: 'hub/message',\n        body: {\n            message_hash: message_hash,\n            message: message\n        }\n    }\n}\n```\n\n由Hub转发给设备的消息，可配合`hub/deliver`使用，具体用法可参考`sendStoredDeviceMessages()`。\n\n#### 轻钱包交易更新消息（light/have_updates）\n\n消息格式为：\n\n```javascript\n{\n    type: 'justsaying',\n    content: {\n        subject: 'light/have_updates',\n        body: null\n    }\n}\n```\n\n当轻钱包使用`light/get_history`从Hub上请求交易历史时，Hub会在`watched_light_addresses`中记录下请求的地址列表或者`watched_light_units`中记录下请求的交易列表。当相关的交易达到稳定时，Hub将通过`light/have_updates`消息通知轻钱包。然后，轻钱包可以通过`light/get_history`确定已达到稳定的交易单元。\n\n#### 添加轻钱包监视地址（light/new_address_to_watch）\n\n消息格式为：\n\n```javascript\n{\n    type: 'justsaying',\n    content: {\n        subject: 'light/new_address_to_watch',\n        body: address\n    }\n}\n```\n\n轻钱包向Hub请求将地址加入`watch_light_addresses`表中，从而可以从Hub接收相应地址的交易信息，具体用法可参考`network.js`中的`addLightWatchedAddress()`函数。\n\n#### 交易价格消息（exchange_rates）\n\n消息格式为：\n\n```javascript\n{\n    type: 'justsaying',\n    content: {\n        subject: 'exchange_rates',\n        body: exchangeRates\n    }\n}\n```\n\n由Hub广播的交易价格消息，比如：\n\n```json\n[ 'justsaying',\n  { subject: 'exchange_rates',\n    body: { GBYTE_USD: 119.1914071839, GBB_USD: 3.6949336227009 } } ]\n```\n\n\n\n### 通信接口列表\n\n| type       | content                                                      | function                 | 功能      |\n| ---------- | ------------------------------------------------------------ | ------------------------ | ------------ |\n| request    | {tag: tag, command: command, params: params}                 | sendRequest()            | 通用发送请求 |\n|            | {tag: tag, command: 'get_peers'}                             | requestPeers()           | 请求节点列表 |\n|            | {tag: tag, command: 'get_witnesses'}             | initWitenessesIfNecessary()          | 请求见证人列表 |\n|            | {tag: tag, command: 'get_joint', params: unit}             | requestJoints()          | 请求交易信息 |\n|            | {tag: tag, command: 'post_joint', params: joint}             | postJointToLightVendor()          | 发送交易信息 |\n|            | {tag: tag, command: 'heartbeat'}                             | heartbeat()              | 心跳请求     |\n|            | {tag: tag, command: 'subscribe', params: {subscription_id, last_mci}} | subscribe()              | 订阅交易     |\n|            | {tag: tag, command: 'catchup', params: {witnesses, last_stable_mci, last_known_mci}}             | requestCatchup()          | 同步数据 |\n|            | {tag: tag, command: 'get_hash_tree', params: {from_ball,to_ball}}             | requestNextHashTree()          | 请求哈希树 |\n|            | {tag: tag, command: 'get_last_mci'}                             |               | 获取主链序号     |\n|            | {tag: tag, command: 'hub/deliver', params: {encrypted_package, to, pubkey, signature}} |               | 通过Hub向设备发送消息   |\n|            | {tag: tag, command: 'hub/get_temp_pubkey', params: pubkey} |               | 从Hub获取配对设备临时公钥     |\n|            | {tag: tag, command: 'hub/temp_pubkey', params: {temp_pubkey, pubkey, signature}} |               | 设备向Hub更新临时公钥     |\n|            | {tag: tag, command: 'hub/enable_notification'} |               | 开启通知 |\n|            | {tag: tag, command: 'hub/disable_notification'} |               | 关闭通知 |\n|            | {tag: tag, command: 'hub/get_bots'} |               | 获取机器人列表 |\n|            | {tag: tag, command: 'hub/get_asset_metadata', params: asset} | fetchAssetMetadata() | 获取资产元数据 |\n|            | {tag: tag, command: 'light/get_history', params: {witnesses, requested_joints, addresses}} | requestHistoryFor() | 从Hub获取交易历史     |\n|            | {tag: tag, command: 'light/get_link_proofs', params: units |               | 获取连接证明     |\n|            | {tag: tag, command: 'light/get_parents_and_last_ball_and_witness_list_unit', params: {witnesses}} | composeJoint()              | 获取父单元及见证单元     |\n|            | {tag: tag, command: 'light/get_attestation', params: { attestor_address, field, value}} |               | 查询用户认证信息 |\n| response   | {tag: tag, response: response}                               | sendResponse()           | 通用发送响应 |\n|            | {tag: tag, response: {error: error}}                         | sendErrorResponse()      | 发送响应错误 |\n| justsaying | {subject: subject, body: body}                               | sendJustsaying()         | 发送其它消息 |\n|            | {subject: 'error', body: error}                              | sendError()              | 发送错误消息 |\n|            | {subject: 'info', body: content}                             | sendInfo()               | 发送通知消息 |\n|            | {subject: 'result', body: content}                           | sendResult()             | 发送结果消息 |\n|            | {subject: 'result', body: {unit, result: 'error', error}} | sendErrorResult()        | 发送错误结果 |\n|            | {subject: 'version', body: {protocol_version, alt, library, library_version, program, program_version}} | sendVersion()            | 发送版本信息 |\n|            | {subject: 'new_version', body: {version}} |             | 发现新版本 |\n|            | {subject: ' hub/push_project_number', body: { projectNumber}} |             | 推送API编号 |\n|            | {subject: 'bugreport', body: {message, exception}} |             | 报告bug |\n|            | {subject: 'free_joints_end', body: null} | sendFreeJoints() | 已发送完所有交易 |\n|            | {subject: 'private_payment', body: privateElements} |             | 发送隐私交易 |\n|            | {subject: 'my_url', body: url} |             | 发送连接地址 |\n|            | {subject: 'want_echo', body: echo_string} |             | 请求对方回应 |\n|            | {subject: 'your_echo', body: echo_string} |             | 发送回应信息 |\n|            | {subject: 'hub/login', body: {challenge, pubkey, signature}} |             | 登录Hub |\n|            | {subject: 'hub/refresh', body: null} |  | 获取设备新消息 |\n|            | {subject: 'hub/delete', body: message_hash} |  | 删除设备消息 |\n|            | {subject: 'hub/challenge', body: challenge} |  | 发送配对消息 |\n|            | {subject: 'hub/message', body: {message_hash, message}} | sendStoredDeviceMessages() | 发送设备消息 |\n|            | {subject: 'hub/message_box_status', body: 'has_more'/'empty'} | sendStoredDeviceMessages() | 设备消息状态 |\n|            | {subject: 'light/have_updates', body: null} |  | 轻钱包交易更新消息 |\n|            | {subject: 'light/new_address_to_watch', body: address}       | addLightWatchedAddress() | 添加轻钱包监视地址 |\n|            | {subject: 'exchange_rates', body: exchangeRates} |  | 交易价格消息 |\n|            | {subject: 'upgrade_required', body: null} |  | 强制升级消息 |\n\n\n\n\n\n\n\n\n\n","source":"_posts/2018-06-14-byteball-network-protocol.md","raw":"---\ntitle: ByteBall网络节点通信协议详解\ndate: 2018-06-14 22:39:55\ncategories: 谈点区块链\ntags:\n  - dag\n  - blockchain\n  - byteball\n  - bitcoin\n---\n\n## ByteBall网络节点通信协议详解\n\nP2P网络是区块链网络的基础，网络中各个节点通过相互交换消息实现各种功能，包括收发交易、数据同步等操作。本文将对ByteBall网络节点的通信接口进行详细分析。\n\nByteBall网络节点之间采用websocket连接，采用json格式消息进行通信，消息可表示为`{type: type, content: content}`。ByteBall中的消息类型主要包括三类，即消息的type包括三种`request`、`response`以及`justsaying`，当然也可以自定义其它类型的消息。下面对消息的具体格式和处理流程进行解析。\n\n### request：请求消息\n\n请求消息的格式为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: command,\n        params: params\n    }\n}\n```\n\n其中，`tag`为request消息的BASE64哈希值。\n\n发送请求消息的函数原型为：\n\n```javascript\nfunction sendRequest(ws, command, params, bReroutable, responseHandler)\n// ws: 发送请求的websocket连接\n// command: 请求命令\n// params: 请求参数\n// bReroutable: 是否重新路由\n// responseHandler: 请求响应处理回调函数\n```\n\n通过`sendRequest()`发出的每个请求会生成一个`tag`作为该请求的标识，并在内存中保留该请求的相关处理信息：\n\n```javascript\nws.assocPendingRequests[tag] = {\n    request: request,\n    responseHandlers: [responseHandler],\n    reroute: reroute,\n    reroute_timer: reroute_timer,\n    cancel_timer: cancel_timer\n}\n```\n\n当请求发出后，若对方没有回应时有两种选择，一种是采用`reroute`，另一种是`cancel`。`reroute`的`timeout`为5s，`cancel`的`timeout`时间为300秒。\n\n当接收到响应后（位于函数`handleResponse()`），在调用相应回调函数`responseHandlers`后，请求信息`ws.assocPendingRequests[tag]`被删除。\n\n如果相关的连接被关闭，则清理该连接上的所有请求信息（位于函数`cancelRequestOnClosedConnection()`）。\n\n### response：响应消息\n\n响应消息的格式为：\n\n```json\n{\n    type: 'response',\n    content: {\n        tag: tag,\n        response: response\n    }\n}\n```\n\n其中，`tag`对应于请求消息中的`tag`。\n\n发送响应消息的函数原型为：\n\n```javascript\nfunction sendResponse(ws, tag, response)\n// ws: 发送响应的websocket连接\n// tag: 发送响应对应的tag\n// response: 响应消息内容\n```\n\n当收到对端节点请求后，设置`ws.assocInPreparingResponse[tag]=true`，并在回复响应后删除。\n\n### justsaying：其它消息\n\n其它消息包括的内容比较多，比如版本、心跳、hub登录等，其格式为：\n\n```json\n{\n    type: 'justsaying',\n    content: {\n        subject: subject,\n        body: body\n    }\n}\n```\n\n发送其它消息的函数原型为：\n\n```javascript\nfunction sendJustsaying(ws, subject, body)\n// ws: 发送消息的websocket连接\n// subject: 消息主题\n// body: 消息内容\n```\n\n### 常见通信接口\n\n#### 获取见证人列表（get_witnesses）\n\n请求消息为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: 'get_witnesses'\n    }\n}\n```\n\n收到请求后，从数据库中读取当前的见证人列表并返回\n\n```javascript\nmyWitnesses.readMyWitnesses(function(arrWitnesses){\n    sendResponse(ws, tag, arrWitnesses);\n}, 'wait');\n```\n\n比如：\n\n```javascript\n[ 'BVVJ2K7ENPZZ3VYZFWQWK7ISPCATFIW3',\n  'DJMMI5JYA5BWQYSXDPRZJVLW3UGL3GJS',\n  'FOPUBEUPBC6YLIQDLKL6EW775BMV7YOH',\n  'GFK3RDAPQLLNCMQEVGGD2KCPZTLSG3HN',\n  'H5EZTQE7ABFH27AUDTQFMZIALANK6RBG',\n  'I2ADHGP4HL6J37NQAD73J7E5SKFIXJOT',\n  'JEDZYC2HMGDBIDQKG3XSTXUSHMCBK725',\n  'JPQKPRI5FMTQRJF4ZZMYZYDQVRD55OTC',\n  'OYW2XTDKSNKGSEZ27LMGNOPJSYIXHBHC',\n  'S7N5FE42F6ONPNDQLCF64E2MGFYKQR2I',\n  'TKT4UESIKTTRALRRLWS4SENSTJX6ODCW',\n  'UENJPVZ7HVHM6QGVGT6MWOJGGRTUTJXQ' ]\n```\n\n`network.js`中在函数`initWitenessesIfNecessary()`中使用。\n\n#### 获取节点列表（get_peers）\n\n请求消息为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: 'get_peers'\n    }\n}\n```\n\n返回对端节点已连接的节点列表\n\n```javascript\nsendResponse(ws, tag, arrPeerUrls)\n```\n\n比如:\n\n```javascript\n[ 'wss://byteball.fr/bb',\n  'wss://byteball-hub.com/bb',\n  'wss://hub.byteball.ee' ]\n```\n\n`network.js`中可以使用`requestPeers()`函数发出请求。\n\n#### 获取交易数据（get_joint）\n\n请求消息为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: 'get_joint',\n        params: unit\n    }\n}\n```\n\n若找到，则返回响应交易数据；否则，返回交易未找到。\n\n```javascript\nstorage.readJoint(db, unit, {\n    ifFound: function(objJoint){\n        sendJoint(ws, objJoint, tag);\n    },\n    ifNotFound: function(){\n        sendResponse(ws, tag, {joint_not_found: unit});\n    }\n});\n```\n\n比如:\n\n```javascript\n{ joint:\n   { unit:\n      { unit: 'OcrOftkwCwTYAaGq0zV8FecAK/CKED++Ddewh2c2M60=',\n        version: '1.0',\n        alt: '1',\n        witness_list_unit: 'oj8yEksX9Ubq7lLc+p6F2uyHUuynugeVq4+ikT67X6E=',\n        last_ball_unit: 'p7obFdGHM5pTWPytNeRIjmamBe7485aDTzuddWI9yWY=',\n        last_ball: 'wmiP2BvT7FFFtwy5qB+UsA4j8I5KbmBVA6mFCgwQUas=',\n        headers_commission: 344,\n        payload_commission: 157,\n        main_chain_index: 2791799,\n        timestamp: 1528796161,\n        parent_units: [Array],\n        authors: [Array],\n        messages: [Array] } } }\n```\n\n`network.js`中可以使用`requestJoints()`函数发出请求。\n\n#### 发送交易数据（post_joint）\n\n请求消息为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: 'post_joint',\n        params: joint\n    }\n}\n```\n\n接收到请求后，对`joint`数据进行检查，若通过，则返回`accepted`；否则，返回相应错误。\n\n```javascript\nhandlePostedJoint(ws, objJoint, function(error){\n    error ? sendErrorResponse(ws, tag, error) : sendResponse(ws, tag, 'accepted');\n});\n```\n\n使用方法可参考`network.js`中的`postJointToLightVendor()`函数。\n\n#### 发送心跳数据（heartbeat）\n\n请求消息为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: 'heartbeat'\n    }\n}\n```\n\n使用方法可参考`network.js`中的`heartbeat()`函数。\n\nByteBall网络中节点之间依靠心跳请求维持连接，当超过`HEARTBEAT_RESPONSE_TIMEOUT=60s`没有收到对端节点的消息时，将会关闭与该节点的连接。ByteBall中默认3-4s向对端节点发送心跳请求。\n\n#### 订阅交易数据（subscribe）\n\n请求消息为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: 'subscribe',\n        params: {\n            subscription_id: subscription_id, // 订阅编号\n            last_mci: last_mci                // 订阅起始mci\n        }\n    }\n}\n```\n\n接收到请求后，若`last_mci>0`，则返回从该mci起始的joints；否则，返回当前网络中的叶子交易。\n\n```javascript\nif (ValidationUtils.isNonnegativeInteger(params.last_mci))\n    sendJointsSinceMci(ws, params.last_mci);\nelse\n    sendFreeJoints(ws);\n```\n\n订阅后，当收到新交易时，会向已订阅的节点进行转发（`forwardJoint(ws, objJoint)`）。使用方法可参考`network.js`中的`subscribe()`函数。\n\n#### 同步交易数据（catchup）\n\n请求消息为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: 'catchup',\n        params: {\n            witnesses: witnesses,                 // 见证人列表\n            last_stable_mci: last_stable_mci,     // 稳定mci\n            last_known_mci: last_known_mci        // 已知mci\n        }\n    }\n}\n```\n\n必须在订阅状态下使用，接收到请求后，返回主链序号从`last_known_mci`至`last_stable_mci`之间的交易数据及其相关信息`objCatchupChain`。\n\n```javascript\ncatchup.prepareCatchupChain(catchupRequest, {\n    ifError: function(error){\n        sendErrorResponse(ws, tag, error);\n        unlock();\n    },\n    ifOk: function(objCatchupChain){\n        sendResponse(ws, tag, objCatchupChain);\n        unlock();\n    }\n});\n```\n\n`objCatchupChain`包括以下几部分信息：\n\n```javascript\nvar objCatchupChain = {\n    unstable_mc_joints: [], // 候选主链上未稳定的单元列表\n    stable_last_ball_joints: [], // 已稳定的单元列表\n    witness_change_and_definition_joints: [] // 见证人或地址定义发生变化的单元列表\n};\n```\n\n使用方法可参考`network.js`中的`requestCatchup()`函数。\n\n#### 获取哈希树（get_hash_tree）\n\n请求消息为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: 'get_hash_tree',\n        params: {\n            from_ball: from_ball,\n            to_ball: to_bal\n        }\n    }\n}\n```\n\n必须在订阅状态下使用，接收到请求后，返回从`from_ball`至`to_ball`主链序号之间的所有ball交易数据。使用方法可参考`network.js`中的`requestNextHashTree()`函数。\n\n#### 获取主链序号（get_last_mci）\n\n请求消息为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: 'get_last_mci'\n    }\n}\n```\n\n返回目前最大的主链序号。\n\n#### 通过Hub向设备发送消息（hub/deliver）\n\n请求消息为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: 'hub/deliver',\n        params: {\n            to: device_address,\n            pubkey: pubkey,\n            signature: signature,\n            encrypted_package: encrypted_message\n        }\n    }\n}\n```\n\n通过Hub向其它设备发送加密消息，使用方法可以参考`device.js`中的`sendPreparedMessageToConnectedHub()`函数。\n\n#### 从Hub获取配对设备临时公钥（hub/get_temp_pubkey）\n\n请求消息为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: 'hub/get_temp_pubkey',\n        params: permanent_pubkey\n    }\n}\n```\n\n通过永久公钥`permanent_pubkey`从Hub处获取对端设备的临时公钥。\n\n#### 设备向Hub更新临时公钥（hub/temp_pubkey）\n\n请求消息为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: 'hub/temp_pubkey',\n        params: {\n            temp_pubkey: temp_pubkey,\n            pubkey: permanent_pubkey,\n            signature: signature\n        }\n    }\n}\n```\n\n向Hub更新本设备的临时公钥，设备必须登陆到Hub上。接收到请求后，对参数及签名进行验证，如果成功则返回响应消息`updated`。\n\n#### 开启通知（hub/enable_notification）\n\n请求消息为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: 'hub/enable_notification',\n        params: registrationId\n    }\n}\n```\n\n设备开启推送通知，目前还未使用。\n\n#### 关闭通知（hub/disable_notification）\n\n请求消息为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: 'hub/disable_notification',\n        params: registrationId\n    }\n}\n```\n\n设备关闭推送通知，目前还未使用。\n\n#### 获取机器人列表（hub/get_bots）\n\n请求消息为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: 'hub/get_bots'\n    }\n}\n```\n\n返回Hub节点上的机器人列表，比如：\n\n```json\n[...\n { id: 27,\n    name: 'Worldopoly ICO',\n    pairing_code: 'AwyoKVsyxajATgLXa9Jhh8NBRTnUaZNHdi85c43g+GoJ@byteball.org/bb#0000',\n    description: 'Worldopoly is the world’s first mobile game combining AR, AI, Geolocationing, Blockchain, and DAG. The ICO is active until 17 May 2018, and you can buy WPT tokens with Bytes, BTC, or Ether.  WPT token is issued both on Byteball and Ethereum platforms but investors on Byteball platform receive increased bonus (even if they pay in ETH or BTC) for investments up to 30 ETH.\\n\\nWebsite: https://worldopoly.io' },\n  { id: 28,\n    name: 'WhiteLittle Airdrop 小白币糖果机器人',\n    pairing_code: 'Ahe4jkq5GvgLQ2h5ftqRMjWBBumUEN96tWoSfEQ9TGHF@byteball.org/bb#0000',\n    description: '小白链机器人送出小白币糖果。小白链是专门为想进入区块链行业的小白们量身打造的帮助平台，其目的是建立一个基于字节雪球技术为小白们提供有效帮助的信息发现生态平台。小白链的设计初衷是构建一套合理的激励机制，能够及时得到帮助，又让提供帮助的区块链从业者得到合理的回报。\\n\\n开发者：123cb.net' },\n  { id: 32,\n    name: 'Exchange bot for dual-chain tokens',\n    pairing_code: 'A+dAU2j/Tm9lnlmc2SryltsfVzOq9GLPxccAq+dClCxr@byteball.org/bb#f7b42a61a3ba6a34cbeeb18d37979927ad1103fc',\n    description: 'For tokens issued both on Byteball and Ethereum platforms, the bot enables seamless exchange between Byteball and Ethereum tokens.\\n\\nDeveloper: HDRProtocol, https://github.com/HDRProtocol/exchanger' },\n ...]\n```\n\n#### 获取资产元数据（hub/get_asset_metadata）\n\n请求消息为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: 'hub/get_asset_metadata',\n        params: asset\n    }\n}\n```\n\n从Hub节点上获取已发布资产的信息，比如：\n\n```json\n{ metadata_unit: 'Rg3DNkDJJ2DWfIzTj3Ypz8CBGi617wl07QkJq7Z5soc=',\n  registry_address: 'AM6GTUKENBYA54FYDAKX2VLENFZIMXWG',\n  suffix: null }\n```\n\n具体使用方法可以参考`wallet.js`中的`fetchAssetMetadata()`函数。\n\n#### 从Hub获取交易历史（light/get_history）\n\n请求消息为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: 'hub/get_asset_metadata',\n        params: {\n            witnesses: witnesses,\n            requested_joints: joints,\n            addresses: addresses\n        }\n    }\n}\n```\n\n请求特定交易或地址的历史数据，仅适用于轻节点，具体使用方法可以参考`network.js`中的`requestHistoryFor()`函数。轻钱包可以根据获取的历史数据构建证据链，从而验证交易的可靠性。\n\n对于轻钱包而言，它本身不保存所有的交易数据，而需要采用`requestFromLightVendor()`从`Vendor`处获取数据，目前`Vendor`为`Hub`节点。\n\n#### 获取连接证明（light/get_link_proofs）\n\n请求消息为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: 'hub/get_link_proofs',\n        params: units\n    }\n}\n```\n\n获取特定交易的连接证明，仅适用于轻节点，具体使用方法可以参考`network.js`中的`checkThatEachChainElementIncludesThePrevious()`。\n\n#### 获取父单元及见证单元（light/get_parents_and_last_ball_and_witness_list_unit）\n\n请求消息为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: 'hub/get_parents_and_last_ball_and_witness_list_unit',\n        params: {\n            witnesses: witnesses\n        }\n    }\n}\n```\n\n轻节点获取这些信息后，可用于构造自己的交易数据。返回的响应数据，比如：\n\n```json\n{ parent_units: [ 'ovIwMvA9MMKgxiHrslJQhQGzUAIXlRs47grVdG/er3s=' ],\n  last_stable_mc_ball: 'osJhTYZv+HS5hGhH01A/3PKpyaxPRbtcxQEaUj/a/h4=',\n  last_stable_mc_ball_unit: '+9fxcmxM90mhIxvtJ3yo++tAoYofyoDmPqBQEwbEHDA=',\n  last_stable_mc_ball_mci: 2805208,\n  witness_list_unit: 'oj8yEksX9Ubq7lLc+p6F2uyHUuynugeVq4+ikT67X6E=' }\n```\n\n具体使用方法可以参考`composer.js`中的`composeJoint()`函数。\n\n#### 查询用户认证信息（light/get_attestation）\n\n请求消息为：\n\n```json\n{\n    type: 'request',\n    content: {\n        tag: tag,\n        command: 'hub/get_attestation',\n        params: {\n        \tattestor_address: attestor_address,\n        \tfield: field,\n        \tvalue: value\n    \t}\n    }\n}\n```\n\n接收到请求后，如果Hub查询到相应的认证信息，返回认证信息所在的交易单元。\n\n#### 发送版本信息（version）\n\n消息格式为：\n\n```javascript\n{\n    type: 'justsaying',\n    content: {\n        subject: 'version',\n        body: {\n            protocol_version: protocol_version,\n            alt: alt,\n            library: name,\n            library_version: version,\n            program: program,\n            program_version: program_version\n        }\n    }\n}\n```\n\n具体用法可以参考`network.js`中的`sendVersion()`函数。\n\n#### 已发送完所有交易（free_joints_end）\n\n消息格式为：\n\n```javascript\n{\n    type: 'justsaying',\n    content: {\n        subject: 'free_joints_end',\n        body: null\n    }\n}\n```\n\n用于通知对方所有的叶子交易已发送完毕，具体用法可参考`network.js`中的`sendFreeJoints()`及`sendJointsSinceMci()`\n\n#### 发送隐私交易（private_payment）\n\n消息格式为：\n\n```javascript\n{\n    type: 'justsaying',\n    content: {\n        subject: 'private_payment',\n        body: privateElement\n    }\n}\n```\n\n用来向对方发送隐私交易的证据链，但该条`justsaying`消息并没有使用。实际上隐私资产是在两个设备之间通过加密消息进行点对点发送的，相关代码位于`wallet_general.js`的`sendPrivatePayments()`中，发送加密消息采用的是`device.js`中的`sendMessageToDevice()`（底层使用的是`hub/deliver`接口）。\n\n#### 登录Hub（hub/login）\n\n消息格式为：\n\n```javascript\n{\n    type: 'justsaying',\n    content: {\n        subject: 'hub/login',\n        body: {\n            challenge: challenge,\n            pubkey: pubkey,\n\t\t\tsignature: signature\n        }\n    }\n}\n```\n\n该消息用于设备登录Hub。\n\n#### 获取设备新消息（hub/refresh）\n\n消息格式为：\n\n```javascript\n{\n    type: 'justsaying',\n    content: {\n        subject: 'hub/refresh',\n        body: null\n    }\n}\n```\n\n用于从Hub上获取该设备还未接收的消息。\n\n#### 发送配对消息（hub/challenge）\n\n消息格式为：\n\n```javascript\n{\n    type: 'justsaying',\n    content: {\n        subject: 'hub/challenge',\n        body: challenge\n    }\n}\n```\n\n由Hub发送给设备，用于设备登录。\n\n#### 发送设备消息（hub/message）\n\n消息格式为：\n\n```javascript\n{\n    type: 'justsaying',\n    content: {\n        subject: 'hub/message',\n        body: {\n            message_hash: message_hash,\n            message: message\n        }\n    }\n}\n```\n\n由Hub转发给设备的消息，可配合`hub/deliver`使用，具体用法可参考`sendStoredDeviceMessages()`。\n\n#### 轻钱包交易更新消息（light/have_updates）\n\n消息格式为：\n\n```javascript\n{\n    type: 'justsaying',\n    content: {\n        subject: 'light/have_updates',\n        body: null\n    }\n}\n```\n\n当轻钱包使用`light/get_history`从Hub上请求交易历史时，Hub会在`watched_light_addresses`中记录下请求的地址列表或者`watched_light_units`中记录下请求的交易列表。当相关的交易达到稳定时，Hub将通过`light/have_updates`消息通知轻钱包。然后，轻钱包可以通过`light/get_history`确定已达到稳定的交易单元。\n\n#### 添加轻钱包监视地址（light/new_address_to_watch）\n\n消息格式为：\n\n```javascript\n{\n    type: 'justsaying',\n    content: {\n        subject: 'light/new_address_to_watch',\n        body: address\n    }\n}\n```\n\n轻钱包向Hub请求将地址加入`watch_light_addresses`表中，从而可以从Hub接收相应地址的交易信息，具体用法可参考`network.js`中的`addLightWatchedAddress()`函数。\n\n#### 交易价格消息（exchange_rates）\n\n消息格式为：\n\n```javascript\n{\n    type: 'justsaying',\n    content: {\n        subject: 'exchange_rates',\n        body: exchangeRates\n    }\n}\n```\n\n由Hub广播的交易价格消息，比如：\n\n```json\n[ 'justsaying',\n  { subject: 'exchange_rates',\n    body: { GBYTE_USD: 119.1914071839, GBB_USD: 3.6949336227009 } } ]\n```\n\n\n\n### 通信接口列表\n\n| type       | content                                                      | function                 | 功能      |\n| ---------- | ------------------------------------------------------------ | ------------------------ | ------------ |\n| request    | {tag: tag, command: command, params: params}                 | sendRequest()            | 通用发送请求 |\n|            | {tag: tag, command: 'get_peers'}                             | requestPeers()           | 请求节点列表 |\n|            | {tag: tag, command: 'get_witnesses'}             | initWitenessesIfNecessary()          | 请求见证人列表 |\n|            | {tag: tag, command: 'get_joint', params: unit}             | requestJoints()          | 请求交易信息 |\n|            | {tag: tag, command: 'post_joint', params: joint}             | postJointToLightVendor()          | 发送交易信息 |\n|            | {tag: tag, command: 'heartbeat'}                             | heartbeat()              | 心跳请求     |\n|            | {tag: tag, command: 'subscribe', params: {subscription_id, last_mci}} | subscribe()              | 订阅交易     |\n|            | {tag: tag, command: 'catchup', params: {witnesses, last_stable_mci, last_known_mci}}             | requestCatchup()          | 同步数据 |\n|            | {tag: tag, command: 'get_hash_tree', params: {from_ball,to_ball}}             | requestNextHashTree()          | 请求哈希树 |\n|            | {tag: tag, command: 'get_last_mci'}                             |               | 获取主链序号     |\n|            | {tag: tag, command: 'hub/deliver', params: {encrypted_package, to, pubkey, signature}} |               | 通过Hub向设备发送消息   |\n|            | {tag: tag, command: 'hub/get_temp_pubkey', params: pubkey} |               | 从Hub获取配对设备临时公钥     |\n|            | {tag: tag, command: 'hub/temp_pubkey', params: {temp_pubkey, pubkey, signature}} |               | 设备向Hub更新临时公钥     |\n|            | {tag: tag, command: 'hub/enable_notification'} |               | 开启通知 |\n|            | {tag: tag, command: 'hub/disable_notification'} |               | 关闭通知 |\n|            | {tag: tag, command: 'hub/get_bots'} |               | 获取机器人列表 |\n|            | {tag: tag, command: 'hub/get_asset_metadata', params: asset} | fetchAssetMetadata() | 获取资产元数据 |\n|            | {tag: tag, command: 'light/get_history', params: {witnesses, requested_joints, addresses}} | requestHistoryFor() | 从Hub获取交易历史     |\n|            | {tag: tag, command: 'light/get_link_proofs', params: units |               | 获取连接证明     |\n|            | {tag: tag, command: 'light/get_parents_and_last_ball_and_witness_list_unit', params: {witnesses}} | composeJoint()              | 获取父单元及见证单元     |\n|            | {tag: tag, command: 'light/get_attestation', params: { attestor_address, field, value}} |               | 查询用户认证信息 |\n| response   | {tag: tag, response: response}                               | sendResponse()           | 通用发送响应 |\n|            | {tag: tag, response: {error: error}}                         | sendErrorResponse()      | 发送响应错误 |\n| justsaying | {subject: subject, body: body}                               | sendJustsaying()         | 发送其它消息 |\n|            | {subject: 'error', body: error}                              | sendError()              | 发送错误消息 |\n|            | {subject: 'info', body: content}                             | sendInfo()               | 发送通知消息 |\n|            | {subject: 'result', body: content}                           | sendResult()             | 发送结果消息 |\n|            | {subject: 'result', body: {unit, result: 'error', error}} | sendErrorResult()        | 发送错误结果 |\n|            | {subject: 'version', body: {protocol_version, alt, library, library_version, program, program_version}} | sendVersion()            | 发送版本信息 |\n|            | {subject: 'new_version', body: {version}} |             | 发现新版本 |\n|            | {subject: ' hub/push_project_number', body: { projectNumber}} |             | 推送API编号 |\n|            | {subject: 'bugreport', body: {message, exception}} |             | 报告bug |\n|            | {subject: 'free_joints_end', body: null} | sendFreeJoints() | 已发送完所有交易 |\n|            | {subject: 'private_payment', body: privateElements} |             | 发送隐私交易 |\n|            | {subject: 'my_url', body: url} |             | 发送连接地址 |\n|            | {subject: 'want_echo', body: echo_string} |             | 请求对方回应 |\n|            | {subject: 'your_echo', body: echo_string} |             | 发送回应信息 |\n|            | {subject: 'hub/login', body: {challenge, pubkey, signature}} |             | 登录Hub |\n|            | {subject: 'hub/refresh', body: null} |  | 获取设备新消息 |\n|            | {subject: 'hub/delete', body: message_hash} |  | 删除设备消息 |\n|            | {subject: 'hub/challenge', body: challenge} |  | 发送配对消息 |\n|            | {subject: 'hub/message', body: {message_hash, message}} | sendStoredDeviceMessages() | 发送设备消息 |\n|            | {subject: 'hub/message_box_status', body: 'has_more'/'empty'} | sendStoredDeviceMessages() | 设备消息状态 |\n|            | {subject: 'light/have_updates', body: null} |  | 轻钱包交易更新消息 |\n|            | {subject: 'light/new_address_to_watch', body: address}       | addLightWatchedAddress() | 添加轻钱包监视地址 |\n|            | {subject: 'exchange_rates', body: exchangeRates} |  | 交易价格消息 |\n|            | {subject: 'upgrade_required', body: null} |  | 强制升级消息 |\n\n\n\n\n\n\n\n\n\n","slug":"byteball-network-protocol","published":1,"updated":"2018-06-14T14:40:51.045Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjienjdq40000c4epompn3ch8","content":"<h2 id=\"ByteBall网络节点通信协议详解\"><a href=\"#ByteBall网络节点通信协议详解\" class=\"headerlink\" title=\"ByteBall网络节点通信协议详解\"></a>ByteBall网络节点通信协议详解</h2><p>P2P网络是区块链网络的基础，网络中各个节点通过相互交换消息实现各种功能，包括收发交易、数据同步等操作。本文将对ByteBall网络节点的通信接口进行详细分析。</p>\n<p>ByteBall网络节点之间采用websocket连接，采用json格式消息进行通信，消息可表示为<code>{type: type, content: content}</code>。ByteBall中的消息类型主要包括三类，即消息的type包括三种<code>request</code>、<code>response</code>以及<code>justsaying</code>，当然也可以自定义其它类型的消息。下面对消息的具体格式和处理流程进行解析。</p>\n<h3 id=\"request：请求消息\"><a href=\"#request：请求消息\" class=\"headerlink\" title=\"request：请求消息\"></a>request：请求消息</h3><p>请求消息的格式为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: command,</span><br><span class=\"line\">        params: params</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中，<code>tag</code>为request消息的BASE64哈希值。</p>\n<p>发送请求消息的函数原型为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendRequest</span>(<span class=\"params\">ws, command, params, bReroutable, responseHandler</span>)</span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">ws</span>: 发送请求的<span class=\"title\">websocket</span>连接</span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">command</span>: 请求命令</span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">params</span>: 请求参数</span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">bReroutable</span>: 是否重新路由</span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">responseHandler</span>: 请求响应处理回调函数</span></span><br></pre></td></tr></table></figure>\n<p>通过<code>sendRequest()</code>发出的每个请求会生成一个<code>tag</code>作为该请求的标识，并在内存中保留该请求的相关处理信息：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ws.assocPendingRequests[tag] = &#123;</span><br><span class=\"line\">    request: request,</span><br><span class=\"line\">    responseHandlers: [responseHandler],</span><br><span class=\"line\">    reroute: reroute,</span><br><span class=\"line\">    reroute_timer: reroute_timer,</span><br><span class=\"line\">    cancel_timer: cancel_timer</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当请求发出后，若对方没有回应时有两种选择，一种是采用<code>reroute</code>，另一种是<code>cancel</code>。<code>reroute</code>的<code>timeout</code>为5s，<code>cancel</code>的<code>timeout</code>时间为300秒。</p>\n<p>当接收到响应后（位于函数<code>handleResponse()</code>），在调用相应回调函数<code>responseHandlers</code>后，请求信息<code>ws.assocPendingRequests[tag]</code>被删除。</p>\n<p>如果相关的连接被关闭，则清理该连接上的所有请求信息（位于函数<code>cancelRequestOnClosedConnection()</code>）。</p>\n<h3 id=\"response：响应消息\"><a href=\"#response：响应消息\" class=\"headerlink\" title=\"response：响应消息\"></a>response：响应消息</h3><p>响应消息的格式为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'response',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        response: response</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中，<code>tag</code>对应于请求消息中的<code>tag</code>。</p>\n<p>发送响应消息的函数原型为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendResponse</span>(<span class=\"params\">ws, tag, response</span>)</span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">ws</span>: 发送响应的<span class=\"title\">websocket</span>连接</span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">tag</span>: 发送响应对应的<span class=\"title\">tag</span></span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">response</span>: 响应消息内容</span></span><br></pre></td></tr></table></figure>\n<p>当收到对端节点请求后，设置<code>ws.assocInPreparingResponse[tag]=true</code>，并在回复响应后删除。</p>\n<h3 id=\"justsaying：其它消息\"><a href=\"#justsaying：其它消息\" class=\"headerlink\" title=\"justsaying：其它消息\"></a>justsaying：其它消息</h3><p>其它消息包括的内容比较多，比如版本、心跳、hub登录等，其格式为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'justsaying',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        subject: subject,</span><br><span class=\"line\">        body: body</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>发送其它消息的函数原型为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendJustsaying</span>(<span class=\"params\">ws, subject, body</span>)</span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">ws</span>: 发送消息的<span class=\"title\">websocket</span>连接</span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">subject</span>: 消息主题</span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">body</span>: 消息内容</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"常见通信接口\"><a href=\"#常见通信接口\" class=\"headerlink\" title=\"常见通信接口\"></a>常见通信接口</h3><h4 id=\"获取见证人列表（get-witnesses）\"><a href=\"#获取见证人列表（get-witnesses）\" class=\"headerlink\" title=\"获取见证人列表（get_witnesses）\"></a>获取见证人列表（get_witnesses）</h4><p>请求消息为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: 'get_witnesses'</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>收到请求后，从数据库中读取当前的见证人列表并返回</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myWitnesses.readMyWitnesses(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arrWitnesses</span>)</span>&#123;</span><br><span class=\"line\">    sendResponse(ws, tag, arrWitnesses);</span><br><span class=\"line\">&#125;, <span class=\"string\">'wait'</span>);</span><br></pre></td></tr></table></figure>\n<p>比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ <span class=\"string\">'BVVJ2K7ENPZZ3VYZFWQWK7ISPCATFIW3'</span>,</span><br><span class=\"line\">  <span class=\"string\">'DJMMI5JYA5BWQYSXDPRZJVLW3UGL3GJS'</span>,</span><br><span class=\"line\">  <span class=\"string\">'FOPUBEUPBC6YLIQDLKL6EW775BMV7YOH'</span>,</span><br><span class=\"line\">  <span class=\"string\">'GFK3RDAPQLLNCMQEVGGD2KCPZTLSG3HN'</span>,</span><br><span class=\"line\">  <span class=\"string\">'H5EZTQE7ABFH27AUDTQFMZIALANK6RBG'</span>,</span><br><span class=\"line\">  <span class=\"string\">'I2ADHGP4HL6J37NQAD73J7E5SKFIXJOT'</span>,</span><br><span class=\"line\">  <span class=\"string\">'JEDZYC2HMGDBIDQKG3XSTXUSHMCBK725'</span>,</span><br><span class=\"line\">  <span class=\"string\">'JPQKPRI5FMTQRJF4ZZMYZYDQVRD55OTC'</span>,</span><br><span class=\"line\">  <span class=\"string\">'OYW2XTDKSNKGSEZ27LMGNOPJSYIXHBHC'</span>,</span><br><span class=\"line\">  <span class=\"string\">'S7N5FE42F6ONPNDQLCF64E2MGFYKQR2I'</span>,</span><br><span class=\"line\">  <span class=\"string\">'TKT4UESIKTTRALRRLWS4SENSTJX6ODCW'</span>,</span><br><span class=\"line\">  <span class=\"string\">'UENJPVZ7HVHM6QGVGT6MWOJGGRTUTJXQ'</span> ]</span><br></pre></td></tr></table></figure>\n<p><code>network.js</code>中在函数<code>initWitenessesIfNecessary()</code>中使用。</p>\n<h4 id=\"获取节点列表（get-peers）\"><a href=\"#获取节点列表（get-peers）\" class=\"headerlink\" title=\"获取节点列表（get_peers）\"></a>获取节点列表（get_peers）</h4><p>请求消息为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: 'get_peers'</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>返回对端节点已连接的节点列表</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sendResponse(ws, tag, arrPeerUrls)</span><br></pre></td></tr></table></figure>\n<p>比如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ <span class=\"string\">'wss://byteball.fr/bb'</span>,</span><br><span class=\"line\">  <span class=\"string\">'wss://byteball-hub.com/bb'</span>,</span><br><span class=\"line\">  <span class=\"string\">'wss://hub.byteball.ee'</span> ]</span><br></pre></td></tr></table></figure>\n<p><code>network.js</code>中可以使用<code>requestPeers()</code>函数发出请求。</p>\n<h4 id=\"获取交易数据（get-joint）\"><a href=\"#获取交易数据（get-joint）\" class=\"headerlink\" title=\"获取交易数据（get_joint）\"></a>获取交易数据（get_joint）</h4><p>请求消息为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: 'get_joint',</span><br><span class=\"line\">        params: unit</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>若找到，则返回响应交易数据；否则，返回交易未找到。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">storage.readJoint(db, unit, &#123;</span><br><span class=\"line\">    ifFound: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">objJoint</span>)</span>&#123;</span><br><span class=\"line\">        sendJoint(ws, objJoint, tag);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ifNotFound: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        sendResponse(ws, tag, &#123;<span class=\"attr\">joint_not_found</span>: unit&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>比如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">joint</span>:</span><br><span class=\"line\">   &#123; <span class=\"attr\">unit</span>:</span><br><span class=\"line\">      &#123; <span class=\"attr\">unit</span>: <span class=\"string\">'OcrOftkwCwTYAaGq0zV8FecAK/CKED++Ddewh2c2M60='</span>,</span><br><span class=\"line\">        version: <span class=\"string\">'1.0'</span>,</span><br><span class=\"line\">        alt: <span class=\"string\">'1'</span>,</span><br><span class=\"line\">        witness_list_unit: <span class=\"string\">'oj8yEksX9Ubq7lLc+p6F2uyHUuynugeVq4+ikT67X6E='</span>,</span><br><span class=\"line\">        last_ball_unit: <span class=\"string\">'p7obFdGHM5pTWPytNeRIjmamBe7485aDTzuddWI9yWY='</span>,</span><br><span class=\"line\">        last_ball: <span class=\"string\">'wmiP2BvT7FFFtwy5qB+UsA4j8I5KbmBVA6mFCgwQUas='</span>,</span><br><span class=\"line\">        headers_commission: <span class=\"number\">344</span>,</span><br><span class=\"line\">        payload_commission: <span class=\"number\">157</span>,</span><br><span class=\"line\">        main_chain_index: <span class=\"number\">2791799</span>,</span><br><span class=\"line\">        timestamp: <span class=\"number\">1528796161</span>,</span><br><span class=\"line\">        parent_units: [<span class=\"built_in\">Array</span>],</span><br><span class=\"line\">        authors: [<span class=\"built_in\">Array</span>],</span><br><span class=\"line\">        messages: [<span class=\"built_in\">Array</span>] &#125; &#125; &#125;</span><br></pre></td></tr></table></figure>\n<p><code>network.js</code>中可以使用<code>requestJoints()</code>函数发出请求。</p>\n<h4 id=\"发送交易数据（post-joint）\"><a href=\"#发送交易数据（post-joint）\" class=\"headerlink\" title=\"发送交易数据（post_joint）\"></a>发送交易数据（post_joint）</h4><p>请求消息为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: 'post_joint',</span><br><span class=\"line\">        params: joint</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接收到请求后，对<code>joint</code>数据进行检查，若通过，则返回<code>accepted</code>；否则，返回相应错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handlePostedJoint(ws, objJoint, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123;</span><br><span class=\"line\">    error ? sendErrorResponse(ws, tag, error) : sendResponse(ws, tag, <span class=\"string\">'accepted'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>使用方法可参考<code>network.js</code>中的<code>postJointToLightVendor()</code>函数。</p>\n<h4 id=\"发送心跳数据（heartbeat）\"><a href=\"#发送心跳数据（heartbeat）\" class=\"headerlink\" title=\"发送心跳数据（heartbeat）\"></a>发送心跳数据（heartbeat）</h4><p>请求消息为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: 'heartbeat'</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用方法可参考<code>network.js</code>中的<code>heartbeat()</code>函数。</p>\n<p>ByteBall网络中节点之间依靠心跳请求维持连接，当超过<code>HEARTBEAT_RESPONSE_TIMEOUT=60s</code>没有收到对端节点的消息时，将会关闭与该节点的连接。ByteBall中默认3-4s向对端节点发送心跳请求。</p>\n<h4 id=\"订阅交易数据（subscribe）\"><a href=\"#订阅交易数据（subscribe）\" class=\"headerlink\" title=\"订阅交易数据（subscribe）\"></a>订阅交易数据（subscribe）</h4><p>请求消息为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: 'subscribe',</span><br><span class=\"line\">        params: &#123;</span><br><span class=\"line\">            subscription_id: subscription_id, // 订阅编号</span><br><span class=\"line\">            last_mci: last_mci                // 订阅起始mci</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接收到请求后，若<code>last_mci&gt;0</code>，则返回从该mci起始的joints；否则，返回当前网络中的叶子交易。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (ValidationUtils.isNonnegativeInteger(params.last_mci))</span><br><span class=\"line\">    sendJointsSinceMci(ws, params.last_mci);</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    sendFreeJoints(ws);</span><br></pre></td></tr></table></figure>\n<p>订阅后，当收到新交易时，会向已订阅的节点进行转发（<code>forwardJoint(ws, objJoint)</code>）。使用方法可参考<code>network.js</code>中的<code>subscribe()</code>函数。</p>\n<h4 id=\"同步交易数据（catchup）\"><a href=\"#同步交易数据（catchup）\" class=\"headerlink\" title=\"同步交易数据（catchup）\"></a>同步交易数据（catchup）</h4><p>请求消息为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: 'catchup',</span><br><span class=\"line\">        params: &#123;</span><br><span class=\"line\">            witnesses: witnesses,                 // 见证人列表</span><br><span class=\"line\">            last_stable_mci: last_stable_mci,     // 稳定mci</span><br><span class=\"line\">            last_known_mci: last_known_mci        // 已知mci</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>必须在订阅状态下使用，接收到请求后，返回主链序号从<code>last_known_mci</code>至<code>last_stable_mci</code>之间的交易数据及其相关信息<code>objCatchupChain</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">catchup.prepareCatchupChain(catchupRequest, &#123;</span><br><span class=\"line\">    ifError: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123;</span><br><span class=\"line\">        sendErrorResponse(ws, tag, error);</span><br><span class=\"line\">        unlock();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ifOk: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">objCatchupChain</span>)</span>&#123;</span><br><span class=\"line\">        sendResponse(ws, tag, objCatchupChain);</span><br><span class=\"line\">        unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><code>objCatchupChain</code>包括以下几部分信息：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> objCatchupChain = &#123;</span><br><span class=\"line\">    unstable_mc_joints: [], <span class=\"comment\">// 候选主链上未稳定的单元列表</span></span><br><span class=\"line\">    stable_last_ball_joints: [], <span class=\"comment\">// 已稳定的单元列表</span></span><br><span class=\"line\">    witness_change_and_definition_joints: [] <span class=\"comment\">// 见证人或地址定义发生变化的单元列表</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>使用方法可参考<code>network.js</code>中的<code>requestCatchup()</code>函数。</p>\n<h4 id=\"获取哈希树（get-hash-tree）\"><a href=\"#获取哈希树（get-hash-tree）\" class=\"headerlink\" title=\"获取哈希树（get_hash_tree）\"></a>获取哈希树（get_hash_tree）</h4><p>请求消息为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: 'get_hash_tree',</span><br><span class=\"line\">        params: &#123;</span><br><span class=\"line\">            from_ball: from_ball,</span><br><span class=\"line\">            to_ball: to_bal</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>必须在订阅状态下使用，接收到请求后，返回从<code>from_ball</code>至<code>to_ball</code>主链序号之间的所有ball交易数据。使用方法可参考<code>network.js</code>中的<code>requestNextHashTree()</code>函数。</p>\n<h4 id=\"获取主链序号（get-last-mci）\"><a href=\"#获取主链序号（get-last-mci）\" class=\"headerlink\" title=\"获取主链序号（get_last_mci）\"></a>获取主链序号（get_last_mci）</h4><p>请求消息为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: 'get_last_mci'</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>返回目前最大的主链序号。</p>\n<h4 id=\"通过Hub向设备发送消息（hub-deliver）\"><a href=\"#通过Hub向设备发送消息（hub-deliver）\" class=\"headerlink\" title=\"通过Hub向设备发送消息（hub/deliver）\"></a>通过Hub向设备发送消息（hub/deliver）</h4><p>请求消息为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: 'hub/deliver',</span><br><span class=\"line\">        params: &#123;</span><br><span class=\"line\">            to: device_address,</span><br><span class=\"line\">            pubkey: pubkey,</span><br><span class=\"line\">            signature: signature,</span><br><span class=\"line\">            encrypted_package: encrypted_message</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过Hub向其它设备发送加密消息，使用方法可以参考<code>device.js</code>中的<code>sendPreparedMessageToConnectedHub()</code>函数。</p>\n<h4 id=\"从Hub获取配对设备临时公钥（hub-get-temp-pubkey）\"><a href=\"#从Hub获取配对设备临时公钥（hub-get-temp-pubkey）\" class=\"headerlink\" title=\"从Hub获取配对设备临时公钥（hub/get_temp_pubkey）\"></a>从Hub获取配对设备临时公钥（hub/get_temp_pubkey）</h4><p>请求消息为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: 'hub/get_temp_pubkey',</span><br><span class=\"line\">        params: permanent_pubkey</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过永久公钥<code>permanent_pubkey</code>从Hub处获取对端设备的临时公钥。</p>\n<h4 id=\"设备向Hub更新临时公钥（hub-temp-pubkey）\"><a href=\"#设备向Hub更新临时公钥（hub-temp-pubkey）\" class=\"headerlink\" title=\"设备向Hub更新临时公钥（hub/temp_pubkey）\"></a>设备向Hub更新临时公钥（hub/temp_pubkey）</h4><p>请求消息为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: 'hub/temp_pubkey',</span><br><span class=\"line\">        params: &#123;</span><br><span class=\"line\">            temp_pubkey: temp_pubkey,</span><br><span class=\"line\">            pubkey: permanent_pubkey,</span><br><span class=\"line\">            signature: signature</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>向Hub更新本设备的临时公钥，设备必须登陆到Hub上。接收到请求后，对参数及签名进行验证，如果成功则返回响应消息<code>updated</code>。</p>\n<h4 id=\"开启通知（hub-enable-notification）\"><a href=\"#开启通知（hub-enable-notification）\" class=\"headerlink\" title=\"开启通知（hub/enable_notification）\"></a>开启通知（hub/enable_notification）</h4><p>请求消息为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: 'hub/enable_notification',</span><br><span class=\"line\">        params: registrationId</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>设备开启推送通知，目前还未使用。</p>\n<h4 id=\"关闭通知（hub-disable-notification）\"><a href=\"#关闭通知（hub-disable-notification）\" class=\"headerlink\" title=\"关闭通知（hub/disable_notification）\"></a>关闭通知（hub/disable_notification）</h4><p>请求消息为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: 'hub/disable_notification',</span><br><span class=\"line\">        params: registrationId</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>设备关闭推送通知，目前还未使用。</p>\n<h4 id=\"获取机器人列表（hub-get-bots）\"><a href=\"#获取机器人列表（hub-get-bots）\" class=\"headerlink\" title=\"获取机器人列表（hub/get_bots）\"></a>获取机器人列表（hub/get_bots）</h4><p>请求消息为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: 'hub/get_bots'</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>返回Hub节点上的机器人列表，比如：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[...</span><br><span class=\"line\"> &#123; id: 27,</span><br><span class=\"line\">    name: 'Worldopoly ICO',</span><br><span class=\"line\">    pairing_code: 'AwyoKVsyxajATgLXa9Jhh8NBRTnUaZNHdi85c43g+GoJ@byteball.org/bb#0000',</span><br><span class=\"line\">    description: 'Worldopoly is the world’s first mobile game combining AR, AI, Geolocationing, Blockchain, and DAG. The ICO is active until 17 May 2018, and you can buy WPT tokens with Bytes, BTC, or Ether.  WPT token is issued both on Byteball and Ethereum platforms but investors on Byteball platform receive increased bonus (even if they pay in ETH or BTC) for investments up to 30 ETH.\\n\\nWebsite: https://worldopoly.io' &#125;,</span><br><span class=\"line\">  &#123; id: 28,</span><br><span class=\"line\">    name: 'WhiteLittle Airdrop 小白币糖果机器人',</span><br><span class=\"line\">    pairing_code: 'Ahe4jkq5GvgLQ2h5ftqRMjWBBumUEN96tWoSfEQ9TGHF@byteball.org/bb#0000',</span><br><span class=\"line\">    description: '小白链机器人送出小白币糖果。小白链是专门为想进入区块链行业的小白们量身打造的帮助平台，其目的是建立一个基于字节雪球技术为小白们提供有效帮助的信息发现生态平台。小白链的设计初衷是构建一套合理的激励机制，能够及时得到帮助，又让提供帮助的区块链从业者得到合理的回报。\\n\\n开发者：123cb.net' &#125;,</span><br><span class=\"line\">  &#123; id: 32,</span><br><span class=\"line\">    name: 'Exchange bot for dual-chain tokens',</span><br><span class=\"line\">    pairing_code: 'A+dAU2j/Tm9lnlmc2SryltsfVzOq9GLPxccAq+dClCxr@byteball.org/bb#f7b42a61a3ba6a34cbeeb18d37979927ad1103fc',</span><br><span class=\"line\">    description: 'For tokens issued both on Byteball and Ethereum platforms, the bot enables seamless exchange between Byteball and Ethereum tokens.\\n\\nDeveloper: HDRProtocol, https://github.com/HDRProtocol/exchanger' &#125;,</span><br><span class=\"line\"> ...]</span><br></pre></td></tr></table></figure>\n<h4 id=\"获取资产元数据（hub-get-asset-metadata）\"><a href=\"#获取资产元数据（hub-get-asset-metadata）\" class=\"headerlink\" title=\"获取资产元数据（hub/get_asset_metadata）\"></a>获取资产元数据（hub/get_asset_metadata）</h4><p>请求消息为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: 'hub/get_asset_metadata',</span><br><span class=\"line\">        params: asset</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从Hub节点上获取已发布资产的信息，比如：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; metadata_unit: 'Rg3DNkDJJ2DWfIzTj3Ypz8CBGi617wl07QkJq7Z5soc=',</span><br><span class=\"line\">  registry_address: 'AM6GTUKENBYA54FYDAKX2VLENFZIMXWG',</span><br><span class=\"line\">  suffix: null &#125;</span><br></pre></td></tr></table></figure>\n<p>具体使用方法可以参考<code>wallet.js</code>中的<code>fetchAssetMetadata()</code>函数。</p>\n<h4 id=\"从Hub获取交易历史（light-get-history）\"><a href=\"#从Hub获取交易历史（light-get-history）\" class=\"headerlink\" title=\"从Hub获取交易历史（light/get_history）\"></a>从Hub获取交易历史（light/get_history）</h4><p>请求消息为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: 'hub/get_asset_metadata',</span><br><span class=\"line\">        params: &#123;</span><br><span class=\"line\">            witnesses: witnesses,</span><br><span class=\"line\">            requested_joints: joints,</span><br><span class=\"line\">            addresses: addresses</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>请求特定交易或地址的历史数据，仅适用于轻节点，具体使用方法可以参考<code>network.js</code>中的<code>requestHistoryFor()</code>函数。轻钱包可以根据获取的历史数据构建证据链，从而验证交易的可靠性。</p>\n<p>对于轻钱包而言，它本身不保存所有的交易数据，而需要采用<code>requestFromLightVendor()</code>从<code>Vendor</code>处获取数据，目前<code>Vendor</code>为<code>Hub</code>节点。</p>\n<h4 id=\"获取连接证明（light-get-link-proofs）\"><a href=\"#获取连接证明（light-get-link-proofs）\" class=\"headerlink\" title=\"获取连接证明（light/get_link_proofs）\"></a>获取连接证明（light/get_link_proofs）</h4><p>请求消息为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: 'hub/get_link_proofs',</span><br><span class=\"line\">        params: units</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>获取特定交易的连接证明，仅适用于轻节点，具体使用方法可以参考<code>network.js</code>中的<code>checkThatEachChainElementIncludesThePrevious()</code>。</p>\n<h4 id=\"获取父单元及见证单元（light-get-parents-and-last-ball-and-witness-list-unit）\"><a href=\"#获取父单元及见证单元（light-get-parents-and-last-ball-and-witness-list-unit）\" class=\"headerlink\" title=\"获取父单元及见证单元（light/get_parents_and_last_ball_and_witness_list_unit）\"></a>获取父单元及见证单元（light/get_parents_and_last_ball_and_witness_list_unit）</h4><p>请求消息为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: 'hub/get_parents_and_last_ball_and_witness_list_unit',</span><br><span class=\"line\">        params: &#123;</span><br><span class=\"line\">            witnesses: witnesses</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>轻节点获取这些信息后，可用于构造自己的交易数据。返回的响应数据，比如：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; parent_units: [ 'ovIwMvA9MMKgxiHrslJQhQGzUAIXlRs47grVdG/er3s=' ],</span><br><span class=\"line\">  last_stable_mc_ball: 'osJhTYZv+HS5hGhH01A/3PKpyaxPRbtcxQEaUj/a/h4=',</span><br><span class=\"line\">  last_stable_mc_ball_unit: '+9fxcmxM90mhIxvtJ3yo++tAoYofyoDmPqBQEwbEHDA=',</span><br><span class=\"line\">  last_stable_mc_ball_mci: 2805208,</span><br><span class=\"line\">  witness_list_unit: 'oj8yEksX9Ubq7lLc+p6F2uyHUuynugeVq4+ikT67X6E=' &#125;</span><br></pre></td></tr></table></figure>\n<p>具体使用方法可以参考<code>composer.js</code>中的<code>composeJoint()</code>函数。</p>\n<h4 id=\"查询用户认证信息（light-get-attestation）\"><a href=\"#查询用户认证信息（light-get-attestation）\" class=\"headerlink\" title=\"查询用户认证信息（light/get_attestation）\"></a>查询用户认证信息（light/get_attestation）</h4><p>请求消息为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: 'hub/get_attestation',</span><br><span class=\"line\">        params: &#123;</span><br><span class=\"line\">        \tattestor_address: attestor_address,</span><br><span class=\"line\">        \tfield: field,</span><br><span class=\"line\">        \tvalue: value</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接收到请求后，如果Hub查询到相应的认证信息，返回认证信息所在的交易单元。</p>\n<h4 id=\"发送版本信息（version）\"><a href=\"#发送版本信息（version）\" class=\"headerlink\" title=\"发送版本信息（version）\"></a>发送版本信息（version）</h4><p>消息格式为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: <span class=\"string\">'justsaying'</span>,</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        subject: <span class=\"string\">'version'</span>,</span><br><span class=\"line\">        body: &#123;</span><br><span class=\"line\">            protocol_version: protocol_version,</span><br><span class=\"line\">            alt: alt,</span><br><span class=\"line\">            library: name,</span><br><span class=\"line\">            library_version: version,</span><br><span class=\"line\">            program: program,</span><br><span class=\"line\">            program_version: program_version</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>具体用法可以参考<code>network.js</code>中的<code>sendVersion()</code>函数。</p>\n<h4 id=\"已发送完所有交易（free-joints-end）\"><a href=\"#已发送完所有交易（free-joints-end）\" class=\"headerlink\" title=\"已发送完所有交易（free_joints_end）\"></a>已发送完所有交易（free_joints_end）</h4><p>消息格式为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: <span class=\"string\">'justsaying'</span>,</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        subject: <span class=\"string\">'free_joints_end'</span>,</span><br><span class=\"line\">        body: <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用于通知对方所有的叶子交易已发送完毕，具体用法可参考<code>network.js</code>中的<code>sendFreeJoints()</code>及<code>sendJointsSinceMci()</code></p>\n<h4 id=\"发送隐私交易（private-payment）\"><a href=\"#发送隐私交易（private-payment）\" class=\"headerlink\" title=\"发送隐私交易（private_payment）\"></a>发送隐私交易（private_payment）</h4><p>消息格式为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: <span class=\"string\">'justsaying'</span>,</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        subject: <span class=\"string\">'private_payment'</span>,</span><br><span class=\"line\">        body: privateElement</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用来向对方发送隐私交易的证据链，但该条<code>justsaying</code>消息并没有使用。实际上隐私资产是在两个设备之间通过加密消息进行点对点发送的，相关代码位于<code>wallet_general.js</code>的<code>sendPrivatePayments()</code>中，发送加密消息采用的是<code>device.js</code>中的<code>sendMessageToDevice()</code>（底层使用的是<code>hub/deliver</code>接口）。</p>\n<h4 id=\"登录Hub（hub-login）\"><a href=\"#登录Hub（hub-login）\" class=\"headerlink\" title=\"登录Hub（hub/login）\"></a>登录Hub（hub/login）</h4><p>消息格式为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: <span class=\"string\">'justsaying'</span>,</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        subject: <span class=\"string\">'hub/login'</span>,</span><br><span class=\"line\">        body: &#123;</span><br><span class=\"line\">            challenge: challenge,</span><br><span class=\"line\">            pubkey: pubkey,</span><br><span class=\"line\">\t\t\tsignature: signature</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该消息用于设备登录Hub。</p>\n<h4 id=\"获取设备新消息（hub-refresh）\"><a href=\"#获取设备新消息（hub-refresh）\" class=\"headerlink\" title=\"获取设备新消息（hub/refresh）\"></a>获取设备新消息（hub/refresh）</h4><p>消息格式为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: <span class=\"string\">'justsaying'</span>,</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        subject: <span class=\"string\">'hub/refresh'</span>,</span><br><span class=\"line\">        body: <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用于从Hub上获取该设备还未接收的消息。</p>\n<h4 id=\"发送配对消息（hub-challenge）\"><a href=\"#发送配对消息（hub-challenge）\" class=\"headerlink\" title=\"发送配对消息（hub/challenge）\"></a>发送配对消息（hub/challenge）</h4><p>消息格式为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: <span class=\"string\">'justsaying'</span>,</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        subject: <span class=\"string\">'hub/challenge'</span>,</span><br><span class=\"line\">        body: challenge</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由Hub发送给设备，用于设备登录。</p>\n<h4 id=\"发送设备消息（hub-message）\"><a href=\"#发送设备消息（hub-message）\" class=\"headerlink\" title=\"发送设备消息（hub/message）\"></a>发送设备消息（hub/message）</h4><p>消息格式为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: <span class=\"string\">'justsaying'</span>,</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        subject: <span class=\"string\">'hub/message'</span>,</span><br><span class=\"line\">        body: &#123;</span><br><span class=\"line\">            message_hash: message_hash,</span><br><span class=\"line\">            message: message</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由Hub转发给设备的消息，可配合<code>hub/deliver</code>使用，具体用法可参考<code>sendStoredDeviceMessages()</code>。</p>\n<h4 id=\"轻钱包交易更新消息（light-have-updates）\"><a href=\"#轻钱包交易更新消息（light-have-updates）\" class=\"headerlink\" title=\"轻钱包交易更新消息（light/have_updates）\"></a>轻钱包交易更新消息（light/have_updates）</h4><p>消息格式为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: <span class=\"string\">'justsaying'</span>,</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        subject: <span class=\"string\">'light/have_updates'</span>,</span><br><span class=\"line\">        body: <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当轻钱包使用<code>light/get_history</code>从Hub上请求交易历史时，Hub会在<code>watched_light_addresses</code>中记录下请求的地址列表或者<code>watched_light_units</code>中记录下请求的交易列表。当相关的交易达到稳定时，Hub将通过<code>light/have_updates</code>消息通知轻钱包。然后，轻钱包可以通过<code>light/get_history</code>确定已达到稳定的交易单元。</p>\n<h4 id=\"添加轻钱包监视地址（light-new-address-to-watch）\"><a href=\"#添加轻钱包监视地址（light-new-address-to-watch）\" class=\"headerlink\" title=\"添加轻钱包监视地址（light/new_address_to_watch）\"></a>添加轻钱包监视地址（light/new_address_to_watch）</h4><p>消息格式为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: <span class=\"string\">'justsaying'</span>,</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        subject: <span class=\"string\">'light/new_address_to_watch'</span>,</span><br><span class=\"line\">        body: address</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>轻钱包向Hub请求将地址加入<code>watch_light_addresses</code>表中，从而可以从Hub接收相应地址的交易信息，具体用法可参考<code>network.js</code>中的<code>addLightWatchedAddress()</code>函数。</p>\n<h4 id=\"交易价格消息（exchange-rates）\"><a href=\"#交易价格消息（exchange-rates）\" class=\"headerlink\" title=\"交易价格消息（exchange_rates）\"></a>交易价格消息（exchange_rates）</h4><p>消息格式为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: <span class=\"string\">'justsaying'</span>,</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        subject: <span class=\"string\">'exchange_rates'</span>,</span><br><span class=\"line\">        body: exchangeRates</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由Hub广播的交易价格消息，比如：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ 'justsaying',</span><br><span class=\"line\">  &#123; subject: 'exchange_rates',</span><br><span class=\"line\">    body: &#123; GBYTE_USD: 119.1914071839, GBB_USD: 3.6949336227009 &#125; &#125; ]</span><br></pre></td></tr></table></figure>\n<h3 id=\"通信接口列表\"><a href=\"#通信接口列表\" class=\"headerlink\" title=\"通信接口列表\"></a>通信接口列表</h3><table>\n<thead>\n<tr>\n<th>type</th>\n<th>content</th>\n<th>function</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>request</td>\n<td>{tag: tag, command: command, params: params}</td>\n<td>sendRequest()</td>\n<td>通用发送请求</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, command: ‘get_peers’}</td>\n<td>requestPeers()</td>\n<td>请求节点列表</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, command: ‘get_witnesses’}</td>\n<td>initWitenessesIfNecessary()</td>\n<td>请求见证人列表</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, command: ‘get_joint’, params: unit}</td>\n<td>requestJoints()</td>\n<td>请求交易信息</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, command: ‘post_joint’, params: joint}</td>\n<td>postJointToLightVendor()</td>\n<td>发送交易信息</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, command: ‘heartbeat’}</td>\n<td>heartbeat()</td>\n<td>心跳请求</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, command: ‘subscribe’, params: {subscription_id, last_mci}}</td>\n<td>subscribe()</td>\n<td>订阅交易</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, command: ‘catchup’, params: {witnesses, last_stable_mci, last_known_mci}}</td>\n<td>requestCatchup()</td>\n<td>同步数据</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, command: ‘get_hash_tree’, params: {from_ball,to_ball}}</td>\n<td>requestNextHashTree()</td>\n<td>请求哈希树</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, command: ‘get_last_mci’}</td>\n<td></td>\n<td>获取主链序号</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, command: ‘hub/deliver’, params: {encrypted_package, to, pubkey, signature}}</td>\n<td></td>\n<td>通过Hub向设备发送消息</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, command: ‘hub/get_temp_pubkey’, params: pubkey}</td>\n<td></td>\n<td>从Hub获取配对设备临时公钥</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, command: ‘hub/temp_pubkey’, params: {temp_pubkey, pubkey, signature}}</td>\n<td></td>\n<td>设备向Hub更新临时公钥</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, command: ‘hub/enable_notification’}</td>\n<td></td>\n<td>开启通知</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, command: ‘hub/disable_notification’}</td>\n<td></td>\n<td>关闭通知</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, command: ‘hub/get_bots’}</td>\n<td></td>\n<td>获取机器人列表</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, command: ‘hub/get_asset_metadata’, params: asset}</td>\n<td>fetchAssetMetadata()</td>\n<td>获取资产元数据</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, command: ‘light/get_history’, params: {witnesses, requested_joints, addresses}}</td>\n<td>requestHistoryFor()</td>\n<td>从Hub获取交易历史</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, command: ‘light/get_link_proofs’, params: units</td>\n<td></td>\n<td>获取连接证明</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, command: ‘light/get_parents_and_last_ball_and_witness_list_unit’, params: {witnesses}}</td>\n<td>composeJoint()</td>\n<td>获取父单元及见证单元</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, command: ‘light/get_attestation’, params: { attestor_address, field, value}}</td>\n<td></td>\n<td>查询用户认证信息</td>\n</tr>\n<tr>\n<td>response</td>\n<td>{tag: tag, response: response}</td>\n<td>sendResponse()</td>\n<td>通用发送响应</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, response: {error: error}}</td>\n<td>sendErrorResponse()</td>\n<td>发送响应错误</td>\n</tr>\n<tr>\n<td>justsaying</td>\n<td>{subject: subject, body: body}</td>\n<td>sendJustsaying()</td>\n<td>发送其它消息</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘error’, body: error}</td>\n<td>sendError()</td>\n<td>发送错误消息</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘info’, body: content}</td>\n<td>sendInfo()</td>\n<td>发送通知消息</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘result’, body: content}</td>\n<td>sendResult()</td>\n<td>发送结果消息</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘result’, body: {unit, result: ‘error’, error}}</td>\n<td>sendErrorResult()</td>\n<td>发送错误结果</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘version’, body: {protocol_version, alt, library, library_version, program, program_version}}</td>\n<td>sendVersion()</td>\n<td>发送版本信息</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘new_version’, body: {version}}</td>\n<td></td>\n<td>发现新版本</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘ hub/push_project_number’, body: { projectNumber}}</td>\n<td></td>\n<td>推送API编号</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘bugreport’, body: {message, exception}}</td>\n<td></td>\n<td>报告bug</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘free_joints_end’, body: null}</td>\n<td>sendFreeJoints()</td>\n<td>已发送完所有交易</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘private_payment’, body: privateElements}</td>\n<td></td>\n<td>发送隐私交易</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘my_url’, body: url}</td>\n<td></td>\n<td>发送连接地址</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘want_echo’, body: echo_string}</td>\n<td></td>\n<td>请求对方回应</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘your_echo’, body: echo_string}</td>\n<td></td>\n<td>发送回应信息</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘hub/login’, body: {challenge, pubkey, signature}}</td>\n<td></td>\n<td>登录Hub</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘hub/refresh’, body: null}</td>\n<td></td>\n<td>获取设备新消息</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘hub/delete’, body: message_hash}</td>\n<td></td>\n<td>删除设备消息</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘hub/challenge’, body: challenge}</td>\n<td></td>\n<td>发送配对消息</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘hub/message’, body: {message_hash, message}}</td>\n<td>sendStoredDeviceMessages()</td>\n<td>发送设备消息</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘hub/message_box_status’, body: ‘has_more’/‘empty’}</td>\n<td>sendStoredDeviceMessages()</td>\n<td>设备消息状态</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘light/have_updates’, body: null}</td>\n<td></td>\n<td>轻钱包交易更新消息</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘light/new_address_to_watch’, body: address}</td>\n<td>addLightWatchedAddress()</td>\n<td>添加轻钱包监视地址</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘exchange_rates’, body: exchangeRates}</td>\n<td></td>\n<td>交易价格消息</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘upgrade_required’, body: null}</td>\n<td></td>\n<td>强制升级消息</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"ByteBall网络节点通信协议详解\"><a href=\"#ByteBall网络节点通信协议详解\" class=\"headerlink\" title=\"ByteBall网络节点通信协议详解\"></a>ByteBall网络节点通信协议详解</h2><p>P2P网络是区块链网络的基础，网络中各个节点通过相互交换消息实现各种功能，包括收发交易、数据同步等操作。本文将对ByteBall网络节点的通信接口进行详细分析。</p>\n<p>ByteBall网络节点之间采用websocket连接，采用json格式消息进行通信，消息可表示为<code>{type: type, content: content}</code>。ByteBall中的消息类型主要包括三类，即消息的type包括三种<code>request</code>、<code>response</code>以及<code>justsaying</code>，当然也可以自定义其它类型的消息。下面对消息的具体格式和处理流程进行解析。</p>\n<h3 id=\"request：请求消息\"><a href=\"#request：请求消息\" class=\"headerlink\" title=\"request：请求消息\"></a>request：请求消息</h3><p>请求消息的格式为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: command,</span><br><span class=\"line\">        params: params</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中，<code>tag</code>为request消息的BASE64哈希值。</p>\n<p>发送请求消息的函数原型为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendRequest</span>(<span class=\"params\">ws, command, params, bReroutable, responseHandler</span>)</span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">ws</span>: 发送请求的<span class=\"title\">websocket</span>连接</span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">command</span>: 请求命令</span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">params</span>: 请求参数</span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">bReroutable</span>: 是否重新路由</span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">responseHandler</span>: 请求响应处理回调函数</span></span><br></pre></td></tr></table></figure>\n<p>通过<code>sendRequest()</code>发出的每个请求会生成一个<code>tag</code>作为该请求的标识，并在内存中保留该请求的相关处理信息：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ws.assocPendingRequests[tag] = &#123;</span><br><span class=\"line\">    request: request,</span><br><span class=\"line\">    responseHandlers: [responseHandler],</span><br><span class=\"line\">    reroute: reroute,</span><br><span class=\"line\">    reroute_timer: reroute_timer,</span><br><span class=\"line\">    cancel_timer: cancel_timer</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当请求发出后，若对方没有回应时有两种选择，一种是采用<code>reroute</code>，另一种是<code>cancel</code>。<code>reroute</code>的<code>timeout</code>为5s，<code>cancel</code>的<code>timeout</code>时间为300秒。</p>\n<p>当接收到响应后（位于函数<code>handleResponse()</code>），在调用相应回调函数<code>responseHandlers</code>后，请求信息<code>ws.assocPendingRequests[tag]</code>被删除。</p>\n<p>如果相关的连接被关闭，则清理该连接上的所有请求信息（位于函数<code>cancelRequestOnClosedConnection()</code>）。</p>\n<h3 id=\"response：响应消息\"><a href=\"#response：响应消息\" class=\"headerlink\" title=\"response：响应消息\"></a>response：响应消息</h3><p>响应消息的格式为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'response',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        response: response</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中，<code>tag</code>对应于请求消息中的<code>tag</code>。</p>\n<p>发送响应消息的函数原型为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendResponse</span>(<span class=\"params\">ws, tag, response</span>)</span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">ws</span>: 发送响应的<span class=\"title\">websocket</span>连接</span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">tag</span>: 发送响应对应的<span class=\"title\">tag</span></span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">response</span>: 响应消息内容</span></span><br></pre></td></tr></table></figure>\n<p>当收到对端节点请求后，设置<code>ws.assocInPreparingResponse[tag]=true</code>，并在回复响应后删除。</p>\n<h3 id=\"justsaying：其它消息\"><a href=\"#justsaying：其它消息\" class=\"headerlink\" title=\"justsaying：其它消息\"></a>justsaying：其它消息</h3><p>其它消息包括的内容比较多，比如版本、心跳、hub登录等，其格式为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'justsaying',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        subject: subject,</span><br><span class=\"line\">        body: body</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>发送其它消息的函数原型为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendJustsaying</span>(<span class=\"params\">ws, subject, body</span>)</span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">ws</span>: 发送消息的<span class=\"title\">websocket</span>连接</span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">subject</span>: 消息主题</span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">body</span>: 消息内容</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"常见通信接口\"><a href=\"#常见通信接口\" class=\"headerlink\" title=\"常见通信接口\"></a>常见通信接口</h3><h4 id=\"获取见证人列表（get-witnesses）\"><a href=\"#获取见证人列表（get-witnesses）\" class=\"headerlink\" title=\"获取见证人列表（get_witnesses）\"></a>获取见证人列表（get_witnesses）</h4><p>请求消息为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: 'get_witnesses'</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>收到请求后，从数据库中读取当前的见证人列表并返回</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myWitnesses.readMyWitnesses(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arrWitnesses</span>)</span>&#123;</span><br><span class=\"line\">    sendResponse(ws, tag, arrWitnesses);</span><br><span class=\"line\">&#125;, <span class=\"string\">'wait'</span>);</span><br></pre></td></tr></table></figure>\n<p>比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ <span class=\"string\">'BVVJ2K7ENPZZ3VYZFWQWK7ISPCATFIW3'</span>,</span><br><span class=\"line\">  <span class=\"string\">'DJMMI5JYA5BWQYSXDPRZJVLW3UGL3GJS'</span>,</span><br><span class=\"line\">  <span class=\"string\">'FOPUBEUPBC6YLIQDLKL6EW775BMV7YOH'</span>,</span><br><span class=\"line\">  <span class=\"string\">'GFK3RDAPQLLNCMQEVGGD2KCPZTLSG3HN'</span>,</span><br><span class=\"line\">  <span class=\"string\">'H5EZTQE7ABFH27AUDTQFMZIALANK6RBG'</span>,</span><br><span class=\"line\">  <span class=\"string\">'I2ADHGP4HL6J37NQAD73J7E5SKFIXJOT'</span>,</span><br><span class=\"line\">  <span class=\"string\">'JEDZYC2HMGDBIDQKG3XSTXUSHMCBK725'</span>,</span><br><span class=\"line\">  <span class=\"string\">'JPQKPRI5FMTQRJF4ZZMYZYDQVRD55OTC'</span>,</span><br><span class=\"line\">  <span class=\"string\">'OYW2XTDKSNKGSEZ27LMGNOPJSYIXHBHC'</span>,</span><br><span class=\"line\">  <span class=\"string\">'S7N5FE42F6ONPNDQLCF64E2MGFYKQR2I'</span>,</span><br><span class=\"line\">  <span class=\"string\">'TKT4UESIKTTRALRRLWS4SENSTJX6ODCW'</span>,</span><br><span class=\"line\">  <span class=\"string\">'UENJPVZ7HVHM6QGVGT6MWOJGGRTUTJXQ'</span> ]</span><br></pre></td></tr></table></figure>\n<p><code>network.js</code>中在函数<code>initWitenessesIfNecessary()</code>中使用。</p>\n<h4 id=\"获取节点列表（get-peers）\"><a href=\"#获取节点列表（get-peers）\" class=\"headerlink\" title=\"获取节点列表（get_peers）\"></a>获取节点列表（get_peers）</h4><p>请求消息为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: 'get_peers'</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>返回对端节点已连接的节点列表</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sendResponse(ws, tag, arrPeerUrls)</span><br></pre></td></tr></table></figure>\n<p>比如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ <span class=\"string\">'wss://byteball.fr/bb'</span>,</span><br><span class=\"line\">  <span class=\"string\">'wss://byteball-hub.com/bb'</span>,</span><br><span class=\"line\">  <span class=\"string\">'wss://hub.byteball.ee'</span> ]</span><br></pre></td></tr></table></figure>\n<p><code>network.js</code>中可以使用<code>requestPeers()</code>函数发出请求。</p>\n<h4 id=\"获取交易数据（get-joint）\"><a href=\"#获取交易数据（get-joint）\" class=\"headerlink\" title=\"获取交易数据（get_joint）\"></a>获取交易数据（get_joint）</h4><p>请求消息为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: 'get_joint',</span><br><span class=\"line\">        params: unit</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>若找到，则返回响应交易数据；否则，返回交易未找到。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">storage.readJoint(db, unit, &#123;</span><br><span class=\"line\">    ifFound: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">objJoint</span>)</span>&#123;</span><br><span class=\"line\">        sendJoint(ws, objJoint, tag);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ifNotFound: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        sendResponse(ws, tag, &#123;<span class=\"attr\">joint_not_found</span>: unit&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>比如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; <span class=\"attr\">joint</span>:</span><br><span class=\"line\">   &#123; <span class=\"attr\">unit</span>:</span><br><span class=\"line\">      &#123; <span class=\"attr\">unit</span>: <span class=\"string\">'OcrOftkwCwTYAaGq0zV8FecAK/CKED++Ddewh2c2M60='</span>,</span><br><span class=\"line\">        version: <span class=\"string\">'1.0'</span>,</span><br><span class=\"line\">        alt: <span class=\"string\">'1'</span>,</span><br><span class=\"line\">        witness_list_unit: <span class=\"string\">'oj8yEksX9Ubq7lLc+p6F2uyHUuynugeVq4+ikT67X6E='</span>,</span><br><span class=\"line\">        last_ball_unit: <span class=\"string\">'p7obFdGHM5pTWPytNeRIjmamBe7485aDTzuddWI9yWY='</span>,</span><br><span class=\"line\">        last_ball: <span class=\"string\">'wmiP2BvT7FFFtwy5qB+UsA4j8I5KbmBVA6mFCgwQUas='</span>,</span><br><span class=\"line\">        headers_commission: <span class=\"number\">344</span>,</span><br><span class=\"line\">        payload_commission: <span class=\"number\">157</span>,</span><br><span class=\"line\">        main_chain_index: <span class=\"number\">2791799</span>,</span><br><span class=\"line\">        timestamp: <span class=\"number\">1528796161</span>,</span><br><span class=\"line\">        parent_units: [<span class=\"built_in\">Array</span>],</span><br><span class=\"line\">        authors: [<span class=\"built_in\">Array</span>],</span><br><span class=\"line\">        messages: [<span class=\"built_in\">Array</span>] &#125; &#125; &#125;</span><br></pre></td></tr></table></figure>\n<p><code>network.js</code>中可以使用<code>requestJoints()</code>函数发出请求。</p>\n<h4 id=\"发送交易数据（post-joint）\"><a href=\"#发送交易数据（post-joint）\" class=\"headerlink\" title=\"发送交易数据（post_joint）\"></a>发送交易数据（post_joint）</h4><p>请求消息为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: 'post_joint',</span><br><span class=\"line\">        params: joint</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接收到请求后，对<code>joint</code>数据进行检查，若通过，则返回<code>accepted</code>；否则，返回相应错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handlePostedJoint(ws, objJoint, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123;</span><br><span class=\"line\">    error ? sendErrorResponse(ws, tag, error) : sendResponse(ws, tag, <span class=\"string\">'accepted'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>使用方法可参考<code>network.js</code>中的<code>postJointToLightVendor()</code>函数。</p>\n<h4 id=\"发送心跳数据（heartbeat）\"><a href=\"#发送心跳数据（heartbeat）\" class=\"headerlink\" title=\"发送心跳数据（heartbeat）\"></a>发送心跳数据（heartbeat）</h4><p>请求消息为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: 'heartbeat'</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用方法可参考<code>network.js</code>中的<code>heartbeat()</code>函数。</p>\n<p>ByteBall网络中节点之间依靠心跳请求维持连接，当超过<code>HEARTBEAT_RESPONSE_TIMEOUT=60s</code>没有收到对端节点的消息时，将会关闭与该节点的连接。ByteBall中默认3-4s向对端节点发送心跳请求。</p>\n<h4 id=\"订阅交易数据（subscribe）\"><a href=\"#订阅交易数据（subscribe）\" class=\"headerlink\" title=\"订阅交易数据（subscribe）\"></a>订阅交易数据（subscribe）</h4><p>请求消息为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: 'subscribe',</span><br><span class=\"line\">        params: &#123;</span><br><span class=\"line\">            subscription_id: subscription_id, // 订阅编号</span><br><span class=\"line\">            last_mci: last_mci                // 订阅起始mci</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接收到请求后，若<code>last_mci&gt;0</code>，则返回从该mci起始的joints；否则，返回当前网络中的叶子交易。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (ValidationUtils.isNonnegativeInteger(params.last_mci))</span><br><span class=\"line\">    sendJointsSinceMci(ws, params.last_mci);</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    sendFreeJoints(ws);</span><br></pre></td></tr></table></figure>\n<p>订阅后，当收到新交易时，会向已订阅的节点进行转发（<code>forwardJoint(ws, objJoint)</code>）。使用方法可参考<code>network.js</code>中的<code>subscribe()</code>函数。</p>\n<h4 id=\"同步交易数据（catchup）\"><a href=\"#同步交易数据（catchup）\" class=\"headerlink\" title=\"同步交易数据（catchup）\"></a>同步交易数据（catchup）</h4><p>请求消息为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: 'catchup',</span><br><span class=\"line\">        params: &#123;</span><br><span class=\"line\">            witnesses: witnesses,                 // 见证人列表</span><br><span class=\"line\">            last_stable_mci: last_stable_mci,     // 稳定mci</span><br><span class=\"line\">            last_known_mci: last_known_mci        // 已知mci</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>必须在订阅状态下使用，接收到请求后，返回主链序号从<code>last_known_mci</code>至<code>last_stable_mci</code>之间的交易数据及其相关信息<code>objCatchupChain</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">catchup.prepareCatchupChain(catchupRequest, &#123;</span><br><span class=\"line\">    ifError: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123;</span><br><span class=\"line\">        sendErrorResponse(ws, tag, error);</span><br><span class=\"line\">        unlock();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ifOk: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">objCatchupChain</span>)</span>&#123;</span><br><span class=\"line\">        sendResponse(ws, tag, objCatchupChain);</span><br><span class=\"line\">        unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><code>objCatchupChain</code>包括以下几部分信息：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> objCatchupChain = &#123;</span><br><span class=\"line\">    unstable_mc_joints: [], <span class=\"comment\">// 候选主链上未稳定的单元列表</span></span><br><span class=\"line\">    stable_last_ball_joints: [], <span class=\"comment\">// 已稳定的单元列表</span></span><br><span class=\"line\">    witness_change_and_definition_joints: [] <span class=\"comment\">// 见证人或地址定义发生变化的单元列表</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>使用方法可参考<code>network.js</code>中的<code>requestCatchup()</code>函数。</p>\n<h4 id=\"获取哈希树（get-hash-tree）\"><a href=\"#获取哈希树（get-hash-tree）\" class=\"headerlink\" title=\"获取哈希树（get_hash_tree）\"></a>获取哈希树（get_hash_tree）</h4><p>请求消息为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: 'get_hash_tree',</span><br><span class=\"line\">        params: &#123;</span><br><span class=\"line\">            from_ball: from_ball,</span><br><span class=\"line\">            to_ball: to_bal</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>必须在订阅状态下使用，接收到请求后，返回从<code>from_ball</code>至<code>to_ball</code>主链序号之间的所有ball交易数据。使用方法可参考<code>network.js</code>中的<code>requestNextHashTree()</code>函数。</p>\n<h4 id=\"获取主链序号（get-last-mci）\"><a href=\"#获取主链序号（get-last-mci）\" class=\"headerlink\" title=\"获取主链序号（get_last_mci）\"></a>获取主链序号（get_last_mci）</h4><p>请求消息为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: 'get_last_mci'</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>返回目前最大的主链序号。</p>\n<h4 id=\"通过Hub向设备发送消息（hub-deliver）\"><a href=\"#通过Hub向设备发送消息（hub-deliver）\" class=\"headerlink\" title=\"通过Hub向设备发送消息（hub/deliver）\"></a>通过Hub向设备发送消息（hub/deliver）</h4><p>请求消息为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: 'hub/deliver',</span><br><span class=\"line\">        params: &#123;</span><br><span class=\"line\">            to: device_address,</span><br><span class=\"line\">            pubkey: pubkey,</span><br><span class=\"line\">            signature: signature,</span><br><span class=\"line\">            encrypted_package: encrypted_message</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过Hub向其它设备发送加密消息，使用方法可以参考<code>device.js</code>中的<code>sendPreparedMessageToConnectedHub()</code>函数。</p>\n<h4 id=\"从Hub获取配对设备临时公钥（hub-get-temp-pubkey）\"><a href=\"#从Hub获取配对设备临时公钥（hub-get-temp-pubkey）\" class=\"headerlink\" title=\"从Hub获取配对设备临时公钥（hub/get_temp_pubkey）\"></a>从Hub获取配对设备临时公钥（hub/get_temp_pubkey）</h4><p>请求消息为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: 'hub/get_temp_pubkey',</span><br><span class=\"line\">        params: permanent_pubkey</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过永久公钥<code>permanent_pubkey</code>从Hub处获取对端设备的临时公钥。</p>\n<h4 id=\"设备向Hub更新临时公钥（hub-temp-pubkey）\"><a href=\"#设备向Hub更新临时公钥（hub-temp-pubkey）\" class=\"headerlink\" title=\"设备向Hub更新临时公钥（hub/temp_pubkey）\"></a>设备向Hub更新临时公钥（hub/temp_pubkey）</h4><p>请求消息为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: 'hub/temp_pubkey',</span><br><span class=\"line\">        params: &#123;</span><br><span class=\"line\">            temp_pubkey: temp_pubkey,</span><br><span class=\"line\">            pubkey: permanent_pubkey,</span><br><span class=\"line\">            signature: signature</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>向Hub更新本设备的临时公钥，设备必须登陆到Hub上。接收到请求后，对参数及签名进行验证，如果成功则返回响应消息<code>updated</code>。</p>\n<h4 id=\"开启通知（hub-enable-notification）\"><a href=\"#开启通知（hub-enable-notification）\" class=\"headerlink\" title=\"开启通知（hub/enable_notification）\"></a>开启通知（hub/enable_notification）</h4><p>请求消息为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: 'hub/enable_notification',</span><br><span class=\"line\">        params: registrationId</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>设备开启推送通知，目前还未使用。</p>\n<h4 id=\"关闭通知（hub-disable-notification）\"><a href=\"#关闭通知（hub-disable-notification）\" class=\"headerlink\" title=\"关闭通知（hub/disable_notification）\"></a>关闭通知（hub/disable_notification）</h4><p>请求消息为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: 'hub/disable_notification',</span><br><span class=\"line\">        params: registrationId</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>设备关闭推送通知，目前还未使用。</p>\n<h4 id=\"获取机器人列表（hub-get-bots）\"><a href=\"#获取机器人列表（hub-get-bots）\" class=\"headerlink\" title=\"获取机器人列表（hub/get_bots）\"></a>获取机器人列表（hub/get_bots）</h4><p>请求消息为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: 'hub/get_bots'</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>返回Hub节点上的机器人列表，比如：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[...</span><br><span class=\"line\"> &#123; id: 27,</span><br><span class=\"line\">    name: 'Worldopoly ICO',</span><br><span class=\"line\">    pairing_code: 'AwyoKVsyxajATgLXa9Jhh8NBRTnUaZNHdi85c43g+GoJ@byteball.org/bb#0000',</span><br><span class=\"line\">    description: 'Worldopoly is the world’s first mobile game combining AR, AI, Geolocationing, Blockchain, and DAG. The ICO is active until 17 May 2018, and you can buy WPT tokens with Bytes, BTC, or Ether.  WPT token is issued both on Byteball and Ethereum platforms but investors on Byteball platform receive increased bonus (even if they pay in ETH or BTC) for investments up to 30 ETH.\\n\\nWebsite: https://worldopoly.io' &#125;,</span><br><span class=\"line\">  &#123; id: 28,</span><br><span class=\"line\">    name: 'WhiteLittle Airdrop 小白币糖果机器人',</span><br><span class=\"line\">    pairing_code: 'Ahe4jkq5GvgLQ2h5ftqRMjWBBumUEN96tWoSfEQ9TGHF@byteball.org/bb#0000',</span><br><span class=\"line\">    description: '小白链机器人送出小白币糖果。小白链是专门为想进入区块链行业的小白们量身打造的帮助平台，其目的是建立一个基于字节雪球技术为小白们提供有效帮助的信息发现生态平台。小白链的设计初衷是构建一套合理的激励机制，能够及时得到帮助，又让提供帮助的区块链从业者得到合理的回报。\\n\\n开发者：123cb.net' &#125;,</span><br><span class=\"line\">  &#123; id: 32,</span><br><span class=\"line\">    name: 'Exchange bot for dual-chain tokens',</span><br><span class=\"line\">    pairing_code: 'A+dAU2j/Tm9lnlmc2SryltsfVzOq9GLPxccAq+dClCxr@byteball.org/bb#f7b42a61a3ba6a34cbeeb18d37979927ad1103fc',</span><br><span class=\"line\">    description: 'For tokens issued both on Byteball and Ethereum platforms, the bot enables seamless exchange between Byteball and Ethereum tokens.\\n\\nDeveloper: HDRProtocol, https://github.com/HDRProtocol/exchanger' &#125;,</span><br><span class=\"line\"> ...]</span><br></pre></td></tr></table></figure>\n<h4 id=\"获取资产元数据（hub-get-asset-metadata）\"><a href=\"#获取资产元数据（hub-get-asset-metadata）\" class=\"headerlink\" title=\"获取资产元数据（hub/get_asset_metadata）\"></a>获取资产元数据（hub/get_asset_metadata）</h4><p>请求消息为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: 'hub/get_asset_metadata',</span><br><span class=\"line\">        params: asset</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从Hub节点上获取已发布资产的信息，比如：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; metadata_unit: 'Rg3DNkDJJ2DWfIzTj3Ypz8CBGi617wl07QkJq7Z5soc=',</span><br><span class=\"line\">  registry_address: 'AM6GTUKENBYA54FYDAKX2VLENFZIMXWG',</span><br><span class=\"line\">  suffix: null &#125;</span><br></pre></td></tr></table></figure>\n<p>具体使用方法可以参考<code>wallet.js</code>中的<code>fetchAssetMetadata()</code>函数。</p>\n<h4 id=\"从Hub获取交易历史（light-get-history）\"><a href=\"#从Hub获取交易历史（light-get-history）\" class=\"headerlink\" title=\"从Hub获取交易历史（light/get_history）\"></a>从Hub获取交易历史（light/get_history）</h4><p>请求消息为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: 'hub/get_asset_metadata',</span><br><span class=\"line\">        params: &#123;</span><br><span class=\"line\">            witnesses: witnesses,</span><br><span class=\"line\">            requested_joints: joints,</span><br><span class=\"line\">            addresses: addresses</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>请求特定交易或地址的历史数据，仅适用于轻节点，具体使用方法可以参考<code>network.js</code>中的<code>requestHistoryFor()</code>函数。轻钱包可以根据获取的历史数据构建证据链，从而验证交易的可靠性。</p>\n<p>对于轻钱包而言，它本身不保存所有的交易数据，而需要采用<code>requestFromLightVendor()</code>从<code>Vendor</code>处获取数据，目前<code>Vendor</code>为<code>Hub</code>节点。</p>\n<h4 id=\"获取连接证明（light-get-link-proofs）\"><a href=\"#获取连接证明（light-get-link-proofs）\" class=\"headerlink\" title=\"获取连接证明（light/get_link_proofs）\"></a>获取连接证明（light/get_link_proofs）</h4><p>请求消息为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: 'hub/get_link_proofs',</span><br><span class=\"line\">        params: units</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>获取特定交易的连接证明，仅适用于轻节点，具体使用方法可以参考<code>network.js</code>中的<code>checkThatEachChainElementIncludesThePrevious()</code>。</p>\n<h4 id=\"获取父单元及见证单元（light-get-parents-and-last-ball-and-witness-list-unit）\"><a href=\"#获取父单元及见证单元（light-get-parents-and-last-ball-and-witness-list-unit）\" class=\"headerlink\" title=\"获取父单元及见证单元（light/get_parents_and_last_ball_and_witness_list_unit）\"></a>获取父单元及见证单元（light/get_parents_and_last_ball_and_witness_list_unit）</h4><p>请求消息为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: 'hub/get_parents_and_last_ball_and_witness_list_unit',</span><br><span class=\"line\">        params: &#123;</span><br><span class=\"line\">            witnesses: witnesses</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>轻节点获取这些信息后，可用于构造自己的交易数据。返回的响应数据，比如：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; parent_units: [ 'ovIwMvA9MMKgxiHrslJQhQGzUAIXlRs47grVdG/er3s=' ],</span><br><span class=\"line\">  last_stable_mc_ball: 'osJhTYZv+HS5hGhH01A/3PKpyaxPRbtcxQEaUj/a/h4=',</span><br><span class=\"line\">  last_stable_mc_ball_unit: '+9fxcmxM90mhIxvtJ3yo++tAoYofyoDmPqBQEwbEHDA=',</span><br><span class=\"line\">  last_stable_mc_ball_mci: 2805208,</span><br><span class=\"line\">  witness_list_unit: 'oj8yEksX9Ubq7lLc+p6F2uyHUuynugeVq4+ikT67X6E=' &#125;</span><br></pre></td></tr></table></figure>\n<p>具体使用方法可以参考<code>composer.js</code>中的<code>composeJoint()</code>函数。</p>\n<h4 id=\"查询用户认证信息（light-get-attestation）\"><a href=\"#查询用户认证信息（light-get-attestation）\" class=\"headerlink\" title=\"查询用户认证信息（light/get_attestation）\"></a>查询用户认证信息（light/get_attestation）</h4><p>请求消息为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: 'request',</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        tag: tag,</span><br><span class=\"line\">        command: 'hub/get_attestation',</span><br><span class=\"line\">        params: &#123;</span><br><span class=\"line\">        \tattestor_address: attestor_address,</span><br><span class=\"line\">        \tfield: field,</span><br><span class=\"line\">        \tvalue: value</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接收到请求后，如果Hub查询到相应的认证信息，返回认证信息所在的交易单元。</p>\n<h4 id=\"发送版本信息（version）\"><a href=\"#发送版本信息（version）\" class=\"headerlink\" title=\"发送版本信息（version）\"></a>发送版本信息（version）</h4><p>消息格式为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: <span class=\"string\">'justsaying'</span>,</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        subject: <span class=\"string\">'version'</span>,</span><br><span class=\"line\">        body: &#123;</span><br><span class=\"line\">            protocol_version: protocol_version,</span><br><span class=\"line\">            alt: alt,</span><br><span class=\"line\">            library: name,</span><br><span class=\"line\">            library_version: version,</span><br><span class=\"line\">            program: program,</span><br><span class=\"line\">            program_version: program_version</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>具体用法可以参考<code>network.js</code>中的<code>sendVersion()</code>函数。</p>\n<h4 id=\"已发送完所有交易（free-joints-end）\"><a href=\"#已发送完所有交易（free-joints-end）\" class=\"headerlink\" title=\"已发送完所有交易（free_joints_end）\"></a>已发送完所有交易（free_joints_end）</h4><p>消息格式为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: <span class=\"string\">'justsaying'</span>,</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        subject: <span class=\"string\">'free_joints_end'</span>,</span><br><span class=\"line\">        body: <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用于通知对方所有的叶子交易已发送完毕，具体用法可参考<code>network.js</code>中的<code>sendFreeJoints()</code>及<code>sendJointsSinceMci()</code></p>\n<h4 id=\"发送隐私交易（private-payment）\"><a href=\"#发送隐私交易（private-payment）\" class=\"headerlink\" title=\"发送隐私交易（private_payment）\"></a>发送隐私交易（private_payment）</h4><p>消息格式为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: <span class=\"string\">'justsaying'</span>,</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        subject: <span class=\"string\">'private_payment'</span>,</span><br><span class=\"line\">        body: privateElement</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用来向对方发送隐私交易的证据链，但该条<code>justsaying</code>消息并没有使用。实际上隐私资产是在两个设备之间通过加密消息进行点对点发送的，相关代码位于<code>wallet_general.js</code>的<code>sendPrivatePayments()</code>中，发送加密消息采用的是<code>device.js</code>中的<code>sendMessageToDevice()</code>（底层使用的是<code>hub/deliver</code>接口）。</p>\n<h4 id=\"登录Hub（hub-login）\"><a href=\"#登录Hub（hub-login）\" class=\"headerlink\" title=\"登录Hub（hub/login）\"></a>登录Hub（hub/login）</h4><p>消息格式为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: <span class=\"string\">'justsaying'</span>,</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        subject: <span class=\"string\">'hub/login'</span>,</span><br><span class=\"line\">        body: &#123;</span><br><span class=\"line\">            challenge: challenge,</span><br><span class=\"line\">            pubkey: pubkey,</span><br><span class=\"line\">\t\t\tsignature: signature</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该消息用于设备登录Hub。</p>\n<h4 id=\"获取设备新消息（hub-refresh）\"><a href=\"#获取设备新消息（hub-refresh）\" class=\"headerlink\" title=\"获取设备新消息（hub/refresh）\"></a>获取设备新消息（hub/refresh）</h4><p>消息格式为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: <span class=\"string\">'justsaying'</span>,</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        subject: <span class=\"string\">'hub/refresh'</span>,</span><br><span class=\"line\">        body: <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用于从Hub上获取该设备还未接收的消息。</p>\n<h4 id=\"发送配对消息（hub-challenge）\"><a href=\"#发送配对消息（hub-challenge）\" class=\"headerlink\" title=\"发送配对消息（hub/challenge）\"></a>发送配对消息（hub/challenge）</h4><p>消息格式为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: <span class=\"string\">'justsaying'</span>,</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        subject: <span class=\"string\">'hub/challenge'</span>,</span><br><span class=\"line\">        body: challenge</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由Hub发送给设备，用于设备登录。</p>\n<h4 id=\"发送设备消息（hub-message）\"><a href=\"#发送设备消息（hub-message）\" class=\"headerlink\" title=\"发送设备消息（hub/message）\"></a>发送设备消息（hub/message）</h4><p>消息格式为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: <span class=\"string\">'justsaying'</span>,</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        subject: <span class=\"string\">'hub/message'</span>,</span><br><span class=\"line\">        body: &#123;</span><br><span class=\"line\">            message_hash: message_hash,</span><br><span class=\"line\">            message: message</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由Hub转发给设备的消息，可配合<code>hub/deliver</code>使用，具体用法可参考<code>sendStoredDeviceMessages()</code>。</p>\n<h4 id=\"轻钱包交易更新消息（light-have-updates）\"><a href=\"#轻钱包交易更新消息（light-have-updates）\" class=\"headerlink\" title=\"轻钱包交易更新消息（light/have_updates）\"></a>轻钱包交易更新消息（light/have_updates）</h4><p>消息格式为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: <span class=\"string\">'justsaying'</span>,</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        subject: <span class=\"string\">'light/have_updates'</span>,</span><br><span class=\"line\">        body: <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当轻钱包使用<code>light/get_history</code>从Hub上请求交易历史时，Hub会在<code>watched_light_addresses</code>中记录下请求的地址列表或者<code>watched_light_units</code>中记录下请求的交易列表。当相关的交易达到稳定时，Hub将通过<code>light/have_updates</code>消息通知轻钱包。然后，轻钱包可以通过<code>light/get_history</code>确定已达到稳定的交易单元。</p>\n<h4 id=\"添加轻钱包监视地址（light-new-address-to-watch）\"><a href=\"#添加轻钱包监视地址（light-new-address-to-watch）\" class=\"headerlink\" title=\"添加轻钱包监视地址（light/new_address_to_watch）\"></a>添加轻钱包监视地址（light/new_address_to_watch）</h4><p>消息格式为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: <span class=\"string\">'justsaying'</span>,</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        subject: <span class=\"string\">'light/new_address_to_watch'</span>,</span><br><span class=\"line\">        body: address</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>轻钱包向Hub请求将地址加入<code>watch_light_addresses</code>表中，从而可以从Hub接收相应地址的交易信息，具体用法可参考<code>network.js</code>中的<code>addLightWatchedAddress()</code>函数。</p>\n<h4 id=\"交易价格消息（exchange-rates）\"><a href=\"#交易价格消息（exchange-rates）\" class=\"headerlink\" title=\"交易价格消息（exchange_rates）\"></a>交易价格消息（exchange_rates）</h4><p>消息格式为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: <span class=\"string\">'justsaying'</span>,</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        subject: <span class=\"string\">'exchange_rates'</span>,</span><br><span class=\"line\">        body: exchangeRates</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由Hub广播的交易价格消息，比如：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ 'justsaying',</span><br><span class=\"line\">  &#123; subject: 'exchange_rates',</span><br><span class=\"line\">    body: &#123; GBYTE_USD: 119.1914071839, GBB_USD: 3.6949336227009 &#125; &#125; ]</span><br></pre></td></tr></table></figure>\n<h3 id=\"通信接口列表\"><a href=\"#通信接口列表\" class=\"headerlink\" title=\"通信接口列表\"></a>通信接口列表</h3><table>\n<thead>\n<tr>\n<th>type</th>\n<th>content</th>\n<th>function</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>request</td>\n<td>{tag: tag, command: command, params: params}</td>\n<td>sendRequest()</td>\n<td>通用发送请求</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, command: ‘get_peers’}</td>\n<td>requestPeers()</td>\n<td>请求节点列表</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, command: ‘get_witnesses’}</td>\n<td>initWitenessesIfNecessary()</td>\n<td>请求见证人列表</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, command: ‘get_joint’, params: unit}</td>\n<td>requestJoints()</td>\n<td>请求交易信息</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, command: ‘post_joint’, params: joint}</td>\n<td>postJointToLightVendor()</td>\n<td>发送交易信息</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, command: ‘heartbeat’}</td>\n<td>heartbeat()</td>\n<td>心跳请求</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, command: ‘subscribe’, params: {subscription_id, last_mci}}</td>\n<td>subscribe()</td>\n<td>订阅交易</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, command: ‘catchup’, params: {witnesses, last_stable_mci, last_known_mci}}</td>\n<td>requestCatchup()</td>\n<td>同步数据</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, command: ‘get_hash_tree’, params: {from_ball,to_ball}}</td>\n<td>requestNextHashTree()</td>\n<td>请求哈希树</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, command: ‘get_last_mci’}</td>\n<td></td>\n<td>获取主链序号</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, command: ‘hub/deliver’, params: {encrypted_package, to, pubkey, signature}}</td>\n<td></td>\n<td>通过Hub向设备发送消息</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, command: ‘hub/get_temp_pubkey’, params: pubkey}</td>\n<td></td>\n<td>从Hub获取配对设备临时公钥</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, command: ‘hub/temp_pubkey’, params: {temp_pubkey, pubkey, signature}}</td>\n<td></td>\n<td>设备向Hub更新临时公钥</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, command: ‘hub/enable_notification’}</td>\n<td></td>\n<td>开启通知</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, command: ‘hub/disable_notification’}</td>\n<td></td>\n<td>关闭通知</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, command: ‘hub/get_bots’}</td>\n<td></td>\n<td>获取机器人列表</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, command: ‘hub/get_asset_metadata’, params: asset}</td>\n<td>fetchAssetMetadata()</td>\n<td>获取资产元数据</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, command: ‘light/get_history’, params: {witnesses, requested_joints, addresses}}</td>\n<td>requestHistoryFor()</td>\n<td>从Hub获取交易历史</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, command: ‘light/get_link_proofs’, params: units</td>\n<td></td>\n<td>获取连接证明</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, command: ‘light/get_parents_and_last_ball_and_witness_list_unit’, params: {witnesses}}</td>\n<td>composeJoint()</td>\n<td>获取父单元及见证单元</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, command: ‘light/get_attestation’, params: { attestor_address, field, value}}</td>\n<td></td>\n<td>查询用户认证信息</td>\n</tr>\n<tr>\n<td>response</td>\n<td>{tag: tag, response: response}</td>\n<td>sendResponse()</td>\n<td>通用发送响应</td>\n</tr>\n<tr>\n<td></td>\n<td>{tag: tag, response: {error: error}}</td>\n<td>sendErrorResponse()</td>\n<td>发送响应错误</td>\n</tr>\n<tr>\n<td>justsaying</td>\n<td>{subject: subject, body: body}</td>\n<td>sendJustsaying()</td>\n<td>发送其它消息</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘error’, body: error}</td>\n<td>sendError()</td>\n<td>发送错误消息</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘info’, body: content}</td>\n<td>sendInfo()</td>\n<td>发送通知消息</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘result’, body: content}</td>\n<td>sendResult()</td>\n<td>发送结果消息</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘result’, body: {unit, result: ‘error’, error}}</td>\n<td>sendErrorResult()</td>\n<td>发送错误结果</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘version’, body: {protocol_version, alt, library, library_version, program, program_version}}</td>\n<td>sendVersion()</td>\n<td>发送版本信息</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘new_version’, body: {version}}</td>\n<td></td>\n<td>发现新版本</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘ hub/push_project_number’, body: { projectNumber}}</td>\n<td></td>\n<td>推送API编号</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘bugreport’, body: {message, exception}}</td>\n<td></td>\n<td>报告bug</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘free_joints_end’, body: null}</td>\n<td>sendFreeJoints()</td>\n<td>已发送完所有交易</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘private_payment’, body: privateElements}</td>\n<td></td>\n<td>发送隐私交易</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘my_url’, body: url}</td>\n<td></td>\n<td>发送连接地址</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘want_echo’, body: echo_string}</td>\n<td></td>\n<td>请求对方回应</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘your_echo’, body: echo_string}</td>\n<td></td>\n<td>发送回应信息</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘hub/login’, body: {challenge, pubkey, signature}}</td>\n<td></td>\n<td>登录Hub</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘hub/refresh’, body: null}</td>\n<td></td>\n<td>获取设备新消息</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘hub/delete’, body: message_hash}</td>\n<td></td>\n<td>删除设备消息</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘hub/challenge’, body: challenge}</td>\n<td></td>\n<td>发送配对消息</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘hub/message’, body: {message_hash, message}}</td>\n<td>sendStoredDeviceMessages()</td>\n<td>发送设备消息</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘hub/message_box_status’, body: ‘has_more’/‘empty’}</td>\n<td>sendStoredDeviceMessages()</td>\n<td>设备消息状态</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘light/have_updates’, body: null}</td>\n<td></td>\n<td>轻钱包交易更新消息</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘light/new_address_to_watch’, body: address}</td>\n<td>addLightWatchedAddress()</td>\n<td>添加轻钱包监视地址</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘exchange_rates’, body: exchangeRates}</td>\n<td></td>\n<td>交易价格消息</td>\n</tr>\n<tr>\n<td></td>\n<td>{subject: ‘upgrade_required’, body: null}</td>\n<td></td>\n<td>强制升级消息</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"ByteBall钱包详解","date":"2018-06-15T15:48:55.000Z","_content":"\n\n## 钱包结构\n\n顾名思义，钱包是用来保存钱的。但在数字货币的世界中，钱包里面并没有“钱”。钱包账户里有多少“钱”都是记录在区块链上的，钱包里只是存储了账户对应的**私钥**，账户是从私钥相应的公钥衍生出来的。只要有了私钥，你就可以在数字货币世界里证明你的身份，发送区块链上属于你的资产。因此，**钱包实际上是管理和存储私钥的工具**。\n\nByteBall钱包结构与Bitcoin类似，Bitcoin对管理和存储私钥以及通过私钥生成地址制定了一系列标准（BIP, Bitcoin Improvement Proposals），主要包括：\n\n- [BIP32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)：定义了HD钱包（Hierarchical Deterministic Wallet），允许从单一种子产生一树状结构储存多组私钥和公钥，可以方便的备份、转移以及分层权限控制等。HD钱包包含以树状结构衍生的密钥，使得父密钥可以衍生一系列子密钥，每个子密钥又可以衍生出一系列孙密钥，以此类推，无限衍生。下图展示了HD钱包的树状结构：\n\n  ![bip33-hd-wallet](http://oc7urqs4c.bkt.clouddn.com/2018-06-17-082216.png)\n\n- [BIP39](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki)：将种子用方便记忆和书写的单词表示，一般由12个单词组成，称为助记词或助记码。由一系列单词生成种子是个标准化的方法，这样易于在钱包中转移、导出和导入。比如`shrimp make call path pink draw gym song select brother social base`，其相应的私钥为`xprv9s21ZrQH143K4HQ8sBPNNkXHNuVYfivR96gtpJzMWCJVF5hdYjzT5nVQu6GfHAQLPstQtFp9GTWADUcKgzaV5EyL5JxT2rxkyg51ReGTVg8`。\n\n- [BIP43](https://github.com/bitcoin/bips/blob/master/bip-0043.mediawiki)：为HD钱包路径引入`purpose`字段，路径记作`m / purpose' / *`，比如`m / 0' / *`表示BIP32的默认账户。\n\n- [BIP44](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki)：定义HD钱包路径字段，赋予树状结构中的各层特殊的意义，从而支持多币种、多账户，路径定义为：\n\n  `m / purpose' / coin_type' / account' / change / address_index`\n\n  其中，`purpose'`固定是`44'`，代表使用BIP44；`coin_type'`用来表示不同币种，例如Bitcoin就是`0'`，Bitcoin Testnet是`1'`，Ethereum是`60'`；`account'`表示账户编码；`change`用来表示该地址是否为找零地址；`address_index`为地址编号。\n\n- [BIP45](https://github.com/bitcoin/bips/blob/master/bip-0045.mediawiki)：定义多签名HD钱包路径字段，从而支持多签名地址，路径定义为：\n\n  `m / purpose' / cosigner_index / change / address_index`\n\n  其中，`purpose`固定是`45'`，代表使用BIP45；`cosigner_index`表示多签名用户编号；其余字段与BIP44相同。\n\n\n\nByteBall钱包采用的是符合BIP44标准的HD钱包，其采用的路径结构为：\n\n```\nm / 44' / 0' / account' / change / address_index\n```\n\n此外，除了使用`account`来标识账户外，还使用了该账户公钥的哈希值对账户进行唯一表示，表示方法为：\n\n```javascript\nvar wallet = crypto.createHash(\"sha256\").update(xPubKey, \"utf8\").digest(\"base64\");\n```\n\nByteBall中还有一类特殊的地址，即设备地址，其采用的路径结构为：\n\n```\nm / 1' / *\n```\n\n\n\nByteBall钱包使用了`bitcore-lib`和`bitcore-mnemonic`两个库进行钱包管理，简单的使用方法如下：\n\n```javascript\nvar Mnemonic = require('bitcore-mnemonic');\nvar Bitcore = require('bitcore-lib');\n\n// 生成助记词\n// 'fee decorate step culture autumn game social very lemon drum embrace much'\nvar mnemonic = new Mnemonic();\n\n// 生成HD钱包私钥\n// <HDPrivateKey: xprv9s21ZrQH143K2P4n8N1MYXW4NPfPuH7K3z4uYe6iRxHHXMEUJQRriizTdMuN6rh5XLH4okZm69c7THSN7M5Lk8WSFXDd6b9DBcb6nAdxw7n>\nvar xPrivKey = mnemonic.toHDPrivateKey();\n\n// 生成HD钱包公钥，account=0\n// <HDPublicKey: xpub6BqpEDyiVUcuzwzhn3jznUooytK5k9weeZqoM9vRpKbaHJGdyXZ3uk6HzpwYfCbxUuTsn41RgTpsTqA44uC4Ce2vRAZAcr9n5EyRtZxczbs>\nvar xPubKey = Bitcore.HDPublicKey(xPrivKey.derive(\"m/44'/0'/0'\"));\n\n// 生成设备私钥，用于产生设备地址\n// <HDPrivateKey: xprv9u8BXQraRhyRypxQj4ffhEohzDyjLbqezoCuFCHpLHazDbi9ymLb1zp6aKmDpTpyxXw8Uc6HbCRSZMEtW71Eie1QPi2T3RweoKWrdymxGEf>\nvar devicePrivKey = xPrivKey.derive(\"m/1'\");\n\n```\n\n\n\n## 地址生成\n\nByteBall中包括三类地址：\n\n- 普通地址\n- 共享地址\n- 设备地址\n\n其中，普通地址和共享地址都是通过地址定义脚本生成的，二者的区别类似于Bitcoin中的P2PKH地址和P2SH地址，具体细节可参考[《ByteBall原理解析（三）地址、脚本及合约》](https://bbfans.org/2018/05/21/byteball%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%89%EF%BC%89%E5%9C%B0%E5%9D%80%E3%80%81%E8%84%9A%E6%9C%AC%E5%8F%8A%E5%90%88%E7%BA%A6/)；设备地址是采用设备公钥生成的，地址格式和校验规则与普通地址相同，只是前缀添加了`0`。\n\n给定需要生成地址的对象，ByteBall生成地址时采用的是`ripemd160`哈希，并给地址加上校验，使用的是`byteballcore/object_hash.js`中的函数`getChash160()`函数。\n\n具体来说，设备地址生成方法：\n\n```javascript\nvar ecdsa = require('secp256k1');  // 椭圆曲线非对称加密\n\n// 获取设备公钥\nvar pubkey = ecdsa.publicKeyCreate(devicePrivKey.privateKey.bn.toBuffer({size:32}), true).toString('base64');\n\n// 生成设备地址\nvar objectHash = require('byteballcore/object_hash.js');\nvar device_address = '0' + objectHash.getChash160(pubkey);\n```\n\n普通地址生成方法：\n\n```javascript\n// change=0 address_index=0，生成公钥\nvar pubkey = xPubKey.derive('m/0/0').publicKey.toBuffer().toString('base64');\n\n// 设定地址定义脚本，为单签名\nvar arrDefinition = [\"sig\", {\"pubkey\": pubkey}];\n\n// 生成地址\nvar address = objectHash.getChash160(arrDefinition);\n```\n\n共享地址的生成方法与普通地址基本一致，唯一的差别在于地址定义脚本要更加复杂一些，具体细节可参考前面给出的那篇文章。\n\n","source":"_posts/2018-06-15-byteball-wallet.md","raw":"---\ntitle: ByteBall钱包详解\ndate: 2018-06-15 23:48:55\ncategories: 谈点区块链\ntags:\n  - dag\n  - blockchain\n  - byteball\n  - bitcoin\n---\n\n\n## 钱包结构\n\n顾名思义，钱包是用来保存钱的。但在数字货币的世界中，钱包里面并没有“钱”。钱包账户里有多少“钱”都是记录在区块链上的，钱包里只是存储了账户对应的**私钥**，账户是从私钥相应的公钥衍生出来的。只要有了私钥，你就可以在数字货币世界里证明你的身份，发送区块链上属于你的资产。因此，**钱包实际上是管理和存储私钥的工具**。\n\nByteBall钱包结构与Bitcoin类似，Bitcoin对管理和存储私钥以及通过私钥生成地址制定了一系列标准（BIP, Bitcoin Improvement Proposals），主要包括：\n\n- [BIP32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)：定义了HD钱包（Hierarchical Deterministic Wallet），允许从单一种子产生一树状结构储存多组私钥和公钥，可以方便的备份、转移以及分层权限控制等。HD钱包包含以树状结构衍生的密钥，使得父密钥可以衍生一系列子密钥，每个子密钥又可以衍生出一系列孙密钥，以此类推，无限衍生。下图展示了HD钱包的树状结构：\n\n  ![bip33-hd-wallet](http://oc7urqs4c.bkt.clouddn.com/2018-06-17-082216.png)\n\n- [BIP39](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki)：将种子用方便记忆和书写的单词表示，一般由12个单词组成，称为助记词或助记码。由一系列单词生成种子是个标准化的方法，这样易于在钱包中转移、导出和导入。比如`shrimp make call path pink draw gym song select brother social base`，其相应的私钥为`xprv9s21ZrQH143K4HQ8sBPNNkXHNuVYfivR96gtpJzMWCJVF5hdYjzT5nVQu6GfHAQLPstQtFp9GTWADUcKgzaV5EyL5JxT2rxkyg51ReGTVg8`。\n\n- [BIP43](https://github.com/bitcoin/bips/blob/master/bip-0043.mediawiki)：为HD钱包路径引入`purpose`字段，路径记作`m / purpose' / *`，比如`m / 0' / *`表示BIP32的默认账户。\n\n- [BIP44](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki)：定义HD钱包路径字段，赋予树状结构中的各层特殊的意义，从而支持多币种、多账户，路径定义为：\n\n  `m / purpose' / coin_type' / account' / change / address_index`\n\n  其中，`purpose'`固定是`44'`，代表使用BIP44；`coin_type'`用来表示不同币种，例如Bitcoin就是`0'`，Bitcoin Testnet是`1'`，Ethereum是`60'`；`account'`表示账户编码；`change`用来表示该地址是否为找零地址；`address_index`为地址编号。\n\n- [BIP45](https://github.com/bitcoin/bips/blob/master/bip-0045.mediawiki)：定义多签名HD钱包路径字段，从而支持多签名地址，路径定义为：\n\n  `m / purpose' / cosigner_index / change / address_index`\n\n  其中，`purpose`固定是`45'`，代表使用BIP45；`cosigner_index`表示多签名用户编号；其余字段与BIP44相同。\n\n\n\nByteBall钱包采用的是符合BIP44标准的HD钱包，其采用的路径结构为：\n\n```\nm / 44' / 0' / account' / change / address_index\n```\n\n此外，除了使用`account`来标识账户外，还使用了该账户公钥的哈希值对账户进行唯一表示，表示方法为：\n\n```javascript\nvar wallet = crypto.createHash(\"sha256\").update(xPubKey, \"utf8\").digest(\"base64\");\n```\n\nByteBall中还有一类特殊的地址，即设备地址，其采用的路径结构为：\n\n```\nm / 1' / *\n```\n\n\n\nByteBall钱包使用了`bitcore-lib`和`bitcore-mnemonic`两个库进行钱包管理，简单的使用方法如下：\n\n```javascript\nvar Mnemonic = require('bitcore-mnemonic');\nvar Bitcore = require('bitcore-lib');\n\n// 生成助记词\n// 'fee decorate step culture autumn game social very lemon drum embrace much'\nvar mnemonic = new Mnemonic();\n\n// 生成HD钱包私钥\n// <HDPrivateKey: xprv9s21ZrQH143K2P4n8N1MYXW4NPfPuH7K3z4uYe6iRxHHXMEUJQRriizTdMuN6rh5XLH4okZm69c7THSN7M5Lk8WSFXDd6b9DBcb6nAdxw7n>\nvar xPrivKey = mnemonic.toHDPrivateKey();\n\n// 生成HD钱包公钥，account=0\n// <HDPublicKey: xpub6BqpEDyiVUcuzwzhn3jznUooytK5k9weeZqoM9vRpKbaHJGdyXZ3uk6HzpwYfCbxUuTsn41RgTpsTqA44uC4Ce2vRAZAcr9n5EyRtZxczbs>\nvar xPubKey = Bitcore.HDPublicKey(xPrivKey.derive(\"m/44'/0'/0'\"));\n\n// 生成设备私钥，用于产生设备地址\n// <HDPrivateKey: xprv9u8BXQraRhyRypxQj4ffhEohzDyjLbqezoCuFCHpLHazDbi9ymLb1zp6aKmDpTpyxXw8Uc6HbCRSZMEtW71Eie1QPi2T3RweoKWrdymxGEf>\nvar devicePrivKey = xPrivKey.derive(\"m/1'\");\n\n```\n\n\n\n## 地址生成\n\nByteBall中包括三类地址：\n\n- 普通地址\n- 共享地址\n- 设备地址\n\n其中，普通地址和共享地址都是通过地址定义脚本生成的，二者的区别类似于Bitcoin中的P2PKH地址和P2SH地址，具体细节可参考[《ByteBall原理解析（三）地址、脚本及合约》](https://bbfans.org/2018/05/21/byteball%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%89%EF%BC%89%E5%9C%B0%E5%9D%80%E3%80%81%E8%84%9A%E6%9C%AC%E5%8F%8A%E5%90%88%E7%BA%A6/)；设备地址是采用设备公钥生成的，地址格式和校验规则与普通地址相同，只是前缀添加了`0`。\n\n给定需要生成地址的对象，ByteBall生成地址时采用的是`ripemd160`哈希，并给地址加上校验，使用的是`byteballcore/object_hash.js`中的函数`getChash160()`函数。\n\n具体来说，设备地址生成方法：\n\n```javascript\nvar ecdsa = require('secp256k1');  // 椭圆曲线非对称加密\n\n// 获取设备公钥\nvar pubkey = ecdsa.publicKeyCreate(devicePrivKey.privateKey.bn.toBuffer({size:32}), true).toString('base64');\n\n// 生成设备地址\nvar objectHash = require('byteballcore/object_hash.js');\nvar device_address = '0' + objectHash.getChash160(pubkey);\n```\n\n普通地址生成方法：\n\n```javascript\n// change=0 address_index=0，生成公钥\nvar pubkey = xPubKey.derive('m/0/0').publicKey.toBuffer().toString('base64');\n\n// 设定地址定义脚本，为单签名\nvar arrDefinition = [\"sig\", {\"pubkey\": pubkey}];\n\n// 生成地址\nvar address = objectHash.getChash160(arrDefinition);\n```\n\n共享地址的生成方法与普通地址基本一致，唯一的差别在于地址定义脚本要更加复杂一些，具体细节可参考前面给出的那篇文章。\n\n","slug":"byteball-wallet","published":1,"updated":"2018-06-17T15:52:51.256Z","_id":"cjij0b5j2000014ep3mrzrl7w","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"钱包结构\"><a href=\"#钱包结构\" class=\"headerlink\" title=\"钱包结构\"></a>钱包结构</h2><p>顾名思义，钱包是用来保存钱的。但在数字货币的世界中，钱包里面并没有“钱”。钱包账户里有多少“钱”都是记录在区块链上的，钱包里只是存储了账户对应的<strong>私钥</strong>，账户是从私钥相应的公钥衍生出来的。只要有了私钥，你就可以在数字货币世界里证明你的身份，发送区块链上属于你的资产。因此，<strong>钱包实际上是管理和存储私钥的工具</strong>。</p>\n<p>ByteBall钱包结构与Bitcoin类似，Bitcoin对管理和存储私钥以及通过私钥生成地址制定了一系列标准（BIP, Bitcoin Improvement Proposals），主要包括：</p>\n<ul>\n<li><p><a href=\"https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\" target=\"_blank\" rel=\"noopener\">BIP32</a>：定义了HD钱包（Hierarchical Deterministic Wallet），允许从单一种子产生一树状结构储存多组私钥和公钥，可以方便的备份、转移以及分层权限控制等。HD钱包包含以树状结构衍生的密钥，使得父密钥可以衍生一系列子密钥，每个子密钥又可以衍生出一系列孙密钥，以此类推，无限衍生。下图展示了HD钱包的树状结构：</p>\n<p><img src=\"http://oc7urqs4c.bkt.clouddn.com/2018-06-17-082216.png\" alt=\"bip33-hd-wallet\"></p>\n</li>\n<li><p><a href=\"https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki\" target=\"_blank\" rel=\"noopener\">BIP39</a>：将种子用方便记忆和书写的单词表示，一般由12个单词组成，称为助记词或助记码。由一系列单词生成种子是个标准化的方法，这样易于在钱包中转移、导出和导入。比如<code>shrimp make call path pink draw gym song select brother social base</code>，其相应的私钥为<code>xprv9s21ZrQH143K4HQ8sBPNNkXHNuVYfivR96gtpJzMWCJVF5hdYjzT5nVQu6GfHAQLPstQtFp9GTWADUcKgzaV5EyL5JxT2rxkyg51ReGTVg8</code>。</p>\n</li>\n<li><p><a href=\"https://github.com/bitcoin/bips/blob/master/bip-0043.mediawiki\" target=\"_blank\" rel=\"noopener\">BIP43</a>：为HD钱包路径引入<code>purpose</code>字段，路径记作<code>m / purpose&#39; / *</code>，比如<code>m / 0&#39; / *</code>表示BIP32的默认账户。</p>\n</li>\n<li><p><a href=\"https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki\" target=\"_blank\" rel=\"noopener\">BIP44</a>：定义HD钱包路径字段，赋予树状结构中的各层特殊的意义，从而支持多币种、多账户，路径定义为：</p>\n<p><code>m / purpose&#39; / coin_type&#39; / account&#39; / change / address_index</code></p>\n<p>其中，<code>purpose&#39;</code>固定是<code>44&#39;</code>，代表使用BIP44；<code>coin_type&#39;</code>用来表示不同币种，例如Bitcoin就是<code>0&#39;</code>，Bitcoin Testnet是<code>1&#39;</code>，Ethereum是<code>60&#39;</code>；<code>account&#39;</code>表示账户编码；<code>change</code>用来表示该地址是否为找零地址；<code>address_index</code>为地址编号。</p>\n</li>\n<li><p><a href=\"https://github.com/bitcoin/bips/blob/master/bip-0045.mediawiki\" target=\"_blank\" rel=\"noopener\">BIP45</a>：定义多签名HD钱包路径字段，从而支持多签名地址，路径定义为：</p>\n<p><code>m / purpose&#39; / cosigner_index / change / address_index</code></p>\n<p>其中，<code>purpose</code>固定是<code>45&#39;</code>，代表使用BIP45；<code>cosigner_index</code>表示多签名用户编号；其余字段与BIP44相同。</p>\n</li>\n</ul>\n<p>ByteBall钱包采用的是符合BIP44标准的HD钱包，其采用的路径结构为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m / 44&apos; / 0&apos; / account&apos; / change / address_index</span><br></pre></td></tr></table></figure>\n<p>此外，除了使用<code>account</code>来标识账户外，还使用了该账户公钥的哈希值对账户进行唯一表示，表示方法为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> wallet = crypto.createHash(<span class=\"string\">\"sha256\"</span>).update(xPubKey, <span class=\"string\">\"utf8\"</span>).digest(<span class=\"string\">\"base64\"</span>);</span><br></pre></td></tr></table></figure>\n<p>ByteBall中还有一类特殊的地址，即设备地址，其采用的路径结构为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m / 1&apos; / *</span><br></pre></td></tr></table></figure>\n<p>ByteBall钱包使用了<code>bitcore-lib</code>和<code>bitcore-mnemonic</code>两个库进行钱包管理，简单的使用方法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Mnemonic = <span class=\"built_in\">require</span>(<span class=\"string\">'bitcore-mnemonic'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> Bitcore = <span class=\"built_in\">require</span>(<span class=\"string\">'bitcore-lib'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成助记词</span></span><br><span class=\"line\"><span class=\"comment\">// 'fee decorate step culture autumn game social very lemon drum embrace much'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mnemonic = <span class=\"keyword\">new</span> Mnemonic();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成HD钱包私钥</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;HDPrivateKey: xprv9s21ZrQH143K2P4n8N1MYXW4NPfPuH7K3z4uYe6iRxHHXMEUJQRriizTdMuN6rh5XLH4okZm69c7THSN7M5Lk8WSFXDd6b9DBcb6nAdxw7n&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> xPrivKey = mnemonic.toHDPrivateKey();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成HD钱包公钥，account=0</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;HDPublicKey: xpub6BqpEDyiVUcuzwzhn3jznUooytK5k9weeZqoM9vRpKbaHJGdyXZ3uk6HzpwYfCbxUuTsn41RgTpsTqA44uC4Ce2vRAZAcr9n5EyRtZxczbs&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> xPubKey = Bitcore.HDPublicKey(xPrivKey.derive(<span class=\"string\">\"m/44'/0'/0'\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成设备私钥，用于产生设备地址</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;HDPrivateKey: xprv9u8BXQraRhyRypxQj4ffhEohzDyjLbqezoCuFCHpLHazDbi9ymLb1zp6aKmDpTpyxXw8Uc6HbCRSZMEtW71Eie1QPi2T3RweoKWrdymxGEf&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> devicePrivKey = xPrivKey.derive(<span class=\"string\">\"m/1'\"</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"地址生成\"><a href=\"#地址生成\" class=\"headerlink\" title=\"地址生成\"></a>地址生成</h2><p>ByteBall中包括三类地址：</p>\n<ul>\n<li>普通地址</li>\n<li>共享地址</li>\n<li>设备地址</li>\n</ul>\n<p>其中，普通地址和共享地址都是通过地址定义脚本生成的，二者的区别类似于Bitcoin中的P2PKH地址和P2SH地址，具体细节可参考<a href=\"https://bbfans.org/2018/05/21/byteball%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%89%EF%BC%89%E5%9C%B0%E5%9D%80%E3%80%81%E8%84%9A%E6%9C%AC%E5%8F%8A%E5%90%88%E7%BA%A6/\" target=\"_blank\" rel=\"noopener\">《ByteBall原理解析（三）地址、脚本及合约》</a>；设备地址是采用设备公钥生成的，地址格式和校验规则与普通地址相同，只是前缀添加了<code>0</code>。</p>\n<p>给定需要生成地址的对象，ByteBall生成地址时采用的是<code>ripemd160</code>哈希，并给地址加上校验，使用的是<code>byteballcore/object_hash.js</code>中的函数<code>getChash160()</code>函数。</p>\n<p>具体来说，设备地址生成方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ecdsa = <span class=\"built_in\">require</span>(<span class=\"string\">'secp256k1'</span>);  <span class=\"comment\">// 椭圆曲线非对称加密</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取设备公钥</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pubkey = ecdsa.publicKeyCreate(devicePrivKey.privateKey.bn.toBuffer(&#123;<span class=\"attr\">size</span>:<span class=\"number\">32</span>&#125;), <span class=\"literal\">true</span>).toString(<span class=\"string\">'base64'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成设备地址</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> objectHash = <span class=\"built_in\">require</span>(<span class=\"string\">'byteballcore/object_hash.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> device_address = <span class=\"string\">'0'</span> + objectHash.getChash160(pubkey);</span><br></pre></td></tr></table></figure>\n<p>普通地址生成方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// change=0 address_index=0，生成公钥</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pubkey = xPubKey.derive(<span class=\"string\">'m/0/0'</span>).publicKey.toBuffer().toString(<span class=\"string\">'base64'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定地址定义脚本，为单签名</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arrDefinition = [<span class=\"string\">\"sig\"</span>, &#123;<span class=\"string\">\"pubkey\"</span>: pubkey&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成地址</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> address = objectHash.getChash160(arrDefinition);</span><br></pre></td></tr></table></figure>\n<p>共享地址的生成方法与普通地址基本一致，唯一的差别在于地址定义脚本要更加复杂一些，具体细节可参考前面给出的那篇文章。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"钱包结构\"><a href=\"#钱包结构\" class=\"headerlink\" title=\"钱包结构\"></a>钱包结构</h2><p>顾名思义，钱包是用来保存钱的。但在数字货币的世界中，钱包里面并没有“钱”。钱包账户里有多少“钱”都是记录在区块链上的，钱包里只是存储了账户对应的<strong>私钥</strong>，账户是从私钥相应的公钥衍生出来的。只要有了私钥，你就可以在数字货币世界里证明你的身份，发送区块链上属于你的资产。因此，<strong>钱包实际上是管理和存储私钥的工具</strong>。</p>\n<p>ByteBall钱包结构与Bitcoin类似，Bitcoin对管理和存储私钥以及通过私钥生成地址制定了一系列标准（BIP, Bitcoin Improvement Proposals），主要包括：</p>\n<ul>\n<li><p><a href=\"https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\" target=\"_blank\" rel=\"noopener\">BIP32</a>：定义了HD钱包（Hierarchical Deterministic Wallet），允许从单一种子产生一树状结构储存多组私钥和公钥，可以方便的备份、转移以及分层权限控制等。HD钱包包含以树状结构衍生的密钥，使得父密钥可以衍生一系列子密钥，每个子密钥又可以衍生出一系列孙密钥，以此类推，无限衍生。下图展示了HD钱包的树状结构：</p>\n<p><img src=\"http://oc7urqs4c.bkt.clouddn.com/2018-06-17-082216.png\" alt=\"bip33-hd-wallet\"></p>\n</li>\n<li><p><a href=\"https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki\" target=\"_blank\" rel=\"noopener\">BIP39</a>：将种子用方便记忆和书写的单词表示，一般由12个单词组成，称为助记词或助记码。由一系列单词生成种子是个标准化的方法，这样易于在钱包中转移、导出和导入。比如<code>shrimp make call path pink draw gym song select brother social base</code>，其相应的私钥为<code>xprv9s21ZrQH143K4HQ8sBPNNkXHNuVYfivR96gtpJzMWCJVF5hdYjzT5nVQu6GfHAQLPstQtFp9GTWADUcKgzaV5EyL5JxT2rxkyg51ReGTVg8</code>。</p>\n</li>\n<li><p><a href=\"https://github.com/bitcoin/bips/blob/master/bip-0043.mediawiki\" target=\"_blank\" rel=\"noopener\">BIP43</a>：为HD钱包路径引入<code>purpose</code>字段，路径记作<code>m / purpose&#39; / *</code>，比如<code>m / 0&#39; / *</code>表示BIP32的默认账户。</p>\n</li>\n<li><p><a href=\"https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki\" target=\"_blank\" rel=\"noopener\">BIP44</a>：定义HD钱包路径字段，赋予树状结构中的各层特殊的意义，从而支持多币种、多账户，路径定义为：</p>\n<p><code>m / purpose&#39; / coin_type&#39; / account&#39; / change / address_index</code></p>\n<p>其中，<code>purpose&#39;</code>固定是<code>44&#39;</code>，代表使用BIP44；<code>coin_type&#39;</code>用来表示不同币种，例如Bitcoin就是<code>0&#39;</code>，Bitcoin Testnet是<code>1&#39;</code>，Ethereum是<code>60&#39;</code>；<code>account&#39;</code>表示账户编码；<code>change</code>用来表示该地址是否为找零地址；<code>address_index</code>为地址编号。</p>\n</li>\n<li><p><a href=\"https://github.com/bitcoin/bips/blob/master/bip-0045.mediawiki\" target=\"_blank\" rel=\"noopener\">BIP45</a>：定义多签名HD钱包路径字段，从而支持多签名地址，路径定义为：</p>\n<p><code>m / purpose&#39; / cosigner_index / change / address_index</code></p>\n<p>其中，<code>purpose</code>固定是<code>45&#39;</code>，代表使用BIP45；<code>cosigner_index</code>表示多签名用户编号；其余字段与BIP44相同。</p>\n</li>\n</ul>\n<p>ByteBall钱包采用的是符合BIP44标准的HD钱包，其采用的路径结构为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m / 44&apos; / 0&apos; / account&apos; / change / address_index</span><br></pre></td></tr></table></figure>\n<p>此外，除了使用<code>account</code>来标识账户外，还使用了该账户公钥的哈希值对账户进行唯一表示，表示方法为：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> wallet = crypto.createHash(<span class=\"string\">\"sha256\"</span>).update(xPubKey, <span class=\"string\">\"utf8\"</span>).digest(<span class=\"string\">\"base64\"</span>);</span><br></pre></td></tr></table></figure>\n<p>ByteBall中还有一类特殊的地址，即设备地址，其采用的路径结构为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m / 1&apos; / *</span><br></pre></td></tr></table></figure>\n<p>ByteBall钱包使用了<code>bitcore-lib</code>和<code>bitcore-mnemonic</code>两个库进行钱包管理，简单的使用方法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Mnemonic = <span class=\"built_in\">require</span>(<span class=\"string\">'bitcore-mnemonic'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> Bitcore = <span class=\"built_in\">require</span>(<span class=\"string\">'bitcore-lib'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成助记词</span></span><br><span class=\"line\"><span class=\"comment\">// 'fee decorate step culture autumn game social very lemon drum embrace much'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mnemonic = <span class=\"keyword\">new</span> Mnemonic();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成HD钱包私钥</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;HDPrivateKey: xprv9s21ZrQH143K2P4n8N1MYXW4NPfPuH7K3z4uYe6iRxHHXMEUJQRriizTdMuN6rh5XLH4okZm69c7THSN7M5Lk8WSFXDd6b9DBcb6nAdxw7n&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> xPrivKey = mnemonic.toHDPrivateKey();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成HD钱包公钥，account=0</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;HDPublicKey: xpub6BqpEDyiVUcuzwzhn3jznUooytK5k9weeZqoM9vRpKbaHJGdyXZ3uk6HzpwYfCbxUuTsn41RgTpsTqA44uC4Ce2vRAZAcr9n5EyRtZxczbs&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> xPubKey = Bitcore.HDPublicKey(xPrivKey.derive(<span class=\"string\">\"m/44'/0'/0'\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成设备私钥，用于产生设备地址</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;HDPrivateKey: xprv9u8BXQraRhyRypxQj4ffhEohzDyjLbqezoCuFCHpLHazDbi9ymLb1zp6aKmDpTpyxXw8Uc6HbCRSZMEtW71Eie1QPi2T3RweoKWrdymxGEf&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> devicePrivKey = xPrivKey.derive(<span class=\"string\">\"m/1'\"</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"地址生成\"><a href=\"#地址生成\" class=\"headerlink\" title=\"地址生成\"></a>地址生成</h2><p>ByteBall中包括三类地址：</p>\n<ul>\n<li>普通地址</li>\n<li>共享地址</li>\n<li>设备地址</li>\n</ul>\n<p>其中，普通地址和共享地址都是通过地址定义脚本生成的，二者的区别类似于Bitcoin中的P2PKH地址和P2SH地址，具体细节可参考<a href=\"https://bbfans.org/2018/05/21/byteball%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%89%EF%BC%89%E5%9C%B0%E5%9D%80%E3%80%81%E8%84%9A%E6%9C%AC%E5%8F%8A%E5%90%88%E7%BA%A6/\" target=\"_blank\" rel=\"noopener\">《ByteBall原理解析（三）地址、脚本及合约》</a>；设备地址是采用设备公钥生成的，地址格式和校验规则与普通地址相同，只是前缀添加了<code>0</code>。</p>\n<p>给定需要生成地址的对象，ByteBall生成地址时采用的是<code>ripemd160</code>哈希，并给地址加上校验，使用的是<code>byteballcore/object_hash.js</code>中的函数<code>getChash160()</code>函数。</p>\n<p>具体来说，设备地址生成方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ecdsa = <span class=\"built_in\">require</span>(<span class=\"string\">'secp256k1'</span>);  <span class=\"comment\">// 椭圆曲线非对称加密</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取设备公钥</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pubkey = ecdsa.publicKeyCreate(devicePrivKey.privateKey.bn.toBuffer(&#123;<span class=\"attr\">size</span>:<span class=\"number\">32</span>&#125;), <span class=\"literal\">true</span>).toString(<span class=\"string\">'base64'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成设备地址</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> objectHash = <span class=\"built_in\">require</span>(<span class=\"string\">'byteballcore/object_hash.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> device_address = <span class=\"string\">'0'</span> + objectHash.getChash160(pubkey);</span><br></pre></td></tr></table></figure>\n<p>普通地址生成方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// change=0 address_index=0，生成公钥</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pubkey = xPubKey.derive(<span class=\"string\">'m/0/0'</span>).publicKey.toBuffer().toString(<span class=\"string\">'base64'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定地址定义脚本，为单签名</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arrDefinition = [<span class=\"string\">\"sig\"</span>, &#123;<span class=\"string\">\"pubkey\"</span>: pubkey&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成地址</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> address = objectHash.getChash160(arrDefinition);</span><br></pre></td></tr></table></figure>\n<p>共享地址的生成方法与普通地址基本一致，唯一的差别在于地址定义脚本要更加复杂一些，具体细节可参考前面给出的那篇文章。</p>\n"},{"title":"再论ByteBall钱包","date":"2018-06-26T04:42:55.000Z","_content":"\n\nByteBall的钱包类型分为两种：\n\n1. 单设备钱包：该类型钱包仅由单一设备控制，它与特定设备地址是绑定的，钱包中的地址为单签名地址；\n2. 多设备钱包：该类型钱包由多个设备共同控制，它与若干个设备地址绑定，钱包中的地址为多签名地址。\n\n在之前的文章[《ByteBall钱包详解》](https://bbfans.org/2018/06/17/byteball%E9%92%B1%E5%8C%85%E8%AF%A6%E8%A7%A3/)中，我们提到，ByteBall的地址分为三种：\n\n1. 普通地址：地址定义中不包含其它地址，采用BASE32编码，长度为32，比如`A2WWHN7755YZVMXCBLMFWRSLKSZJN3FU`；\n2. 共享地址：地址定义中包含了其它地址，地址格式与普通地址相同，通常用作智能合约地址；\n3. 设备地址：生成方法及地址格式类似普通地址，但在设备地址在头部添加了一个0，长度为33，比如`05FV4WNIEU4OHIAIF7XEIRC2QRRLFPAC3`。\n\n因此，ByteBall的钱包与地址可以总结为下面这张图：\n\n![byteball-wallet](http://oc7urqs4c.bkt.clouddn.com/2018-06-25-144238.png)\n\n其中：设备具有唯一的设备地址；普通地址包括单签名地址和多签名地址，单设备钱包生成单签名地址，多设备钱包生成多签名地址；多个普通地址可以共同构成共享地址。\n\n## 单签名地址\n\n单设备钱包由单一设备生成，假设设备地址为`DEVICE_ADDRESS`，单设备钱包中单签名地址定义的模板为：\n\n```json\n[\"sig\", {pubkey: '$pubkey@DEVICE_ADDRESS'}]\n```\n\n具体在生成地址时，`$pubkey@DEVICE_ADDRESS`会替换成相应的公钥。\n\n## 多签名地址\n\n多设备钱包由多个设备共同控制。假设3个设备的地址分别为`DEVICE_A_ADDRESS`、`DEVICE_B_ADDRESS`以及`DEVICE_C_ADDRESS`。我们需要生成一个`2-3`的多设备钱包，即3个设备中至少需要2个设备签名才可以生效，则相应的多设备钱包中多签名地址定义的模板为：\n\n```json\n[\"r of set\", {\n    required: 2,\n    set: [\n        [\"sig\", {pubkey: '$pubkey@DEVICE_A_ADDRESS'}],\n        [\"sig\", {pubkey: '$pubkey@DEVICE_B_ADDRESS'}],\n        [\"sig\", {pubkey: '$pubkey@DEVICE_C_ADDRESS'}],\n    ]\n}]\n```\n\n在创建多设备钱包时，设备之间会通过加密消息相互交换`xPubKey`。这样，不同的设备可以依据相同的地址路径生成相同的地址。\n\n## 共享地址\n\n共享地址本质上可以认为是智能合约的地址，例如`flight delay insurance`的地址定义（或者智能合约）示例为：\n\n```json\n[\"or\",[\n    [\"and\",[\n       [\"seen\",{\"what\":\"output\",\"address\":\"this address\",\"asset\":\"base\",\"amount\":22664}],\n       [\"or\",[\n           [\"and\",[\n               [\"address\",\"TTD2AVY4W2VH62NJXIP7R67XBHWZRQRJ\"],\n               [\"in data feed\",[[\"GFK3RDAPQLLNCMQEVGGD2KCPZTLSG3HN\"],\"MU5152-2018-06-18\",\">\",\"60\",2810590]]]],\n           [\"and\",[\n               [\"address\",\"4JZOKE43GALLZA4P63NXT7NYAJLSMNYZ\"],\n               [\"in data feed\",[[\"I2ADHGP4HL6J37NQAD73J7E5SKFIXJOT\"],\"timestamp\",\">\",1529442000000]]]],\n           [\"and\",[\n               [\"address\",\"4JZOKE43GALLZA4P63NXT7NYAJLSMNYZ\"],\n               [\"in data feed\",[[\"GFK3RDAPQLLNCMQEVGGD2KCPZTLSG3HN\"],\"MU5152-2018-06-18\",\"<=\",\"60\",2810590]]]]]]]],\n    [\"and\",[\n        [\"address\",\"4JZOKE43GALLZA4P63NXT7NYAJLSMNYZ\"],\n        [\"not\",[\"seen\",{\"what\":\"output\",\"address\":\"this address\",\"asset\":\"base\",\"amount\":22664}]],\n        [\"in data feed\",[[\"I2ADHGP4HL6J37NQAD73J7E5SKFIXJOT\"],\"timestamp\",\">\",1529034037936]]]]]\n```\n\n上述地址定义中共涉及到两个地址`TTD2AVY4W2VH62NJXIP7R67XBHWZRQRJ`及`4JZOKE43GALLZA4P63NXT7NYAJLSMNYZ`，它是这两个地址的共享地址。\n\n通过上述地址定义，可以得到该共享地址为`WDCIIWRDHSNNE2DQZ7YVU53USELZBLGV`。其中，地址的签名路径包括：\n\n```json\n{\n    r.0.1.0.0: \"TTD2AVY4W2VH62NJXIP7R67XBHWZRQRJ\",\n    r.0.1.1.0: \"4JZOKE43GALLZA4P63NXT7NYAJLSMNYZ\"\n    r.0.1.2.0: \"4JZOKE43GALLZA4P63NXT7NYAJLSMNYZ\"\n    r.1.0: \"4JZOKE43GALLZA4P63NXT7NYAJLSMNYZ\"\n}\n```\n\n只有满足合约中相应的条件，且具有相应路径的签名，才可以对共享地址中的资产进行操作。\n\n","source":"_posts/2018-06-26-byteball-wallet2.md","raw":"---\ntitle: 再论ByteBall钱包\ndate: 2018-06-26 12:42:55\ncategories: 谈点区块链\ntags:\n  - dag\n  - blockchain\n  - byteball\n  - bitcoin\n---\n\n\nByteBall的钱包类型分为两种：\n\n1. 单设备钱包：该类型钱包仅由单一设备控制，它与特定设备地址是绑定的，钱包中的地址为单签名地址；\n2. 多设备钱包：该类型钱包由多个设备共同控制，它与若干个设备地址绑定，钱包中的地址为多签名地址。\n\n在之前的文章[《ByteBall钱包详解》](https://bbfans.org/2018/06/17/byteball%E9%92%B1%E5%8C%85%E8%AF%A6%E8%A7%A3/)中，我们提到，ByteBall的地址分为三种：\n\n1. 普通地址：地址定义中不包含其它地址，采用BASE32编码，长度为32，比如`A2WWHN7755YZVMXCBLMFWRSLKSZJN3FU`；\n2. 共享地址：地址定义中包含了其它地址，地址格式与普通地址相同，通常用作智能合约地址；\n3. 设备地址：生成方法及地址格式类似普通地址，但在设备地址在头部添加了一个0，长度为33，比如`05FV4WNIEU4OHIAIF7XEIRC2QRRLFPAC3`。\n\n因此，ByteBall的钱包与地址可以总结为下面这张图：\n\n![byteball-wallet](http://oc7urqs4c.bkt.clouddn.com/2018-06-25-144238.png)\n\n其中：设备具有唯一的设备地址；普通地址包括单签名地址和多签名地址，单设备钱包生成单签名地址，多设备钱包生成多签名地址；多个普通地址可以共同构成共享地址。\n\n## 单签名地址\n\n单设备钱包由单一设备生成，假设设备地址为`DEVICE_ADDRESS`，单设备钱包中单签名地址定义的模板为：\n\n```json\n[\"sig\", {pubkey: '$pubkey@DEVICE_ADDRESS'}]\n```\n\n具体在生成地址时，`$pubkey@DEVICE_ADDRESS`会替换成相应的公钥。\n\n## 多签名地址\n\n多设备钱包由多个设备共同控制。假设3个设备的地址分别为`DEVICE_A_ADDRESS`、`DEVICE_B_ADDRESS`以及`DEVICE_C_ADDRESS`。我们需要生成一个`2-3`的多设备钱包，即3个设备中至少需要2个设备签名才可以生效，则相应的多设备钱包中多签名地址定义的模板为：\n\n```json\n[\"r of set\", {\n    required: 2,\n    set: [\n        [\"sig\", {pubkey: '$pubkey@DEVICE_A_ADDRESS'}],\n        [\"sig\", {pubkey: '$pubkey@DEVICE_B_ADDRESS'}],\n        [\"sig\", {pubkey: '$pubkey@DEVICE_C_ADDRESS'}],\n    ]\n}]\n```\n\n在创建多设备钱包时，设备之间会通过加密消息相互交换`xPubKey`。这样，不同的设备可以依据相同的地址路径生成相同的地址。\n\n## 共享地址\n\n共享地址本质上可以认为是智能合约的地址，例如`flight delay insurance`的地址定义（或者智能合约）示例为：\n\n```json\n[\"or\",[\n    [\"and\",[\n       [\"seen\",{\"what\":\"output\",\"address\":\"this address\",\"asset\":\"base\",\"amount\":22664}],\n       [\"or\",[\n           [\"and\",[\n               [\"address\",\"TTD2AVY4W2VH62NJXIP7R67XBHWZRQRJ\"],\n               [\"in data feed\",[[\"GFK3RDAPQLLNCMQEVGGD2KCPZTLSG3HN\"],\"MU5152-2018-06-18\",\">\",\"60\",2810590]]]],\n           [\"and\",[\n               [\"address\",\"4JZOKE43GALLZA4P63NXT7NYAJLSMNYZ\"],\n               [\"in data feed\",[[\"I2ADHGP4HL6J37NQAD73J7E5SKFIXJOT\"],\"timestamp\",\">\",1529442000000]]]],\n           [\"and\",[\n               [\"address\",\"4JZOKE43GALLZA4P63NXT7NYAJLSMNYZ\"],\n               [\"in data feed\",[[\"GFK3RDAPQLLNCMQEVGGD2KCPZTLSG3HN\"],\"MU5152-2018-06-18\",\"<=\",\"60\",2810590]]]]]]]],\n    [\"and\",[\n        [\"address\",\"4JZOKE43GALLZA4P63NXT7NYAJLSMNYZ\"],\n        [\"not\",[\"seen\",{\"what\":\"output\",\"address\":\"this address\",\"asset\":\"base\",\"amount\":22664}]],\n        [\"in data feed\",[[\"I2ADHGP4HL6J37NQAD73J7E5SKFIXJOT\"],\"timestamp\",\">\",1529034037936]]]]]\n```\n\n上述地址定义中共涉及到两个地址`TTD2AVY4W2VH62NJXIP7R67XBHWZRQRJ`及`4JZOKE43GALLZA4P63NXT7NYAJLSMNYZ`，它是这两个地址的共享地址。\n\n通过上述地址定义，可以得到该共享地址为`WDCIIWRDHSNNE2DQZ7YVU53USELZBLGV`。其中，地址的签名路径包括：\n\n```json\n{\n    r.0.1.0.0: \"TTD2AVY4W2VH62NJXIP7R67XBHWZRQRJ\",\n    r.0.1.1.0: \"4JZOKE43GALLZA4P63NXT7NYAJLSMNYZ\"\n    r.0.1.2.0: \"4JZOKE43GALLZA4P63NXT7NYAJLSMNYZ\"\n    r.1.0: \"4JZOKE43GALLZA4P63NXT7NYAJLSMNYZ\"\n}\n```\n\n只有满足合约中相应的条件，且具有相应路径的签名，才可以对共享地址中的资产进行操作。\n\n","slug":"byteball-wallet2","published":1,"updated":"2018-06-26T04:43:41.022Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjiv7hn4x00009hepu2iazgcv","content":"<p>ByteBall的钱包类型分为两种：</p>\n<ol>\n<li>单设备钱包：该类型钱包仅由单一设备控制，它与特定设备地址是绑定的，钱包中的地址为单签名地址；</li>\n<li>多设备钱包：该类型钱包由多个设备共同控制，它与若干个设备地址绑定，钱包中的地址为多签名地址。</li>\n</ol>\n<p>在之前的文章<a href=\"https://bbfans.org/2018/06/17/byteball%E9%92%B1%E5%8C%85%E8%AF%A6%E8%A7%A3/\" target=\"_blank\" rel=\"noopener\">《ByteBall钱包详解》</a>中，我们提到，ByteBall的地址分为三种：</p>\n<ol>\n<li>普通地址：地址定义中不包含其它地址，采用BASE32编码，长度为32，比如<code>A2WWHN7755YZVMXCBLMFWRSLKSZJN3FU</code>；</li>\n<li>共享地址：地址定义中包含了其它地址，地址格式与普通地址相同，通常用作智能合约地址；</li>\n<li>设备地址：生成方法及地址格式类似普通地址，但在设备地址在头部添加了一个0，长度为33，比如<code>05FV4WNIEU4OHIAIF7XEIRC2QRRLFPAC3</code>。</li>\n</ol>\n<p>因此，ByteBall的钱包与地址可以总结为下面这张图：</p>\n<p><img src=\"http://oc7urqs4c.bkt.clouddn.com/2018-06-25-144238.png\" alt=\"byteball-wallet\"></p>\n<p>其中：设备具有唯一的设备地址；普通地址包括单签名地址和多签名地址，单设备钱包生成单签名地址，多设备钱包生成多签名地址；多个普通地址可以共同构成共享地址。</p>\n<h2 id=\"单签名地址\"><a href=\"#单签名地址\" class=\"headerlink\" title=\"单签名地址\"></a>单签名地址</h2><p>单设备钱包由单一设备生成，假设设备地址为<code>DEVICE_ADDRESS</code>，单设备钱包中单签名地址定义的模板为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[\"sig\", &#123;pubkey: '$pubkey@DEVICE_ADDRESS'&#125;]</span><br></pre></td></tr></table></figure>\n<p>具体在生成地址时，<code>$pubkey@DEVICE_ADDRESS</code>会替换成相应的公钥。</p>\n<h2 id=\"多签名地址\"><a href=\"#多签名地址\" class=\"headerlink\" title=\"多签名地址\"></a>多签名地址</h2><p>多设备钱包由多个设备共同控制。假设3个设备的地址分别为<code>DEVICE_A_ADDRESS</code>、<code>DEVICE_B_ADDRESS</code>以及<code>DEVICE_C_ADDRESS</code>。我们需要生成一个<code>2-3</code>的多设备钱包，即3个设备中至少需要2个设备签名才可以生效，则相应的多设备钱包中多签名地址定义的模板为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"r of set\"</span>, &#123;</span><br><span class=\"line\">    required: 2,</span><br><span class=\"line\">    set: [</span><br><span class=\"line\">        [\"sig\", &#123;pubkey: '$pubkey@DEVICE_A_ADDRESS'&#125;],</span><br><span class=\"line\">        [\"sig\", &#123;pubkey: '$pubkey@DEVICE_B_ADDRESS'&#125;],</span><br><span class=\"line\">        [\"sig\", &#123;pubkey: '$pubkey@DEVICE_C_ADDRESS'&#125;],</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n<p>在创建多设备钱包时，设备之间会通过加密消息相互交换<code>xPubKey</code>。这样，不同的设备可以依据相同的地址路径生成相同的地址。</p>\n<h2 id=\"共享地址\"><a href=\"#共享地址\" class=\"headerlink\" title=\"共享地址\"></a>共享地址</h2><p>共享地址本质上可以认为是智能合约的地址，例如<code>flight delay insurance</code>的地址定义（或者智能合约）示例为：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"or\"</span>,[</span><br><span class=\"line\">    [<span class=\"string\">\"and\"</span>,[</span><br><span class=\"line\">       [<span class=\"string\">\"seen\"</span>,&#123;<span class=\"attr\">\"what\"</span>:<span class=\"string\">\"output\"</span>,<span class=\"attr\">\"address\"</span>:<span class=\"string\">\"this address\"</span>,<span class=\"attr\">\"asset\"</span>:<span class=\"string\">\"base\"</span>,<span class=\"attr\">\"amount\"</span>:<span class=\"number\">22664</span>&#125;],</span><br><span class=\"line\">       [<span class=\"string\">\"or\"</span>,[</span><br><span class=\"line\">           [<span class=\"string\">\"and\"</span>,[</span><br><span class=\"line\">               [<span class=\"string\">\"address\"</span>,<span class=\"string\">\"TTD2AVY4W2VH62NJXIP7R67XBHWZRQRJ\"</span>],</span><br><span class=\"line\">               [<span class=\"string\">\"in data feed\"</span>,[[<span class=\"string\">\"GFK3RDAPQLLNCMQEVGGD2KCPZTLSG3HN\"</span>],<span class=\"string\">\"MU5152-2018-06-18\"</span>,<span class=\"string\">\"&gt;\"</span>,<span class=\"string\">\"60\"</span>,<span class=\"number\">2810590</span>]]]],</span><br><span class=\"line\">           [<span class=\"string\">\"and\"</span>,[</span><br><span class=\"line\">               [<span class=\"string\">\"address\"</span>,<span class=\"string\">\"4JZOKE43GALLZA4P63NXT7NYAJLSMNYZ\"</span>],</span><br><span class=\"line\">               [<span class=\"string\">\"in data feed\"</span>,[[<span class=\"string\">\"I2ADHGP4HL6J37NQAD73J7E5SKFIXJOT\"</span>],<span class=\"string\">\"timestamp\"</span>,<span class=\"string\">\"&gt;\"</span>,<span class=\"number\">1529442000000</span>]]]],</span><br><span class=\"line\">           [<span class=\"string\">\"and\"</span>,[</span><br><span class=\"line\">               [<span class=\"string\">\"address\"</span>,<span class=\"string\">\"4JZOKE43GALLZA4P63NXT7NYAJLSMNYZ\"</span>],</span><br><span class=\"line\">               [<span class=\"string\">\"in data feed\"</span>,[[<span class=\"string\">\"GFK3RDAPQLLNCMQEVGGD2KCPZTLSG3HN\"</span>],<span class=\"string\">\"MU5152-2018-06-18\"</span>,<span class=\"string\">\"&lt;=\"</span>,<span class=\"string\">\"60\"</span>,<span class=\"number\">2810590</span>]]]]]]]],</span><br><span class=\"line\">    [<span class=\"string\">\"and\"</span>,[</span><br><span class=\"line\">        [<span class=\"string\">\"address\"</span>,<span class=\"string\">\"4JZOKE43GALLZA4P63NXT7NYAJLSMNYZ\"</span>],</span><br><span class=\"line\">        [<span class=\"string\">\"not\"</span>,[<span class=\"string\">\"seen\"</span>,&#123;<span class=\"attr\">\"what\"</span>:<span class=\"string\">\"output\"</span>,<span class=\"attr\">\"address\"</span>:<span class=\"string\">\"this address\"</span>,<span class=\"attr\">\"asset\"</span>:<span class=\"string\">\"base\"</span>,<span class=\"attr\">\"amount\"</span>:<span class=\"number\">22664</span>&#125;]],</span><br><span class=\"line\">        [<span class=\"string\">\"in data feed\"</span>,[[<span class=\"string\">\"I2ADHGP4HL6J37NQAD73J7E5SKFIXJOT\"</span>],<span class=\"string\">\"timestamp\"</span>,<span class=\"string\">\"&gt;\"</span>,<span class=\"number\">1529034037936</span>]]]]]</span><br></pre></td></tr></table></figure>\n<p>上述地址定义中共涉及到两个地址<code>TTD2AVY4W2VH62NJXIP7R67XBHWZRQRJ</code>及<code>4JZOKE43GALLZA4P63NXT7NYAJLSMNYZ</code>，它是这两个地址的共享地址。</p>\n<p>通过上述地址定义，可以得到该共享地址为<code>WDCIIWRDHSNNE2DQZ7YVU53USELZBLGV</code>。其中，地址的签名路径包括：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    r.0.1.0.0: \"TTD2AVY4W2VH62NJXIP7R67XBHWZRQRJ\",</span><br><span class=\"line\">    r.0.1.1.0: \"4JZOKE43GALLZA4P63NXT7NYAJLSMNYZ\"</span><br><span class=\"line\">    r.0.1.2.0: \"4JZOKE43GALLZA4P63NXT7NYAJLSMNYZ\"</span><br><span class=\"line\">    r.1.0: \"4JZOKE43GALLZA4P63NXT7NYAJLSMNYZ\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>只有满足合约中相应的条件，且具有相应路径的签名，才可以对共享地址中的资产进行操作。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>ByteBall的钱包类型分为两种：</p>\n<ol>\n<li>单设备钱包：该类型钱包仅由单一设备控制，它与特定设备地址是绑定的，钱包中的地址为单签名地址；</li>\n<li>多设备钱包：该类型钱包由多个设备共同控制，它与若干个设备地址绑定，钱包中的地址为多签名地址。</li>\n</ol>\n<p>在之前的文章<a href=\"https://bbfans.org/2018/06/17/byteball%E9%92%B1%E5%8C%85%E8%AF%A6%E8%A7%A3/\" target=\"_blank\" rel=\"noopener\">《ByteBall钱包详解》</a>中，我们提到，ByteBall的地址分为三种：</p>\n<ol>\n<li>普通地址：地址定义中不包含其它地址，采用BASE32编码，长度为32，比如<code>A2WWHN7755YZVMXCBLMFWRSLKSZJN3FU</code>；</li>\n<li>共享地址：地址定义中包含了其它地址，地址格式与普通地址相同，通常用作智能合约地址；</li>\n<li>设备地址：生成方法及地址格式类似普通地址，但在设备地址在头部添加了一个0，长度为33，比如<code>05FV4WNIEU4OHIAIF7XEIRC2QRRLFPAC3</code>。</li>\n</ol>\n<p>因此，ByteBall的钱包与地址可以总结为下面这张图：</p>\n<p><img src=\"http://oc7urqs4c.bkt.clouddn.com/2018-06-25-144238.png\" alt=\"byteball-wallet\"></p>\n<p>其中：设备具有唯一的设备地址；普通地址包括单签名地址和多签名地址，单设备钱包生成单签名地址，多设备钱包生成多签名地址；多个普通地址可以共同构成共享地址。</p>\n<h2 id=\"单签名地址\"><a href=\"#单签名地址\" class=\"headerlink\" title=\"单签名地址\"></a>单签名地址</h2><p>单设备钱包由单一设备生成，假设设备地址为<code>DEVICE_ADDRESS</code>，单设备钱包中单签名地址定义的模板为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[\"sig\", &#123;pubkey: '$pubkey@DEVICE_ADDRESS'&#125;]</span><br></pre></td></tr></table></figure>\n<p>具体在生成地址时，<code>$pubkey@DEVICE_ADDRESS</code>会替换成相应的公钥。</p>\n<h2 id=\"多签名地址\"><a href=\"#多签名地址\" class=\"headerlink\" title=\"多签名地址\"></a>多签名地址</h2><p>多设备钱包由多个设备共同控制。假设3个设备的地址分别为<code>DEVICE_A_ADDRESS</code>、<code>DEVICE_B_ADDRESS</code>以及<code>DEVICE_C_ADDRESS</code>。我们需要生成一个<code>2-3</code>的多设备钱包，即3个设备中至少需要2个设备签名才可以生效，则相应的多设备钱包中多签名地址定义的模板为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"r of set\"</span>, &#123;</span><br><span class=\"line\">    required: 2,</span><br><span class=\"line\">    set: [</span><br><span class=\"line\">        [\"sig\", &#123;pubkey: '$pubkey@DEVICE_A_ADDRESS'&#125;],</span><br><span class=\"line\">        [\"sig\", &#123;pubkey: '$pubkey@DEVICE_B_ADDRESS'&#125;],</span><br><span class=\"line\">        [\"sig\", &#123;pubkey: '$pubkey@DEVICE_C_ADDRESS'&#125;],</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n<p>在创建多设备钱包时，设备之间会通过加密消息相互交换<code>xPubKey</code>。这样，不同的设备可以依据相同的地址路径生成相同的地址。</p>\n<h2 id=\"共享地址\"><a href=\"#共享地址\" class=\"headerlink\" title=\"共享地址\"></a>共享地址</h2><p>共享地址本质上可以认为是智能合约的地址，例如<code>flight delay insurance</code>的地址定义（或者智能合约）示例为：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">\"or\"</span>,[</span><br><span class=\"line\">    [<span class=\"string\">\"and\"</span>,[</span><br><span class=\"line\">       [<span class=\"string\">\"seen\"</span>,&#123;<span class=\"attr\">\"what\"</span>:<span class=\"string\">\"output\"</span>,<span class=\"attr\">\"address\"</span>:<span class=\"string\">\"this address\"</span>,<span class=\"attr\">\"asset\"</span>:<span class=\"string\">\"base\"</span>,<span class=\"attr\">\"amount\"</span>:<span class=\"number\">22664</span>&#125;],</span><br><span class=\"line\">       [<span class=\"string\">\"or\"</span>,[</span><br><span class=\"line\">           [<span class=\"string\">\"and\"</span>,[</span><br><span class=\"line\">               [<span class=\"string\">\"address\"</span>,<span class=\"string\">\"TTD2AVY4W2VH62NJXIP7R67XBHWZRQRJ\"</span>],</span><br><span class=\"line\">               [<span class=\"string\">\"in data feed\"</span>,[[<span class=\"string\">\"GFK3RDAPQLLNCMQEVGGD2KCPZTLSG3HN\"</span>],<span class=\"string\">\"MU5152-2018-06-18\"</span>,<span class=\"string\">\"&gt;\"</span>,<span class=\"string\">\"60\"</span>,<span class=\"number\">2810590</span>]]]],</span><br><span class=\"line\">           [<span class=\"string\">\"and\"</span>,[</span><br><span class=\"line\">               [<span class=\"string\">\"address\"</span>,<span class=\"string\">\"4JZOKE43GALLZA4P63NXT7NYAJLSMNYZ\"</span>],</span><br><span class=\"line\">               [<span class=\"string\">\"in data feed\"</span>,[[<span class=\"string\">\"I2ADHGP4HL6J37NQAD73J7E5SKFIXJOT\"</span>],<span class=\"string\">\"timestamp\"</span>,<span class=\"string\">\"&gt;\"</span>,<span class=\"number\">1529442000000</span>]]]],</span><br><span class=\"line\">           [<span class=\"string\">\"and\"</span>,[</span><br><span class=\"line\">               [<span class=\"string\">\"address\"</span>,<span class=\"string\">\"4JZOKE43GALLZA4P63NXT7NYAJLSMNYZ\"</span>],</span><br><span class=\"line\">               [<span class=\"string\">\"in data feed\"</span>,[[<span class=\"string\">\"GFK3RDAPQLLNCMQEVGGD2KCPZTLSG3HN\"</span>],<span class=\"string\">\"MU5152-2018-06-18\"</span>,<span class=\"string\">\"&lt;=\"</span>,<span class=\"string\">\"60\"</span>,<span class=\"number\">2810590</span>]]]]]]]],</span><br><span class=\"line\">    [<span class=\"string\">\"and\"</span>,[</span><br><span class=\"line\">        [<span class=\"string\">\"address\"</span>,<span class=\"string\">\"4JZOKE43GALLZA4P63NXT7NYAJLSMNYZ\"</span>],</span><br><span class=\"line\">        [<span class=\"string\">\"not\"</span>,[<span class=\"string\">\"seen\"</span>,&#123;<span class=\"attr\">\"what\"</span>:<span class=\"string\">\"output\"</span>,<span class=\"attr\">\"address\"</span>:<span class=\"string\">\"this address\"</span>,<span class=\"attr\">\"asset\"</span>:<span class=\"string\">\"base\"</span>,<span class=\"attr\">\"amount\"</span>:<span class=\"number\">22664</span>&#125;]],</span><br><span class=\"line\">        [<span class=\"string\">\"in data feed\"</span>,[[<span class=\"string\">\"I2ADHGP4HL6J37NQAD73J7E5SKFIXJOT\"</span>],<span class=\"string\">\"timestamp\"</span>,<span class=\"string\">\"&gt;\"</span>,<span class=\"number\">1529034037936</span>]]]]]</span><br></pre></td></tr></table></figure>\n<p>上述地址定义中共涉及到两个地址<code>TTD2AVY4W2VH62NJXIP7R67XBHWZRQRJ</code>及<code>4JZOKE43GALLZA4P63NXT7NYAJLSMNYZ</code>，它是这两个地址的共享地址。</p>\n<p>通过上述地址定义，可以得到该共享地址为<code>WDCIIWRDHSNNE2DQZ7YVU53USELZBLGV</code>。其中，地址的签名路径包括：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    r.0.1.0.0: \"TTD2AVY4W2VH62NJXIP7R67XBHWZRQRJ\",</span><br><span class=\"line\">    r.0.1.1.0: \"4JZOKE43GALLZA4P63NXT7NYAJLSMNYZ\"</span><br><span class=\"line\">    r.0.1.2.0: \"4JZOKE43GALLZA4P63NXT7NYAJLSMNYZ\"</span><br><span class=\"line\">    r.1.0: \"4JZOKE43GALLZA4P63NXT7NYAJLSMNYZ\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>只有满足合约中相应的条件，且具有相应路径的签名，才可以对共享地址中的资产进行操作。</p>\n"},{"title":"ByteBall加密通信原理解析","date":"2018-08-08T09:30:55.000Z","_content":"\nByteBall网络中提供了端到端的加密通道，可以实现用户设备之间的加密通信，从而用于发送加密文本消息、发送隐私资产、进行多签名交易、签订智能合约、提供机器人服务等。下面我们将对ByteBall中加密通信实现的基本思路和主要过程进行解析。\n\n## 加密通信基本思路\n\n从功能的角度来看，加密通道采用存储-转发的方式来实现，这个任务由Hub来完成。消息发送方将加密消息发送到Hub，Hub再将消息转发给接收方。网络中可以存在多个Hub，用户设备可以选择自己信任的Hub进行连接。从这个角度看，Hub在设备加密通信中扮演的角色类似于邮件服务器。用户设备使用其设备地址在Hub上进行注册，生成类似邮件地址进行通信，比如`device_pubkey@hub.domainname.com`。`device_pubkey`是由设备地址的公钥，当用户设备在不同的Hub之间切换时，`device_pubkey`保持不变。有一点需要注意的是，Hub之间不会进行消息中继，用户设备只有连接到相同Hub上才可以进行通信。\n\n从安全的角度来看，用户设备与Hub之间的传输通道、用户设备与设备之间的传输内容均采用了加密。用户设备与Hub之间采用websocket保持连接，连接采用TLS加密。用户设备发送的消息内容采用ECDH+AES进行加密，并采用ECDSA进行签名验证。由于发送的消息是采用端到端加密的，Hub作为唯一的中间方也是无法查看或者修改其内容的。当消息发送成功后，Hub会删除相应的消息，且不保存任何副本。此外，为了进一步确保转发安全，用户设备还会定期更新其加密公钥（称为临时公钥）。\n\n## 加密通信主要过程\n\n### 设备登录Hub\n\n当用户设备连接到Hub时，Hub会向其发送一个登录验证消息`hub/challenge`，包括一个长度为30的BASE64编码的字符串。随后，用户设备会向Hub发送登录消息`hub/login`，包括Hub发送的登录字符串、永久公钥和临时公钥。\n\n当用户设备的永久私钥、临时私钥或者连接的Hub地址发生变化时，都需要重新发起登录过程。用户设备采用`hub/temp_pubkey`每分钟向Hub更新自己的临时公钥。当设备登录Hub后`hub/login`或者刷新消息时`hub/refresh`，可以从Hub获取消息状态`hub/message_box_status`。\n\n### 建立加密通道\n\n在发送方连接到接收方所在的Hub完成登录过程后，设备之间进行加密通信主要包括以下几个步骤：\n\n1. 从Hub获取接收方的临时公钥（使用`hub/get_temp_pubkey`）；\n2. 发送方生成一次性的消息加密钥匙对（包含私钥及公钥）；\n3. 通过接收方临时公钥和刚生成的一次性私钥得到ECDH共享密钥；\n4. 利用ECDH共享密钥对消息内容进行AES加密；\n5. 发送方将加密后的消息内容、初始向量、一次性公钥打包为数据包；\n6. 采用设备永久公钥对数据包进行签名；\n7. 采用`hub/deliver`向Hub发送数据包。\n\nHub收到发送方的数据包后，向接收方采用`hub/message`转发数据包，从而建立起发送方与接收方之间的加密通道，即发送方的消息可通过加密通道到达接收方。\n\n当接收方Hub无法连接时，发送方将待发送消息采用接收方的永久公钥加密并本地存储。当接收方Hub可以连接时，发送方将存储的加密消息再使用接收方的临时公钥进行二次加密，然后再发送给对方。这样可以保证在发送方的数据库中不存储明文消息。\n\n### 设备配对\n\n在建立起设备之间的加密通道后，设备之间还需要进行配对（或者称为认证）才能正式开始通信。配对发起方需要已知对方的地址及配对字符串，格式为`device_pubkey@hub.domainname.com#randomstring`，其中`device_pubkey`为设备地址公钥、`hub.domainname.com`为Hub地址、`randomstring`为配对字符串。设备配对主要用来获取对方设备的名称、公钥、地址及所在Hub，同时对对方身份进行验证。配对的设备存储在数据表`correspondent_devices`中。\n\n## 小结\n\n设备之间配对完成后就可以通过加密通道进行通信，对于加密消息的处理集中在`byteballcore/wallet.js`中的`handleMessageFromHub`函数中。用户设备之间的加密通信能力赋予了ByteBall钱包极其灵活及多样的功能，是ByteBall系统设计中非常重要的一个组成部分。\n","source":"_posts/2018-08-08-byteball-private-communication.md","raw":"---\ntitle: ByteBall加密通信原理解析\ndate: 2018-08-08 17:30:55\ncategories: 谈点区块链\ntags:\n  - dag\n  - blockchain\n  - byteball\n  - private\n  - communication\n---\n\nByteBall网络中提供了端到端的加密通道，可以实现用户设备之间的加密通信，从而用于发送加密文本消息、发送隐私资产、进行多签名交易、签订智能合约、提供机器人服务等。下面我们将对ByteBall中加密通信实现的基本思路和主要过程进行解析。\n\n## 加密通信基本思路\n\n从功能的角度来看，加密通道采用存储-转发的方式来实现，这个任务由Hub来完成。消息发送方将加密消息发送到Hub，Hub再将消息转发给接收方。网络中可以存在多个Hub，用户设备可以选择自己信任的Hub进行连接。从这个角度看，Hub在设备加密通信中扮演的角色类似于邮件服务器。用户设备使用其设备地址在Hub上进行注册，生成类似邮件地址进行通信，比如`device_pubkey@hub.domainname.com`。`device_pubkey`是由设备地址的公钥，当用户设备在不同的Hub之间切换时，`device_pubkey`保持不变。有一点需要注意的是，Hub之间不会进行消息中继，用户设备只有连接到相同Hub上才可以进行通信。\n\n从安全的角度来看，用户设备与Hub之间的传输通道、用户设备与设备之间的传输内容均采用了加密。用户设备与Hub之间采用websocket保持连接，连接采用TLS加密。用户设备发送的消息内容采用ECDH+AES进行加密，并采用ECDSA进行签名验证。由于发送的消息是采用端到端加密的，Hub作为唯一的中间方也是无法查看或者修改其内容的。当消息发送成功后，Hub会删除相应的消息，且不保存任何副本。此外，为了进一步确保转发安全，用户设备还会定期更新其加密公钥（称为临时公钥）。\n\n## 加密通信主要过程\n\n### 设备登录Hub\n\n当用户设备连接到Hub时，Hub会向其发送一个登录验证消息`hub/challenge`，包括一个长度为30的BASE64编码的字符串。随后，用户设备会向Hub发送登录消息`hub/login`，包括Hub发送的登录字符串、永久公钥和临时公钥。\n\n当用户设备的永久私钥、临时私钥或者连接的Hub地址发生变化时，都需要重新发起登录过程。用户设备采用`hub/temp_pubkey`每分钟向Hub更新自己的临时公钥。当设备登录Hub后`hub/login`或者刷新消息时`hub/refresh`，可以从Hub获取消息状态`hub/message_box_status`。\n\n### 建立加密通道\n\n在发送方连接到接收方所在的Hub完成登录过程后，设备之间进行加密通信主要包括以下几个步骤：\n\n1. 从Hub获取接收方的临时公钥（使用`hub/get_temp_pubkey`）；\n2. 发送方生成一次性的消息加密钥匙对（包含私钥及公钥）；\n3. 通过接收方临时公钥和刚生成的一次性私钥得到ECDH共享密钥；\n4. 利用ECDH共享密钥对消息内容进行AES加密；\n5. 发送方将加密后的消息内容、初始向量、一次性公钥打包为数据包；\n6. 采用设备永久公钥对数据包进行签名；\n7. 采用`hub/deliver`向Hub发送数据包。\n\nHub收到发送方的数据包后，向接收方采用`hub/message`转发数据包，从而建立起发送方与接收方之间的加密通道，即发送方的消息可通过加密通道到达接收方。\n\n当接收方Hub无法连接时，发送方将待发送消息采用接收方的永久公钥加密并本地存储。当接收方Hub可以连接时，发送方将存储的加密消息再使用接收方的临时公钥进行二次加密，然后再发送给对方。这样可以保证在发送方的数据库中不存储明文消息。\n\n### 设备配对\n\n在建立起设备之间的加密通道后，设备之间还需要进行配对（或者称为认证）才能正式开始通信。配对发起方需要已知对方的地址及配对字符串，格式为`device_pubkey@hub.domainname.com#randomstring`，其中`device_pubkey`为设备地址公钥、`hub.domainname.com`为Hub地址、`randomstring`为配对字符串。设备配对主要用来获取对方设备的名称、公钥、地址及所在Hub，同时对对方身份进行验证。配对的设备存储在数据表`correspondent_devices`中。\n\n## 小结\n\n设备之间配对完成后就可以通过加密通道进行通信，对于加密消息的处理集中在`byteballcore/wallet.js`中的`handleMessageFromHub`函数中。用户设备之间的加密通信能力赋予了ByteBall钱包极其灵活及多样的功能，是ByteBall系统设计中非常重要的一个组成部分。\n","slug":"byteball-private-communication","published":1,"updated":"2018-08-08T09:30:31.351Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkkxo60w00006depo84m3vfl","content":"<p>ByteBall网络中提供了端到端的加密通道，可以实现用户设备之间的加密通信，从而用于发送加密文本消息、发送隐私资产、进行多签名交易、签订智能合约、提供机器人服务等。下面我们将对ByteBall中加密通信实现的基本思路和主要过程进行解析。</p>\n<h2 id=\"加密通信基本思路\"><a href=\"#加密通信基本思路\" class=\"headerlink\" title=\"加密通信基本思路\"></a>加密通信基本思路</h2><p>从功能的角度来看，加密通道采用存储-转发的方式来实现，这个任务由Hub来完成。消息发送方将加密消息发送到Hub，Hub再将消息转发给接收方。网络中可以存在多个Hub，用户设备可以选择自己信任的Hub进行连接。从这个角度看，Hub在设备加密通信中扮演的角色类似于邮件服务器。用户设备使用其设备地址在Hub上进行注册，生成类似邮件地址进行通信，比如<code>device_pubkey@hub.domainname.com</code>。<code>device_pubkey</code>是由设备地址的公钥，当用户设备在不同的Hub之间切换时，<code>device_pubkey</code>保持不变。有一点需要注意的是，Hub之间不会进行消息中继，用户设备只有连接到相同Hub上才可以进行通信。</p>\n<p>从安全的角度来看，用户设备与Hub之间的传输通道、用户设备与设备之间的传输内容均采用了加密。用户设备与Hub之间采用websocket保持连接，连接采用TLS加密。用户设备发送的消息内容采用ECDH+AES进行加密，并采用ECDSA进行签名验证。由于发送的消息是采用端到端加密的，Hub作为唯一的中间方也是无法查看或者修改其内容的。当消息发送成功后，Hub会删除相应的消息，且不保存任何副本。此外，为了进一步确保转发安全，用户设备还会定期更新其加密公钥（称为临时公钥）。</p>\n<h2 id=\"加密通信主要过程\"><a href=\"#加密通信主要过程\" class=\"headerlink\" title=\"加密通信主要过程\"></a>加密通信主要过程</h2><h3 id=\"设备登录Hub\"><a href=\"#设备登录Hub\" class=\"headerlink\" title=\"设备登录Hub\"></a>设备登录Hub</h3><p>当用户设备连接到Hub时，Hub会向其发送一个登录验证消息<code>hub/challenge</code>，包括一个长度为30的BASE64编码的字符串。随后，用户设备会向Hub发送登录消息<code>hub/login</code>，包括Hub发送的登录字符串、永久公钥和临时公钥。</p>\n<p>当用户设备的永久私钥、临时私钥或者连接的Hub地址发生变化时，都需要重新发起登录过程。用户设备采用<code>hub/temp_pubkey</code>每分钟向Hub更新自己的临时公钥。当设备登录Hub后<code>hub/login</code>或者刷新消息时<code>hub/refresh</code>，可以从Hub获取消息状态<code>hub/message_box_status</code>。</p>\n<h3 id=\"建立加密通道\"><a href=\"#建立加密通道\" class=\"headerlink\" title=\"建立加密通道\"></a>建立加密通道</h3><p>在发送方连接到接收方所在的Hub完成登录过程后，设备之间进行加密通信主要包括以下几个步骤：</p>\n<ol>\n<li>从Hub获取接收方的临时公钥（使用<code>hub/get_temp_pubkey</code>）；</li>\n<li>发送方生成一次性的消息加密钥匙对（包含私钥及公钥）；</li>\n<li>通过接收方临时公钥和刚生成的一次性私钥得到ECDH共享密钥；</li>\n<li>利用ECDH共享密钥对消息内容进行AES加密；</li>\n<li>发送方将加密后的消息内容、初始向量、一次性公钥打包为数据包；</li>\n<li>采用设备永久公钥对数据包进行签名；</li>\n<li>采用<code>hub/deliver</code>向Hub发送数据包。</li>\n</ol>\n<p>Hub收到发送方的数据包后，向接收方采用<code>hub/message</code>转发数据包，从而建立起发送方与接收方之间的加密通道，即发送方的消息可通过加密通道到达接收方。</p>\n<p>当接收方Hub无法连接时，发送方将待发送消息采用接收方的永久公钥加密并本地存储。当接收方Hub可以连接时，发送方将存储的加密消息再使用接收方的临时公钥进行二次加密，然后再发送给对方。这样可以保证在发送方的数据库中不存储明文消息。</p>\n<h3 id=\"设备配对\"><a href=\"#设备配对\" class=\"headerlink\" title=\"设备配对\"></a>设备配对</h3><p>在建立起设备之间的加密通道后，设备之间还需要进行配对（或者称为认证）才能正式开始通信。配对发起方需要已知对方的地址及配对字符串，格式为<code>device_pubkey@hub.domainname.com#randomstring</code>，其中<code>device_pubkey</code>为设备地址公钥、<code>hub.domainname.com</code>为Hub地址、<code>randomstring</code>为配对字符串。设备配对主要用来获取对方设备的名称、公钥、地址及所在Hub，同时对对方身份进行验证。配对的设备存储在数据表<code>correspondent_devices</code>中。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>设备之间配对完成后就可以通过加密通道进行通信，对于加密消息的处理集中在<code>byteballcore/wallet.js</code>中的<code>handleMessageFromHub</code>函数中。用户设备之间的加密通信能力赋予了ByteBall钱包极其灵活及多样的功能，是ByteBall系统设计中非常重要的一个组成部分。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>ByteBall网络中提供了端到端的加密通道，可以实现用户设备之间的加密通信，从而用于发送加密文本消息、发送隐私资产、进行多签名交易、签订智能合约、提供机器人服务等。下面我们将对ByteBall中加密通信实现的基本思路和主要过程进行解析。</p>\n<h2 id=\"加密通信基本思路\"><a href=\"#加密通信基本思路\" class=\"headerlink\" title=\"加密通信基本思路\"></a>加密通信基本思路</h2><p>从功能的角度来看，加密通道采用存储-转发的方式来实现，这个任务由Hub来完成。消息发送方将加密消息发送到Hub，Hub再将消息转发给接收方。网络中可以存在多个Hub，用户设备可以选择自己信任的Hub进行连接。从这个角度看，Hub在设备加密通信中扮演的角色类似于邮件服务器。用户设备使用其设备地址在Hub上进行注册，生成类似邮件地址进行通信，比如<code>device_pubkey@hub.domainname.com</code>。<code>device_pubkey</code>是由设备地址的公钥，当用户设备在不同的Hub之间切换时，<code>device_pubkey</code>保持不变。有一点需要注意的是，Hub之间不会进行消息中继，用户设备只有连接到相同Hub上才可以进行通信。</p>\n<p>从安全的角度来看，用户设备与Hub之间的传输通道、用户设备与设备之间的传输内容均采用了加密。用户设备与Hub之间采用websocket保持连接，连接采用TLS加密。用户设备发送的消息内容采用ECDH+AES进行加密，并采用ECDSA进行签名验证。由于发送的消息是采用端到端加密的，Hub作为唯一的中间方也是无法查看或者修改其内容的。当消息发送成功后，Hub会删除相应的消息，且不保存任何副本。此外，为了进一步确保转发安全，用户设备还会定期更新其加密公钥（称为临时公钥）。</p>\n<h2 id=\"加密通信主要过程\"><a href=\"#加密通信主要过程\" class=\"headerlink\" title=\"加密通信主要过程\"></a>加密通信主要过程</h2><h3 id=\"设备登录Hub\"><a href=\"#设备登录Hub\" class=\"headerlink\" title=\"设备登录Hub\"></a>设备登录Hub</h3><p>当用户设备连接到Hub时，Hub会向其发送一个登录验证消息<code>hub/challenge</code>，包括一个长度为30的BASE64编码的字符串。随后，用户设备会向Hub发送登录消息<code>hub/login</code>，包括Hub发送的登录字符串、永久公钥和临时公钥。</p>\n<p>当用户设备的永久私钥、临时私钥或者连接的Hub地址发生变化时，都需要重新发起登录过程。用户设备采用<code>hub/temp_pubkey</code>每分钟向Hub更新自己的临时公钥。当设备登录Hub后<code>hub/login</code>或者刷新消息时<code>hub/refresh</code>，可以从Hub获取消息状态<code>hub/message_box_status</code>。</p>\n<h3 id=\"建立加密通道\"><a href=\"#建立加密通道\" class=\"headerlink\" title=\"建立加密通道\"></a>建立加密通道</h3><p>在发送方连接到接收方所在的Hub完成登录过程后，设备之间进行加密通信主要包括以下几个步骤：</p>\n<ol>\n<li>从Hub获取接收方的临时公钥（使用<code>hub/get_temp_pubkey</code>）；</li>\n<li>发送方生成一次性的消息加密钥匙对（包含私钥及公钥）；</li>\n<li>通过接收方临时公钥和刚生成的一次性私钥得到ECDH共享密钥；</li>\n<li>利用ECDH共享密钥对消息内容进行AES加密；</li>\n<li>发送方将加密后的消息内容、初始向量、一次性公钥打包为数据包；</li>\n<li>采用设备永久公钥对数据包进行签名；</li>\n<li>采用<code>hub/deliver</code>向Hub发送数据包。</li>\n</ol>\n<p>Hub收到发送方的数据包后，向接收方采用<code>hub/message</code>转发数据包，从而建立起发送方与接收方之间的加密通道，即发送方的消息可通过加密通道到达接收方。</p>\n<p>当接收方Hub无法连接时，发送方将待发送消息采用接收方的永久公钥加密并本地存储。当接收方Hub可以连接时，发送方将存储的加密消息再使用接收方的临时公钥进行二次加密，然后再发送给对方。这样可以保证在发送方的数据库中不存储明文消息。</p>\n<h3 id=\"设备配对\"><a href=\"#设备配对\" class=\"headerlink\" title=\"设备配对\"></a>设备配对</h3><p>在建立起设备之间的加密通道后，设备之间还需要进行配对（或者称为认证）才能正式开始通信。配对发起方需要已知对方的地址及配对字符串，格式为<code>device_pubkey@hub.domainname.com#randomstring</code>，其中<code>device_pubkey</code>为设备地址公钥、<code>hub.domainname.com</code>为Hub地址、<code>randomstring</code>为配对字符串。设备配对主要用来获取对方设备的名称、公钥、地址及所在Hub，同时对对方身份进行验证。配对的设备存储在数据表<code>correspondent_devices</code>中。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>设备之间配对完成后就可以通过加密通道进行通信，对于加密消息的处理集中在<code>byteballcore/wallet.js</code>中的<code>handleMessageFromHub</code>函数中。用户设备之间的加密通信能力赋予了ByteBall钱包极其灵活及多样的功能，是ByteBall系统设计中非常重要的一个组成部分。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjb6k4kv70001ulep9towf4qj","category_id":"cjb6k4kvf0005uleplhf6q5dy","_id":"cjb6k4kvt000guleprc3dq5ey"},{"post_id":"cjb6k4kvn000culepz0wdc3zn","category_id":"cjb6k4kvm000bulep1wgepm66","_id":"cjb6k4kvz000kulepw943uhpo"},{"post_id":"cjb6k4kvb0003ulepaf2q0l2w","category_id":"cjb6k4kvm000bulep1wgepm66","_id":"cjb6k4kw2000pulepsxb8tqcu"},{"post_id":"cjb6k4kvr000fuleppqmaqhym","category_id":"cjb6k4kvf0005uleplhf6q5dy","_id":"cjb6k4kw5000rulepajfpfqwy"},{"post_id":"cjb6k4kvw000iulep9s0awc05","category_id":"cjb6k4kvf0005uleplhf6q5dy","_id":"cjb6k4kw7000uulepknuugkj0"},{"post_id":"cjb6k4kw1000oulepvj4s22js","category_id":"cjb6k4kvf0005uleplhf6q5dy","_id":"cjb6k4kwb0012ulepetmjsit4"},{"post_id":"cjb6k4kvl000aulepsdy0yeg8","category_id":"cjb6k4kvm000bulep1wgepm66","_id":"cjb6k4kwd0015ulepct2y0pew"},{"post_id":"cjb6k4kw6000tulepemast2l7","category_id":"cjb6k4kvf0005uleplhf6q5dy","_id":"cjb6k4kwf0019ulep6quopix6"},{"post_id":"cjb6k4kw8000wulepwop27ri8","category_id":"cjb6k4kvf0005uleplhf6q5dy","_id":"cjb6k4kwi001dulepc8xl1x3j"},{"post_id":"cjb6k4kwc0014ulepousj0yvn","category_id":"cjb6k4kvf0005uleplhf6q5dy","_id":"cjb6k4kwk001gulepidton0sb"},{"post_id":"cjb6k4kwj001fulepui4xeyxf","category_id":"cjb6k4kvf0005uleplhf6q5dy","_id":"cjb6k4kwq001pulepnbru2jtl"},{"post_id":"cjb6k4kvj0009uleptikeifji","category_id":"cjba7wkos0000byepjfyym92w","_id":"cjba7wkpc0005byep2mck9rhg"},{"post_id":"cjb6k4kvh0006ulepbrckujki","category_id":"cjba7wkp70002byepznscqini","_id":"cjba7wkpf0008byepj96lo8wo"},{"post_id":"cjb6k4kw9000zulepmbhr0itk","category_id":"cjba7wkp70002byepznscqini","_id":"cjba7wkpl000bbyepm8nnon00"},{"post_id":"cjb6k4kw3000qulepuz2p086e","category_id":"cjba7wkp70002byepznscqini","_id":"cjba7wkpo000dbyep6aiy1sg9"},{"post_id":"cjb6k4kwa0011ulepy725yz03","category_id":"cjb6k4kvm000bulep1wgepm66","_id":"cjba7wkpp000fbyepzph8ev09"},{"post_id":"cjb6k4kwn001lulepadiyk88u","category_id":"cjb6k4kvf0005uleplhf6q5dy","_id":"cjba7wkpq000ibyepis27dnx6"},{"post_id":"cjb6k4kwe0018uleppffujbr7","category_id":"cjba7wkp70002byepznscqini","_id":"cjba7wkpq000lbyep65u6dq2g"},{"post_id":"cjb6k4kwp001oulepayia50ht","category_id":"cjba7wkp70002byepznscqini","_id":"cjba7wkpr000nbyepy0tmvgdk"},{"post_id":"cjb6k4kwg001culepl2d0v6o8","category_id":"cjba7wkpq000hbyep3nhpvxei","_id":"cjba7wkpr000rbyeppajpggvx"},{"post_id":"cjb6k4kvy000julep9m2kg5fe","category_id":"cjba7wkos0000byepjfyym92w","_id":"cjba7ya7y0000ctepiy0nn7iz"},{"post_id":"cjbcecfvz00006lep5mfeid9n","category_id":"cjba7wkpq000hbyep3nhpvxei","_id":"cjbcecfw500036lep4td8z621"},{"post_id":"cjcnju82h0000g1epfwsrq5ja","category_id":"cjba7wkpq000hbyep3nhpvxei","_id":"cjcnju82p0003g1ep3mpzg1bf"},{"post_id":"cjcw3ep27000041epxs9ywqu9","category_id":"cjba7wkpq000hbyep3nhpvxei","_id":"cjcw3ep2c000341ep1yazxc2k"},{"post_id":"cjd1hh9p900008ieplfpkomtb","category_id":"cjba7wkpq000hbyep3nhpvxei","_id":"cjd1hh9pg00038iepty44usvt"},{"post_id":"cjg0ioa400000zmep7q00jkhn","category_id":"cjba7wkpq000hbyep3nhpvxei","_id":"cjg0ioa480003zmepd50nhfpn"},{"post_id":"cjh4xb1dx0000pkepjxz981v2","category_id":"cjba7wkpq000hbyep3nhpvxei","_id":"cjh4xb1e30003pkep1zfomphl"},{"post_id":"cjienjdq40000c4epompn3ch8","category_id":"cjba7wkpq000hbyep3nhpvxei","_id":"cjienjdqb0003c4ep2tkzxw6i"},{"post_id":"cjij0b5j2000014ep3mrzrl7w","category_id":"cjba7wkpq000hbyep3nhpvxei","_id":"cjij0b5jd000314epajo15so5"},{"post_id":"cjiv7hn4x00009hepu2iazgcv","category_id":"cjba7wkpq000hbyep3nhpvxei","_id":"cjiv7hn5700039hepho616rck"},{"post_id":"cjkkxo60w00006depo84m3vfl","category_id":"cjba7wkpq000hbyep3nhpvxei","_id":"cjkkxo61900026dep3sse7bb3"}],"PostTag":[{"post_id":"cjb6k4kvb0003ulepaf2q0l2w","tag_id":"cjb6k4kvj0008ulepvwypri5h","_id":"cjb6k4kvr000eulepddq9kcr5"},{"post_id":"cjb6k4kvl000aulepsdy0yeg8","tag_id":"cjb6k4kvr000dulepsgfdwxdi","_id":"cjb6k4kw1000nulepdxdrakre"},{"post_id":"cjb6k4kvn000culepz0wdc3zn","tag_id":"cjb6k4kvz000lulepkmtkzbsk","_id":"cjb6k4kw7000vulepe0p3s26b"},{"post_id":"cjb6k4kvr000fuleppqmaqhym","tag_id":"cjb6k4kw5000sulepf9tr1lk6","_id":"cjb6k4kwd0016ulepj195ac62"},{"post_id":"cjb6k4kvr000fuleppqmaqhym","tag_id":"cjb6k4kw9000yuleph6zwog9i","_id":"cjb6k4kwg001aulepeeerm3mg"},{"post_id":"cjb6k4kvw000iulep9s0awc05","tag_id":"cjb6k4kw5000sulepf9tr1lk6","_id":"cjb6k4kwj001eulepr9wpts66"},{"post_id":"cjb6k4kvy000julep9m2kg5fe","tag_id":"cjb6k4kw5000sulepf9tr1lk6","_id":"cjb6k4kwn001kulepj5vhd1jm"},{"post_id":"cjb6k4kw1000oulepvj4s22js","tag_id":"cjb6k4kw5000sulepf9tr1lk6","_id":"cjb6k4kwr001qulep4g912iio"},{"post_id":"cjb6k4kw6000tulepemast2l7","tag_id":"cjb6k4kwp001nulepcmkv0ncg","_id":"cjb6k4kwt001tulepywey8ibl"},{"post_id":"cjb6k4kw8000wulepwop27ri8","tag_id":"cjb6k4kws001sulepq09pwwpm","_id":"cjb6k4kwv001wulepsrj49m8b"},{"post_id":"cjb6k4kw8000wulepwop27ri8","tag_id":"cjb6k4kwt001uulepivvhn6ty","_id":"cjb6k4kww001xulepnswq0eaw"},{"post_id":"cjb6k4kwa0011ulepy725yz03","tag_id":"cjb6k4kwx001yulep3tw31zov","_id":"cjb6k4kwy0021ulepznim26lw"},{"post_id":"cjb6k4kwc0014ulepousj0yvn","tag_id":"cjb6k4kwy001zulepiod6g9wf","_id":"cjb6k4kwz0023ulep3aw648n9"},{"post_id":"cjb6k4kwg001culepl2d0v6o8","tag_id":"cjb6k4kwz0022ulepaoobaeyu","_id":"cjb6k4kx20028ulepza9azc5a"},{"post_id":"cjb6k4kwg001culepl2d0v6o8","tag_id":"cjb6k4kx00024ulep8bayom0t","_id":"cjb6k4kx30029ulepyb8wpsbq"},{"post_id":"cjb6k4kwg001culepl2d0v6o8","tag_id":"cjb6k4kx00025ulepsmjx4his","_id":"cjb6k4kx3002bulepfaw2eriy"},{"post_id":"cjb6k4kwg001culepl2d0v6o8","tag_id":"cjb6k4kx10026ulep36uuaaub","_id":"cjb6k4kx4002culepu0vk7ryh"},{"post_id":"cjb6k4kwj001fulepui4xeyxf","tag_id":"cjb6k4kx20027ulepkxu124gm","_id":"cjb6k4kx5002dulep51009jpb"},{"post_id":"cjb6k4kwj001fulepui4xeyxf","tag_id":"cjb6k4kwy001zulepiod6g9wf","_id":"cjb6k4kx5002eulepembvpxup"},{"post_id":"cjb6k4kvj0009uleptikeifji","tag_id":"cjba7wkoz0001byepfymfx6h5","_id":"cjba7wkp90004byep31u4vjwm"},{"post_id":"cjb6k4kv70001ulep9towf4qj","tag_id":"cjba7wkp80003byepf9rpxb7f","_id":"cjba7wkpe0007byepapmf3z19"},{"post_id":"cjb6k4kvh0006ulepbrckujki","tag_id":"cjba7wkpd0006byepvyu8y31y","_id":"cjba7wkpq000gbyepar7joai8"},{"post_id":"cjb6k4kvh0006ulepbrckujki","tag_id":"cjba7wkpg000abyep0akrswzz","_id":"cjba7wkpq000jbyep17bosm33"},{"post_id":"cjb6k4kvh0006ulepbrckujki","tag_id":"cjba7wkpm000cbyep0c9l9juh","_id":"cjba7wkpq000mbyepha2lw7tm"},{"post_id":"cjb6k4kw6000tulepemast2l7","tag_id":"cjba7wkpp000ebyepz71gn5y7","_id":"cjba7wkpr000obyep8424gvl6"},{"post_id":"cjb6k4kw9000zulepmbhr0itk","tag_id":"cjba7wkpq000kbyep3icrbrjf","_id":"cjba7wkpr000qbyepyc1bwz7k"},{"post_id":"cjb6k4kw3000qulepuz2p086e","tag_id":"cjba7wkpr000pbyep7yjz5ki1","_id":"cjba7wkps000tbyepx822typc"},{"post_id":"cjb6k4kwa0011ulepy725yz03","tag_id":"cjba7wkpr000sbyep7h56i2h7","_id":"cjba7wkps000vbyeplmelk6g9"},{"post_id":"cjb6k4kwn001lulepadiyk88u","tag_id":"cjba7wkps000ubyeplzwovj2k","_id":"cjba7wkpt000xbyepu6fl07m3"},{"post_id":"cjb6k4kwe0018uleppffujbr7","tag_id":"cjba7wkpg000abyep0akrswzz","_id":"cjba7wkpt000zbyep3mltb9s3"},{"post_id":"cjb6k4kwe0018uleppffujbr7","tag_id":"cjba7wkps000wbyepzvbbi5gb","_id":"cjba7wkpt0010byepjc0obenc"},{"post_id":"cjb6k4kwp001oulepayia50ht","tag_id":"cjba7wkpt000ybyepekya20k4","_id":"cjba7wkpt0011byeps03awlo5"},{"post_id":"cjbcecfvz00006lep5mfeid9n","tag_id":"cjb6k4kwz0022ulepaoobaeyu","_id":"cjbcecfw500016lepwkypusvj"},{"post_id":"cjbcecfvz00006lep5mfeid9n","tag_id":"cjb6k4kx00024ulep8bayom0t","_id":"cjbcecfw500026lepzymjqm8x"},{"post_id":"cjbcecfvz00006lep5mfeid9n","tag_id":"cjb6k4kx00025ulepsmjx4his","_id":"cjbcecfw500046lepin0eimw8"},{"post_id":"cjbcecfvz00006lep5mfeid9n","tag_id":"cjb6k4kx10026ulep36uuaaub","_id":"cjbcecfw600056lepr3vr1j33"},{"post_id":"cjcnju82h0000g1epfwsrq5ja","tag_id":"cjb6k4kwz0022ulepaoobaeyu","_id":"cjcnju82p0001g1epmwktgaxk"},{"post_id":"cjcnju82h0000g1epfwsrq5ja","tag_id":"cjb6k4kx00024ulep8bayom0t","_id":"cjcnju82p0002g1epme7jv2p0"},{"post_id":"cjcnju82h0000g1epfwsrq5ja","tag_id":"cjb6k4kx00025ulepsmjx4his","_id":"cjcnju82q0004g1epb0zbzq69"},{"post_id":"cjcnju82h0000g1epfwsrq5ja","tag_id":"cjb6k4kx10026ulep36uuaaub","_id":"cjcnju82q0005g1epe66x3a30"},{"post_id":"cjcw3ep27000041epxs9ywqu9","tag_id":"cjb6k4kwz0022ulepaoobaeyu","_id":"cjcw3ep2c000141ept7fal0o9"},{"post_id":"cjcw3ep27000041epxs9ywqu9","tag_id":"cjb6k4kx00024ulep8bayom0t","_id":"cjcw3ep2c000241epjxbhl2t1"},{"post_id":"cjcw3ep27000041epxs9ywqu9","tag_id":"cjb6k4kx00025ulepsmjx4his","_id":"cjcw3ep2c000441epwcc26hv1"},{"post_id":"cjcw3ep27000041epxs9ywqu9","tag_id":"cjb6k4kx10026ulep36uuaaub","_id":"cjcw3ep2d000541ep2xap2fwi"},{"post_id":"cjd1hh9p900008ieplfpkomtb","tag_id":"cjb6k4kwz0022ulepaoobaeyu","_id":"cjd1hh9pf00018iep61howuac"},{"post_id":"cjd1hh9p900008ieplfpkomtb","tag_id":"cjb6k4kx00024ulep8bayom0t","_id":"cjd1hh9pg00028iepw8bhe61u"},{"post_id":"cjd1hh9p900008ieplfpkomtb","tag_id":"cjb6k4kx00025ulepsmjx4his","_id":"cjd1hh9pg00048iepurwrc5q5"},{"post_id":"cjd1hh9p900008ieplfpkomtb","tag_id":"cjb6k4kx10026ulep36uuaaub","_id":"cjd1hh9pg00058iep71mczcs3"},{"post_id":"cjg0ioa400000zmep7q00jkhn","tag_id":"cjb6k4kwz0022ulepaoobaeyu","_id":"cjg0ioa480001zmep6scx3ip5"},{"post_id":"cjg0ioa400000zmep7q00jkhn","tag_id":"cjb6k4kx00024ulep8bayom0t","_id":"cjg0ioa480002zmepz56db72u"},{"post_id":"cjg0ioa400000zmep7q00jkhn","tag_id":"cjb6k4kx00025ulepsmjx4his","_id":"cjg0ioa490004zmep9ogsr74x"},{"post_id":"cjg0ioa400000zmep7q00jkhn","tag_id":"cjb6k4kx10026ulep36uuaaub","_id":"cjg0ioa4a0005zmepev1vjy5t"},{"post_id":"cjh4xb1dx0000pkepjxz981v2","tag_id":"cjb6k4kwz0022ulepaoobaeyu","_id":"cjh4xb1e20001pkepids8yqpq"},{"post_id":"cjh4xb1dx0000pkepjxz981v2","tag_id":"cjb6k4kx00024ulep8bayom0t","_id":"cjh4xb1e30002pkepxnksv5zo"},{"post_id":"cjh4xb1dx0000pkepjxz981v2","tag_id":"cjb6k4kx00025ulepsmjx4his","_id":"cjh4xb1e30004pkepcq7ppotw"},{"post_id":"cjh4xb1dx0000pkepjxz981v2","tag_id":"cjb6k4kx10026ulep36uuaaub","_id":"cjh4xb1e40005pkep4uufj9je"},{"post_id":"cjienjdq40000c4epompn3ch8","tag_id":"cjb6k4kwz0022ulepaoobaeyu","_id":"cjienjdqb0001c4epijlzrjtx"},{"post_id":"cjienjdq40000c4epompn3ch8","tag_id":"cjb6k4kx00024ulep8bayom0t","_id":"cjienjdqb0002c4ep29000l24"},{"post_id":"cjienjdq40000c4epompn3ch8","tag_id":"cjb6k4kx00025ulepsmjx4his","_id":"cjienjdqb0004c4ephxk74znf"},{"post_id":"cjienjdq40000c4epompn3ch8","tag_id":"cjb6k4kx10026ulep36uuaaub","_id":"cjienjdqc0005c4eppoabf40d"},{"post_id":"cjij0b5j2000014ep3mrzrl7w","tag_id":"cjb6k4kwz0022ulepaoobaeyu","_id":"cjij0b5jc000114ep1yakyllm"},{"post_id":"cjij0b5j2000014ep3mrzrl7w","tag_id":"cjb6k4kx00024ulep8bayom0t","_id":"cjij0b5jd000214epztp8a0ix"},{"post_id":"cjij0b5j2000014ep3mrzrl7w","tag_id":"cjb6k4kx00025ulepsmjx4his","_id":"cjij0b5jd000414epz97k5wyo"},{"post_id":"cjij0b5j2000014ep3mrzrl7w","tag_id":"cjb6k4kx10026ulep36uuaaub","_id":"cjij0b5je000514ep1p7su3re"},{"post_id":"cjiv7hn4x00009hepu2iazgcv","tag_id":"cjb6k4kwz0022ulepaoobaeyu","_id":"cjiv7hn5600019hepnajfvjco"},{"post_id":"cjiv7hn4x00009hepu2iazgcv","tag_id":"cjb6k4kx00024ulep8bayom0t","_id":"cjiv7hn5700029hephmlgvgc4"},{"post_id":"cjiv7hn4x00009hepu2iazgcv","tag_id":"cjb6k4kx00025ulepsmjx4his","_id":"cjiv7hn5700049hepxf6et7mm"},{"post_id":"cjiv7hn4x00009hepu2iazgcv","tag_id":"cjb6k4kx10026ulep36uuaaub","_id":"cjiv7hn5800059hephcf08qtz"},{"post_id":"cjkkxo60w00006depo84m3vfl","tag_id":"cjb6k4kwz0022ulepaoobaeyu","_id":"cjkkxo61c00046depta9ouft3"},{"post_id":"cjkkxo60w00006depo84m3vfl","tag_id":"cjb6k4kx00024ulep8bayom0t","_id":"cjkkxo61c00056depdx2y6dh9"},{"post_id":"cjkkxo60w00006depo84m3vfl","tag_id":"cjb6k4kx00025ulepsmjx4his","_id":"cjkkxo61c00066depsj6h5r7y"},{"post_id":"cjkkxo60w00006depo84m3vfl","tag_id":"cjkkxo61300016dep9mofnzjf","_id":"cjkkxo61c00076depb2vqv1gz"},{"post_id":"cjkkxo60w00006depo84m3vfl","tag_id":"cjkkxo61b00036depcwjr4igq","_id":"cjkkxo61d00086depqt9rna7q"}],"Tag":[{"name":"dronekit","_id":"cjb6k4kvj0008ulepvwypri5h"},{"name":"智力拼图","_id":"cjb6k4kvr000dulepsgfdwxdi"},{"name":"数独","_id":"cjb6k4kvz000lulepkmtkzbsk"},{"name":"vim","_id":"cjb6k4kw5000sulepf9tr1lk6"},{"name":"latex","_id":"cjb6k4kw9000yuleph6zwog9i"},{"name":"WiFi","_id":"cjb6k4kwp001nulepcmkv0ncg"},{"name":"小米路由器","_id":"cjb6k4kws001sulepq09pwwpm"},{"name":"去广告","_id":"cjb6k4kwt001uulepivvhn6ty"},{"name":"Spark","_id":"cjb6k4kwv001vulepwqwk4wf4"},{"name":"csv","_id":"cjb6k4kwx001yulep3tw31zov"},{"name":"ArduPilot","_id":"cjb6k4kwy001zulepiod6g9wf"},{"name":"dag","_id":"cjb6k4kwz0022ulepaoobaeyu"},{"name":"blockchain","_id":"cjb6k4kx00024ulep8bayom0t"},{"name":"byteball","_id":"cjb6k4kx00025ulepsmjx4his"},{"name":"bitcoin","_id":"cjb6k4kx10026ulep36uuaaub"},{"name":"waf","_id":"cjb6k4kx20027ulepkxu124gm"},{"name":"mobilephone","_id":"cjba7wkoz0001byepfymfx6h5"},{"name":"build","_id":"cjba7wkp80003byepf9rpxb7f"},{"name":"PKM","_id":"cjba7wkpd0006byepvyu8y31y"},{"name":"zotero","_id":"cjba7wkpg000abyep0akrswzz"},{"name":"wiz","_id":"cjba7wkpm000cbyep0c9l9juh"},{"name":"crack","_id":"cjba7wkpp000ebyepz71gn5y7"},{"name":"house","_id":"cjba7wkpq000kbyep3icrbrjf"},{"name":"tau","_id":"cjba7wkpr000pbyep7yjz5ki1"},{"name":"spark","_id":"cjba7wkpr000sbyep7h56i2h7"},{"name":"vscode","_id":"cjba7wkps000ubyeplzwovj2k"},{"name":"research","_id":"cjba7wkps000wbyepzvbbi5gb"},{"name":"linux","_id":"cjba7wkpt000ybyepekya20k4"},{"name":"private","_id":"cjkkxo61300016dep9mofnzjf"},{"name":"communication","_id":"cjkkxo61b00036depcwjr4igq"}]}}